diff --git a/Makefile b/Makefile
index 4239c18f5..d4dcc3a53 100644
--- a/Makefile
+++ b/Makefile
@@ -13,7 +13,7 @@ NON_MATCHING ?= 0
 # If ORIG_COMPILER is 1, compile with QEMU_IRIX and the original compiler
 ORIG_COMPILER ?= 0
 # If COMPILER is "gcc", compile with GCC instead of IDO.
-COMPILER ?= ido
+COMPILER ?= gcc
 
 CFLAGS ?=
 CPPFLAGS ?=
@@ -119,7 +119,7 @@ endif
 ASFLAGS := -march=vr4300 -32 -no-pad-sections -Iinclude
 
 ifeq ($(COMPILER),gcc)
-  CFLAGS += -G 0 -nostdinc $(INC) -march=vr4300 -mfix4300 -mabi=32 -mno-abicalls -mdivide-breaks -fno-zero-initialized-in-bss -fno-toplevel-reorder -ffreestanding -fno-common -fno-merge-constants -mno-explicit-relocs -mno-split-addresses $(CHECK_WARNINGS) -funsigned-char
+  CFLAGS += -G 0 -nostdinc $(INC) -march=vr4300 -mfix4300 -mabi=32 -mno-abicalls -mdivide-breaks -fno-zero-initialized-in-bss -fno-toplevel-reorder -ffreestanding -fno-common -fno-merge-constants -mno-explicit-relocs -mno-split-addresses $(CHECK_WARNINGS) -funsigned-char -fno-reorder-blocks -fno-optimize-sibling-calls
   MIPS_VERSION := -mips3
 else
   # we support Microsoft extensions such as anonymous structs, which the compiler does support but warns for their usage. Surpress the warnings with -woff.
@@ -158,9 +158,12 @@ else
 SRC_DIRS := $(shell find src -type d)
 endif
 
+# Hylian Modding actor pack assets folder
+ASSET_BIN_DIRS_HM_PACK := $(shell find assets_hm_pack/* -type d)
+
 ASSET_BIN_DIRS := $(shell find assets/* -type d -not -path "assets/xml*" -not -path "assets/text")
 ASSET_FILES_XML := $(foreach dir,$(ASSET_BIN_DIRS),$(wildcard $(dir)/*.xml))
-ASSET_FILES_BIN := $(foreach dir,$(ASSET_BIN_DIRS),$(wildcard $(dir)/*.bin))
+ASSET_FILES_BIN := $(foreach dir,$(ASSET_BIN_DIRS) $(ASSET_BIN_DIRS_HM_PACK),$(wildcard $(dir)/*.bin))
 ASSET_FILES_OUT := $(foreach f,$(ASSET_FILES_XML:.xml=.c),$f) \
 				   $(foreach f,$(ASSET_FILES_BIN:.bin=.bin.inc.c),build/$f) \
 				   $(foreach f,$(wildcard assets/text/*.c),build/$(f:.c=.o))
@@ -168,7 +171,7 @@ ASSET_FILES_OUT := $(foreach f,$(ASSET_FILES_XML:.xml=.c),$f) \
 UNDECOMPILED_DATA_DIRS := $(shell find data -type d)
 
 # source files
-C_FILES       := $(filter-out %.inc.c,$(foreach dir,$(SRC_DIRS) $(ASSET_BIN_DIRS),$(wildcard $(dir)/*.c)))
+C_FILES       := $(filter-out %.inc.c,$(foreach dir,$(SRC_DIRS) $(ASSET_BIN_DIRS) $(ASSET_BIN_DIRS_HM_PACK),$(wildcard $(dir)/*.c)))
 S_FILES       := $(foreach dir,$(SRC_DIRS) $(UNDECOMPILED_DATA_DIRS),$(wildcard $(dir)/*.s))
 O_FILES       := $(foreach f,$(S_FILES:.s=.o),build/$f) \
                  $(foreach f,$(C_FILES:.c=.o),build/$f) \
@@ -181,13 +184,13 @@ OVL_RELOC_FILES := $(shell $(CPP) $(CPPFLAGS) $(SPEC) | grep -o '[^"]*_reloc.o'
 DEP_FILES := $(O_FILES:.o=.asmproc.d) $(OVL_RELOC_FILES:.o=.d)
 
 
-TEXTURE_FILES_PNG := $(foreach dir,$(ASSET_BIN_DIRS),$(wildcard $(dir)/*.png))
-TEXTURE_FILES_JPG := $(foreach dir,$(ASSET_BIN_DIRS),$(wildcard $(dir)/*.jpg))
+TEXTURE_FILES_PNG := $(foreach dir,$(ASSET_BIN_DIRS) $(ASSET_BIN_DIRS_HM_PACK),$(wildcard $(dir)/*.png))
+TEXTURE_FILES_JPG := $(foreach dir,$(ASSET_BIN_DIRS) $(ASSET_BIN_DIRS_HM_PACK),$(wildcard $(dir)/*.jpg))
 TEXTURE_FILES_OUT := $(foreach f,$(TEXTURE_FILES_PNG:.png=.inc.c),build/$f) \
 					 $(foreach f,$(TEXTURE_FILES_JPG:.jpg=.jpg.inc.c),build/$f) \
 
 # create build directories
-$(shell mkdir -p build/baserom build/assets/text $(foreach dir,$(SRC_DIRS) $(UNDECOMPILED_DATA_DIRS) $(ASSET_BIN_DIRS),build/$(dir)))
+$(shell mkdir -p build/baserom build/assets/text $(foreach dir,$(SRC_DIRS) $(UNDECOMPILED_DATA_DIRS) $(ASSET_BIN_DIRS) $(ASSET_BIN_DIRS_HM_PACK),build/$(dir)))
 
 ifeq ($(COMPILER),ido)
 build/src/code/fault.o: CFLAGS += -trapuv
@@ -236,6 +239,16 @@ build/src/boot/%.o: CC := python3 tools/asm_processor/build.py $(CC) -- $(AS) $(
 build/src/code/%.o: CC := python3 tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
 build/src/overlays/%.o: CC := python3 tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
 
+# Dependencies for files including from include/tables/
+# TODO remove when full header dependencies are used.
+build/src/code/graph.o: include/tables/gamestate_table.h
+build/src/code/object_table.o: include/tables/object_table.h includes/tables/hm_pack/object_table.h
+build/src/code/z_actor.o: include/tables/actor_table.h includes/tables/hm_pack/actor_table.h # so uses of ACTOR_ID_MAX update when the table length changes
+build/src/code/z_actor_dlftbls.o: include/tables/actor_table.h includes/tables/hm_pack/actor_table.h
+build/src/code/z_effect_soft_sprite_dlftbls.o: include/tables/effect_ss_table.h
+build/src/code/z_game_dlftbls.o: include/tables/gamestate_table.h
+build/src/code/z_scene_table.o: include/tables/scene_table.h include/tables/entrance_table.h
+
 build/assets/%.o: CC := python3 tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
 else
 build/src/libultra/libc/ll.o: OPTFLAGS := -Ofast
@@ -298,7 +311,7 @@ $(O_FILES): | asset_files
 
 .PHONY: o_files asset_files
 
-build/$(SPEC): $(SPEC)
+build/$(SPEC): $(SPEC) spec.hm_pack_actors.inc spec.hm_pack_objects.inc
 	$(CPP) $(CPPFLAGS) $< > $@
 
 build/ldscript.txt: build/$(SPEC)
@@ -328,6 +341,10 @@ build/assets/%.o: assets/%.c
 	$(CC) -c $(CFLAGS) $(MIPS_VERSION) $(OPTFLAGS) -o $@ $<
 	$(OBJCOPY) -O binary $@ $@.bin
 
+build/assets_hm_pack/%.o: assets_hm_pack/%.c
+	$(CC) -c $(CFLAGS) $(MIPS_VERSION) $(OPTFLAGS) -o $@ $<
+	$(OBJCOPY) -O binary $@ $@.bin
+
 build/src/%.o: src/%.s
 	$(CPP) $(CPPFLAGS) -Iinclude $< | $(AS) $(ASFLAGS) -o $@
 
@@ -338,16 +355,6 @@ build/dmadata_table_spec.h: build/$(SPEC)
 build/src/boot/z_std_dma.o: build/dmadata_table_spec.h
 build/src/dmadata/dmadata.o: build/dmadata_table_spec.h
 
-# Dependencies for files including from include/tables/
-# TODO remove when full header dependencies are used.
-build/src/code/graph.o: include/tables/gamestate_table.h
-build/src/code/object_table.o: include/tables/object_table.h
-build/src/code/z_actor.o: include/tables/actor_table.h # so uses of ACTOR_ID_MAX update when the table length changes
-build/src/code/z_actor_dlftbls.o: include/tables/actor_table.h
-build/src/code/z_effect_soft_sprite_dlftbls.o: include/tables/effect_ss_table.h
-build/src/code/z_game_dlftbls.o: include/tables/gamestate_table.h
-build/src/code/z_scene_table.o: include/tables/scene_table.h include/tables/entrance_table.h
-
 build/src/%.o: src/%.c
 	$(CC_CHECK) $<
 	$(CC) -c $(CFLAGS) $(MIPS_VERSION) $(OPTFLAGS) -o $@ $<
diff --git a/assets_hm_pack/objects/object_fan/gWindDL.c b/assets_hm_pack/objects/object_fan/gWindDL.c
new file mode 100644
index 000000000..76ea0bad0
--- /dev/null
+++ b/assets_hm_pack/objects/object_fan/gWindDL.c
@@ -0,0 +1,159 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gWindDL_Fan_Wind_00_i4[] = {
+	0x2233332233335674, 0x4333446775444443, 0x3333444333344433, 0x3432222222222333, 0x2333323333356563, 0x3334446666433333, 0x3333443333444433, 0x3332222222222333, 
+	0x3333332333335677, 0x4333446676633343, 0x3332443333444433, 0x3333222222222333, 0x3333333223335574, 0x4333346466633343, 0x3223544333444444, 0x3332222222223233, 
+	0x3333343222333576, 0x3333444666633334, 0x3333443333344443, 0x3333322222222333, 0x2333333223333674, 0x3334444665643443, 0x3334443333344443, 0x3333222222222232, 
+	0x3333332233333674, 0x4334446755434333, 0x3334443333344433, 0x3333222222222322, 0x3333332333356664, 0x3333464655433433, 0x3334543333434433, 0x3322222222223322, 
+	0x3333332333335664, 0x4333344766543333, 0x3333443333334433, 0x3333222222222332, 0x3333332233335666, 0x4334455775643433, 0x3333554333344433, 0x3332222222222233, 
+	0x3333322233335766, 0x3334455676444443, 0x3333553333344444, 0x3332222222222333, 0x3333332233335566, 0x4334456766644443, 0x3333443333344443, 0x3332232222222233, 
+	0x2333332233333567, 0x4333345665554343, 0x3333344333334443, 0x3333322222222323, 0x2333322333335756, 0x3333445665543443, 0x3334343333343433, 0x3333222222222222, 
+	0x3333333333345665, 0x4333346665443443, 0x3333454333344443, 0x3333223222222332, 0x2233333333334577, 0x3343346675444443, 0x3334444334334433, 0x3333232222223333, 
+	
+};
+
+u64 gWindDL_Fan_Wind_01_i4[] = {
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000012, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000001, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000001000000000, 0x0000000000000000, 0x0000000000000000, 0x0000001000000000, 
+	0x0100000000000000, 0x0000000000100000, 0x0000000000000000, 0x0f00003000000000, 0x0100000000000000, 0x0000000001210000, 0x0000000000000000, 0x0000017100000000, 
+	0x1210000000000000, 0x0000000001210000, 0x0000000000000000, 0x000002a200000000, 0x12f0000000000000, 0x0000000000100000, 0x0000000000000000, 0x000017d710000000, 
+	0x2320000000000000, 0x0000000000000000, 0x0000000000000000, 0x000029fa20000000, 0x2320000000000000, 0x0000000000000000, 0x1000000000000000, 0x000017f910000000, 
+	0x1210000000000000, 0x0000000000000000, 0x4000000000000000, 0x000003a410000000, 0x0100000000000000, 0x0000000000000002, 0x7200000000000000, 0x0000015200000000, 
+	0x0100000000000000, 0x0000000000000015, 0xa710000000000000, 0x0000002000000000, 0x0000000000000000, 0x0000000000000015, 0xa710000000000000, 0x0000001000000000, 
+	0x0000000000000000, 0x0000000000000002, 0x7200000000000003, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x2000000000000019, 0x2000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x100000000000005f, 0x8100000000000000, 0x0000000000000000, 0x0000000000000000, 0x000000000000005f, 0x8100000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000017, 0x2000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000002, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000300000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000001920000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000005f81000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000005f81000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000001720000, 0x0000000000001000, 0x0000000000000000, 0x0000000000000000, 0x0000000000200000, 0x0000000000000000, 0x0000000000000000, 0x1000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000001, 0x2100000000000000, 0x0000000000000000, 0x0000000001000000, 0x0000000000000001, 0x2100000000000000, 
+	0x0000000000000000, 0x0000f00003000000, 0x0000000000000000, 0x1000000000000000, 0x0000000000000000, 0x0000000017100000, 0x0000001000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000002a200000, 0x0000003100000000, 0x0000000000000000, 0x0000000000000000, 0x000000017d710000, 0x0000025300000000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000029fa20000, 0x0000025200000000, 0x0000000000000000, 0x0000000000000000, 0x000000017f910000, 0x0000002200000000, 0x0000000010000000, 
+	0x0000000000000000, 0x000000003a410000, 0x0000001000000000, 0x0000000010000000, 0x0000000000000000, 0x0000000015200000, 0x0000000000000000, 0x0000000121000000, 
+	0x0000000000000000, 0x0000000002000000, 0x0000000000000000, 0x000000012f000000, 0x0000000000000000, 0x0000000001000000, 0x0000000000000000, 0x0000000232000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000232000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000121000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000010000000, 0x0000000000000000, 0x0001000000000000, 0x0000000000000000, 0x0000000010000000, 
+	0x0000000000000000, 0x0001000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0012100000000000, 0x3000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0012f00000000001, 0x9200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0023200000000005, 0xf810000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0023200000000005, 0xf810000000000000, 0x0010000000000000, 0x0000000000000000, 0x0012100000000001, 0x7200000000000100, 0x0040000000000000, 
+	0x0000000000000000, 0x0001000000000000, 0x2000000000000000, 0x0272000000000000, 0x0000000000000000, 0x0001000000000000, 0x0000000000000000, 0x15a7100000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x15a7100000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0272000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0020000000001000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0010000000003100, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000025300, 0x0000000011000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000025200, 
+	0x0000000003100000, 0x0000000000000000, 0x0000000000000000, 0x0000000000002200, 0x0000000025300000, 0x0000000000000000, 0x0000000000000000, 0x0000000000001000, 
+	0x0000000025300000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000f0002500000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	
+};
+
+Vtx gWindDL_gWindDL_mesh_layer_Transparent_vtx_0[38] = {
+	{{ {0, -11398, 937}, 0, {-7440, 240}, {0, 129, 0, 138} }},
+	{{ {0, -11398, 0}, 0, {-7440, -16}, {0, 129, 0, 255} }},
+	{{ {8059, -8059, 0}, 0, {-5392, -16}, {90, 166, 0, 255} }},
+	{{ {8059, -8059, 937}, 0, {-5392, 240}, {90, 166, 0, 138} }},
+	{{ {11398, 0, 0}, 0, {-3472, -16}, {127, 0, 0, 255} }},
+	{{ {11398, 0, 937}, 0, {-3472, 240}, {127, 0, 0, 138} }},
+	{{ {8059, 8059, 0}, 0, {-1040, -16}, {90, 90, 0, 255} }},
+	{{ {8059, 8059, 937}, 0, {-1040, 240}, {90, 90, 0, 138} }},
+	{{ {0, 11398, 0}, 0, {1008, -16}, {0, 127, 0, 255} }},
+	{{ {0, 11398, 937}, 0, {1008, 240}, {0, 127, 0, 138} }},
+	{{ {-8059, 8059, 0}, 0, {3056, -16}, {166, 90, 0, 255} }},
+	{{ {-8059, 8059, 937}, 0, {3056, 240}, {166, 90, 0, 138} }},
+	{{ {-11398, 0, 0}, 0, {5488, -16}, {129, 0, 0, 255} }},
+	{{ {-11398, 0, 937}, 0, {5488, 240}, {129, 0, 0, 138} }},
+	{{ {-8059, -8059, 0}, 0, {7408, -16}, {166, 166, 0, 255} }},
+	{{ {-8059, -8059, 937}, 0, {7408, 240}, {166, 166, 0, 138} }},
+	{{ {-8059, -8059, 937}, 0, {7408, 240}, {166, 166, 0, 138} }},
+	{{ {-8059, -8059, 0}, 0, {7408, -16}, {166, 166, 0, 255} }},
+	{{ {0, -11398, 0}, 0, {9456, -16}, {0, 129, 0, 255} }},
+	{{ {0, -11398, 937}, 0, {9456, 240}, {0, 129, 0, 138} }},
+	{{ {-8059, -8059, 1874}, 0, {7408, 496}, {166, 166, 0, 0} }},
+	{{ {0, -11398, 1874}, 0, {9456, 496}, {0, 129, 0, 0} }},
+	{{ {-11398, 0, 1874}, 0, {5488, 496}, {129, 0, 0, 0} }},
+	{{ {-11398, 0, 937}, 0, {5488, 240}, {129, 0, 0, 138} }},
+	{{ {-8059, 8059, 1874}, 0, {3056, 496}, {166, 90, 0, 9} }},
+	{{ {-8059, 8059, 937}, 0, {3056, 240}, {166, 90, 0, 138} }},
+	{{ {0, 11398, 1874}, 0, {1008, 496}, {0, 127, 0, 6} }},
+	{{ {0, 11398, 937}, 0, {1008, 240}, {0, 127, 0, 138} }},
+	{{ {8059, 8059, 1874}, 0, {-1040, 496}, {90, 90, 0, 0} }},
+	{{ {8059, 8059, 937}, 0, {-1040, 240}, {90, 90, 0, 138} }},
+	{{ {11398, 0, 1874}, 0, {-3472, 496}, {127, 0, 0, 1} }},
+	{{ {11398, 0, 937}, 0, {-3472, 240}, {127, 0, 0, 138} }},
+	{{ {8059, -8059, 1874}, 0, {-5392, 496}, {90, 166, 0, 5} }},
+	{{ {11398, 0, 937}, 0, {-3472, 240}, {127, 0, 0, 138} }},
+	{{ {11398, 0, 1874}, 0, {-3472, 496}, {127, 0, 0, 1} }},
+	{{ {8059, -8059, 937}, 0, {-5392, 240}, {90, 166, 0, 138} }},
+	{{ {0, -11398, 1874}, 0, {-7440, 496}, {0, 129, 0, 0} }},
+	{{ {0, -11398, 937}, 0, {-7440, 240}, {0, 129, 0, 138} }},
+};
+
+Gfx gWindDL_gWindDL_mesh_layer_Transparent_tri_0[] = {
+	gsSPVertex(gWindDL_gWindDL_mesh_layer_Transparent_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(3, 2, 4, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(9, 8, 10, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(11, 10, 12, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(13, 12, 14, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(gWindDL_gWindDL_mesh_layer_Transparent_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 0, 3, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(6, 0, 4, 0),
+	gsSP1Triangle(6, 7, 0, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(8, 9, 7, 0),
+	gsSP1Triangle(10, 9, 8, 0),
+	gsSP1Triangle(10, 11, 9, 0),
+	gsSP1Triangle(12, 11, 10, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(14, 13, 12, 0),
+	gsSP1Triangle(14, 15, 13, 0),
+	gsSPVertex(gWindDL_gWindDL_mesh_layer_Transparent_vtx_0 + 32, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gWindDL_f3dlite_material_005_layerTransparent[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, 1, TEXEL1, TEXEL0, TEXEL1, TEXEL0, COMBINED, 0, SHADE, 0, COMBINED, 0, SHADE, 0),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_CULL_BACK | G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_DISABLE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_OPA_SURF | G_RM_AA_ZB_XLU_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_16b, 1, gWindDL_Fan_Wind_00_i4),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 4, 0, G_TX_WRAP | G_TX_MIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 60),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_16b, 1, gWindDL_Fan_Wind_01_i4),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_16b, 0, 64, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(6, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_4b, 4, 64, 1, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 2, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(1, 8, 0, 252, 252),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gWindDL[] = {
+	gsSPDisplayList(mat_gWindDL_f3dlite_material_005_layerTransparent),
+	gsSPDisplayList(gWindDL_gWindDL_mesh_layer_Transparent_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_fan/gWindDL.h b/assets_hm_pack/objects/object_fan/gWindDL.h
new file mode 100644
index 000000000..02cbeb58d
--- /dev/null
+++ b/assets_hm_pack/objects/object_fan/gWindDL.h
@@ -0,0 +1,6 @@
+extern u64 gWindDL_Fan_Wind_00_i4[];
+extern u64 gWindDL_Fan_Wind_01_i4[];
+extern Vtx gWindDL_gWindDL_mesh_layer_Transparent_vtx_0[38];
+extern Gfx gWindDL_gWindDL_mesh_layer_Transparent_tri_0[];
+extern Gfx mat_gWindDL_f3dlite_material_005_layerTransparent[];
+extern Gfx gWindDL[];
diff --git a/assets_hm_pack/objects/object_fan/object_fan.c b/assets_hm_pack/objects/object_fan/object_fan.c
new file mode 100644
index 000000000..6abf07b87
--- /dev/null
+++ b/assets_hm_pack/objects/object_fan/object_fan.c
@@ -0,0 +1,298 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gFanDL_Fan_Blade_00_rgba16[] = {
+	0x4a0f4a114a114a0f, 0x4a0f41cd418d398d, 0x394d398d398b394b, 0x314b314d314d394d, 0x398f398f398f398f, 0x399141d14a1141cf, 0x398f314d310b310b, 0x3109314b3149314b, 
+	0x3109290920c928c9, 0x29092909398d41cf, 0x4a114a5352935295, 0x5ad55ad763176317, 0x63196b596b597359, 0x735b735b739b739b, 0x739b7b9b7b9b7b9b, 0x7b9b7b9b7b9b7b9b, 
+	0x49cf4a1152535a51, 0x520f418b394b394b, 0x398d41cd41cf41cf, 0x49cf398f314d41d1, 0x4a114a114a535297, 0x62d9529752975a97, 0x5a97529752554a11, 0x4a1149cf398d398d, 
+	0x394d290920c720c9, 0x20c720c72909294b, 0x398d42114a535295, 0x5ad5631763176319, 0x6b596b596b59735b, 0x735b739b739b739b, 0x7b9b7b9b7b9b7b9b, 0x7b9b7b9b7b9b7b9b, 
+	0x39cf398b4a0f49cd, 0x49cd4a0f394b314b, 0x398b4a114a115253, 0x4a11398d398f5255, 0x52535a955a95735f, 0x739d6b5b62d95253, 0x525362d762d57359, 0x6b1962d752534a51, 
+	0x4a11398f290b290b, 0x290920c92909290b, 0x398d398f318d4a53, 0x5295631763196b19, 0x63196b5b739b735b, 0x739b7b9b7b9b7b9b, 0x7b9b7b9b7b9b7b9b, 0x7b9b7b9b7b9b7b9b, 
+	0x398d314b398d5251, 0x5a936b175a956295, 0x41cf4a11398d5253, 0x62d939cf294b5ad7, 0x7b5b739d739d6b5d, 0x63194a11525349cf, 0x41cf62937b5b7359, 0x7b9d7b9d5ad55a95, 
+	0x5a95525341d14211, 0x39cf318d314f314d, 0x39d139d1398f4a53, 0x4a535ad76b196b5b, 0x63196b5b739d735b, 0x7b9b7b9b7b9b7b9b, 0x7b9b7b9b7b9b7b9b, 0x7b9b7b9b7b9b7b9b, 
+	0x5253525352935a95, 0x5a93735b8c21a4e7, 0xad29ad29a4e77bdf, 0x62d541cf41d16b19, 0x9c63946383df4a53, 0x5ad76b1b7bdf5253, 0x62d7735b84219463, 0x8c2194638c215a93, 
+	0x4a116b19739f62d9, 0x4a53529562d95295, 0x42534a574a554a55, 0x4a5552975ad75a95, 0x6b1b4a536b5b6b59, 0x7b9b83dd83dd83dd, 0x83dd83dd839b839b, 0x839b839b839b839b, 
+	0x735b735b739b7b9d, 0x83df8c639ca5a529, 0xad6badadd6b5def7, 0xdeb5d6739ca362d7, 0x7319941f7359735b, 0x8c2183df735b7b9d, 0x8bdf83dd94639463, 0x8c1f839d73595a93, 
+	0x735ba4e594a59463, 0x735b735b6b196b5b, 0x5ad95a9762975a95, 0x52555ad7525562d9, 0x52556319529562d9, 0x5ad5735983dd83dd, 0x83dd83dd83dd83db, 0x839b839b839b839b, 
+	0x8c218c618c6394a3, 0x9ca59ce7a529ad6b, 0xb5adbdefce73d6b5, 0xdef7ef7bf7bbef79, 0xb56b73596b178bdf, 0x941f9c61941f7b9b, 0x8c1f8bdd941f9461, 0x83dd6ad57b598c1f, 
+	0x8c1f83df9ca39ca5, 0x94a37b9b6b19735b, 0x7b5d735b6b1b6ad7, 0x5a9562d76ad76b19, 0x6b1b6b1b62d762d7, 0x5a975ad76b597b9b, 0x83dd83dd83dd83db, 0x839b839b839b839b, 
+	0x9ce7a4e7a4e7a527, 0xad29ad6bb5adbded, 0xc62fce31d6b3def5, 0xe6f7e739ef39f77b, 0xf7bbf7bbc5ef6b19, 0x7b59a4a594619461, 0x945f8c1d941f6ad5, 0x5a5173599c61ace5, 
+	0xa4e5ace594618c61, 0x94638c617b5b83dd, 0x8c1f839d735d7b5b, 0x735b6ad7731b6295, 0x6b19735b6b1b6b5b, 0x5a9762d763196b19, 0x83dd83db83dd839b, 0x839b839b7b9b7b9b, 
+	0xad6bad6bb56bb5ab, 0xb5adbdadc5efc62f, 0xce71d673d6b5def5, 0xe6f7ef39ef79f77b, 0xf77bffbbffbdf77b, 0x9ca562d7a4e5ad27, 0x9ca58c1f7b9b7b9b, 0xa4e5ace5945f941f, 
+	0x9c5fa4e5a4e583dd, 0x9463942183dd9ca3, 0x8c1f8c1f7b9f6b1b, 0x731b84216b1b5a95, 0x6ad76b1762d76319, 0x5293529552975253, 0x5ad56b197b9b839b, 0x7b9b7b597b597359, 
+	0xbdadbdadbdadbded, 0xc5efc62fc631ce71, 0xd673d6b3def5def7, 0xe737ef39ef79f77b, 0xffbdffbdffffffff, 0xf7bddeb57b9b7b9b, 0xad279ca38c61a4e5, 0xa4e3a4a3941f8bdd, 
+	0xa4a3a4e5ad278c1f, 0x941f94639ca38bdd, 0x8c618bdf7b5d6ad9, 0x6b1d5a9762975a97, 0x6b196b176b1762d5, 0x5ad55a975a955253, 0x4a116ad773177359, 0x731773176b176b17, 
+	0xc5efc5efc62fc62f, 0xc631ce31ce71d673, 0xd6b3deb5def5e6f7, 0xe737ef39ef79f77b, 0xffbdffbdffffffff, 0xffffffbdef79a527, 0x7b9bad27a4e7bdab, 0xace5ace5941f8bdd, 
+	0x8c1f9461b5279ca5, 0x941f8bdd9461839b, 0x8c1f8c1f84217b9d, 0x735d525562996b1b, 0x7bdf7b9d735b62d7, 0x62d55a95525149cf, 0x41cf5a9362d56295, 0x629362935a935a93, 
+	0xce31ce31ce31ce71, 0xce71d673d673d6b3, 0xdeb5def5e6f7e6f7, 0xef37ef39ef79f77b, 0xf7bbffbdffbdfffd, 0xfffffffffffdf77b, 0xd6b394a3ad27ad29, 0xb56ba4e58c1f945f, 
+	0x8c1d83dd941fa4a5, 0x94218bdd8c1d7b9b, 0x7b9b83db8bdf7b5b, 0x83e17b9f62d962d9, 0x6b1d6b5d62db62d7, 0x5a954a0f52535251, 0x5211525152114a0f, 0x4a0f520f4a0f4a0f, 
+	0xce71d671d673d673, 0xd673d6b3deb3deb5, 0xdef5def5e6f7e6f7, 0xef37ef39ef79f77b, 0xf77bf7bbffbdffbd, 0xffbdfffdffbdffbd, 0xf77bdef59ca39ca3, 0xad29ad279ca1941f, 
+	0x9c61839b83dbace5, 0x9ca39ca383dd7b5b, 0x735b83dd839d83df, 0x83df83df83df735d, 0x6b5f6b5d529562d9, 0x62d7521149cf41cd, 0x4a0f49cd525141cd, 0x418d418b398b398d, 
+	0xd673d673d673d6b3, 0xd6b3deb3deb5deb5, 0xdef5e6f5e6f7e6f7, 0xef37ef39ef39ef79, 0xf77bf77bf7bbffbd, 0xffbdffbdffbdffbd, 0xfffdef79d671a4a3, 0xa4e3b527a4e3941f, 
+	0x941d8bdb941d9ca3, 0x946183dd83dd6ad5, 0x735b7319735b735b, 0x7b5b735b7b9d739b, 0x631b5a95631b62d9, 0x5a97525149cf520f, 0x5211520f520f49cf, 0x3949290729072909, 
+	0xd6b3d6b3deb3deb3, 0xdeb3deb5deb5def5, 0xdef5e6f5e6f7e6f7, 0xe737ef39ef39ef79, 0xef79f77bf77bf7bb, 0xffbdffbdffbdfffd, 0xffffffffef79deb3, 0x941f9c61ace5ace3, 
+	0xace39c5f9c5fa4a3, 0x94617b9b7b9b6ad5, 0x629352515a935a93, 0x6b1783df839f735b, 0x5ad76b1b5a974a51, 0x4a134a134a115211, 0x520f520f520f49cd, 0x314920c720c720c7, 
+	0xdeb3deb3deb3deb3, 0xdeb5deb5def5def5, 0xdef5e6f5e6f7e6f7, 0xe6f7ef37ef39ef39, 0xef79f779f77bf77b, 0xf7bbffbdffbdffbd, 0xfffdffffffbdf779, 0xc5a98bdbad25ace3, 
+	0xb525a4a19c5fb4e5, 0xa4a58c1f942183df, 0x6b175a535a937b9d, 0x839f6b1983df7b9d, 0x6b196b1b52534a53, 0x41d139cd41cf5211, 0x524f49cd520f49cd, 0x3149208718431843, 
+	0xdeb3deb3deb3deb3, 0xdeb5deb5def5def5, 0xdef5e6f5e6f7e6f7, 0xe6f7e737ef37ef39, 0xef39ef79f779f77b, 0xf77bf7bbffbbffbd, 0xffbdfffdfffdfffd, 0xf7779c5f93dbbd25, 
+	0xc565b523a4a1b4e3, 0xa4a39c618c1f8bdd, 0x7b9b6b196b178421, 0x839d8bdf7b9d6b19, 0x62d56b1952935293, 0x4a5541cf4a115251, 0x49cd4a0d41cd418b, 0x3109188310431043, 
+	0xdeb3deb3deb3deb3, 0xdeb5deb5def5def5, 0xdef5e6f5e6f5e6f7, 0xe6f7e6f7ef37ef37, 0xef37ef39ef39f779, 0xf779f779f77bff7b, 0xffbbffbbffbbffbb, 0xffbbe6b17b15ac9f, 
+	0xaca1a45fa45f9c1f, 0x8bdb941d839b7b5b, 0x7b9b8bdf83df83df, 0x83df735b7bdd62d5, 0x631562d55a935ad7, 0x62d75251420f4a0f, 0x4a0f49cd418b418b, 0x2907184310430843, 
+	0xdeb3deb3deb3deb3, 0xdeb3deb3deb5def5, 0xdef5e6f5e6f5e6f5, 0xe6f5e6f7e6f7e6f7, 0xef37ef37ef37ef39, 0xef39f779f779f779, 0xf779ff79ffbbffbb, 0xfffdffb99c1d8b99, 
+	0xaca18b9b8bdb8b99, 0x7b598b9b8bdb839b, 0x839b839f83df8c21, 0x83dd83dd839d6b59, 0x6ad75a955a956295, 0x4a1149cf41cd4a0f, 0x49cd418d31493149, 0x20c7104310431843, 
+	0xdeb3deb3deb3deb3, 0xdeb3deb3deb3deb3, 0xdeb5def5e6f5e6f5, 0xe6f5e6f5e6f5e6f7, 0xe6f7eef7ef37ef37, 0xef37ef37ef37f737, 0xf737f777f777ff79, 0xff79ffb9d5eb7315, 
+	0x9c1da45da45f9c1d, 0x8b9b7b578b9b8399, 0x7b597b9b8c1f83dd, 0x731b83dd839d735b, 0x62d5631952514a0f, 0x525152114a0f49cd, 0x49cd398b398b394b, 0x20c7208720872085, 
+	0xdeb3deb3deb3deb3, 0xdeb3deb3deb3deb3, 0xdeb3deb3deb3deb3, 0xe6f5e6f5e6f5e6f5, 0xe6f5e6f5e6f5e6f5, 0xeef5eef5eef5ef35, 0xef35ef35f735f6f5, 0xf6f3f6f3e66f7b15, 
+	0x8b9993db941d93db, 0x93db8b9b73576ad5, 0x7b59735762d57359, 0x6b177b9b7357735b, 0x62d352514a0f4a11, 0x49cd418d49cd41cb, 0x49cd4a0d49cd394b, 0x20c728c728c728c7, 
+	0xdeb3deb3deb3deb3, 0xdeb3deb3deb3deb3, 0xdeb3deb3deb3deb3, 0xdeb3deb3e6b3e6b3, 0xe6b3e6f3e6f3e6f3, 0xe6f3e6f3e6f3e6f3, 0xeef3eef3eef3eeb1, 0xeeb1e66de66f93db, 
+	0x83577b57941daca1, 0x93dd83597b576293, 0x62935a4f6ad56b17, 0x5a936b196ad75a53, 0x4a5141cf41cd418b, 0x398b398b41cd498d, 0x520f520f49cd398b, 0x3149310931093109, 
+	0xde73de73de73de73, 0xde73de73deb3deb3, 0xdeb3deb3deb3deb3, 0xdeb3deb3deb3deb3, 0xdeb3deb3deb3e6b3, 0xe6b3e6b3e6b3e6b1, 0xe6b1e6b1e6afe66f, 0xe66dde2bcda7a45d, 
+	0x83997b559c1da45f, 0x8b997b596ad762d7, 0x5a935a9362956295, 0x62d762d75a954a0f, 0x41cf394b398b41cd, 0x398b41cd49cd4a0f, 0x5a51520f49cf41cd, 0x398b394b39493949, 
+	0xd671d671d671d671, 0xd671de71de71de71, 0xde71de71de71de71, 0xde71de71de71de71, 0xde71de71de71de71, 0xde71de71de71de6f, 0xde6fde6fde6fde2d, 0xde2dde2dc56593db, 
+	0x73177b5783997b17, 0x839b7b5962935a53, 0x5a935a935a515a93, 0x5a93521149cd41cd, 0x394b3109394b394b, 0x314b41cd520f520f, 0x520f520d49cd41cd, 0x418b418b398b398b, 
+	0xd671d671d671d671, 0xd671d671d671d671, 0xd671d671d671d671, 0xd671d671d671d671, 0xd671d66fd66fd62f, 0xd62fd62fd62fd62f, 0xd62dd62dd62dd62d, 0xde6fde2daca17315, 
+	0x72d57b577b597b17, 0x7357629352115251, 0x5a93524f520f5251, 0x520f49cf418d398b, 0x31493109394b394b, 0x398b4a0f520f520f, 0x49cd49cd49cd41cb, 0x41cb418b418b418b, 
+	0xd671d671d671d671, 0xd671d671d671d671, 0xd671d66fd66fd62f, 0xd62fd62fd62fd62f, 0xd62fd62fd62fce2f, 0xce2dcdedcdedcded, 0xcdedc5ebc5abcdab, 0xcdabcded9c1d72d5, 
+	0x5a515a5162915a51, 0x5a5141cd41cd4a0f, 0x529352934a0f4a0f, 0x41cf418d394b314b, 0x29093149394b41cd, 0x520f520f4a0f4a0f, 0x49cd49cd49cb41cb, 0x418b418b418b418b, 
+	0xd62fd62fd62fd62f, 0xd62fd62fd62fd62f, 0xd62fd62fd62fd62f, 0xd62fd62fce2fce2f, 0xce2fce2dcdedcded, 0xc5edc5abc5abc5ab, 0xbda9bd69b527b527, 0xace5a4e5839b5a93, 
+	0x398b52116293520f, 0x418d394d398d5253, 0x41cf4a1149cf41cd, 0x394d394b310b20c7, 0x314b314b394949cd, 0x520f520f49cb49cb, 0x49cb41cb41cb418b, 0x418b418b418b418b, 
+	0xd62fd62fd62fd62f, 0xd62fd62fd62fd62f, 0xd62fce2fce2fce2f, 0xce2fce2fcdedcded, 0xcdedc5edc5edc5ab, 0xc5abbdabbd69b569, 0xb527ace5a4a39c63, 0x941f7b9d6b195293, 
+	0x398d18c71887398d, 0x52534a1129094211, 0x4a114a514a0f41cf, 0x398d310929092909, 0x418b4a0f520f49cf, 0x520d51cd49cd49cb, 0x49cb418b418b418b, 0x418b418b418b418b, 
+	0xd62fd62fd62fd62f, 0xd62fd62fce2fce2f, 0xce2fce2fce2fce2d, 0xcdedcdedcdedc5ed, 0xc5edc5abc5abbdab, 0xbd69b569b527ad27, 0xa4e59ca394618c1f, 0x7bdd735b63175295, 
+	0x4253318d08c70001, 0x188539cf2909314b, 0x294d394d310b3109, 0x3109390b394b49cd, 0x520f520f5a4f520f, 0x51cd49cd49cb498b, 0x418b418b41894189, 0x4189418941894189, 
+	0xd62fce2fce2fce2f, 0xce2fce2fce2fce2f, 0xce2dcdedcdedcded, 0xcdedc5edc5edc5ed, 0xc5abc5abbdabbd69, 0xb569b527ad27a4e5, 0x9ca394618c1f83dd, 0x7b9b6b5963195ad7, 
+	0x52954211318f0889, 0x00010801314b290b, 0x314d314d314b3109, 0x314b314b418d49cd, 0x49cb520d520d51cd, 0x49cb49cb498b418b, 0x4189418941894189, 0x4189418941894189, 
+	0xce2fce2fce2fce2f, 0xce2fce2fce2dce2d, 0xcdedcdedcdedcded, 0xc5edc5edc5edc5ab, 0xc5abbdabbd69b569, 0xb527ad27a4e5a4a3, 0x9c639461841f7bdd, 0x735b6b5b63195ad7, 
+	0x52d74a95425331cf, 0x210b108908010005, 0x20c9290b310b314b, 0x418d49cd520f520d, 0x4a0d4a0b49cd49cb, 0x418b418b418b4189, 0x4189418941893989, 0x3989398939893989, 
+	0xce2fce2fce2fce2f, 0xce2fce2dcdedcded, 0xcdedcdedcdedcded, 0xc5edc5edc5ebc5ab, 0xbdabbdabbd69b569, 0xb527ad27a4e59ca3, 0x94618c2183df7b9d, 0x735b6b5b63196319, 
+	0x5ad752974a534213, 0x318f210b08470847, 0x004b0089210b314d, 0x4a0f4a11520f4a0d, 0x4a0d49cb49cb41cb, 0x418b418b418b4189, 0x4189418941893989, 0x3989398939893989, 
+	
+};
+
+Vtx gFanDL_gFanDL_mesh_layer_Opaque_vtx_0[106] = {
+	{{ {-1000, 0, 2000}, 0, {944, 752}, {152, 0, 73, 255} }},
+	{{ {0, -1000, 2000}, 0, {1200, 912}, {0, 152, 73, 255} }},
+	{{ {1000, 0, 2000}, 0, {1296, 624}, {104, 0, 73, 255} }},
+	{{ {0, 1000, 2000}, 0, {912, 624}, {0, 104, 73, 255} }},
+	{{ {-1000, 0, 0}, 0, {1168, 784}, {152, 0, 183, 255} }},
+	{{ {0, 1000, 0}, 0, {1136, 656}, {0, 104, 183, 255} }},
+	{{ {1000, 0, 2000}, 0, {1104, 752}, {104, 0, 73, 255} }},
+	{{ {1000, 0, 0}, 0, {1328, 784}, {104, 0, 183, 255} }},
+	{{ {0, -1000, 2000}, 0, {976, 880}, {0, 152, 73, 255} }},
+	{{ {0, -1000, 0}, 0, {1200, 912}, {0, 152, 183, 255} }},
+	{{ {-1000, 0, 0}, 0, {1328, 976}, {152, 0, 183, 255} }},
+	{{ {0, 1000, 0}, 0, {1488, 688}, {0, 104, 183, 255} }},
+	{{ {1000, 0, 0}, 0, {1264, 528}, {104, 0, 183, 255} }},
+	{{ {0, -1000, 0}, 0, {1104, 816}, {0, 152, 183, 255} }},
+	{{ {-8, 97, 398}, 0, {880, 1008}, {184, 151, 254, 255} }},
+	{{ {2653, 816, 1023}, 0, {1488, 1008}, {41, 139, 28, 255} }},
+	{{ {2178, 6074, 1209}, 0, {1360, 392}, {231, 233, 122, 255} }},
+	{{ {5348, 2920, 1875}, 0, {1744, 720}, {81, 169, 45, 255} }},
+	{{ {6487, 4804, 2308}, 0, {1936, 528}, {115, 238, 50, 255} }},
+	{{ {3724, 8681, 2308}, 0, {1648, 176}, {45, 107, 52, 255} }},
+	{{ {-1188, 9996, 1875}, 0, {768, -36}, {245, 119, 43, 255} }},
+	{{ {-5518, 9188, 1875}, 0, {16, 48}, {135, 33, 22, 255} }},
+	{{ {-1427, 6548, 780}, 0, {688, 368}, {185, 151, 13, 255} }},
+	{{ {123, 4340, 703}, 0, {880, 560}, {140, 228, 44, 255} }},
+	{{ {5348, 2920, 1875}, 0, {1552, 816}, {81, 169, 45, 255} }},
+	{{ {2414, 6176, 537}, 0, {1424, 688}, {246, 245, 130, 255} }},
+	{{ {6487, 4804, 2308}, 0, {1584, 720}, {115, 238, 50, 255} }},
+	{{ {2653, 816, 1023}, 0, {1328, 944}, {41, 139, 28, 255} }},
+	{{ {-8, 97, 398}, 0, {1200, 880}, {184, 151, 254, 255} }},
+	{{ {123, 4340, 703}, 0, {1200, 784}, {140, 228, 44, 255} }},
+	{{ {-1427, 6548, 780}, 0, {1168, 688}, {185, 151, 13, 255} }},
+	{{ {2414, 6176, 537}, 0, {1424, 688}, {246, 245, 130, 255} }},
+	{{ {123, 4340, 703}, 0, {1200, 784}, {140, 228, 44, 255} }},
+	{{ {-5518, 9188, 1875}, 0, {912, 528}, {135, 33, 22, 255} }},
+	{{ {-1188, 9996, 1875}, 0, {1232, 496}, {245, 119, 43, 255} }},
+	{{ {3724, 8681, 2308}, 0, {1520, 592}, {45, 107, 52, 255} }},
+	{{ {6487, 4804, 2308}, 0, {1584, 720}, {115, 238, 50, 255} }},
+	{{ {97, 8, 398}, 0, {880, 1008}, {151, 72, 254, 255} }},
+	{{ {816, -2653, 1023}, 0, {1488, 1008}, {139, 215, 28, 255} }},
+	{{ {6074, -2178, 1209}, 0, {1360, 392}, {233, 25, 122, 255} }},
+	{{ {2920, -5348, 1875}, 0, {1744, 720}, {169, 175, 45, 255} }},
+	{{ {4804, -6487, 2308}, 0, {1936, 528}, {238, 141, 50, 255} }},
+	{{ {8681, -3724, 2308}, 0, {1648, 176}, {107, 211, 52, 255} }},
+	{{ {9996, 1188, 1875}, 0, {768, -36}, {119, 11, 43, 255} }},
+	{{ {9188, 5518, 1875}, 0, {16, 48}, {33, 121, 22, 255} }},
+	{{ {6548, 1427, 780}, 0, {688, 368}, {151, 71, 13, 255} }},
+	{{ {6548, 1427, 780}, 0, {688, 368}, {151, 71, 13, 255} }},
+	{{ {4340, -123, 703}, 0, {880, 560}, {228, 116, 44, 255} }},
+	{{ {6074, -2178, 1209}, 0, {1360, 392}, {233, 25, 122, 255} }},
+	{{ {97, 8, 398}, 0, {880, 1008}, {151, 72, 254, 255} }},
+	{{ {2920, -5348, 1875}, 0, {1552, 816}, {169, 175, 45, 255} }},
+	{{ {6176, -2414, 537}, 0, {1424, 688}, {245, 10, 130, 255} }},
+	{{ {4804, -6487, 2308}, 0, {1584, 720}, {238, 141, 50, 255} }},
+	{{ {816, -2653, 1023}, 0, {1328, 944}, {139, 215, 28, 255} }},
+	{{ {97, 8, 398}, 0, {1200, 880}, {151, 72, 254, 255} }},
+	{{ {4340, -123, 703}, 0, {1200, 784}, {228, 116, 44, 255} }},
+	{{ {6548, 1427, 780}, 0, {1168, 688}, {151, 71, 13, 255} }},
+	{{ {9188, 5518, 1875}, 0, {912, 528}, {33, 121, 22, 255} }},
+	{{ {9996, 1188, 1875}, 0, {1232, 496}, {119, 11, 43, 255} }},
+	{{ {8681, -3724, 2308}, 0, {1520, 592}, {107, 211, 52, 255} }},
+	{{ {8, -97, 398}, 0, {880, 1008}, {72, 105, 254, 255} }},
+	{{ {-2653, -816, 1023}, 0, {1488, 1008}, {215, 117, 28, 255} }},
+	{{ {-2178, -6074, 1209}, 0, {1360, 392}, {25, 23, 122, 255} }},
+	{{ {-5348, -2920, 1875}, 0, {1744, 720}, {175, 87, 45, 255} }},
+	{{ {-6487, -4804, 2308}, 0, {1936, 528}, {141, 18, 50, 255} }},
+	{{ {-3724, -8681, 2308}, 0, {1648, 176}, {211, 149, 52, 255} }},
+	{{ {1188, -9996, 1875}, 0, {768, -36}, {11, 137, 43, 255} }},
+	{{ {5518, -9188, 1875}, 0, {16, 48}, {121, 223, 22, 255} }},
+	{{ {1427, -6548, 780}, 0, {688, 368}, {71, 105, 13, 255} }},
+	{{ {-123, -4340, 703}, 0, {880, 560}, {116, 28, 44, 255} }},
+	{{ {-5348, -2920, 1875}, 0, {1552, 816}, {175, 87, 45, 255} }},
+	{{ {-2414, -6176, 537}, 0, {1424, 688}, {10, 11, 130, 255} }},
+	{{ {-6487, -4804, 2308}, 0, {1584, 720}, {141, 18, 50, 255} }},
+	{{ {-2653, -816, 1023}, 0, {1328, 944}, {215, 117, 28, 255} }},
+	{{ {8, -97, 398}, 0, {1200, 880}, {72, 105, 254, 255} }},
+	{{ {-123, -4340, 703}, 0, {1200, 784}, {116, 28, 44, 255} }},
+	{{ {1427, -6548, 780}, 0, {1168, 688}, {71, 105, 13, 255} }},
+	{{ {-2414, -6176, 537}, 0, {1424, 688}, {10, 11, 130, 255} }},
+	{{ {-123, -4340, 703}, 0, {1200, 784}, {116, 28, 44, 255} }},
+	{{ {5518, -9188, 1875}, 0, {912, 528}, {121, 223, 22, 255} }},
+	{{ {1188, -9996, 1875}, 0, {1232, 496}, {11, 137, 43, 255} }},
+	{{ {-3724, -8681, 2308}, 0, {1520, 592}, {211, 149, 52, 255} }},
+	{{ {-6487, -4804, 2308}, 0, {1584, 720}, {141, 18, 50, 255} }},
+	{{ {-97, -8, 398}, 0, {880, 1008}, {105, 184, 254, 255} }},
+	{{ {-816, 2653, 1023}, 0, {1488, 1008}, {117, 41, 28, 255} }},
+	{{ {-6074, 2178, 1209}, 0, {1360, 392}, {23, 231, 122, 255} }},
+	{{ {-2920, 5348, 1875}, 0, {1744, 720}, {87, 81, 45, 255} }},
+	{{ {-4804, 6487, 2308}, 0, {1936, 528}, {18, 115, 50, 255} }},
+	{{ {-8681, 3724, 2308}, 0, {1648, 176}, {149, 45, 52, 255} }},
+	{{ {-9996, -1188, 1875}, 0, {768, -36}, {137, 245, 43, 255} }},
+	{{ {-9188, -5518, 1875}, 0, {16, 48}, {223, 135, 22, 255} }},
+	{{ {-6548, -1427, 780}, 0, {688, 368}, {105, 185, 13, 255} }},
+	{{ {-6548, -1427, 780}, 0, {688, 368}, {105, 185, 13, 255} }},
+	{{ {-4340, 123, 703}, 0, {880, 560}, {28, 140, 44, 255} }},
+	{{ {-6074, 2178, 1209}, 0, {1360, 392}, {23, 231, 122, 255} }},
+	{{ {-97, -8, 398}, 0, {880, 1008}, {105, 184, 254, 255} }},
+	{{ {-2920, 5348, 1875}, 0, {1552, 816}, {87, 81, 45, 255} }},
+	{{ {-6176, 2414, 537}, 0, {1424, 688}, {11, 246, 130, 255} }},
+	{{ {-4804, 6487, 2308}, 0, {1584, 720}, {18, 115, 50, 255} }},
+	{{ {-816, 2653, 1023}, 0, {1328, 944}, {117, 41, 28, 255} }},
+	{{ {-97, -8, 398}, 0, {1200, 880}, {105, 184, 254, 255} }},
+	{{ {-4340, 123, 703}, 0, {1200, 784}, {28, 140, 44, 255} }},
+	{{ {-6548, -1427, 780}, 0, {1168, 688}, {105, 185, 13, 255} }},
+	{{ {-9188, -5518, 1875}, 0, {912, 528}, {223, 135, 22, 255} }},
+	{{ {-9996, -1188, 1875}, 0, {1232, 496}, {137, 245, 43, 255} }},
+	{{ {-8681, 3724, 2308}, 0, {1520, 592}, {149, 45, 52, 255} }},
+};
+
+Gfx gFanDL_gFanDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gFanDL_gFanDL_mesh_layer_Opaque_vtx_0 + 0, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(3, 4, 0, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(6, 5, 3, 0),
+	gsSP1Triangle(6, 7, 5, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(8, 9, 7, 0),
+	gsSP1Triangle(0, 9, 8, 0),
+	gsSP1Triangle(0, 4, 9, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(10, 12, 13, 0),
+	gsSPVertex(gFanDL_gFanDL_mesh_layer_Opaque_vtx_0 + 14, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(4, 5, 2, 0),
+	gsSP1Triangle(5, 6, 2, 0),
+	gsSP1Triangle(6, 7, 2, 0),
+	gsSP1Triangle(7, 8, 2, 0),
+	gsSP1Triangle(8, 9, 2, 0),
+	gsSP1Triangle(9, 0, 2, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(13, 11, 10, 0),
+	gsSP1Triangle(14, 11, 13, 0),
+	gsSP1Triangle(15, 11, 14, 0),
+	gsSPVertex(gFanDL_gFanDL_mesh_layer_Opaque_vtx_0 + 30, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(6, 1, 5, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(10, 11, 9, 0),
+	gsSP1Triangle(11, 12, 9, 0),
+	gsSP1Triangle(12, 13, 9, 0),
+	gsSP1Triangle(13, 14, 9, 0),
+	gsSP1Triangle(14, 15, 9, 0),
+	gsSPVertex(gFanDL_gFanDL_mesh_layer_Opaque_vtx_0 + 46, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 5, 4, 0),
+	gsSP1Triangle(8, 5, 7, 0),
+	gsSP1Triangle(9, 5, 8, 0),
+	gsSP1Triangle(10, 5, 9, 0),
+	gsSP1Triangle(11, 5, 10, 0),
+	gsSP1Triangle(12, 5, 11, 0),
+	gsSP1Triangle(13, 5, 12, 0),
+	gsSP1Triangle(6, 5, 13, 0),
+	gsSPVertex(gFanDL_gFanDL_mesh_layer_Opaque_vtx_0 + 60, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(3, 4, 2, 0),
+	gsSP1Triangle(4, 5, 2, 0),
+	gsSP1Triangle(5, 6, 2, 0),
+	gsSP1Triangle(6, 7, 2, 0),
+	gsSP1Triangle(7, 8, 2, 0),
+	gsSP1Triangle(8, 9, 2, 0),
+	gsSP1Triangle(9, 0, 2, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(13, 11, 10, 0),
+	gsSP1Triangle(14, 11, 13, 0),
+	gsSP1Triangle(15, 11, 14, 0),
+	gsSPVertex(gFanDL_gFanDL_mesh_layer_Opaque_vtx_0 + 76, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(5, 1, 4, 0),
+	gsSP1Triangle(6, 1, 5, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(8, 10, 9, 0),
+	gsSP1Triangle(10, 11, 9, 0),
+	gsSP1Triangle(11, 12, 9, 0),
+	gsSP1Triangle(12, 13, 9, 0),
+	gsSP1Triangle(13, 14, 9, 0),
+	gsSP1Triangle(14, 15, 9, 0),
+	gsSPVertex(gFanDL_gFanDL_mesh_layer_Opaque_vtx_0 + 92, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(1, 3, 2, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 5, 4, 0),
+	gsSP1Triangle(8, 5, 7, 0),
+	gsSP1Triangle(9, 5, 8, 0),
+	gsSP1Triangle(10, 5, 9, 0),
+	gsSP1Triangle(11, 5, 10, 0),
+	gsSP1Triangle(12, 5, 11, 0),
+	gsSP1Triangle(13, 5, 12, 0),
+	gsSP1Triangle(6, 5, 13, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gFanDL_f3dlite_material_001_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gFanDL_Fan_Blade_00_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 2047, 128),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx gFanDL[] = {
+	gsSPDisplayList(mat_gFanDL_f3dlite_material_001_layerOpaque),
+	gsSPDisplayList(gFanDL_gFanDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_fan/object_fan.h b/assets_hm_pack/objects/object_fan/object_fan.h
new file mode 100644
index 000000000..38ea6e752
--- /dev/null
+++ b/assets_hm_pack/objects/object_fan/object_fan.h
@@ -0,0 +1,5 @@
+extern u64 gFanDL_Fan_Blade_00_rgba16[];
+extern Vtx gFanDL_gFanDL_mesh_layer_Opaque_vtx_0[106];
+extern Gfx gFanDL_gFanDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gFanDL_f3dlite_material_001_layerOpaque[];
+extern Gfx gFanDL[];
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_col.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_col.c
new file mode 100644
index 000000000..3495bd233
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_col.c
@@ -0,0 +1,49 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gSpikePadLargeCol_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+};
+
+CollisionPoly gSpikePadLargeCol_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xc180 },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xc180 },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xc180 },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xc180 },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xc180 },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xc180 },
+	{ 0x0000, 0x0007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xc180 },
+	{ 0x0000, 0x0007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xc180 },
+	{ 0x0000, 0x0004, 0x0002, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.470348002882929e-08), 0xfc18 },
+	{ 0x0000, 0x0004, 0x0001, 0x0006, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.470348002882929e-08), 0xfc18 },
+};
+
+Vec3s gSpikePadLargeCol_vertices[8] = {
+	{ -16000, 0, 16000 },
+	{ -16000, 1000, 16000 },
+	{ -16000, 1000, -16000 },
+	{ -16000, 0, -16000 },
+	{ 16000, 1000, -16000 },
+	{ 16000, 0, -16000 },
+	{ 16000, 1000, 16000 },
+	{ 16000, 0, 16000 },
+};
+
+CollisionHeader gSpikePadLargeCol_collisionHeader = {
+	-16000,
+	0,
+	-16000,
+	16000,
+	1000,
+	16000,
+	8,
+	gSpikePadLargeCol_vertices,
+	10,
+	gSpikePadLargeCol_polygons,
+	gSpikePadLargeCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_col.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_col.h
new file mode 100644
index 000000000..c585a22cb
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gSpikePadLargeCol_polygonTypes[];
+extern CollisionPoly gSpikePadLargeCol_polygons[];
+extern Vec3s gSpikePadLargeCol_vertices[8];
+extern CollisionHeader gSpikePadLargeCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_model.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_model.c
new file mode 100644
index 000000000..d7611403c
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_model.c
@@ -0,0 +1,116 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gSpikePadLargeDL_Spike_Pad_00_ci4[] = {
+	0x0000001111111111, 0x2122222322222211, 0x1111101011100000, 0x1100000000001021, 0x2000044455651000, 0x5400444400415045, 0x0001544544765556, 0x5005855444049742, 
+	0x2145668755055000, 0x04455545559a779b, 0xbbbbbcbbbbaaa79d, 0xa55a777879550001, 0x210667d876956995, 0x4545958785877d7a, 0xbbccbbbbbbede8da, 0xa75977d7a8854411, 
+	0x1216878d778aaa98, 0x5659887864499aa8, 0xdebbbedebbbd767a, 0x7b7ae7ad96559500, 0x105588a7cfccb778, 0x7568886410586efc, 0xffba7adadeda5677, 0xee7ffffaa8898954, 
+	0x1046a87fb8007d89, 0x645556445568bf91, 0x49adada7dada6998, 0x7bce416bd7979640, 0x108aeafa21110476, 0x85456565546ec511, 0x2447daaaadda6887, 0xec51444068977540, 
+	0x108a8ce000011046, 0x55454444548d4010, 0x11407add7aa8587a, 0xf810110000a87941, 0x10dd8e5001111115, 0x9954444461a91111, 0x11110aed7a7997da, 0xb50012220169d851, 
+	0x218dde1001122210, 0x6454444554951112, 0x22210697ad8a8a87, 0xe00122222209d851, 0x21597d0011222222, 0x5454445669601122, 0x33321688a77aea7a, 0x8012233333296961, 
+	0x3206590112333331, 0x4549565856541233, 0x333329a866abaeaa, 0x7012333333478511, 0x1151651223333330, 0x05a5559666502233, 0x3333187787aeddaa, 0x712333333278a911, 
+	0x1079486123333315, 0x8a65565966561333, 0x3331678867ddadad, 0xb5233333259a7800, 0x0477557803333065, 0x6966998686765133, 0x320a898589ade7ee, 0xba5233315698a840, 
+	0x1488864456564964, 0x4956999998996667, 0x567778879769987d, 0xdad7689597877850, 0x149577889968d796, 0x966656989896a568, 0x6877aaa968977a88, 0x7786787688788890, 
+	0x146a8988668a9565, 0x8698946888997698, 0x88687a769997dd99, 0x554688898a78a890, 0x1469887898a94686, 0x6966756866968989, 0x8998a786668dde77, 0x95459989787a7680, 
+	0x0565999969889966, 0x6669885558699899, 0x888897955977ad98, 0x6506999987787995, 0x46d9a79696669888, 0x9669999599999968, 0x8a788976987aa888, 0x9550688687aad784, 
+	0x46877d9888964789, 0x6655698656999969, 0x888766597699988a, 0x960466588aa89760, 0x16787d65998a9669, 0x666684b865658999, 0x9785664469559879, 0x98041557898a8890, 
+	0x16d89da999896695, 0x555697a696658959, 0x8898695696567889, 0x4629466887888791, 0x15dd79678879697d, 0xa9a778d796668999, 0x8889969699997896, 0x662654698a869891, 
+	0x157ada99aeeda87d, 0xda8ad78d9796977b, 0xdd88899999956965, 0x5467867899988870, 0x0577b8acbd8988a8, 0xaa868a89d796dcea, 0x9a7898a799869669, 0x69ba645a998987a4, 
+	0x24e889be41000577, 0xa6866798789ab900, 0x1148669887795666, 0x9b8111115a8869d5, 0x15d97ee00000005a, 0x778878d777db6010, 0x1100559778898986, 0xd9022112167a96a5, 
+	0x25a77c5100111119, 0x97768a7ad8a70011, 0x1111047778797896, 0xa111222211ed8860, 0x14797c4021222220, 0x7a7988adddd91112, 0x222215aa88a8a996, 0x91122232315a9671, 
+	0x04a97a1012223332, 0xa7896a887a840111, 0x2232207a69986655, 0x5123333333340681, 0x04dddd4122333332, 0xa7788987daa60012, 0x333334a898788996, 0x0223333333159a94, 
+	0x0699ed0123333330, 0xd787777add860123, 0x333329788a98a7a9, 0x6233333333677a55, 0x1089da5233333328, 0xa87aa777aaa91223, 0x3333487778897886, 0xa033333334a7aa61, 
+	0x149dbdd43333319a, 0x9978886989784123, 0x3324a875977777a7, 0xa91333324787aa60, 0x148dbd9ea51059d7, 0x8899759878779642, 0x146669999a7ae977, 0xada500467a7ddd60, 
+	0x14aabd7de88a7798, 0x89886957799da895, 0x654997788788a888, 0x7d889879998daa55, 0x15adbedd9779d796, 0x89898968a88aa699, 0x996999aaa777898d, 0x78a877778978ed50, 
+	0x057aeea99a877799, 0x899896998888a869, 0x97788777787aa867, 0x8aaeaadea7999764, 0x4888ada58aa7d789, 0x9886989aa9a99a78, 0x8a7978aa7aada887, 0x9addddadea777770, 
+	0x198d7788878a7786, 0x779965977777ee88, 0xd8778ad8dddda798, 0x87aedd7adadaae74, 0x0697daa89877d885, 0x8a8886968798775d, 0xa88987aa7aea8778, 0x87887877dadddde1, 
+	0x16688a78899a7866, 0xa77869997899979d, 0x869887a86d76988a, 0x9869597a798ada71, 0x06969869967aa888, 0x78a89899689987a7, 0x6879777867d79890, 0x6789aa8debd8ed71, 
+	0x4998ad89698d8889, 0x7898877796788da7, 0x9a78aa8795688857, 0x8a8aa8d77eee8d95, 0x04a6887796977877, 0x79787a86d8878ada, 0x87759a8569987778, 0x8778aada7daadd94, 
+	0x0587a99acbcba798, 0x59877956e8a99bff, 0xcb8668a98d877a97, 0x88ecccba8aadeb64, 0x40ad89df84004889, 0x6888866974aefd75, 0x0467968d7ddd7778, 0x6bc84449887ddb90, 
+	0x455988c000000146, 0x98966866968ce010, 0x1105889d77aa8988, 0xde40400109aeeb70, 0x45656e8111111115, 0x4656989569de4111, 0x11115799787aa88a, 0xb9000111107abba4, 
+	0x04544a1122222214, 0x5695658988ea1112, 0x22221977789a7d78, 0xa4001222224abb74, 0x0044451222333321, 0x9966597986a91122, 0x333325799897d854, 0x620022333327bba6, 
+	0x4050461223333331, 0x9965577a95841123, 0x333335878888a878, 0x61223333332beba0, 0x4065691233333330, 0x8966978886641233, 0x33333589979587aa, 0x701233333357eba0, 
+	0x0009552233333335, 0x5556679899542233, 0x33330697766d9daa, 0x7123333332ae9765, 0x0005404233333349, 0x9566d88996960333, 0x33318878a678a8dd, 0xd62333331daaad84, 
+	0x1005545803332995, 0x5986989968499433, 0x3309885a7ddead97, 0xd7703334abe77854, 0x11546669a6467896, 0x5587666996599689, 0x5678aed7ad77dd96, 0xaa7bdeddddaa8504, 
+	0x14554798a96da868, 0x9549445654594995, 0x4a877ddd8a799757, 0x7aebbe78989d5440, 0x0016469996599996, 0x6550444446556866, 0x59d787dda8aa9aa9, 0xa7bdddbda7765501, 
+	0x1411404445404044, 0x4011104456459565, 0x276a9a7889889999, 0x6877989404400411, 0x1011100101002004, 0x1111000044541000, 0x1544400051066959, 0x5454444440011022, 
+	
+};
+
+u64 gSpikePadLargeDL_Spike_Pad_00_pal_rgba16[] = {
+	0x2107188508430001, 0x2949398b41cd5a93, 0x52514a0f62d38c1d, 0xace36b157b99d62d, 
+};
+
+Vtx gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-16000, 0, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-16000, 0, 16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-16000, 1000, 16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-16000, 1000, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 0, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 0, 16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 1000, 16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 1000, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_vtx_0[20] = {
+	{{ {-16000, 0, 16000}, 0, {-2064, -184}, {129, 0, 0, 255} }},
+	{{ {-16000, 1000, 16000}, 0, {-2064, 72}, {129, 0, 0, 255} }},
+	{{ {-16000, 1000, -16000}, 0, {-16, 72}, {129, 0, 0, 255} }},
+	{{ {-16000, 0, -16000}, 0, {-16, -184}, {129, 0, 0, 255} }},
+	{{ {-16000, 0, -16000}, 0, {-16, -184}, {0, 0, 129, 255} }},
+	{{ {-16000, 1000, -16000}, 0, {-16, 72}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, -16000}, 0, {2032, 72}, {0, 0, 129, 255} }},
+	{{ {16000, 0, -16000}, 0, {2032, -184}, {0, 0, 129, 255} }},
+	{{ {16000, 0, -16000}, 0, {2032, -184}, {127, 0, 0, 255} }},
+	{{ {16000, 1000, -16000}, 0, {2032, 72}, {127, 0, 0, 255} }},
+	{{ {16000, 1000, 16000}, 0, {4080, 72}, {127, 0, 0, 255} }},
+	{{ {16000, 0, 16000}, 0, {4080, -184}, {127, 0, 0, 255} }},
+	{{ {16000, 0, 16000}, 0, {4080, -184}, {0, 0, 127, 255} }},
+	{{ {16000, 1000, 16000}, 0, {4080, 72}, {0, 0, 127, 255} }},
+	{{ {-16000, 1000, 16000}, 0, {6128, 72}, {0, 0, 127, 255} }},
+	{{ {-16000, 0, 16000}, 0, {6128, -184}, {0, 0, 127, 255} }},
+	{{ {16000, 1000, -16000}, 0, {6128, -4112}, {0, 127, 0, 255} }},
+	{{ {-16000, 1000, -16000}, 0, {-2064, -4112}, {0, 127, 0, 255} }},
+	{{ {-16000, 1000, 16000}, 0, {-2064, 4080}, {0, 127, 0, 255} }},
+	{{ {16000, 1000, 16000}, 0, {6128, 4080}, {0, 127, 0, 255} }},
+};
+
+Gfx gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gSpikePadLargeDL_SpikePad_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gSpikePadLargeDL_Spike_Pad_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 15),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gSpikePadLargeDL_Spike_Pad_00_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx gSpikePadLargeDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gSpikePadLargeDL_SpikePad_layerOpaque),
+	gsSPDisplayList(gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_model.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_model.h
new file mode 100644
index 000000000..283e34123
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_model.h
@@ -0,0 +1,7 @@
+extern u64 gSpikePadLargeDL_Spike_Pad_00_ci4[];
+extern u64 gSpikePadLargeDL_Spike_Pad_00_pal_rgba16[];
+extern Vtx gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_vtx_0[20];
+extern Gfx gSpikePadLargeDL_gSpikePadLargeDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gSpikePadLargeDL_SpikePad_layerOpaque[];
+extern Gfx gSpikePadLargeDL[];
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_col.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_col.c
new file mode 100644
index 000000000..12672a3cc
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_col.c
@@ -0,0 +1,49 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gSpikePadMediumCol_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+};
+
+CollisionPoly gSpikePadMediumCol_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xe0c0 },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xe0c0 },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xe0c0 },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xe0c0 },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xe0c0 },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xe0c0 },
+	{ 0x0000, 0x0007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xe0c0 },
+	{ 0x0000, 0x0007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xe0c0 },
+	{ 0x0000, 0x0004, 0x0002, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.470348002882929e-08), 0xfc18 },
+	{ 0x0000, 0x0004, 0x0001, 0x0006, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.470348002882929e-08), 0xfc18 },
+};
+
+Vec3s gSpikePadMediumCol_vertices[8] = {
+	{ -8000, 0, 8000 },
+	{ -8000, 1000, 8000 },
+	{ -8000, 1000, -8000 },
+	{ -8000, 0, -8000 },
+	{ 8000, 1000, -8000 },
+	{ 8000, 0, -8000 },
+	{ 8000, 1000, 8000 },
+	{ 8000, 0, 8000 },
+};
+
+CollisionHeader gSpikePadMediumCol_collisionHeader = {
+	-8000,
+	0,
+	-8000,
+	8000,
+	1000,
+	8000,
+	8,
+	gSpikePadMediumCol_vertices,
+	10,
+	gSpikePadMediumCol_polygons,
+	gSpikePadMediumCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_col.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_col.h
new file mode 100644
index 000000000..0a72e84ed
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gSpikePadMediumCol_polygonTypes[];
+extern CollisionPoly gSpikePadMediumCol_polygons[];
+extern Vec3s gSpikePadMediumCol_vertices[8];
+extern CollisionHeader gSpikePadMediumCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_model.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_model.c
new file mode 100644
index 000000000..da6737a88
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_model.c
@@ -0,0 +1,116 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gSpikePadMediumDL_Spike_Pad_00_ci4[] = {
+	0x0000001111111111, 0x2122222322222211, 0x1111101011100000, 0x1100000000001021, 0x2000044455651000, 0x5400444400415045, 0x0001544544765556, 0x5005855444049742, 
+	0x2145668755055000, 0x04455545559a779b, 0xbbbbbcbbbbaaa79d, 0xa55a777879550001, 0x210667d876956995, 0x4545958785877d7a, 0xbbccbbbbbbede8da, 0xa75977d7a8854411, 
+	0x1216878d778aaa98, 0x5659887864499aa8, 0xdebbbedebbbd767a, 0x7b7ae7ad96559500, 0x105588a7cfccb778, 0x7568886410586efc, 0xffba7adadeda5677, 0xee7ffffaa8898954, 
+	0x1046a87fb8007d89, 0x645556445568bf91, 0x49adada7dada6998, 0x7bce416bd7979640, 0x108aeafa21110476, 0x85456565546ec511, 0x2447daaaadda6887, 0xec51444068977540, 
+	0x108a8ce000011046, 0x55454444548d4010, 0x11407add7aa8587a, 0xf810110000a87941, 0x10dd8e5001111115, 0x9954444461a91111, 0x11110aed7a7997da, 0xb50012220169d851, 
+	0x218dde1001122210, 0x6454444554951112, 0x22210697ad8a8a87, 0xe00122222209d851, 0x21597d0011222222, 0x5454445669601122, 0x33321688a77aea7a, 0x8012233333296961, 
+	0x3206590112333331, 0x4549565856541233, 0x333329a866abaeaa, 0x7012333333478511, 0x1151651223333330, 0x05a5559666502233, 0x3333187787aeddaa, 0x712333333278a911, 
+	0x1079486123333315, 0x8a65565966561333, 0x3331678867ddadad, 0xb5233333259a7800, 0x0477557803333065, 0x6966998686765133, 0x320a898589ade7ee, 0xba5233315698a840, 
+	0x1488864456564964, 0x4956999998996667, 0x567778879769987d, 0xdad7689597877850, 0x149577889968d796, 0x966656989896a568, 0x6877aaa968977a88, 0x7786787688788890, 
+	0x146a8988668a9565, 0x8698946888997698, 0x88687a769997dd99, 0x554688898a78a890, 0x1469887898a94686, 0x6966756866968989, 0x8998a786668dde77, 0x95459989787a7680, 
+	0x0565999969889966, 0x6669885558699899, 0x888897955977ad98, 0x6506999987787995, 0x46d9a79696669888, 0x9669999599999968, 0x8a788976987aa888, 0x9550688687aad784, 
+	0x46877d9888964789, 0x6655698656999969, 0x888766597699988a, 0x960466588aa89760, 0x16787d65998a9669, 0x666684b865658999, 0x9785664469559879, 0x98041557898a8890, 
+	0x16d89da999896695, 0x555697a696658959, 0x8898695696567889, 0x4629466887888791, 0x15dd79678879697d, 0xa9a778d796668999, 0x8889969699997896, 0x662654698a869891, 
+	0x157ada99aeeda87d, 0xda8ad78d9796977b, 0xdd88899999956965, 0x5467867899988870, 0x0577b8acbd8988a8, 0xaa868a89d796dcea, 0x9a7898a799869669, 0x69ba645a998987a4, 
+	0x24e889be41000577, 0xa6866798789ab900, 0x1148669887795666, 0x9b8111115a8869d5, 0x15d97ee00000005a, 0x778878d777db6010, 0x1100559778898986, 0xd9022112167a96a5, 
+	0x25a77c5100111119, 0x97768a7ad8a70011, 0x1111047778797896, 0xa111222211ed8860, 0x14797c4021222220, 0x7a7988adddd91112, 0x222215aa88a8a996, 0x91122232315a9671, 
+	0x04a97a1012223332, 0xa7896a887a840111, 0x2232207a69986655, 0x5123333333340681, 0x04dddd4122333332, 0xa7788987daa60012, 0x333334a898788996, 0x0223333333159a94, 
+	0x0699ed0123333330, 0xd787777add860123, 0x333329788a98a7a9, 0x6233333333677a55, 0x1089da5233333328, 0xa87aa777aaa91223, 0x3333487778897886, 0xa033333334a7aa61, 
+	0x149dbdd43333319a, 0x9978886989784123, 0x3324a875977777a7, 0xa91333324787aa60, 0x148dbd9ea51059d7, 0x8899759878779642, 0x146669999a7ae977, 0xada500467a7ddd60, 
+	0x14aabd7de88a7798, 0x89886957799da895, 0x654997788788a888, 0x7d889879998daa55, 0x15adbedd9779d796, 0x89898968a88aa699, 0x996999aaa777898d, 0x78a877778978ed50, 
+	0x057aeea99a877799, 0x899896998888a869, 0x97788777787aa867, 0x8aaeaadea7999764, 0x4888ada58aa7d789, 0x9886989aa9a99a78, 0x8a7978aa7aada887, 0x9addddadea777770, 
+	0x198d7788878a7786, 0x779965977777ee88, 0xd8778ad8dddda798, 0x87aedd7adadaae74, 0x0697daa89877d885, 0x8a8886968798775d, 0xa88987aa7aea8778, 0x87887877dadddde1, 
+	0x16688a78899a7866, 0xa77869997899979d, 0x869887a86d76988a, 0x9869597a798ada71, 0x06969869967aa888, 0x78a89899689987a7, 0x6879777867d79890, 0x6789aa8debd8ed71, 
+	0x4998ad89698d8889, 0x7898877796788da7, 0x9a78aa8795688857, 0x8a8aa8d77eee8d95, 0x04a6887796977877, 0x79787a86d8878ada, 0x87759a8569987778, 0x8778aada7daadd94, 
+	0x0587a99acbcba798, 0x59877956e8a99bff, 0xcb8668a98d877a97, 0x88ecccba8aadeb64, 0x40ad89df84004889, 0x6888866974aefd75, 0x0467968d7ddd7778, 0x6bc84449887ddb90, 
+	0x455988c000000146, 0x98966866968ce010, 0x1105889d77aa8988, 0xde40400109aeeb70, 0x45656e8111111115, 0x4656989569de4111, 0x11115799787aa88a, 0xb9000111107abba4, 
+	0x04544a1122222214, 0x5695658988ea1112, 0x22221977789a7d78, 0xa4001222224abb74, 0x0044451222333321, 0x9966597986a91122, 0x333325799897d854, 0x620022333327bba6, 
+	0x4050461223333331, 0x9965577a95841123, 0x333335878888a878, 0x61223333332beba0, 0x4065691233333330, 0x8966978886641233, 0x33333589979587aa, 0x701233333357eba0, 
+	0x0009552233333335, 0x5556679899542233, 0x33330697766d9daa, 0x7123333332ae9765, 0x0005404233333349, 0x9566d88996960333, 0x33318878a678a8dd, 0xd62333331daaad84, 
+	0x1005545803332995, 0x5986989968499433, 0x3309885a7ddead97, 0xd7703334abe77854, 0x11546669a6467896, 0x5587666996599689, 0x5678aed7ad77dd96, 0xaa7bdeddddaa8504, 
+	0x14554798a96da868, 0x9549445654594995, 0x4a877ddd8a799757, 0x7aebbe78989d5440, 0x0016469996599996, 0x6550444446556866, 0x59d787dda8aa9aa9, 0xa7bdddbda7765501, 
+	0x1411404445404044, 0x4011104456459565, 0x276a9a7889889999, 0x6877989404400411, 0x1011100101002004, 0x1111000044541000, 0x1544400051066959, 0x5454444440011022, 
+	
+};
+
+u64 gSpikePadMediumDL_Spike_Pad_00_pal_rgba16[] = {
+	0x2107188508430001, 0x2949398b41cd5a93, 0x52514a0f62d38c1d, 0xace36b157b99d62d, 
+};
+
+Vtx gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-8000, 0, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-8000, 0, 8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-8000, 1000, 8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-8000, 1000, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 0, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 0, 8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 1000, 8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 1000, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_vtx_0[20] = {
+	{{ {-8000, 0, 8000}, 0, {-2064, -184}, {129, 0, 0, 255} }},
+	{{ {-8000, 1000, 8000}, 0, {-2064, 72}, {129, 0, 0, 255} }},
+	{{ {-8000, 1000, -8000}, 0, {-16, 72}, {129, 0, 0, 255} }},
+	{{ {-8000, 0, -8000}, 0, {-16, -184}, {129, 0, 0, 255} }},
+	{{ {-8000, 0, -8000}, 0, {-16, -184}, {0, 0, 129, 255} }},
+	{{ {-8000, 1000, -8000}, 0, {-16, 72}, {0, 0, 129, 255} }},
+	{{ {8000, 1000, -8000}, 0, {2032, 72}, {0, 0, 129, 255} }},
+	{{ {8000, 0, -8000}, 0, {2032, -184}, {0, 0, 129, 255} }},
+	{{ {8000, 0, -8000}, 0, {2032, -184}, {127, 0, 0, 255} }},
+	{{ {8000, 1000, -8000}, 0, {2032, 72}, {127, 0, 0, 255} }},
+	{{ {8000, 1000, 8000}, 0, {4080, 72}, {127, 0, 0, 255} }},
+	{{ {8000, 0, 8000}, 0, {4080, -184}, {127, 0, 0, 255} }},
+	{{ {8000, 0, 8000}, 0, {4080, -184}, {0, 0, 127, 255} }},
+	{{ {8000, 1000, 8000}, 0, {4080, 72}, {0, 0, 127, 255} }},
+	{{ {-8000, 1000, 8000}, 0, {6128, 72}, {0, 0, 127, 255} }},
+	{{ {-8000, 0, 8000}, 0, {6128, -184}, {0, 0, 127, 255} }},
+	{{ {8000, 1000, -8000}, 0, {4080, -2064}, {0, 127, 0, 255} }},
+	{{ {-8000, 1000, -8000}, 0, {-16, -2064}, {0, 127, 0, 255} }},
+	{{ {-8000, 1000, 8000}, 0, {-16, 2032}, {0, 127, 0, 255} }},
+	{{ {8000, 1000, 8000}, 0, {4080, 2032}, {0, 127, 0, 255} }},
+};
+
+Gfx gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gSpikePadMediumDL_SpikePad_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gSpikePadMediumDL_Spike_Pad_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 15),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gSpikePadMediumDL_Spike_Pad_00_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx gSpikePadMediumDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gSpikePadMediumDL_SpikePad_layerOpaque),
+	gsSPDisplayList(gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_model.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_model.h
new file mode 100644
index 000000000..cdb5d2e40
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_model.h
@@ -0,0 +1,7 @@
+extern u64 gSpikePadMediumDL_Spike_Pad_00_ci4[];
+extern u64 gSpikePadMediumDL_Spike_Pad_00_pal_rgba16[];
+extern Vtx gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_vtx_0[20];
+extern Gfx gSpikePadMediumDL_gSpikePadMediumDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gSpikePadMediumDL_SpikePad_layerOpaque[];
+extern Gfx gSpikePadMediumDL[];
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_col.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_col.c
new file mode 100644
index 000000000..f8f9f83dc
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_col.c
@@ -0,0 +1,49 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gSpikePadSmallCol_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+};
+
+CollisionPoly gSpikePadSmallCol_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf060 },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf060 },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf060 },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf060 },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf060 },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf060 },
+	{ 0x0000, 0x0007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf060 },
+	{ 0x0000, 0x0007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf060 },
+	{ 0x0000, 0x0004, 0x0002, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-3.725290298461914e-08), 0xfc18 },
+	{ 0x0000, 0x0004, 0x0001, 0x0006, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-3.725290298461914e-08), 0xfc18 },
+};
+
+Vec3s gSpikePadSmallCol_vertices[8] = {
+	{ -4000, 0, 4000 },
+	{ -4000, 1000, 4000 },
+	{ -4000, 1000, -4000 },
+	{ -4000, 0, -4000 },
+	{ 4000, 1000, -4000 },
+	{ 4000, 0, -4000 },
+	{ 4000, 1000, 4000 },
+	{ 4000, 0, 4000 },
+};
+
+CollisionHeader gSpikePadSmallCol_collisionHeader = {
+	-4000,
+	0,
+	-4000,
+	4000,
+	1000,
+	4000,
+	8,
+	gSpikePadSmallCol_vertices,
+	10,
+	gSpikePadSmallCol_polygons,
+	gSpikePadSmallCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_col.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_col.h
new file mode 100644
index 000000000..1c8b9c323
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gSpikePadSmallCol_polygonTypes[];
+extern CollisionPoly gSpikePadSmallCol_polygons[];
+extern Vec3s gSpikePadSmallCol_vertices[8];
+extern CollisionHeader gSpikePadSmallCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_model.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_model.c
new file mode 100644
index 000000000..da1d03d6b
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_model.c
@@ -0,0 +1,116 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gSpikePadSmallDL_Spike_Pad_00_ci4[] = {
+	0x0000001111111111, 0x2122222322222211, 0x1111101011100000, 0x1100000000001021, 0x2000044455651000, 0x5400444400415045, 0x0001544544765556, 0x5005855444049742, 
+	0x2145668755055000, 0x04455545559a779b, 0xbbbbbcbbbbaaa79d, 0xa55a777879550001, 0x210667d876956995, 0x4545958785877d7a, 0xbbccbbbbbbede8da, 0xa75977d7a8854411, 
+	0x1216878d778aaa98, 0x5659887864499aa8, 0xdebbbedebbbd767a, 0x7b7ae7ad96559500, 0x105588a7cfccb778, 0x7568886410586efc, 0xffba7adadeda5677, 0xee7ffffaa8898954, 
+	0x1046a87fb8007d89, 0x645556445568bf91, 0x49adada7dada6998, 0x7bce416bd7979640, 0x108aeafa21110476, 0x85456565546ec511, 0x2447daaaadda6887, 0xec51444068977540, 
+	0x108a8ce000011046, 0x55454444548d4010, 0x11407add7aa8587a, 0xf810110000a87941, 0x10dd8e5001111115, 0x9954444461a91111, 0x11110aed7a7997da, 0xb50012220169d851, 
+	0x218dde1001122210, 0x6454444554951112, 0x22210697ad8a8a87, 0xe00122222209d851, 0x21597d0011222222, 0x5454445669601122, 0x33321688a77aea7a, 0x8012233333296961, 
+	0x3206590112333331, 0x4549565856541233, 0x333329a866abaeaa, 0x7012333333478511, 0x1151651223333330, 0x05a5559666502233, 0x3333187787aeddaa, 0x712333333278a911, 
+	0x1079486123333315, 0x8a65565966561333, 0x3331678867ddadad, 0xb5233333259a7800, 0x0477557803333065, 0x6966998686765133, 0x320a898589ade7ee, 0xba5233315698a840, 
+	0x1488864456564964, 0x4956999998996667, 0x567778879769987d, 0xdad7689597877850, 0x149577889968d796, 0x966656989896a568, 0x6877aaa968977a88, 0x7786787688788890, 
+	0x146a8988668a9565, 0x8698946888997698, 0x88687a769997dd99, 0x554688898a78a890, 0x1469887898a94686, 0x6966756866968989, 0x8998a786668dde77, 0x95459989787a7680, 
+	0x0565999969889966, 0x6669885558699899, 0x888897955977ad98, 0x6506999987787995, 0x46d9a79696669888, 0x9669999599999968, 0x8a788976987aa888, 0x9550688687aad784, 
+	0x46877d9888964789, 0x6655698656999969, 0x888766597699988a, 0x960466588aa89760, 0x16787d65998a9669, 0x666684b865658999, 0x9785664469559879, 0x98041557898a8890, 
+	0x16d89da999896695, 0x555697a696658959, 0x8898695696567889, 0x4629466887888791, 0x15dd79678879697d, 0xa9a778d796668999, 0x8889969699997896, 0x662654698a869891, 
+	0x157ada99aeeda87d, 0xda8ad78d9796977b, 0xdd88899999956965, 0x5467867899988870, 0x0577b8acbd8988a8, 0xaa868a89d796dcea, 0x9a7898a799869669, 0x69ba645a998987a4, 
+	0x24e889be41000577, 0xa6866798789ab900, 0x1148669887795666, 0x9b8111115a8869d5, 0x15d97ee00000005a, 0x778878d777db6010, 0x1100559778898986, 0xd9022112167a96a5, 
+	0x25a77c5100111119, 0x97768a7ad8a70011, 0x1111047778797896, 0xa111222211ed8860, 0x14797c4021222220, 0x7a7988adddd91112, 0x222215aa88a8a996, 0x91122232315a9671, 
+	0x04a97a1012223332, 0xa7896a887a840111, 0x2232207a69986655, 0x5123333333340681, 0x04dddd4122333332, 0xa7788987daa60012, 0x333334a898788996, 0x0223333333159a94, 
+	0x0699ed0123333330, 0xd787777add860123, 0x333329788a98a7a9, 0x6233333333677a55, 0x1089da5233333328, 0xa87aa777aaa91223, 0x3333487778897886, 0xa033333334a7aa61, 
+	0x149dbdd43333319a, 0x9978886989784123, 0x3324a875977777a7, 0xa91333324787aa60, 0x148dbd9ea51059d7, 0x8899759878779642, 0x146669999a7ae977, 0xada500467a7ddd60, 
+	0x14aabd7de88a7798, 0x89886957799da895, 0x654997788788a888, 0x7d889879998daa55, 0x15adbedd9779d796, 0x89898968a88aa699, 0x996999aaa777898d, 0x78a877778978ed50, 
+	0x057aeea99a877799, 0x899896998888a869, 0x97788777787aa867, 0x8aaeaadea7999764, 0x4888ada58aa7d789, 0x9886989aa9a99a78, 0x8a7978aa7aada887, 0x9addddadea777770, 
+	0x198d7788878a7786, 0x779965977777ee88, 0xd8778ad8dddda798, 0x87aedd7adadaae74, 0x0697daa89877d885, 0x8a8886968798775d, 0xa88987aa7aea8778, 0x87887877dadddde1, 
+	0x16688a78899a7866, 0xa77869997899979d, 0x869887a86d76988a, 0x9869597a798ada71, 0x06969869967aa888, 0x78a89899689987a7, 0x6879777867d79890, 0x6789aa8debd8ed71, 
+	0x4998ad89698d8889, 0x7898877796788da7, 0x9a78aa8795688857, 0x8a8aa8d77eee8d95, 0x04a6887796977877, 0x79787a86d8878ada, 0x87759a8569987778, 0x8778aada7daadd94, 
+	0x0587a99acbcba798, 0x59877956e8a99bff, 0xcb8668a98d877a97, 0x88ecccba8aadeb64, 0x40ad89df84004889, 0x6888866974aefd75, 0x0467968d7ddd7778, 0x6bc84449887ddb90, 
+	0x455988c000000146, 0x98966866968ce010, 0x1105889d77aa8988, 0xde40400109aeeb70, 0x45656e8111111115, 0x4656989569de4111, 0x11115799787aa88a, 0xb9000111107abba4, 
+	0x04544a1122222214, 0x5695658988ea1112, 0x22221977789a7d78, 0xa4001222224abb74, 0x0044451222333321, 0x9966597986a91122, 0x333325799897d854, 0x620022333327bba6, 
+	0x4050461223333331, 0x9965577a95841123, 0x333335878888a878, 0x61223333332beba0, 0x4065691233333330, 0x8966978886641233, 0x33333589979587aa, 0x701233333357eba0, 
+	0x0009552233333335, 0x5556679899542233, 0x33330697766d9daa, 0x7123333332ae9765, 0x0005404233333349, 0x9566d88996960333, 0x33318878a678a8dd, 0xd62333331daaad84, 
+	0x1005545803332995, 0x5986989968499433, 0x3309885a7ddead97, 0xd7703334abe77854, 0x11546669a6467896, 0x5587666996599689, 0x5678aed7ad77dd96, 0xaa7bdeddddaa8504, 
+	0x14554798a96da868, 0x9549445654594995, 0x4a877ddd8a799757, 0x7aebbe78989d5440, 0x0016469996599996, 0x6550444446556866, 0x59d787dda8aa9aa9, 0xa7bdddbda7765501, 
+	0x1411404445404044, 0x4011104456459565, 0x276a9a7889889999, 0x6877989404400411, 0x1011100101002004, 0x1111000044541000, 0x1544400051066959, 0x5454444440011022, 
+	
+};
+
+u64 gSpikePadSmallDL_Spike_Pad_00_pal_rgba16[] = {
+	0x2107188508430001, 0x2949398b41cd5a93, 0x52514a0f62d38c1d, 0xace36b157b99d62d, 
+};
+
+Vtx gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-4000, 0, -4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-4000, 0, 4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-4000, 1000, 4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-4000, 1000, -4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4000, 0, -4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4000, 0, 4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4000, 1000, 4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4000, 1000, -4000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_vtx_0[20] = {
+	{{ {-4000, 0, 4000}, 0, {-2064, -184}, {129, 0, 0, 255} }},
+	{{ {-4000, 1000, 4000}, 0, {-2064, 72}, {129, 0, 0, 255} }},
+	{{ {-4000, 1000, -4000}, 0, {-16, 72}, {129, 0, 0, 255} }},
+	{{ {-4000, 0, -4000}, 0, {-16, -184}, {129, 0, 0, 255} }},
+	{{ {-4000, 0, -4000}, 0, {-16, -184}, {0, 0, 129, 255} }},
+	{{ {-4000, 1000, -4000}, 0, {-16, 72}, {0, 0, 129, 255} }},
+	{{ {4000, 1000, -4000}, 0, {2032, 72}, {0, 0, 129, 255} }},
+	{{ {4000, 0, -4000}, 0, {2032, -184}, {0, 0, 129, 255} }},
+	{{ {4000, 0, -4000}, 0, {2032, -184}, {127, 0, 0, 255} }},
+	{{ {4000, 1000, -4000}, 0, {2032, 72}, {127, 0, 0, 255} }},
+	{{ {4000, 1000, 4000}, 0, {4080, 72}, {127, 0, 0, 255} }},
+	{{ {4000, 0, 4000}, 0, {4080, -184}, {127, 0, 0, 255} }},
+	{{ {4000, 0, 4000}, 0, {4080, -184}, {0, 0, 127, 255} }},
+	{{ {4000, 1000, 4000}, 0, {4080, 72}, {0, 0, 127, 255} }},
+	{{ {-4000, 1000, 4000}, 0, {6128, 72}, {0, 0, 127, 255} }},
+	{{ {-4000, 0, 4000}, 0, {6128, -184}, {0, 0, 127, 255} }},
+	{{ {4000, 1000, -4000}, 0, {2032, -16}, {0, 127, 0, 255} }},
+	{{ {-4000, 1000, -4000}, 0, {-16, -16}, {0, 127, 0, 255} }},
+	{{ {-4000, 1000, 4000}, 0, {-16, 2032}, {0, 127, 0, 255} }},
+	{{ {4000, 1000, 4000}, 0, {2032, 2032}, {0, 127, 0, 255} }},
+};
+
+Gfx gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gSpikePadSmallDL_SpikePad_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gSpikePadSmallDL_Spike_Pad_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 15),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gSpikePadSmallDL_Spike_Pad_00_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx gSpikePadSmallDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gSpikePadSmallDL_SpikePad_layerOpaque),
+	gsSPDisplayList(gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_model.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_model.h
new file mode 100644
index 000000000..501dbfa78
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_model.h
@@ -0,0 +1,7 @@
+extern u64 gSpikePadSmallDL_Spike_Pad_00_ci4[];
+extern u64 gSpikePadSmallDL_Spike_Pad_00_pal_rgba16[];
+extern Vtx gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_vtx_0[20];
+extern Gfx gSpikePadSmallDL_gSpikePadSmallDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gSpikePadSmallDL_SpikePad_layerOpaque[];
+extern Gfx gSpikePadSmallDL[];
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_large_model.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_large_model.c
new file mode 100644
index 000000000..a71658b8a
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_large_model.c
@@ -0,0 +1,213 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gSpikesLargeDL_Spike_Pad_03_ci4[] = {
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0100000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0200000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000003, 0x3244000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000003, 0x5242000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, 0x5226000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000005, 0x5262000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000055, 0x5272400000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000058, 0x8264400000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000058, 0x8224900000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000058, 0x8244900000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000558, 0x8249900000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000588, 0x8249990000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000588, 0x8244490000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000888, 0x8244490000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000005888, 0x8244490000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000005888, 0x822249a000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008888, 0x822249a000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000008888, 0x826249a000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008888, 0x82724ab000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000088888, 0x52649aa000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000088888, 0x52249aaa00000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000088888, 0x52449aaa00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000088885, 0x32449aaa00000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000888885, 0x32499aaa00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000588853, 0x32499aaab0000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000558853, 0x12499aaab0000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000555551, 0x12499aaab0000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000555531, 0x12499aabb0000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003555331, 0x12999aabbb000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000003333331, 0x12999aabbb000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003333331, 0x12999aaaaa000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000001113331, 0x12999aaaaa000000, 0x0000000000000000, 0x0000000000000000, 0x0000000001113331, 0x12499aa999000000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000000c113311, 0x124999a949900000, 0x0000000000000000, 0x0000000000000000, 0x00000000dc111311, 0x1249999444900000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000000dccc1311, 0xc244499444400000, 0x0000000000000000, 0x0000000000000000, 0x00000000ddcc111c, 0xc244444444400000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000000bdcc1ccc, 0xc244444444440000, 0x0000000000000000, 0x0000000000000000, 0x0000000abddccccc, 0xd244444222220000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000babdccccd, 0xd244444662260000, 0x0000000000000000, 0x0000000000000000, 0x0000000babdcdddd, 0xd222442666670000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000a4bbdbddd, 0xd222242777777000, 0x0000000000000000, 0x0000000000000000, 0x000000a94bbaaddd, 0xb26222677777e000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000944b929ddb, 0xb26222677777e000, 0x0000000000000000, 0x0000000000000000, 0x000000449b279bdb, 0xb26222677777e000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000024aa779bdb, 0xd262227777777700, 0x0000000000000000, 0x0000000000000000, 0x00000774a9e74bbb, 0xd2622677e7776600, 0x0000000000000000, 
+	0x0000000000000000, 0x000007e2a4e74bab, 0xb262267777666200, 0x0000000000000000, 0x0000000000000000, 0x000002e696e74aab, 0xb2622677e7662400, 0x0000000000000000, 
+	0x0000000000000000, 0x0000047767e6499b, 0xb262267777624400, 0x0000000000000000, 0x0000000000000000, 0x0000047ee7e6449b, 0xa262266777624220, 0x0000000000000000, 
+	0x0000000000000000, 0x00004477e776444a, 0xa262426777624260, 0x0000000000000000, 0x0000000000000000, 0x00009927e7772249, 0x9272426776222260, 0x0000000000000000, 
+	0x0000000000000000, 0x00009946eee76644, 0x9272222666222260, 0x0000000000000000, 0x0000000000000000, 0x00069a92eeeee724, 0x4272222666227eee, 0x0000000000000000, 
+	
+};
+
+u64 gSpikesLargeDL_Spike_Pad_03_pal_rgba16[] = {
+	0x20c66b1718c5941f, 0x20c7bd6918851085, 0xd67129093149398b, 0x5a9349cf10430000
+};
+
+Vtx gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-15991, 1000, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-15991, 1000, 16168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-15991, 5429, 16168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-15991, 5429, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 1000, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 1000, 16168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 5429, 16168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {16000, 5429, -16000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_0[96] = {
+	{{ {-11949, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {-11949, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {-11949, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-11949, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-15991, 1000, 12097}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, 12097}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, 12097}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, 12097}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, 14772}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, 14772}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, 14772}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, 14772}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, 9418}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, 9418}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, 9418}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, 9418}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-9331, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {-9331, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {-9331, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-9331, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-14609, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {-14609, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {-14609, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-14609, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-4008, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {-4008, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {-4008, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-4008, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-1390, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {-1390, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {-1390, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-1390, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-6668, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {-6668, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {-6668, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-6668, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-15991, 1000, 4069}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, 4069}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, 4069}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, 4069}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, 6744}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, 6744}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, 6744}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, 6744}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, 1390}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, 1390}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, 1390}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, 1390}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {3962, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {3962, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {3962, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {3962, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {6579, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {6579, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {6579, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {6579, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {1301, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {1301, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {1301, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {1301, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {11903, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {11903, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {11903, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {11903, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {14521, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {14521, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {14521, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {14521, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {9242, 1000, -16000}, 0, {22556, 2032}, {127, 0, 0, 255} }},
+	{{ {9242, 5429, -16000}, 0, {22556, -16}, {127, 0, 0, 255} }},
+	{{ {9242, 5429, 16168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {9242, 1000, 16168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-15991, 1000, -3963}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, -3963}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, -3963}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, -3963}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, -1288}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, -1288}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, -1288}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, -1288}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, -6642}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, -6642}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, -6642}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, -6642}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, -11991}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, -11991}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, -11991}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, -11991}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, -9316}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, -9316}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, -9316}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, -9316}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 1000, -14670}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-15991, 5429, -14670}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 5429, -14670}, 0, {22671, -16}, {0, 0, 129, 255} }},
+	{{ {16000, 1000, -14670}, 0, {22671, 2032}, {0, 0, 129, 255} }},
+};
+
+Gfx gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_0 + 0, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
+	gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
+	gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
+	gsSPVertex(gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_0 + 32, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
+	gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
+	gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
+	gsSPVertex(gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_0 + 64, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
+	gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
+	gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gSpikesLargeDL_Spikes2_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gSpikesLargeDL_Spike_Pad_03_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 14),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gSpikesLargeDL_Spike_Pad_03_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx gSpikesLargeDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gSpikesLargeDL_Spikes2_layerOpaque),
+	gsSPDisplayList(gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_large_model.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_large_model.h
new file mode 100644
index 000000000..e977bf87e
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_large_model.h
@@ -0,0 +1,7 @@
+extern u64 gSpikesLargeDL_Spike_Pad_03_ci4[];
+extern u64 gSpikesLargeDL_Spike_Pad_03_pal_rgba16[];
+extern Vtx gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_vtx_0[96];
+extern Gfx gSpikesLargeDL_gSpikesLargeDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gSpikesLargeDL_Spikes2_layerOpaque[];
+extern Gfx gSpikesLargeDL[];
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_medium_model.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_medium_model.c
new file mode 100644
index 000000000..1b767b736
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_medium_model.c
@@ -0,0 +1,152 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gSpikesMediumDL_Spike_Pad_03_ci4[] = {
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0100000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0200000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000003, 0x3244000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000003, 0x5242000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, 0x5226000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000005, 0x5262000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000055, 0x5272400000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000058, 0x8264400000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000058, 0x8224900000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000058, 0x8244900000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000558, 0x8249900000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000588, 0x8249990000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000588, 0x8244490000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000888, 0x8244490000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000005888, 0x8244490000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000005888, 0x822249a000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008888, 0x822249a000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000008888, 0x826249a000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008888, 0x82724ab000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000088888, 0x52649aa000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000088888, 0x52249aaa00000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000088888, 0x52449aaa00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000088885, 0x32449aaa00000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000888885, 0x32499aaa00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000588853, 0x32499aaab0000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000558853, 0x12499aaab0000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000555551, 0x12499aaab0000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000555531, 0x12499aabb0000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003555331, 0x12999aabbb000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000003333331, 0x12999aabbb000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003333331, 0x12999aaaaa000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000001113331, 0x12999aaaaa000000, 0x0000000000000000, 0x0000000000000000, 0x0000000001113331, 0x12499aa999000000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000000c113311, 0x124999a949900000, 0x0000000000000000, 0x0000000000000000, 0x00000000dc111311, 0x1249999444900000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000000dccc1311, 0xc244499444400000, 0x0000000000000000, 0x0000000000000000, 0x00000000ddcc111c, 0xc244444444400000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000000bdcc1ccc, 0xc244444444440000, 0x0000000000000000, 0x0000000000000000, 0x0000000abddccccc, 0xd244444222220000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000babdccccd, 0xd244444662260000, 0x0000000000000000, 0x0000000000000000, 0x0000000babdcdddd, 0xd222442666670000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000a4bbdbddd, 0xd222242777777000, 0x0000000000000000, 0x0000000000000000, 0x000000a94bbaaddd, 0xb26222677777e000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000944b929ddb, 0xb26222677777e000, 0x0000000000000000, 0x0000000000000000, 0x000000449b279bdb, 0xb26222677777e000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000024aa779bdb, 0xd262227777777700, 0x0000000000000000, 0x0000000000000000, 0x00000774a9e74bbb, 0xd2622677e7776600, 0x0000000000000000, 
+	0x0000000000000000, 0x000007e2a4e74bab, 0xb262267777666200, 0x0000000000000000, 0x0000000000000000, 0x000002e696e74aab, 0xb2622677e7662400, 0x0000000000000000, 
+	0x0000000000000000, 0x0000047767e6499b, 0xb262267777624400, 0x0000000000000000, 0x0000000000000000, 0x0000047ee7e6449b, 0xa262266777624220, 0x0000000000000000, 
+	0x0000000000000000, 0x00004477e776444a, 0xa262426777624260, 0x0000000000000000, 0x0000000000000000, 0x00009927e7772249, 0x9272426776222260, 0x0000000000000000, 
+	0x0000000000000000, 0x00009946eee76644, 0x9272222666222260, 0x0000000000000000, 0x0000000000000000, 0x00069a92eeeee724, 0x4272222666227eee, 0x0000000000000000, 
+	
+};
+
+u64 gSpikesMediumDL_Spike_Pad_03_pal_rgba16[] = {
+	0x20c66b1718c5941f, 0x20c7bd6918851085, 0xd67129093149398b, 0x5a9349cf10430000
+};
+
+Vtx gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-7991, 1000, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-7991, 1000, 8168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-7991, 5429, 8168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-7991, 5429, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 1000, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 1000, 8168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 5429, 8168}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {8000, 5429, -8000}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_vtx_0[48] = {
+	{{ {-3949, 1000, -8000}, 0, {10315, 2032}, {127, 0, 0, 255} }},
+	{{ {-3949, 5429, -8000}, 0, {10315, -16}, {127, 0, 0, 255} }},
+	{{ {-3949, 5429, 8168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-3949, 1000, 8168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-7991, 1000, 4097}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 5429, 4097}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 5429, 4097}, 0, {10304, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 1000, 4097}, 0, {10304, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 1000, 6772}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 5429, 6772}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 5429, 6772}, 0, {10304, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 1000, 6772}, 0, {10304, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 1000, 1418}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 5429, 1418}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 5429, 1418}, 0, {10304, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 1000, 1418}, 0, {10304, 2032}, {0, 0, 129, 255} }},
+	{{ {-1331, 1000, -8000}, 0, {10315, 2032}, {127, 0, 0, 255} }},
+	{{ {-1331, 5429, -8000}, 0, {10315, -16}, {127, 0, 0, 255} }},
+	{{ {-1331, 5429, 8168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-1331, 1000, 8168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-6609, 1000, -8000}, 0, {10315, 2032}, {127, 0, 0, 255} }},
+	{{ {-6609, 5429, -8000}, 0, {10315, -16}, {127, 0, 0, 255} }},
+	{{ {-6609, 5429, 8168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-6609, 1000, 8168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {3992, 1000, -8000}, 0, {10315, 2032}, {127, 0, 0, 255} }},
+	{{ {3992, 5429, -8000}, 0, {10315, -16}, {127, 0, 0, 255} }},
+	{{ {3992, 5429, 8168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {3992, 1000, 8168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {6610, 1000, -8000}, 0, {10315, 2032}, {127, 0, 0, 255} }},
+	{{ {6610, 5429, -8000}, 0, {10315, -16}, {127, 0, 0, 255} }},
+	{{ {6610, 5429, 8168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {6610, 1000, 8168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {1332, 1000, -8000}, 0, {10315, 2032}, {127, 0, 0, 255} }},
+	{{ {1332, 5429, -8000}, 0, {10315, -16}, {127, 0, 0, 255} }},
+	{{ {1332, 5429, 8168}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {1332, 1000, 8168}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-7991, 1000, -3931}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 5429, -3931}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 5429, -3931}, 0, {10304, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 1000, -3931}, 0, {10304, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 1000, -1256}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 5429, -1256}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 5429, -1256}, 0, {10304, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 1000, -1256}, 0, {10304, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 1000, -6610}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-7991, 5429, -6610}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 5429, -6610}, 0, {10304, -16}, {0, 0, 129, 255} }},
+	{{ {8000, 1000, -6610}, 0, {10304, 2032}, {0, 0, 129, 255} }},
+};
+
+Gfx gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_vtx_0 + 0, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
+	gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
+	gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
+	gsSPVertex(gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_vtx_0 + 32, 16, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gSpikesMediumDL_Spikes2_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gSpikesMediumDL_Spike_Pad_03_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 14),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gSpikesMediumDL_Spike_Pad_03_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx gSpikesMediumDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gSpikesMediumDL_Spikes2_layerOpaque),
+	gsSPDisplayList(gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_medium_model.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_medium_model.h
new file mode 100644
index 000000000..169560c2f
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_medium_model.h
@@ -0,0 +1,7 @@
+extern u64 gSpikesMediumDL_Spike_Pad_03_ci4[];
+extern u64 gSpikesMediumDL_Spike_Pad_03_pal_rgba16[];
+extern Vtx gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_vtx_0[48];
+extern Gfx gSpikesMediumDL_gSpikesMediumDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gSpikesMediumDL_Spikes2_layerOpaque[];
+extern Gfx gSpikesMediumDL[];
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_small_model.c b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_small_model.c
new file mode 100644
index 000000000..83242756e
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_small_model.c
@@ -0,0 +1,121 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gSpikesSmallDL_Spike_Pad_03_ci4[] = {
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0100000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0200000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3200000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x3240000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000003, 0x3244000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000003, 0x5242000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000005, 0x5226000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000005, 0x5262000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000055, 0x5272400000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000058, 0x8264400000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000058, 0x8224900000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000058, 0x8244900000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000558, 0x8249900000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000588, 0x8249990000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000588, 0x8244490000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000888, 0x8244490000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000005888, 0x8244490000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000005888, 0x822249a000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008888, 0x822249a000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000008888, 0x826249a000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000008888, 0x82724ab000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000088888, 0x52649aa000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000088888, 0x52249aaa00000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000088888, 0x52449aaa00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000088885, 0x32449aaa00000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000888885, 0x32499aaa00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000588853, 0x32499aaab0000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000558853, 0x12499aaab0000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000555551, 0x12499aaab0000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000555531, 0x12499aabb0000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003555331, 0x12999aabbb000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000003333331, 0x12999aabbb000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003333331, 0x12999aaaaa000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000001113331, 0x12999aaaaa000000, 0x0000000000000000, 0x0000000000000000, 0x0000000001113331, 0x12499aa999000000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000000c113311, 0x124999a949900000, 0x0000000000000000, 0x0000000000000000, 0x00000000dc111311, 0x1249999444900000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000000dccc1311, 0xc244499444400000, 0x0000000000000000, 0x0000000000000000, 0x00000000ddcc111c, 0xc244444444400000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000000bdcc1ccc, 0xc244444444440000, 0x0000000000000000, 0x0000000000000000, 0x0000000abddccccc, 0xd244444222220000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000babdccccd, 0xd244444662260000, 0x0000000000000000, 0x0000000000000000, 0x0000000babdcdddd, 0xd222442666670000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000a4bbdbddd, 0xd222242777777000, 0x0000000000000000, 0x0000000000000000, 0x000000a94bbaaddd, 0xb26222677777e000, 0x0000000000000000, 
+	0x0000000000000000, 0x000000944b929ddb, 0xb26222677777e000, 0x0000000000000000, 0x0000000000000000, 0x000000449b279bdb, 0xb26222677777e000, 0x0000000000000000, 
+	0x0000000000000000, 0x00000024aa779bdb, 0xd262227777777700, 0x0000000000000000, 0x0000000000000000, 0x00000774a9e74bbb, 0xd2622677e7776600, 0x0000000000000000, 
+	0x0000000000000000, 0x000007e2a4e74bab, 0xb262267777666200, 0x0000000000000000, 0x0000000000000000, 0x000002e696e74aab, 0xb2622677e7662400, 0x0000000000000000, 
+	0x0000000000000000, 0x0000047767e6499b, 0xb262267777624400, 0x0000000000000000, 0x0000000000000000, 0x0000047ee7e6449b, 0xa262266777624220, 0x0000000000000000, 
+	0x0000000000000000, 0x00004477e776444a, 0xa262426777624260, 0x0000000000000000, 0x0000000000000000, 0x00009927e7772249, 0x9272426776222260, 0x0000000000000000, 
+	0x0000000000000000, 0x00009946eee76644, 0x9272222666222260, 0x0000000000000000, 0x0000000000000000, 0x00069a92eeeee724, 0x4272222666227eee, 0x0000000000000000, 
+	
+};
+
+u64 gSpikesSmallDL_Spike_Pad_03_pal_rgba16[] = {
+	0x20c66b1718c5941f, 0x20c7bd6918851085, 0xd67129093149398b, 0x5a9349cf10430000
+};
+
+Vtx gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-4042, 1000, -4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-4042, 1000, 4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-4042, 5429, 4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-4042, 5429, -4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4134, 1000, -4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4134, 1000, 4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4134, 5429, 4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {4134, 5429, -4130}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_vtx_0[24] = {
+	{{ {0, 1000, -4130}, 0, {4264, 2032}, {127, 0, 0, 255} }},
+	{{ {0, 5429, -4130}, 0, {4264, -16}, {127, 0, 0, 255} }},
+	{{ {0, 5429, 4130}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {0, 1000, 4130}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-4042, 1000, 59}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-4042, 5429, 59}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {4134, 5429, 59}, 0, {4264, -16}, {0, 0, 129, 255} }},
+	{{ {4134, 1000, 59}, 0, {4264, 2032}, {0, 0, 129, 255} }},
+	{{ {-4042, 1000, 2734}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-4042, 5429, 2734}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {4134, 5429, 2734}, 0, {4264, -16}, {0, 0, 129, 255} }},
+	{{ {4134, 1000, 2734}, 0, {4264, 2032}, {0, 0, 129, 255} }},
+	{{ {-4042, 1000, -2620}, 0, {-2056, 2032}, {0, 0, 129, 255} }},
+	{{ {-4042, 5429, -2620}, 0, {-2056, -16}, {0, 0, 129, 255} }},
+	{{ {4134, 5429, -2620}, 0, {4264, -16}, {0, 0, 129, 255} }},
+	{{ {4134, 1000, -2620}, 0, {4264, 2032}, {0, 0, 129, 255} }},
+	{{ {2618, 1000, -4130}, 0, {4264, 2032}, {127, 0, 0, 255} }},
+	{{ {2618, 5429, -4130}, 0, {4264, -16}, {127, 0, 0, 255} }},
+	{{ {2618, 5429, 4130}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {2618, 1000, 4130}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+	{{ {-2661, 1000, -4130}, 0, {4264, 2032}, {127, 0, 0, 255} }},
+	{{ {-2661, 5429, -4130}, 0, {4264, -16}, {127, 0, 0, 255} }},
+	{{ {-2661, 5429, 4130}, 0, {-2056, -16}, {127, 0, 0, 255} }},
+	{{ {-2661, 1000, 4130}, 0, {-2056, 2032}, {127, 0, 0, 255} }},
+};
+
+Gfx gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_vtx_0 + 0, 24, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gSpikesSmallDL_Spikes2_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gSpikesSmallDL_Spike_Pad_03_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 14),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gSpikesSmallDL_Spike_Pad_03_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx gSpikesSmallDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gSpikesSmallDL_Spikes2_layerOpaque),
+	gsSPDisplayList(gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_small_model.h b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_small_model.h
new file mode 100644
index 000000000..35b74aa28
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_small_model.h
@@ -0,0 +1,7 @@
+extern u64 gSpikesSmallDL_Spike_Pad_03_ci4[];
+extern u64 gSpikesSmallDL_Spike_Pad_03_pal_rgba16[];
+extern Vtx gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_vtx_0[24];
+extern Gfx gSpikesSmallDL_gSpikesSmallDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gSpikesSmallDL_Spikes2_layerOpaque[];
+extern Gfx gSpikesSmallDL[];
diff --git a/assets_hm_pack/objects/object_floor_spikes/object_floor_spikes.h b/assets_hm_pack/objects/object_floor_spikes/object_floor_spikes.h
new file mode 100644
index 000000000..d4bdd6657
--- /dev/null
+++ b/assets_hm_pack/objects/object_floor_spikes/object_floor_spikes.h
@@ -0,0 +1,16 @@
+#ifndef OBJECT_FLOOR_SPIKES_H
+#define OBJECT_FLOOR_SPIKES_H 1
+
+#include "floor_spike_base_small_col.h"
+#include "floor_spike_base_small_model.h"
+#include "floor_spike_spikes_small_model.h"
+
+#include "floor_spike_base_medium_col.h"
+#include "floor_spike_base_medium_model.h"
+#include "floor_spike_spikes_medium_model.h"
+
+#include "floor_spike_base_large_col.h"
+#include "floor_spike_base_large_model.h"
+#include "floor_spike_spikes_large_model.h"
+
+#endif
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_col.c b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_col.c
new file mode 100644
index 000000000..d1838600b
--- /dev/null
+++ b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_col.c
@@ -0,0 +1,49 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gHammerPegBaseDL_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+};
+
+CollisionPoly gHammerPegBaseDL_polygons[] = {
+	{ 0x0000, 0x0001, 0x0002, 0x0000, COLPOLY_SNORMAL(-0.9905121326446533), COLPOLY_SNORMAL(0.13742533326148987), COLPOLY_SNORMAL(-6.007052633094645e-09), 0xfa32 },
+	{ 0x0000, 0x0004, 0x0001, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.13742533326148987), COLPOLY_SNORMAL(-0.9905121326446533), 0xfa32 },
+	{ 0x0000, 0x0006, 0x0004, 0x0005, COLPOLY_SNORMAL(0.9905121326446533), COLPOLY_SNORMAL(0.13742533326148987), COLPOLY_SNORMAL(-6.007052633094645e-09), 0xfa32 },
+	{ 0x0000, 0x0002, 0x0006, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.13742533326148987), COLPOLY_SNORMAL(0.9905121326446533), 0xfa32 },
+	{ 0x0000, 0x0003, 0x0007, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.334465941724375e-08), 0xfc7c },
+	{ 0x0000, 0x0001, 0x0000, 0x0003, COLPOLY_SNORMAL(-0.9905121326446533), COLPOLY_SNORMAL(0.13742536306381226), COLPOLY_SNORMAL(-5.956655169114811e-09), 0xfa32 },
+	{ 0x0000, 0x0004, 0x0003, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.13742536306381226), COLPOLY_SNORMAL(-0.9905121326446533), 0xfa32 },
+	{ 0x0000, 0x0006, 0x0005, 0x0007, COLPOLY_SNORMAL(0.9905121326446533), COLPOLY_SNORMAL(0.13742536306381226), COLPOLY_SNORMAL(-5.956655169114811e-09), 0xfa32 },
+	{ 0x0000, 0x0002, 0x0007, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.13742536306381226), COLPOLY_SNORMAL(0.9905121326446533), 0xfa32 },
+	{ 0x0000, 0x0003, 0x0000, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.334465941724375e-08), 0xfc7c },
+};
+
+Vec3s gHammerPegBaseDL_vertices[8] = {
+	{ -1375, 900, 1375 },
+	{ -1500, 0, -1500 },
+	{ -1500, 0, 1500 },
+	{ -1375, 900, -1375 },
+	{ 1500, 0, -1500 },
+	{ 1375, 900, -1375 },
+	{ 1500, 0, 1500 },
+	{ 1375, 900, 1375 },
+};
+
+CollisionHeader gHammerPegBaseDL_collisionHeader = {
+	-1500,
+	0,
+	-1500,
+	1500,
+	900,
+	1500,
+	8,
+	gHammerPegBaseDL_vertices,
+	10,
+	gHammerPegBaseDL_polygons,
+	gHammerPegBaseDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_col.h b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_col.h
new file mode 100644
index 000000000..8d153eb6d
--- /dev/null
+++ b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gHammerPegBaseDL_polygonTypes[];
+extern CollisionPoly gHammerPegBaseDL_polygons[];
+extern Vec3s gHammerPegBaseDL_vertices[8];
+extern CollisionHeader gHammerPegBaseDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_model.c b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_model.c
new file mode 100644
index 000000000..38d2afd9d
--- /dev/null
+++ b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_model.c
@@ -0,0 +1,93 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gHammerPegBaseDL_Hammer_Peg_02_ci8[] = {
+	0x0001000002030401, 0x0005060703080609, 0x0a030a0a0a060600, 0x0b00000100070000, 0x0c0d0c0e0c0f100e, 0x11111112130f0e14, 0x1516170e0e0e1518, 0x161419121312111a, 
+	0x1b1b1b1b1c1c1d05, 0x011d011c1c051d1e, 0x01011405051f1f20, 0x0501010105212101, 0x1b2120011c221c05, 0x1c1f01011c1c051b, 0x2221080105011b01, 0x2101210121011c01, 
+	0x20191b231c220114, 0x011c1c1c01052114, 0x01211414011c2424, 0x0124011c051c1c14, 0x192020141c241c05, 0x251c08051c011c01, 0x2401141c24010501, 0x05011c0505010501, 
+	0x1925141c1c1c051c, 0x1c0501141c140521, 0x0514221405262126, 0x2105052705141401, 0x191c08281c051401, 0x15011c211c151501, 0x051c22211c052605, 0x21011c011c1c2801, 
+	0x271c051405191405, 0x142601251427281c, 0x26140527251c1c05, 0x012121210121051c, 0x251c140515152205, 0x19051c01191c1c05, 0x151c150525212105, 0x1c211c0121210501, 
+	0x1c15271414141c1c, 0x1c271c2614151c25, 0x0522151c05212114, 0x2105012121142105, 0x151521151c1c2805, 0x1425141414011914, 0x1c05211c051c1c21, 0x05211c211c212101, 
+	0x15151c231c231c1c, 0x15291422191c151c, 0x251c1c151c222126, 0x1c1c1c141c140505, 0x222a2a2a1c1c1c2a, 0x1c011c1423052a01, 0x1c2a1c011c010101, 0x1c2a2a012a2a222a, 
+	0x0606060606060a06, 0x060404090a090604, 0x0700060706060604, 0x0606060704040606, 0x060a062b0606060a, 0x041f010106070706, 0x060606060606060a, 0x060604070a0a0606, 
+	
+};
+
+u64 gHammerPegBaseDL_Hammer_Peg_02_pal_rgba16[] = {
+	0x20c529491883294b, 0x2107318b18c520c7, 0x39cf210918851083, 0x8c615ad763176319, 0x739b6b5763596b59, 0x420f421152957c1f, 0x5a9552935ad539cb, 0x39cd31cd29072909, 
+	0x4a0f31494a514a53, 0x318941cd398b3989, 0x3a0f6357318d18c7, 
+};
+
+Vtx gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1500, 0, -1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1500, 0, 1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1500, 500, 1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1500, 500, -1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1500, 0, -1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1500, 0, 1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1500, 500, 1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1500, 500, -1500}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_vtx_0[20] = {
+	{{ {-1000, 500, 1000}, 0, {1008, -16}, {166, 90, 0, 255} }},
+	{{ {-1500, 0, -1500}, 0, {-16, 496}, {166, 90, 0, 255} }},
+	{{ {-1500, 0, 1500}, 0, {1008, 496}, {166, 90, 0, 255} }},
+	{{ {-1000, 500, -1000}, 0, {-16, -16}, {166, 90, 0, 255} }},
+	{{ {-1000, 500, -1000}, 0, {1008, -16}, {0, 90, 166, 255} }},
+	{{ {1500, 0, -1500}, 0, {-16, 496}, {0, 90, 166, 255} }},
+	{{ {-1500, 0, -1500}, 0, {1008, 496}, {0, 90, 166, 255} }},
+	{{ {1000, 500, -1000}, 0, {-16, -16}, {0, 90, 166, 255} }},
+	{{ {1000, 500, -1000}, 0, {1008, -16}, {90, 90, 0, 255} }},
+	{{ {1500, 0, 1500}, 0, {-16, 496}, {90, 90, 0, 255} }},
+	{{ {1500, 0, -1500}, 0, {1008, 496}, {90, 90, 0, 255} }},
+	{{ {1000, 500, 1000}, 0, {-16, -16}, {90, 90, 0, 255} }},
+	{{ {1000, 500, 1000}, 0, {1008, -16}, {0, 90, 90, 255} }},
+	{{ {-1500, 0, 1500}, 0, {-16, 496}, {0, 90, 90, 255} }},
+	{{ {1500, 0, 1500}, 0, {1008, 496}, {0, 90, 90, 255} }},
+	{{ {-1000, 500, 1000}, 0, {-16, -16}, {0, 90, 90, 255} }},
+	{{ {-1000, 500, -1000}, 0, {-16, 418}, {0, 127, 0, 255} }},
+	{{ {1000, 500, 1000}, 0, {1008, 62}, {0, 127, 0, 255} }},
+	{{ {1000, 500, -1000}, 0, {-16, 62}, {0, 127, 0, 255} }},
+	{{ {-1000, 500, 1000}, 0, {1008, 418}, {0, 127, 0, 255} }},
+};
+
+Gfx gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_vtx_0 + 0, 20, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 11, 9, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 15, 13, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 19, 17, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gHammerPegBaseDL_Base_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gHammerPegBaseDL_Hammer_Peg_02_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 43),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gHammerPegBaseDL_Hammer_Peg_02_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx gHammerPegBaseDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gHammerPegBaseDL_Base_layerOpaque),
+	gsSPDisplayList(gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_model.h b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_model.h
new file mode 100644
index 000000000..11bbee30f
--- /dev/null
+++ b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_model.h
@@ -0,0 +1,7 @@
+extern u64 gHammerPegBaseDL_Hammer_Peg_02_ci8[];
+extern u64 gHammerPegBaseDL_Hammer_Peg_02_pal_rgba16[];
+extern Vtx gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_vtx_0[20];
+extern Gfx gHammerPegBaseDL_gHammerPegBaseDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gHammerPegBaseDL_Base_layerOpaque[];
+extern Gfx gHammerPegBaseDL[];
diff --git a/assets_hm_pack/objects/object_hammer_peg/hammer_peg_top_model.c b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_top_model.c
new file mode 100644
index 000000000..ebe687133
--- /dev/null
+++ b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_top_model.c
@@ -0,0 +1,163 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gHammerPegTopDL_Hammer_Peg_00_ci8[] = {
+	0x0001020304050506, 0x070803090a0a0b0c, 0x0d0e0f0f10111112, 0x0813140707150207, 0x0d161718191a1a1a, 0x19181b1c1d1e0e1f, 0x2021222300242526, 0x2728291e262a2b21, 
+	0x202c2d2e2f2c3026, 0x2731321e0d2e3317, 0x342c2a3524363726, 0x273828092c2f3739, 0x3a2c2a3b24393c21, 0x273d283e3f2f372e, 0x4030362e30413c2b, 0x42380f3f432c332a, 
+	0x4400174540464748, 0x494a2f3d4b24372e, 0x4438174c294d3c48, 0x1f292c000f24254e, 0x372e434c3c4f5051, 0x03522c2f2c40482b, 0x4a2b535455525655, 0x284a0f1f0a482429, 
+	0x4a2809573c4a5025, 0x58290f1f0a594529, 0x375a105425443c48, 0x2c375b495c2e4125, 0x345a1e5755243748, 0x005d321f5c2e2f33, 0x375e5f5455442941, 0x4b294049094b0d25, 
+	0x4844606120204d5e, 0x1e55382638262662, 0x3237636444204d36, 0x033c2c035c2e2433, 0x4444635448346539, 0x14292c0366664b59, 0x5e554e6732345632, 0x10685b692838002b, 
+	0x4444412a39295632, 0x6a324a6b29556c2b, 0x345e6d2a40525055, 0x1421236e29324b39, 0x5e44272e40293c36, 0x6b21406f293e7055, 0x5e44016141715025, 0x6b335128392e7241, 
+	0x39440941413c3724, 0x733329373d2a7239, 0x4125532d25507424, 0x73003c6d3d2a4139, 0x4132274141503a24, 0x733b5d073d2a4475, 0x236861224155402f, 0x7628777873765075, 
+	0x24242a582555242f, 0x3f0a79787376507a, 0x2e7b572e39512436, 0x21002966705e3326, 0x24727b3324514124, 0x7c002b2a4b45330d, 0x7b326c727d20205e, 0x267e4466327f454e, 
+	
+};
+
+u64 gHammerPegTopDL_Hammer_Peg_00_pal_rgba16[] = {
+	0x620ba4198b957acf, 0x9c17ac9d9c199bd7, 0x9393728d6a4b6249, 0x72cf624b6a0959c7, 0x830f82cd93519391, 0x8b51939751836209, 0x620759c561c77289, 0x7249830d7a8d7acd, 
+	0x394759c98b975189, 0x51c939036a8f82cf, 0x518528c1624d4943, 0x51c793d95a0b5a09, 0x49475a0749893901, 0x3103624f51cb30c1, 0x4985498741894143, 0x20816a4d83137ad1, 
+	0x49c941459b959c1b, 0x41475a0d39493147, 0x39458b53310572d1, 0x6293184149452907, 0x20c3310128c39395, 0x7b57390518816291, 0x728f4103414949cb, 0x835530c341875983, 
+	0x72916a9141056a8d, 0x8359104151876ad1, 0x3989598782d18311, 0x7b1361c561c920c5, 0x72d320c15a4d9353, 0x51cd520983532905, 0x724b3149628f520d, 0x8bd741c74185520b, 
+	
+};
+
+u64 gHammerPegTopDL_Hammer_Peg_01_ci8[] = {
+	0x0001020303040405, 0x0306040708090a05, 0x0b0c0d0e0f0e0305, 0x0a100e0e030a1107, 0x12011003130a1403, 0x0a0603150a0a0316, 0x17180d0a1906021a, 0x051b000a07091c0a, 
+	0x1d1e0d030d070e04, 0x041e030d04000505, 0x1f2010000419070e, 0x07020a2108021a0a, 0x100b0d0d0e190603, 0x140708070e0e0207, 0x220d1e23130e1024, 0x0704250313130311, 
+	0x26192713100d0e10, 0x06070019020e131a, 0x28292a2b1e2c020e, 0x2507030603030807, 0x2d2e022f2b240d30, 0x080d0d020e0a0e0e, 0x223119101f320301, 0x0d01020d0d251414, 
+	0x1028333435103637, 0x2301101913070303, 0x383333020f222538, 0x0d0c0d2c00101802, 0x3919103a3b02353c, 0x380d33010f030a00, 0x01353b2228281910, 0x3838103d352b2319, 
+	
+};
+
+u64 gHammerPegTopDL_Hammer_Peg_01_pal_rgba16[] = {
+	0x6a8d5a096a8f8353, 0x72d19c197b137b11, 0x73117b5393d76a4b, 0x728d624b8b957acf, 0x5a0ba45b6a4972cf, 0x6acf8b559c5b4985, 0x6a4d624d835593d5, 0x93d949438b534945, 
+	0xac578b9731035187, 0x83115a4b728f3945, 0x620b49c94145520b, 0x51c749893905520d, 0x628d7b15724b4987, 0x310551c97a8b9c17, 0x59c9414759c73907, 0x51cb390300000000
+};
+
+Vtx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1221, 402, -1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1221, 402, 1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1221, 4000, 1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1221, 4000, -1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1221, 402, -1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1221, 402, 1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1221, 4000, 1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1221, 4000, -1410}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_0[24] = {
+	{{ {-889, 3500, -513}, 0, {496, 172}, {166, 183, 204, 255} }},
+	{{ {0, 402, -860}, 0, {-16, 912}, {0, 250, 129, 255} }},
+	{{ {-745, 402, -430}, 0, {496, 912}, {146, 250, 193, 255} }},
+	{{ {0, 3500, -1026}, 0, {-16, 172}, {0, 183, 152, 255} }},
+	{{ {-1221, 3750, -705}, 0, {496, 78}, {147, 239, 193, 255} }},
+	{{ {-1221, 3750, 705}, 0, {-16, 78}, {147, 239, 63, 255} }},
+	{{ {-889, 3500, 513}, 0, {-16, 172}, {166, 183, 52, 255} }},
+	{{ {-745, 402, 430}, 0, {-16, 912}, {146, 250, 63, 255} }},
+	{{ {0, 3500, 1026}, 0, {496, 172}, {0, 183, 104, 255} }},
+	{{ {0, 402, 860}, 0, {496, 912}, {0, 250, 127, 255} }},
+	{{ {889, 3500, 513}, 0, {-16, 172}, {90, 183, 52, 255} }},
+	{{ {745, 402, 430}, 0, {-16, 912}, {110, 250, 63, 255} }},
+	{{ {889, 3500, -513}, 0, {496, 172}, {90, 183, 204, 255} }},
+	{{ {745, 402, -430}, 0, {496, 912}, {110, 250, 193, 255} }},
+	{{ {0, 3750, -1410}, 0, {-16, 78}, {0, 239, 130, 255} }},
+	{{ {1221, 3750, -705}, 0, {496, 78}, {109, 239, 193, 255} }},
+	{{ {0, 4000, -1215}, 0, {-16, -16}, {0, 107, 187, 255} }},
+	{{ {-1053, 4000, -608}, 0, {496, -16}, {197, 107, 222, 255} }},
+	{{ {-1053, 4000, 608}, 0, {-16, -16}, {197, 107, 34, 255} }},
+	{{ {0, 4000, 1215}, 0, {496, -16}, {0, 107, 69, 255} }},
+	{{ {0, 3750, 1410}, 0, {496, 78}, {0, 239, 126, 255} }},
+	{{ {1221, 3750, 705}, 0, {-16, 78}, {109, 239, 63, 255} }},
+	{{ {1053, 4000, 608}, 0, {-16, -16}, {59, 107, 34, 255} }},
+	{{ {1053, 4000, -608}, 0, {496, -16}, {59, 107, 222, 255} }},
+};
+
+Gfx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_0 + 0, 24, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 5, 4, 0, 0),
+	gsSP2Triangles(5, 0, 6, 0, 6, 0, 2, 0),
+	gsSP2Triangles(6, 2, 7, 0, 8, 6, 7, 0),
+	gsSP2Triangles(8, 7, 9, 0, 10, 8, 9, 0),
+	gsSP2Triangles(10, 9, 11, 0, 12, 10, 11, 0),
+	gsSP2Triangles(12, 11, 13, 0, 3, 12, 13, 0),
+	gsSP2Triangles(3, 13, 1, 0, 14, 12, 3, 0),
+	gsSP2Triangles(14, 15, 12, 0, 16, 15, 14, 0),
+	gsSP2Triangles(4, 16, 14, 0, 4, 14, 3, 0),
+	gsSP2Triangles(4, 17, 16, 0, 5, 17, 4, 0),
+	gsSP2Triangles(5, 18, 17, 0, 19, 18, 5, 0),
+	gsSP2Triangles(19, 5, 20, 0, 20, 5, 6, 0),
+	gsSP2Triangles(20, 6, 8, 0, 21, 20, 8, 0),
+	gsSP2Triangles(21, 8, 10, 0, 15, 21, 10, 0),
+	gsSP2Triangles(15, 10, 12, 0, 15, 22, 21, 0),
+	gsSP2Triangles(15, 23, 22, 0, 16, 23, 15, 0),
+	gsSP2Triangles(21, 22, 19, 0, 21, 19, 20, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_1[6] = {
+	{{ {1053, 4000, -608}, 0, {946, -272}, {59, 107, 222, 255} }},
+	{{ {0, 4000, 1215}, 0, {496, 496}, {0, 107, 69, 255} }},
+	{{ {1053, 4000, 608}, 0, {946, 240}, {59, 107, 34, 255} }},
+	{{ {-1053, 4000, -608}, 0, {46, -272}, {197, 107, 222, 255} }},
+	{{ {0, 4000, -1215}, 0, {496, -528}, {0, 107, 187, 255} }},
+	{{ {-1053, 4000, 608}, 0, {46, 240}, {197, 107, 34, 255} }},
+};
+
+Gfx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_1 + 0, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(0, 4, 3, 0, 3, 5, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gHammerPegTopDL_Side_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gHammerPegTopDL_Hammer_Peg_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 127),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gHammerPegTopDL_Hammer_Peg_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 255, 1024),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gHammerPegTopDL_Top_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gHammerPegTopDL_Hammer_Peg_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 61),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gHammerPegTopDL_Hammer_Peg_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 127, 1024),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 4, 0, G_TX_WRAP | G_TX_MIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx gHammerPegTopDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gHammerPegTopDL_Side_layerOpaque),
+	gsSPDisplayList(gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gHammerPegTopDL_Top_layerOpaque),
+	gsSPDisplayList(gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_hammer_peg/hammer_peg_top_model.h b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_top_model.h
new file mode 100644
index 000000000..1e4c1b5eb
--- /dev/null
+++ b/assets_hm_pack/objects/object_hammer_peg/hammer_peg_top_model.h
@@ -0,0 +1,12 @@
+extern u64 gHammerPegTopDL_Hammer_Peg_00_ci8[];
+extern u64 gHammerPegTopDL_Hammer_Peg_00_pal_rgba16[];
+extern u64 gHammerPegTopDL_Hammer_Peg_01_ci8[];
+extern u64 gHammerPegTopDL_Hammer_Peg_01_pal_rgba16[];
+extern Vtx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_0[24];
+extern Gfx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_vtx_1[6];
+extern Gfx gHammerPegTopDL_gHammerPegTopDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gHammerPegTopDL_Side_layerOpaque[];
+extern Gfx mat_gHammerPegTopDL_Top_layerOpaque[];
+extern Gfx gHammerPegTopDL[];
diff --git a/assets_hm_pack/objects/object_hammer_peg/object_hammer_peg.h b/assets_hm_pack/objects/object_hammer_peg/object_hammer_peg.h
new file mode 100644
index 000000000..f4efd3bd6
--- /dev/null
+++ b/assets_hm_pack/objects/object_hammer_peg/object_hammer_peg.h
@@ -0,0 +1,3 @@
+#include "hammer_peg_base_model.h"
+#include "hammer_peg_top_model.h"
+#include "hammer_peg_base_col.h"
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/gJumpToggleBorderDL.c b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpToggleBorderDL.c
new file mode 100644
index 000000000..3212e62b0
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpToggleBorderDL.c
@@ -0,0 +1,135 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gJumpToggleBorderDL_Jump_Platform_03_ia8[] = {
+	0x1101010101010101, 0x0101111111111111, 0x1101010101010101, 0x0101010111111111, 0x1111010101010101, 0x1111111111111111, 0x1111111111111101, 0x0101011111121111, 
+	0x1211110101010111, 0x1111111111111111, 0x1111111111111111, 0x1111111212121212, 0x1212121111111111, 0x1212121222221212, 0x1212121212121212, 0x1212121313232322, 
+	0x2513121212121212, 0x1313242424242424, 0x2313131313131313, 0x1313131425262525, 0x2626151313131323, 0x2425252626262626, 0x2525252525251515, 0x1414142627272727, 
+	0x2827251514242425, 0x2527282829292929, 0x2828272726262626, 0x1615262829292929, 0x2a2a282726262626, 0x28283a3a3c3c3b3b, 0x2a2a2a2828282828, 0x282828293b3b3b3b, 
+	0x3d3b2a282828283a, 0x3a3b3c3c3d3d3c3c, 0x3c2b2b2a2a2a2a2a, 0x2929293b3c3d3d3d, 0x3d3d3b2a2a3a3a3b, 0x3c3c3d3d3e3e3e3e, 0x3d3c3c3c3c3c3c2b, 0x2b2b3b3c3d3e3e3e, 
+	0x3e3d3c3c3b3c3c3d, 0x3e3d4e3e4e4e4e3e, 0x3e3e3d3d3d3d3d3c, 0x3c3c3d3e4e4e4e4e, 0x4e3e3d3d3d3d3d4e, 0x4e4e4e4e4e4e4e4e, 0x3e3e3e3e3e3e3e3d, 0x3d3d3e3e4e4e4f4e, 
+	0x4e4e4e3d3d4e4e4e, 0x4f4f4e4e4e4e4e4e, 0x3e3e3e3e4e4e3d3d, 0x3d3d4e4e4e4e4e4e, 0x4e4e4e3e3e4e4e4f, 0x4f4e4e4e5e4e4e4e, 0x4e3e3e4e4e4e4e4e, 0x3e4e4e4e4e5e5e5e, 
+	0x5e4e4e4e4e4f4e4e, 0x5e5e5e5e5e5e5e4e, 0x4d4e4e4e4e4e4d4d, 0x4d4e4e4e5e5e5e5e, 0x5e5e4e4e4e4f4e5e, 0x5e5e5e5e5e5d5e5e, 0x4d4d4d4e4e4e4d4e, 0x4d4d4e5d5d5e5e5e, 
+	0x5e5e5e4e4e5e5e5e, 0x5e5e5e5e5e5e5e5e, 0x4d4d4d4d5e5e4d4e, 0x4e4e5e5e5e5e5e5e, 0x5e5e5e4e4e5e5e5e, 0x5e5e5e5e5e5d5d5d, 0x4c4c4c4d5d5d5d5d, 0x4d5e5e5d5e5e5e6e, 
+	0x5e5e5e5d5d5d5d5e, 0x5e6e6e5d5d5d5d5d, 0x4b4b4b5c5d5d5d5d, 0x5d5e5d5d5e6d6d6e, 0x5d5d5d5d5d5e5d5e, 0x6e6e6d5d5d5d5d5c, 0x4b4b4b5c5c5d5c5d, 0x5d5e5d5d6d6d6d6d, 
+	0x6d5d5d5d5d5d5d5d, 0x6d6e6d5d6c5c5c5b, 0x4b4a4a5b5c5d5d5d, 0x5d5d5e5d6d6d6d6d, 0x6d5c5d5c5c5c5d5d, 0x6d6d6d5c6c5c5c5b, 0x4a4a4a5b5c5c5c5d, 0x5d5d5d5d6d6d6d6d, 
+	0x6c5c5c5c5c5c5c5c, 0x6d6d6d6c6c5c5c5b, 0x4a49495a5b5c5c5c, 0x5c5d5d6d6d6d6d6d, 0x6c5b5c5c5b5b5c5c, 0x6c6d6c6c6c6c5b5b, 0x4949495a5b5b5b5c, 0x5c5c5d6c6c6c6c6c, 
+	0x6c5c5c5b5b5b5b6b, 0x6c6c6c6b6b5b5a59, 0x494849495a5b5b5b, 0x5b5c5c6c6c6c6c6c, 0x6c5b5b5b5b5a5b5b, 0x6b6b6b5b5b5a5a59, 0x494848495a5a5a5b, 0x5b5b5c5c6c6b6b6c, 
+	0x5b5b5b5a5a5a5a5a, 0x6b6b6b5b5a5a5958, 0x4848484859595a5a, 0x5a5b5b5b6b6b6c6b, 0x5b5a5a5a59595a5a, 0x5a5a5a5a59595848, 0x4838384849594959, 0x5a5a5b5b5b5b5b5b, 
+	0x5a5a5a4949595959, 0x595a5a5959494848, 0x3837374848484949, 0x495a5a5a5a5b5b5a, 0x5a494a4948484848, 0x5959594949484848, 0x3737373748484848, 0x49495a5a5a5a5a5a, 
+	0x4949494848484848, 0x4849484848483837, 0x3727273738483848, 0x484849494a4a4a49, 0x4848483838374748, 0x4848484838373737, 0x2726263737373737, 0x3848484949494949, 
+	0x3838383737373737, 0x3748383837373726, 0x2626262637373737, 0x3737484849484848, 0x3837373736363636, 0x3737373737272626, 0x1516162626272737, 0x3636373838383838, 
+	0x3727362626252526, 0x3637372726262625, 0x1515151526262626, 0x2626373838383837, 0x2626262625252525, 0x2626262626262515, 0x1515151526262626, 0x2526262727272727, 
+	0x2626251515152525, 0x2626262626151514, 0x1515151515151515, 0x2525262727272726, 0x2616151515151515, 0x1525161615151414, 0x1404141515151515, 0x1515252626262626, 
+	0x1615151515141515, 0x1515151515151414, 0x0404041415151515, 0x1515151516161616, 0x1515151414141414, 0x1414151515151404, 0x0303040414151414, 0x1415151516161616, 
+	0x1515141414041414, 0x1414141414140404, 0x0303030404041414, 0x1414151515151515, 0x1404040403030303, 0x0414140404040403, 0x0303030304040404, 0x0404141415151515, 
+	0x0404040403030303, 0x0304040404040303, 0x0303030303030303, 0x0404040404050504, 0x0404030303030303, 0x0303040403040303, 0x0302030303030303, 0x0303040404040404, 
+	0x0403030303030303, 0x0303030403030302, 0x0202020303030303, 0x0303030404040404, 0x0303030202020203, 0x0303030303030302, 0x0202020203030303, 0x0303030304040404, 
+	0x0303020202020202, 0x0203030303030302, 0x0202020203030302, 0x0202030303040303, 0x0303020202020202, 0x0202030303030202, 0x0201020202020202, 0x0202020303030303, 
+	0x0302020202020202, 0x0202030302020202, 0x0201020202020202, 0x0202020203030303, 0x0302020202020202, 0x0202020202020202, 0x0101010102020201, 0x0201020202030303, 
+	0x0202020201010101, 0x0202020202020201, 0x0101010102010201, 0x0101020202020202, 0x0202010101010101, 0x0102020202020201, 0x0101010101010101, 0x0101010202020202, 
+	0x0101010101010101, 0x0101020202020101, 0x0101010101010101, 0x0101010102020202, 0x0101010101010101, 0x0101010202010101, 0x0101010101010101, 0x0101010101010201, 
+	0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 
+	0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 0x0101010101010101, 0x0101000000000101, 0x0101010101010101, 0x0000000001010000, 0x0000000101010101, 
+	0x0101000000000001, 0x0001010101010000, 0x0000000000000000, 0x0000000001010101, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000010100, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	
+};
+
+Vtx gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_vtx_0[34] = {
+	{{ {1193, 0, -557}, 0, {-4360, -32}, {0, 129, 0, 255} }},
+	{{ {-1193, 0, -557}, 0, {-13268, -32}, {0, 129, 0, 255} }},
+	{{ {-1226, 0, -689}, 0, {-13364, 2032}, {0, 129, 0, 255} }},
+	{{ {1226, 0, -689}, 0, {-5176, 2032}, {0, 129, 0, 255} }},
+	{{ {1378, 0, -488}, 0, {-3604, 2032}, {0, 129, 0, 255} }},
+	{{ {1193, 0, 557}, 0, {560, -32}, {0, 129, 0, 255} }},
+	{{ {1378, 0, 488}, 0, {-224, 2032}, {0, 129, 0, 255} }},
+	{{ {1226, 0, 689}, 0, {1352, 2032}, {0, 129, 0, 255} }},
+	{{ {-1193, 0, 557}, 0, {10400, -32}, {0, 129, 0, 255} }},
+	{{ {-1226, 0, 689}, 0, {9608, 2032}, {0, 129, 0, 255} }},
+	{{ {-1378, 0, 488}, 0, {11184, 2032}, {0, 129, 0, 255} }},
+	{{ {-1193, 0, -557}, 0, {15256, -32}, {0, 129, 0, 255} }},
+	{{ {-1378, 0, -488}, 0, {14568, 2032}, {0, 129, 0, 255} }},
+	{{ {-1226, 0, -689}, 0, {15256, 2032}, {0, 129, 0, 255} }},
+	{{ {1209, -75, -623}, 0, {6380, 2024}, {56, 0, 142, 255} }},
+	{{ {-1209, 75, -623}, 0, {2484, -24}, {200, 0, 142, 255} }},
+	{{ {1209, 75, -623}, 0, {6380, -24}, {56, 0, 142, 255} }},
+	{{ {-1209, -75, -623}, 0, {2484, 2024}, {200, 0, 142, 255} }},
+	{{ {-1285, -75, -523}, 0, {2280, 2024}, {135, 0, 216, 255} }},
+	{{ {-1285, 75, -523}, 0, {2280, -24}, {135, 0, 216, 255} }},
+	{{ {-1285, 75, 523}, 0, {596, -24}, {135, 0, 40, 255} }},
+	{{ {-1285, -75, 523}, 0, {596, 2024}, {135, 0, 40, 255} }},
+	{{ {-1209, 75, 623}, 0, {396, -24}, {200, 0, 114, 255} }},
+	{{ {-1209, -75, 623}, 0, {396, 2024}, {200, 0, 114, 255} }},
+	{{ {1209, 75, 623}, 0, {-3504, -24}, {56, 0, 114, 255} }},
+	{{ {1209, -75, 623}, 0, {-3504, 2024}, {56, 0, 114, 255} }},
+	{{ {1285, -75, 523}, 0, {-3704, 2024}, {121, 0, 40, 255} }},
+	{{ {1285, 75, 523}, 0, {-3704, -24}, {121, 0, 40, 255} }},
+	{{ {1285, 75, -523}, 0, {-5388, -24}, {121, 0, 216, 255} }},
+	{{ {1285, -75, -523}, 0, {-5388, 2024}, {121, 0, 216, 255} }},
+	{{ {1285, -75, -523}, 0, {-5388, 2024}, {121, 0, 216, 255} }},
+	{{ {1209, 75, -623}, 0, {-5592, -24}, {56, 0, 142, 255} }},
+	{{ {1285, 75, -523}, 0, {-5388, -24}, {121, 0, 216, 255} }},
+	{{ {1209, -75, -623}, 0, {-5592, 2024}, {56, 0, 142, 255} }},
+};
+
+Gfx gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_tri_0[] = {
+	gsSPVertex(gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_vtx_0 + 0, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(0, 3, 4, 0),
+	gsSP1Triangle(5, 0, 4, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(7, 5, 6, 0),
+	gsSP1Triangle(8, 5, 7, 0),
+	gsSP1Triangle(8, 7, 9, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(11, 8, 10, 0),
+	gsSP1Triangle(11, 10, 12, 0),
+	gsSP1Triangle(13, 11, 12, 0),
+	gsSPVertex(gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_vtx_0 + 14, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(4, 5, 1, 0),
+	gsSP1Triangle(4, 6, 5, 0),
+	gsSP1Triangle(4, 7, 6, 0),
+	gsSP1Triangle(7, 8, 6, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(9, 10, 8, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(12, 10, 11, 0),
+	gsSP1Triangle(12, 13, 10, 0),
+	gsSP1Triangle(12, 14, 13, 0),
+	gsSP1Triangle(12, 15, 14, 0),
+	gsSPVertex(gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_vtx_0 + 30, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gJumpToggleBorderDL_f3dlite_material_003_layerTransparent[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(ENVIRONMENT, PRIMITIVE, TEXEL0, PRIMITIVE, 0, 0, 0, TEXEL0, COMBINED, 0, SHADE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_CULL_BACK | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_XLU_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 1, gJumpToggleBorderDL_Jump_Platform_03_ia8),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gJumpToggleBorderDL[] = {
+	gsSPDisplayList(mat_gJumpToggleBorderDL_f3dlite_material_003_layerTransparent),
+	gsSPDisplayList(gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/gJumpToggleBorderDL.h b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpToggleBorderDL.h
new file mode 100644
index 000000000..cb8579291
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpToggleBorderDL.h
@@ -0,0 +1,5 @@
+extern u64 gJumpToggleBorderDL_Jump_Platform_03_ia8[];
+extern Vtx gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_vtx_0[34];
+extern Gfx gJumpToggleBorderDL_gJumpToggleBorderDL_mesh_layer_Transparent_tri_0[];
+extern Gfx mat_gJumpToggleBorderDL_f3dlite_material_003_layerTransparent[];
+extern Gfx gJumpToggleBorderDL[];
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformCol.c b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformCol.c
new file mode 100644
index 000000000..c02a9f60f
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformCol.c
@@ -0,0 +1,63 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gJumpTogglePlatformCol_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+};
+
+CollisionPoly gJumpTogglePlatformCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xfdca },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xfdca },
+	{ 0x0000, 0x2003, 0x0002, 0x0004, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfb4a },
+	{ 0x0000, 0x2003, 0x0004, 0x0005, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfb4a },
+	{ 0x0000, 0x2005, 0x0004, 0x0006, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xfdca },
+	{ 0x0000, 0x2005, 0x0006, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xfdca },
+	{ 0x0000, 0x2004, 0x0002, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.2093674323950836e-08), 0xff98 },
+	{ 0x0000, 0x2004, 0x0001, 0x0006, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.2093674323950836e-08), 0xff98 },
+	{ 0x0000, 0x2008, 0x0009, 0x0000, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0000, 0x2009, 0x0007, 0x0000, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0000, 0x200a, 0x0009, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.2093674323950836e-08), 0xff98 },
+	{ 0x0000, 0x200a, 0x0008, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.2093674323950836e-08), 0xff98 },
+	{ 0x0000, 0x2000, 0x0007, 0x0001, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0000, 0x2007, 0x0006, 0x0001, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0000, 0x200a, 0x0005, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xfdca },
+	{ 0x0000, 0x200a, 0x0007, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xfdca },
+	{ 0x0000, 0x200b, 0x0003, 0x0005, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfb4a },
+	{ 0x0000, 0x200b, 0x0005, 0x000a, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfb4a },
+	{ 0x0000, 0x2008, 0x0000, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xfdca },
+	{ 0x0000, 0x2008, 0x0003, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xfdca },
+};
+
+Vec3s gJumpTogglePlatformCol_vertices[12] = {
+	{ 0, 0, 566 },
+	{ 0, 104, 566 },
+	{ -1206, 104, 566 },
+	{ -1206, 0, 566 },
+	{ -1206, 104, -566 },
+	{ -1206, 0, -566 },
+	{ 0, 104, -566 },
+	{ 0, 0, -566 },
+	{ 0, -104, 566 },
+	{ 0, -104, -566 },
+	{ -1206, -104, -566 },
+	{ -1206, -104, 566 },
+};
+
+CollisionHeader gJumpTogglePlatformCol_collisionHeader = {
+	-1206,
+	-104,
+	-566,
+	0,
+	104,
+	566,
+	12,
+	gJumpTogglePlatformCol_vertices,
+	20,
+	gJumpTogglePlatformCol_polygons,
+	gJumpTogglePlatformCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformCol.h b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformCol.h
new file mode 100644
index 000000000..3043dbce2
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformCol.h
@@ -0,0 +1,4 @@
+extern SurfaceType gJumpTogglePlatformCol_polygonTypes[];
+extern CollisionPoly gJumpTogglePlatformCol_polygons[];
+extern Vec3s gJumpTogglePlatformCol_vertices[12];
+extern CollisionHeader gJumpTogglePlatformCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformDL.c b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformDL.c
new file mode 100644
index 000000000..2decec23a
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformDL.c
@@ -0,0 +1,209 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gJumpTogglePlatformDL_Jump_Platform_01_ci4[] = {
+	0x0110121212121333, 0x1213212121113111, 0x3311111111111111, 0x0002113311311111, 0x1112004404405544, 0x4444044055540555, 0x5555555555555545, 0x5445455545560122, 
+	0x1132777787797777, 0x7677767788664844, 0x6444666777877777, 0x7777779777776012, 0x131108aabaac6044, 0x0004447bbaa90004, 0x000509aadbac4044, 0x0006449aeaab7022, 
+	0x1109c98988cd8422, 0x002049ddcddb8022, 0x22247c8989cd8422, 0x00200cddd9db7411, 0x334eb8889999cd70, 0x220cbadcc9cdd000, 0x04cdc99c99c9cb70, 0x2249badc999dd521, 
+	0x314eb9894cd7c47c, 0x07aadd84898d9964, 0x0caccdac49d7c9ab, 0x067add88896ce511, 0x318eb4246899906b, 0xaba9c9804999dc40, 0x04dd99d448999cdb, 0xa60cc786424ce411, 
+	0x318ea22009c99820, 0x9cc78998464cdd9b, 0xacdd99849cd9adb9, 0x028bcde0021ce511, 0xf38db09868d9d920, 0x9744897694868dad, 0xaad78889478847dd, 0x02998c88870ce511, 
+	0x3149d899dc4c907a, 0xd04049c0c20484c4, 0x0d4840284c96040c, 0xaa06949bc90be521, 0xf1878bcc8989024d, 0x9c84088c804cdbbf, 0xfdcac407c8804cc9, 0xa4209c98879be521, 
+	0x35590ca4027d000b, 0xacc87809d68dae3f, 0xf1aaa66980c99dee, 0xd0046820499c7431, 0xf18740d4079cddc7, 0xddcccdb9c84ab1ff, 0xff2bd4898bdedcac, 0x799988624846753f, 
+	0x3147040229c9bcd6, 0x48bbbdc9ba6c2fff, 0xfff2c4d9dbddcc94, 0x6dbb98922080741f, 0xf147024609c79ba8, 0x9dbbbbddbc992121, 0x111299addabdbdc8, 0x8acd97400c047523, 
+	0x318900bdabd9deeb, 0x628ddbaddbabaabb, 0xbbaabaaaaabdc624, 0xdbc9adcca0207511, 0xf18707adbacdaaba, 0x2fff332dbecdddbd, 0xbccadcbab133fff2, 0xbddbdbccd7207421, 
+	0x33477b40466db9ba, 0x4fffff2daa8cbcda, 0xdbbbc9abd2fffff6, 0xadbb966424667511, 0x318798009949dddd, 0x4ffff286bbc9dbad, 0x9baa99ba881ffff4, 0xcbb8409600647533, 
+	0xf18ab089bc9cabb6, 0x8fff1bd8ddd84011, 0x244499cc8bb1ff38, 0x6dbd889c9609c531, 0x314ad2c99888cbbc, 0x93f1abddd9011111, 0x2221329dc99d2f3c, 0x9dcc8488992db531, 
+	0x334ac4d7986b8dad, 0x912aabdc01121111, 0x11122120999db219, 0xcc98c009880da531, 0xf18ec08c89489cdb, 0x86bcccc012113333, 0xf31121110bccdd78, 0xd98dd828680de531, 
+	0x318ac4c98968dccd, 0xc8ccbd0111133f3f, 0xf33f331210ccc989, 0x98cd9c698c0de531, 0xf14ac099988d9964, 0x488cb71113333fff, 0xfffff3f1017dcc64, 0x6499444c9d09a531, 
+	0x334dd28db9ddc8c8, 0xdd99d21133ffffff, 0xffffff33112dddc4, 0x9cd98998981dd531, 0x15889209cbbdbbba, 0xbdd963133fffffff, 0xfffffff31116dddd, 0xdbbbc999902c6531, 
+	0xf3488004cdbbba22, 0xb8db0113ffffffff, 0xfffffffff110dcbd, 0x22adbc9c82064531, 0x314609204ddc92f1, 0xbbcb0113ffffffff, 0xffffffff3312b9ba, 0x1f19cdd402704531, 
+	0xf146044048863ff1, 0xadcd213fffffffff, 0xffffffff3321bdbd, 0x1ff368640402053f, 0xf1440299462ffff1, 0xbcdb33ffffffffff, 0xfffffffff311cdcd, 0x1ffff2846d22403f, 
+	0x318820c7482ffff1, 0xdcdb31333fffffff, 0xffffffffff13dcdd, 0x1ffff2848822453f, 0xf15700404896fff2, 0xdccb1133ffffffff, 0xfffffffff331dccb, 0x2ff368840442053f, 
+	0x31460c204da971f1, 0xabcc213fffffffff, 0xfffffffff312cccd, 0x1f29caa42280553f, 0xf544700899cdba22, 0xcdcb213fffffffff, 0xffffffff3327d999, 0x22bdccc662040533, 
+	0x1149d20adcd9eeed, 0xcc999113ffffffff, 0xfffffffff118d99c, 0xbaebc9886429413f, 0x354dd28dcdddac98, 0x9c98c413ffffffff, 0xffffffff312cc994, 0x9dadc88449199533, 
+	0x114e90d97cc99846, 0x479cd411ffffffff, 0xfffffff3128dc964, 0x869d98464c49d533, 0x114ed4d8689dcdda, 0x969c99013fffffff, 0xfffff33114dbc949, 0xbdd89c984948d53f, 
+	0x104ad088898de9da, 0x88bd9ca0113fffff, 0xfffff31109ccdc89, 0xddbc9c864809b53f, 0x124ad4988d999cdb, 0x912ad9dd0133ffff, 0xffff3110dbcda219, 0xb9aa96886409d53f, 
+	0x354bb299cdb8ccdc, 0x91f2bd99c6213333, 0x3313128bbcdb1f39, 0xdc9c9444462db53f, 0x224c948adb97cdd8, 0x83ff1bb8ddc82223, 0x312049899d91fff8, 0x8a998988880db53f, 
+	0x324968048908dba9, 0x4ffff178bdcdbddd, 0xdd9999cc882ffff4, 0xcba9849840697533, 0x328646404449baab, 0x4fffff2bdb8c9dc9, 0x8cc9c8ccd2fffff4, 0xbabd486020b8653f, 
+	0x3146428bdbbc9cba, 0x0ffff31ddc8dcd99, 0x99adc9bdd233fff2, 0xaabd98d9cb80753f, 0x2087020acdbbdbeb, 0x4249cbdcc8ddbabd, 0xdabddbbdbbdc9424, 0xddbbddc9bd007533, 
+	0x324700b408c9aab8, 0x8cbdccccdc972111, 0x111299ccdbbdddd8, 0x6bcbc9804020753f, 0xf147474229789dd4, 0x49bcc999c96c2fff, 0xfff2c499bacdbd94, 0x4b99998220007433, 
+	0x314764762689c998, 0xddbbb9dd964cd2ff, 0xff1dd68ccbccdbd9, 0x9989c9724d00751f, 0x1187ccc40287404d, 0x9cdc890cc48bdb1f, 0xf3bbd84dc0749996, 0xc00496200ac0c53f, 
+	0x154aa98968c80209, 0x8996088cc049bdbf, 0xfccdb409b8904d96, 0xd0209974c9b7741f, 0x126eb4c9c649969c, 0x90004990720444c0, 0x4c48402908d40008, 0x9b079464796b7533, 
+	0x124ec09988dcdb22, 0xcc808674c6888dd9, 0xba99889d66d90487, 0x22c89b84982ab43f, 0x214ec2200dbc9720, 0x799a88cc84899c9b, 0xd99bad86ccd96698, 0x02898692022ae533, 
+	0x118ec4244889c26a, 0xdc9999c4499d9d00, 0x00dc9cc449999bbb, 0xb4298cdc020be53f, 0x124e988688cca840, 0xba8c8dc089899a90, 0x0cb9c9d809d9dd80, 0x964c8c90c89be533, 
+	0x125cdcdddbeab400, 0x0cabcdccc99ddb60, 0x04bbddddddabb800, 0x49adcdc9c9cee81f, 0x2120aeaeeeec7676, 0x76cbeababbabc644, 0x666caaaaaaab9776, 0x67cbeaaaabaea741, 
+	0x2211deeead667666, 0x6667dbabbac64666, 0x46647daeaab97666, 0x6667beeaaec66621, 0x1212021111111111, 0x1111111111111110, 0x1222020220202025, 0x20210220221521ff, 
+	0x221123ff3f3f33f3, 0x3f33f3f3f3f3f333, 0x1121111111112111, 0x113312111121213f, 0x14111333fff11f3f, 0xffff3f3fffff3fff, 0xf31113111111f121, 0xfff1112111112111, 
+	
+};
+
+u64 gJumpTogglePlatformDL_Jump_Platform_01_pal_rgba16[] = {
+	0xb9c9db4fd24de493, 0xa189b24b990790c7, 0x89078107608568c5, 0x78c770c55083e555, 
+};
+
+u64 gJumpTogglePlatformDL_Jump_Platform_02_ci4[] = {
+	0x0110111212111333, 0x1223111211113111, 0x3311111111111111, 0x2002113311311111, 0x1112044400440044, 0x4444444400000000, 0x0000000000000000, 0x0440400040040122, 
+	0x1132555555555555, 0x5555555555554444, 0x5444455555555555, 0x5555555555565212, 0x1311057777764044, 0x0044445778760004, 0x0000057777864044, 0x0044446797765022, 
+	0x1106665555665422, 0x2222466666675022, 0x2224565555665422, 0x2222466766675411, 0x3149755556666750, 0x2207776666677000, 0x0476666666666750, 0x2246777666677011, 
+	0x3149765646656456, 0x0577765456676654, 0x4786777646756677, 0x0457665555569011, 0x3149742455656247, 0x7776665046667755, 0x5577667546666667, 0x7506655442469011, 
+	0x3147722005656520, 0x66656666555abb5a, 0xbabba65566767776, 0x0257677002168011, 0x3147706555766622, 0x65445665a5555b8a, 0xb9a55aaa56664576, 0x0265565556269011, 
+	0x3145756676465067, 0x70445ab4a00440a8, 0x8a04400a4aa54446, 0x8705645766479011, 0x3145576656560247, 0x66644aaba05bbbb8, 0x9ba8b40aaca45776, 0x7020666555577011, 
+	0x3146067402574047, 0x7665aa4b85588998, 0x9888955aaddaa899, 0x7004552046665031, 0x3145006425666666, 0xbbaabb8a8a58bb88, 0x88b8b5ab8adcca86, 0x6666555245455033, 
+	0x3145440226667674, 0x04bb88bb995abb89, 0x9898a58899cedc40, 0x4777656220505013, 0x3145024446656780, 0x4ab888bb8baa8999, 0x9998aa8899bdedd0, 0x0867654006205023, 
+	0x314500777775799b, 0x5ab88b9bb9989988, 0x88998999998ceeed, 0xaa66766670205021, 0x31450577776799bb, 0x8b55aa9889b88888, 0x8bb98899988bdeed, 0xcaa7776675245021, 
+	0x314557424557b5a8, 0xa45555bb99ab8b89, 0xb888ba98b8aacdee, 0xdcbb655424445011, 0x314565046646bbba, 0x4ab8ab5588aab88a, 0xab99aa895588bcee, 0xeda5446540545033, 
+	0x31477056766b9884, 0x488b888ab8ba9bbb, 0x8bb8babba8998cee, 0xedcba56665066031, 0x31477266665aa88a, 0xa899888bbbbbaaab, 0xbaababbbaab89ade, 0x3edaa45565267031, 
+	0x31476465665bab9b, 0x5a9988babb8baaab, 0xaaaaaaaaaa889ade, 0xee1cb00655067031, 0x31476056665aabb8, 0x558bbbab8888abaa, 0xaaabaabaab888acd, 0x33edb50555077031, 
+	0x31476465665a8bb8, 0xa5bb8bbb8bbbbaba, 0xbabbbbbbbb888a0d, 0x33edcb5656069031, 0x314760666a5baa5a, 0x5aab8baa88aa8bba, 0xbbbbbbbbbb888acd, 0x33e1d44666267031, 
+	0x314772578abbaaaa, 0xb8babba89b8baabb, 0x8b8bbb8bb8888acd, 0x3f3ed5a565176031, 0x11456246ab8b8bb9, 0x88bbabb8888baabb, 0xb888bb88bbbb8ad3, 0xff3edca660165031, 
+	0x31455405aabbb8ab, 0xba88babbb8babaab, 0xbb888bbb9bb88cce, 0xffeedc5a52054031, 0x314506200ba54a5a, 0x88b8bb8aa8bb8bbb, 0xb8bbbbb88b898ccd, 0xff3edca002524031, 
+	0x3145244400005abb, 0x98ba88888b88bbbb, 0xbb8bb898a8888ddd, 0xfffed00044024033, 0x3145026600058aa8, 0x8bb8b8abbabbabbb, 0xb888b88ab988acde, 0xfffed00057224033, 
+	0x3144026600045a8b, 0xbb888abab8babab8, 0x8888b89b8998cdef, 0xfffed00055224d33, 0x3145244400005a89, 0xbbbbaaaab8babbb8, 0xbb88b98b888bdddf, 0xfffed00044024233, 
+	0x314506200ab44b99, 0x98bbbb88888bb8ba, 0xbb88a888888cddef, 0xffeedb8002524d33, 0x32445005a55aa898, 0xabb88a888988bbaa, 0xbbbbb88888adeeef, 0xfffed55452040d33, 
+	0x11456247baaca998, 0x88babaa88a8b888b, 0xbb8b99888bcdefff, 0xffeeca4554164d33, 0x324762576bbaccbb, 0x898abbbbb8bbabbb, 0xabb899998cddffff, 0xffedc55446165d33, 
+	0x124960666aaacdcb, 0xab88888bb88aaaa8, 0x8a899998cdeeeeff, 0xffeda55546457d33, 0x1149646555abadec, 0xaa888888b8baabb8, 0x88898b8cceefffff, 0xfedcaaa546467033, 
+	0x12476055565b9cee, 0xdcb88899888bb888, 0x9988bccdefffffff, 0xfedaaa5544067033, 0x1247746557aaaade, 0xeecbbb89888888b8, 0x89aacdddffffffff, 0xedc8a45554067033, 
+	0x1247726667b5aaad, 0xeeedccaab88b88ba, 0xaccddeeeefffffff, 0xedaa545544267033, 0x124660576765abad, 0xdeeeedddcccccccc, 0xddeeeeeffffffffe, 0xda55555555077033, 
+	0x324645045605ab85, 0xddeeffeedeeddeed, 0xe3effffffffeffed, 0xcb9a546500565033, 0x324545424446b8bb, 0xcdddeffeeff33fee, 0xfffefffffffeeedc, 0xabaa554420755033, 
+	0x3245425777765aba, 0x85cddeffeffffffe, 0xfffeffeefffeedc4, 0xbba6656567505033, 0x224502076677778a, 0x045ccddeeffefffe, 0xfffefffeeeeddc44, 0x5a77776677205033, 
+	0x3245007405667770, 0x04aacccddddeeffe, 0xffeefffedddcca50, 0x0767665040205033, 0x3145054226556674, 0x20a555cccdeddffe, 0xffeeedeecccaaa02, 0x4766665220005033, 
+	0x3145545424556665, 0x6aaab5aacccccddd, 0xddedcddcabaaaaa5, 0x6655665246005013, 0x1146666402564047, 0x66ba550aa40ccccc, 0xccccc00ba0504665, 0x6004652007606033, 
+	0x1247755645650205, 0x5564055aa205a5ab, 0x8c4ab02a85a04655, 0x7020565466755013, 0x1249746665466466, 0x600045a05220024b, 0xa420022505b40005, 0x5705644456575033, 
+	0x1249626655767722, 0x66545554a4544554, 0xab5455ab45760055, 0x2265575455277033, 0x1149622027766520, 0x566755665556554a, 0xa45b875566764565, 0x0256556202178033, 
+	0x1149642445566257, 0x7666566446676744, 0x4466666446666777, 0x7426566602479033, 0x1249655555667540, 0x7756576056566760, 0x0676667506667650, 0x6446565065679033, 
+	0x1206766677977400, 0x0677666666667740, 0x0477666666777500, 0x4677676665679413, 0x1120799999965555, 0x5567877777776444, 0x4446777777876555, 0x5567977777797501, 
+	0x2211699976555555, 0x5555777777644444, 0x4444577977765555, 0x5555798779655421, 0x1111021111111111, 0x1111111111111112, 0x2222222222222222, 0x2221222222122133, 
+	0x2211213333333333, 0x3333333333333333, 0x1121111111111111, 0x1133121111212133, 0x1411133333311333, 0x3333333333333333, 0x3311111111113111, 0x3331111111112111, 
+	
+};
+
+u64 gJumpTogglePlatformDL_Jump_Platform_02_pal_rgba16[] = {
+	0x396d61f7417592b9, 0x292920e518df109b, 0x1897109320dd20d9, 0x41e7626d8b33b3b9, 
+};
+
+Vtx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_0[20] = {
+	{{ {0, 104, 566}, 0, {-16, 2032}, {127, 0, 0, 254} }},
+	{{ {0, 0, -566}, 0, {2032, 2328}, {127, 0, 0, 254} }},
+	{{ {0, 104, -566}, 0, {2032, 2032}, {127, 0, 0, 254} }},
+	{{ {0, 0, 566}, 0, {-16, 2328}, {127, 0, 0, 254} }},
+	{{ {-1206, 104, -566}, 0, {2032, -16}, {129, 0, 0, 254} }},
+	{{ {-1206, 0, 566}, 0, {-16, -312}, {129, 0, 0, 254} }},
+	{{ {-1206, 104, 566}, 0, {-16, -16}, {129, 0, 0, 254} }},
+	{{ {-1206, 0, -566}, 0, {2032, -312}, {129, 0, 0, 254} }},
+	{{ {0, 104, -566}, 0, {2032, 2032}, {0, 0, 129, 254} }},
+	{{ {-1206, 0, -566}, 0, {2344, -16}, {0, 0, 129, 254} }},
+	{{ {-1206, 104, -566}, 0, {2032, -16}, {0, 0, 129, 254} }},
+	{{ {0, 0, -566}, 0, {2344, 2032}, {0, 0, 129, 254} }},
+	{{ {0, 104, 566}, 0, {-16, 2032}, {0, 127, 0, 254} }},
+	{{ {0, 104, -566}, 0, {2032, 2032}, {0, 127, 0, 254} }},
+	{{ {-1206, 104, -566}, 0, {2032, -16}, {0, 127, 0, 254} }},
+	{{ {-1206, 104, 566}, 0, {-16, -16}, {0, 127, 0, 254} }},
+	{{ {-1206, 104, 566}, 0, {-16, -16}, {0, 0, 127, 254} }},
+	{{ {0, 0, 566}, 0, {-328, 2032}, {0, 0, 127, 254} }},
+	{{ {0, 104, 566}, 0, {-16, 2032}, {0, 0, 127, 254} }},
+	{{ {-1206, 0, 566}, 0, {-328, -16}, {0, 0, 127, 254} }},
+};
+
+Gfx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 7, 5, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 11, 9, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_0 + 16, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_1[20] = {
+	{{ {-1206, 0, 566}, 0, {-328, -16}, {0, 0, 127, 254} }},
+	{{ {-1206, -104, 566}, 0, {-16, -16}, {0, 0, 127, 254} }},
+	{{ {0, -104, 566}, 0, {-16, 2032}, {0, 0, 127, 254} }},
+	{{ {0, 0, 566}, 0, {-328, 2032}, {0, 0, 127, 254} }},
+	{{ {0, -104, -566}, 0, {2032, 2032}, {127, 0, 0, 254} }},
+	{{ {0, 0, -566}, 0, {2032, 2328}, {127, 0, 0, 254} }},
+	{{ {0, 0, 566}, 0, {-16, 2328}, {127, 0, 0, 254} }},
+	{{ {0, -104, 566}, 0, {-16, 2032}, {127, 0, 0, 254} }},
+	{{ {-1206, 0, -566}, 0, {2032, -312}, {129, 0, 0, 254} }},
+	{{ {-1206, -104, -566}, 0, {2032, -16}, {129, 0, 0, 254} }},
+	{{ {-1206, -104, 566}, 0, {-16, -16}, {129, 0, 0, 254} }},
+	{{ {-1206, 0, 566}, 0, {-16, -312}, {129, 0, 0, 254} }},
+	{{ {0, -104, 566}, 0, {-16, 2032}, {0, 129, 0, 254} }},
+	{{ {-1206, -104, 566}, 0, {-16, -16}, {0, 129, 0, 254} }},
+	{{ {-1206, -104, -566}, 0, {2032, -16}, {0, 129, 0, 254} }},
+	{{ {0, -104, -566}, 0, {2032, 2032}, {0, 129, 0, 254} }},
+	{{ {0, 0, -566}, 0, {2344, 2032}, {0, 0, 129, 254} }},
+	{{ {0, -104, -566}, 0, {2032, 2032}, {0, 0, 129, 254} }},
+	{{ {-1206, -104, -566}, 0, {2032, -16}, {0, 0, 129, 254} }},
+	{{ {-1206, 0, -566}, 0, {2344, -16}, {0, 0, 129, 254} }},
+};
+
+Gfx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_1 + 16, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gJumpTogglePlatformDL_f3dlite_material_005_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gJumpTogglePlatformDL_Jump_Platform_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 15),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gJumpTogglePlatformDL_Jump_Platform_01_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 6, 0, G_TX_WRAP | G_TX_MIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gJumpTogglePlatformDL_f3dlite_material_006_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gJumpTogglePlatformDL_Jump_Platform_02_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 15),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gJumpTogglePlatformDL_Jump_Platform_02_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx gJumpTogglePlatformDL[] = {
+	gsSPDisplayList(mat_gJumpTogglePlatformDL_f3dlite_material_005_layerOpaque),
+	gsSPDisplayList(gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gJumpTogglePlatformDL_f3dlite_material_006_layerOpaque),
+	gsSPDisplayList(gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformDL.h b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformDL.h
new file mode 100644
index 000000000..0bc5f9bf7
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/gJumpTogglePlatformDL.h
@@ -0,0 +1,11 @@
+extern u64 gJumpTogglePlatformDL_Jump_Platform_01_ci4[];
+extern u64 gJumpTogglePlatformDL_Jump_Platform_01_pal_rgba16[];
+extern u64 gJumpTogglePlatformDL_Jump_Platform_02_ci4[];
+extern u64 gJumpTogglePlatformDL_Jump_Platform_02_pal_rgba16[];
+extern Vtx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_0[20];
+extern Gfx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_vtx_1[20];
+extern Gfx gJumpTogglePlatformDL_gJumpTogglePlatformDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gJumpTogglePlatformDL_f3dlite_material_005_layerOpaque[];
+extern Gfx mat_gJumpTogglePlatformDL_f3dlite_material_006_layerOpaque[];
+extern Gfx gJumpTogglePlatformDL[];
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.c b/assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.c
new file mode 100644
index 000000000..45ab9c848
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.c
@@ -0,0 +1,6 @@
+#include "ultra64.h"
+#include "global.h"
+
+#include "gJumpTogglePlatformDL.c"
+#include "gJumpTogglePlatformCol.c"
+#include "gJumpToggleBorderDL.c"
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.h b/assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.h
new file mode 100644
index 000000000..91e844e84
--- /dev/null
+++ b/assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.h
@@ -0,0 +1,8 @@
+#ifndef OBJECT_JUMPTOGGLE_PLATFORM_H
+#define OBJECT_JUMPTOGGLE_PLATFORM_H 1
+
+#include "gJumpTogglePlatformDL.h"
+#include "gJumpTogglePlatformCol.h"
+#include "gJumpToggleBorderDL.h"
+
+#endif
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_ladder/ladder_large_col.c b/assets_hm_pack/objects/object_ladder/ladder_large_col.c
new file mode 100644
index 000000000..75625e2e5
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_large_col.c
@@ -0,0 +1,51 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gLadderLargeCol_polygonTypes[] = {
+	{ 0x00400000, 0x000237ca },
+	{ 0x00600000, 0x000037ca },
+	{ 0x00000000, 0x000237ca },
+};
+
+CollisionPoly gLadderLargeCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0001, 0x2005, 0x0006, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.371135275960114e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0001, 0x2006, 0x0007, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.371135275960114e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0002, 0x2008, 0x0009, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xff2c },
+	{ 0x0002, 0x2008, 0x000a, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xff2c },
+};
+
+Vec3s gLadderLargeCol_vertices[12] = {
+	{ 1556, 0, 424 },
+	{ 1556, 28500, 424 },
+	{ -1556, 28500, 424 },
+	{ -1556, 0, 424 },
+	{ 1556, 29000, 0 },
+	{ 1556, 27000, 0 },
+	{ -1556, 27000, 0 },
+	{ -1556, 29000, 0 },
+	{ 1556, 0, 212 },
+	{ 1556, 28500, 212 },
+	{ -1556, 28500, 212 },
+	{ -1556, 0, 212 },
+};
+
+CollisionHeader gLadderLargeCol_collisionHeader = {
+	-1556,
+	0,
+	0,
+	1556,
+	29000,
+	424,
+	12,
+	gLadderLargeCol_vertices,
+	6,
+	gLadderLargeCol_polygons,
+	gLadderLargeCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_large_col.h b/assets_hm_pack/objects/object_ladder/ladder_large_col.h
new file mode 100644
index 000000000..9f165b874
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_large_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gLadderLargeCol_polygonTypes[];
+extern CollisionPoly gLadderLargeCol_polygons[];
+extern Vec3s gLadderLargeCol_vertices[12];
+extern CollisionHeader gLadderLargeCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_ladder/ladder_large_model.c b/assets_hm_pack/objects/object_ladder/ladder_large_model.c
new file mode 100644
index 000000000..9f629e28d
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_large_model.c
@@ -0,0 +1,131 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gLadderLargeDL_Ladder_00_ci8[] = {
+	0x0001020304050607, 0x08090a0b0c0d0e0f, 0x1011121013121001, 0x1312121210101010, 0x14150b161718191a, 0x1b1c1d1e1f201a21, 0x1a22232425262426, 0x2727281d22292a2b, 
+	0x2c202d1a2e2f3031, 0x3132332434062f35, 0x3637381e393a173b, 0x36361e3c1f203d37, 0x1f1e3e253f404141, 0x304207221f094344, 0x44443936370b4420, 0x1e37454409460b37, 
+	0x47093648494a4b2b, 0x2f374c4d2f3f3636, 0x2f2f4e422f2f2f4f, 0x3e49420642502f3f, 0x4c13515253545556, 0x575856595a005b5b, 0x2e2e2e57572e5757, 0x2e5c51335c135c5c, 
+	0x0d5d5d015e5f6061, 0x620263640d5d6262, 0x40405d65620d5b33, 0x335b5b0d5151515c, 0x635b0254660c0c0c, 0x400c6567005d0240, 0x40405d6565624068, 0x405b5b6100005b00, 
+	0x134065610c0c4068, 0x4068606653654068, 0x5b5b005b61655b65, 0x4068406565405b5b, 0x6969636a0c606b6b, 0x606b0c6c572e6d69, 0x6e6f706d6f6f6f71, 0x7269707073747369, 
+	0x75767762600c606c, 0x6c6c60600d78796d, 0x6d6d6f6d6d6d6d6d, 0x6d6d7469746d746f, 0x757a7b7c60686c7d, 0x0c6c600c79787e79, 0x7979797979797979, 0x6d6d6d6d6d6d6d6d, 
+	0x757f7b7960406a5b, 0x0c7d0c0278787878, 0x7e79797979797979, 0x79796d6d6d6d6d6d, 0x7b7b7b7b6051023a, 0x807d0261817f827b, 0x7b78787e7e7e7979, 0x7979797979797979, 
+	0x7b7b7b7b40570383, 0x8402625b7a817f7f, 0x82827b7b7b7b787e, 0x7e79797979797979, 0x7b7b78790c5c8586, 0x8780335b88888181, 0x7f7f82827b7b7b7b, 0x7b7b7b7e7e7e7e7e, 
+	0x78787878893e8a36, 0x8b8062008c888881, 0x81817f7f8282827b, 0x7b7b7b7b7b7b7b7b, 0x7878797957572e07, 0x1e0062008d8c8888, 0x7c81817f7f7f7f82, 0x82827b7b7b7b7b7b, 
+	0x78797979505c4283, 0x865b62518e8c8888, 0x887a7c7c817f7f7f, 0x7f7f828282828282, 0x788f79794f5c2e51, 0x903385008c8c8888, 0x88887a7a7a7c7c7c, 0x7f7f7f7f7f7f7f82, 
+	0x787878780d3e5c50, 0x37082e4088888888, 0x888888887a7a7a7a, 0x7c7c7c7f7f7f7f7f, 0x78787878405c4950, 0x9103624092889393, 0x9393888888887a7a, 0x7a7a7a7c7c7c817f, 
+	0x7b7b7b7b5b5c3e07, 0x904f5b5b888c8c8c, 0x8c93939393888888, 0x7a7a7a7a7a7a7c7c, 0x7b7b7b785b832e17, 0x1e4f855b8c8c8d8d, 0x8d8d8d9494949393, 0x8888887a7a7a7a7a, 
+	0x7b7b7b7b512e4956, 0x9508625196969697, 0x9797978d8d949494, 0x9493938888887a7a, 0x7b7b7b78132e5c98, 0x372e8a5199969696, 0x9696979797978d8d, 0x9494949393938888, 
+	0x7b7b78795c494959, 0x980e5b009a9a9b9b, 0x9696969797979797, 0x978d949494949393, 0x7b7b78794c035c9c, 0x3f0185519a9d9d9d, 0x9e9e9b9696979797, 0x9797979794949494, 
+	0x9f7b7b7b85335c98, 0xa0852e009a9d9d9d, 0x9d9e9e9e9e9b9697, 0x9797979797979794, 0x757f7b784051420b, 0x3651850da1a2a2a3, 0xa39d9e9e9e9e9e9e, 0x9b97979797979797, 
+	0x7aa4756f5b518336, 0x395b5c5ba5a6a7a2, 0xa89d9e9e9e9e9e9e, 0x9e9e9ba9a9a99797, 0x947aaaab0c51ac49, 0x08850300adaeafa2, 0xa89e9e9e9e9e9e9e, 0x9e9e9ea99e9e9e9b, 
+	
+};
+
+u64 gLadderLargeDL_Ladder_00_pal_rgba16[] = {
+	0x310528c1184130c1, 0xa391e621518359c3, 0x41017acde663728b, 0x1041310331015249, 0x394149c741853945, 0xa4577a8b7a8d6205, 0xef29c51b8b4fde65, 0xef2dac556a477289, 
+	0x7acb8b0da4158351, 0x9bd39391b499bcdb, 0xac57b49b9bd5b4db, 0x830d6a05390359c5, 0xd59feee98b0f30c3, 0x7247518162076a49, 0x830f59c751875a03, 0x6a077a8949855a07, 
+	0x2083e6a951856a03, 0x7ac97287728d72c9, 0x72c549459393c5e3, 0x39017b0f51c54143, 0x49433905620949c9, 0x520b730f5a0b4987, 0x52095a09624928c3, 0x4145188173134a0b, 
+	0x080128c520813947, 0x72d320c329055a4d, 0x1883184010430841, 0x0001208220402080, 0x1040288228c41842, 0x188239465a4c1880, 0x310228c241863104, 0x4146100130c23944, 
+	0x2041414439044103, 0x51c928816a8b51c7, 0x498639432883620b, 0x51c651c859c82902, 0x72cd49c5498449c6, 0x49c872cb5a085208, 0x6a4b620862485a48, 0x6a45624a5a4a3144, 
+	0x62476a8a6a8c628a, 0x39867b507b1072ce, 0x628c5248524d520d, 0x3081cda193d5730e, 
+};
+
+Vtx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1626, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 28500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 28500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 28500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 28500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_0[12] = {
+	{{ {-1626, 28500, 212}, 0, {0, -18040}, {0, 0, 129, 254} }},
+	{{ {1556, 27000, 212}, 0, {2048, -17496}, {0, 0, 129, 254} }},
+	{{ {-1626, 27000, 212}, 0, {0, -17496}, {0, 0, 129, 254} }},
+	{{ {1556, 28500, 212}, 0, {2048, -18040}, {0, 0, 129, 254} }},
+	{{ {-1556, 27000, 424}, 0, {0, -17496}, {0, 0, 127, 254} }},
+	{{ {1556, 28500, 424}, 0, {2048, -18040}, {0, 0, 127, 254} }},
+	{{ {-1556, 28500, 424}, 0, {0, -18040}, {0, 0, 127, 254} }},
+	{{ {1556, 27000, 424}, 0, {2048, -17496}, {0, 0, 127, 254} }},
+	{{ {-1556, 0, 424}, 0, {0, 984}, {0, 0, 127, 254} }},
+	{{ {1556, 27000, 424}, 0, {2048, -17498}, {0, 0, 127, 254} }},
+	{{ {-1556, 27000, 424}, 0, {0, -17498}, {0, 0, 127, 254} }},
+	{{ {1556, 0, 424}, 0, {2048, 984}, {0, 0, 127, 254} }},
+};
+
+Gfx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_0 + 0, 12, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 11, 9, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_1[5] = {
+	{{ {-1626, 27000, 212}, 0, {0, -17498}, {0, 0, 129, 254} }},
+	{{ {1556, 27000, 212}, 0, {2048, -17498}, {0, 0, 129, 254} }},
+	{{ {1556, 0, 212}, 0, {2048, 984}, {0, 0, 129, 254} }},
+	{{ {-1626, 27000, 212}, 0, {0, -17498}, {0, 0, 129, 254} }},
+	{{ {-1626, 0, 212}, 0, {0, 984}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderLargeDL_Ladder[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderLargeDL_Ladder_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 175),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderLargeDL_Ladder_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderLargeDL_LadderShadow[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, ENVIRONMENT, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(0, 0, 0, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderLargeDL_Ladder_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 175),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderLargeDL_Ladder_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gLadderLargeDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gLadderLargeDL_Ladder),
+	gsSPDisplayList(gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gLadderLargeDL_LadderShadow),
+	gsSPDisplayList(gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_large_model.h b/assets_hm_pack/objects/object_ladder/ladder_large_model.h
new file mode 100644
index 000000000..842c2c1b0
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_large_model.h
@@ -0,0 +1,10 @@
+extern u64 gLadderLargeDL_Ladder_00_ci8[];
+extern u64 gLadderLargeDL_Ladder_00_pal_rgba16[];
+extern Vtx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_0[12];
+extern Gfx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_vtx_1[5];
+extern Gfx gLadderLargeDL_gLadderLargeDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gLadderLargeDL_Ladder[];
+extern Gfx mat_gLadderLargeDL_LadderShadow[];
+extern Gfx gLadderLargeDL[];
diff --git a/assets_hm_pack/objects/object_ladder/ladder_medium_col.c b/assets_hm_pack/objects/object_ladder/ladder_medium_col.c
new file mode 100644
index 000000000..63c8eab28
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_medium_col.c
@@ -0,0 +1,51 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gLadderMediumCol_polygonTypes[] = {
+	{ 0x00400000, 0x000237ca },
+	{ 0x00600000, 0x000037ca },
+	{ 0x00000000, 0x000237ca },
+};
+
+CollisionPoly gLadderMediumCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.399391073661718e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.399391073661718e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0001, 0x2005, 0x0006, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711398944878965e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0001, 0x2006, 0x0007, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711398944878965e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0002, 0x2008, 0x0009, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.399391073661718e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+	{ 0x0002, 0x2008, 0x000b, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.399391073661718e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+};
+
+Vec3s gLadderMediumCol_vertices[12] = {
+	{ 1591, 0, 424 },
+	{ 1591, 21000, 424 },
+	{ -1591, 21000, 424 },
+	{ -1591, 0, 424 },
+	{ 1591, 21500, 0 },
+	{ 1591, 19500, 0 },
+	{ -1591, 19500, 0 },
+	{ -1591, 21500, 0 },
+	{ 1591, 0, 212 },
+	{ -1591, 21000, 212 },
+	{ 1591, 21000, 212 },
+	{ -1591, 0, 212 },
+};
+
+CollisionHeader gLadderMediumCol_collisionHeader = {
+	-1591,
+	0,
+	0,
+	1591,
+	21500,
+	424,
+	12,
+	gLadderMediumCol_vertices,
+	6,
+	gLadderMediumCol_polygons,
+	gLadderMediumCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_medium_col.h b/assets_hm_pack/objects/object_ladder/ladder_medium_col.h
new file mode 100644
index 000000000..a41f94f27
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_medium_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gLadderMediumCol_polygonTypes[];
+extern CollisionPoly gLadderMediumCol_polygons[];
+extern Vec3s gLadderMediumCol_vertices[12];
+extern CollisionHeader gLadderMediumCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_ladder/ladder_medium_model.c b/assets_hm_pack/objects/object_ladder/ladder_medium_model.c
new file mode 100644
index 000000000..8e323a17c
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_medium_model.c
@@ -0,0 +1,128 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gLadderMediumDL_Ladder_00_ci8[] = {
+	0x0001020304050607, 0x08090a0b0c0d0e0f, 0x1011121013121001, 0x1312121210101010, 0x14150b161718191a, 0x1b1c1d1e1f201a21, 0x1a22232425262426, 0x2727281d22292a2b, 
+	0x2c202d1a2e2f3031, 0x3132332434062f35, 0x3637381e393a173b, 0x36361e3c1f203d37, 0x1f1e3e253f404141, 0x304207221f094344, 0x44443936370b4420, 0x1e37454409460b37, 
+	0x47093648494a4b2b, 0x2f374c4d2f3f3636, 0x2f2f4e422f2f2f4f, 0x3e49420642502f3f, 0x4c13515253545556, 0x575856595a005b5b, 0x2e2e2e57572e5757, 0x2e5c51335c135c5c, 
+	0x0d5d5d015e5f6061, 0x620263640d5d6262, 0x40405d65620d5b33, 0x335b5b0d5151515c, 0x635b0254660c0c0c, 0x400c6567005d0240, 0x40405d6565624068, 0x405b5b6100005b00, 
+	0x134065610c0c4068, 0x4068606653654068, 0x5b5b005b61655b65, 0x4068406565405b5b, 0x6969636a0c606b6b, 0x606b0c6c572e6d69, 0x6e6f706d6f6f6f71, 0x7269707073747369, 
+	0x75767762600c606c, 0x6c6c60600d78796d, 0x6d6d6f6d6d6d6d6d, 0x6d6d7469746d746f, 0x757a7b7c60686c7d, 0x0c6c600c79787e79, 0x7979797979797979, 0x6d6d6d6d6d6d6d6d, 
+	0x757f7b7960406a5b, 0x0c7d0c0278787878, 0x7e79797979797979, 0x79796d6d6d6d6d6d, 0x7b7b7b7b6051023a, 0x807d0261817f827b, 0x7b78787e7e7e7979, 0x7979797979797979, 
+	0x7b7b7b7b40570383, 0x8402625b7a817f7f, 0x82827b7b7b7b787e, 0x7e79797979797979, 0x7b7b78790c5c8586, 0x8780335b88888181, 0x7f7f82827b7b7b7b, 0x7b7b7b7e7e7e7e7e, 
+	0x78787878893e8a36, 0x8b8062008c888881, 0x81817f7f8282827b, 0x7b7b7b7b7b7b7b7b, 0x7878797957572e07, 0x1e0062008d8c8888, 0x7c81817f7f7f7f82, 0x82827b7b7b7b7b7b, 
+	0x78797979505c4283, 0x865b62518e8c8888, 0x887a7c7c817f7f7f, 0x7f7f828282828282, 0x788f79794f5c2e51, 0x903385008c8c8888, 0x88887a7a7a7c7c7c, 0x7f7f7f7f7f7f7f82, 
+	0x787878780d3e5c50, 0x37082e4088888888, 0x888888887a7a7a7a, 0x7c7c7c7f7f7f7f7f, 0x78787878405c4950, 0x9103624092889393, 0x9393888888887a7a, 0x7a7a7a7c7c7c817f, 
+	0x7b7b7b7b5b5c3e07, 0x904f5b5b888c8c8c, 0x8c93939393888888, 0x7a7a7a7a7a7a7c7c, 0x7b7b7b785b832e17, 0x1e4f855b8c8c8d8d, 0x8d8d8d9494949393, 0x8888887a7a7a7a7a, 
+	0x7b7b7b7b512e4956, 0x9508625196969697, 0x9797978d8d949494, 0x9493938888887a7a, 0x7b7b7b78132e5c98, 0x372e8a5199969696, 0x9696979797978d8d, 0x9494949393938888, 
+	0x7b7b78795c494959, 0x980e5b009a9a9b9b, 0x9696969797979797, 0x978d949494949393, 0x7b7b78794c035c9c, 0x3f0185519a9d9d9d, 0x9e9e9b9696979797, 0x9797979794949494, 
+	0x9f7b7b7b85335c98, 0xa0852e009a9d9d9d, 0x9d9e9e9e9e9b9697, 0x9797979797979794, 0x757f7b784051420b, 0x3651850da1a2a2a3, 0xa39d9e9e9e9e9e9e, 0x9b97979797979797, 
+	0x7aa4756f5b518336, 0x395b5c5ba5a6a7a2, 0xa89d9e9e9e9e9e9e, 0x9e9e9ba9a9a99797, 0x947aaaab0c51ac49, 0x08850300adaeafa2, 0xa89e9e9e9e9e9e9e, 0x9e9e9ea99e9e9e9b, 
+	
+};
+
+u64 gLadderMediumDL_Ladder_00_pal_rgba16[] = {
+	0x310528c1184130c1, 0xa391e621518359c3, 0x41017acde663728b, 0x1041310331015249, 0x394149c741853945, 0xa4577a8b7a8d6205, 0xef29c51b8b4fde65, 0xef2dac556a477289, 
+	0x7acb8b0da4158351, 0x9bd39391b499bcdb, 0xac57b49b9bd5b4db, 0x830d6a05390359c5, 0xd59feee98b0f30c3, 0x7247518162076a49, 0x830f59c751875a03, 0x6a077a8949855a07, 
+	0x2083e6a951856a03, 0x7ac97287728d72c9, 0x72c549459393c5e3, 0x39017b0f51c54143, 0x49433905620949c9, 0x520b730f5a0b4987, 0x52095a09624928c3, 0x4145188173134a0b, 
+	0x080128c520813947, 0x72d320c329055a4d, 0x1883184010430841, 0x0001208220402080, 0x1040288228c41842, 0x188239465a4c1880, 0x310228c241863104, 0x4146100130c23944, 
+	0x2041414439044103, 0x51c928816a8b51c7, 0x498639432883620b, 0x51c651c859c82902, 0x72cd49c5498449c6, 0x49c872cb5a085208, 0x6a4b620862485a48, 0x6a45624a5a4a3144, 
+	0x62476a8a6a8c628a, 0x39867b507b1072ce, 0x628c5248524d520d, 0x3081cda193d5730e, 
+};
+
+Vtx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1591, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1591, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1591, 21000, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1591, 21000, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 21000, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 21000, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_0[10] = {
+	{{ {-1520, 19500, 424}, 0, {0, -12364}, {0, 0, 127, 254} }},
+	{{ {1591, 21000, 424}, 0, {2048, -12971}, {0, 0, 127, 254} }},
+	{{ {-1520, 21000, 424}, 0, {0, -12971}, {0, 0, 127, 254} }},
+	{{ {1591, 19500, 424}, 0, {2048, -12364}, {0, 0, 127, 254} }},
+	{{ {-1520, 0, 424}, 0, {0, 984}, {0, 0, 127, 254} }},
+	{{ {1591, 0, 424}, 0, {2048, 984}, {0, 0, 127, 254} }},
+	{{ {-1591, 21000, 212}, 0, {0, -12971}, {0, 0, 129, 254} }},
+	{{ {1591, 21000, 212}, 0, {2048, -12971}, {0, 0, 129, 254} }},
+	{{ {1591, 19500, 212}, 0, {2048, -12364}, {0, 0, 129, 254} }},
+	{{ {-1591, 19500, 212}, 0, {0, -12364}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_0 + 0, 10, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 5, 3, 0),
+	gsSP2Triangles(6, 7, 8, 0, 6, 8, 9, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_1[4] = {
+	{{ {-1591, 19500, 212}, 0, {0, -12364}, {0, 0, 129, 254} }},
+	{{ {1591, 19500, 212}, 0, {2048, -12364}, {0, 0, 129, 254} }},
+	{{ {1591, 0, 212}, 0, {2048, 984}, {0, 0, 129, 254} }},
+	{{ {-1591, 0, 212}, 0, {0, 984}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMediumDL_Ladder[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMediumDL_Ladder_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 175),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMediumDL_Ladder_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMediumDL_LadderShadow[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, ENVIRONMENT, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(0, 0, 0, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMediumDL_Ladder_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 175),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMediumDL_Ladder_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gLadderMediumDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gLadderMediumDL_Ladder),
+	gsSPDisplayList(gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gLadderMediumDL_LadderShadow),
+	gsSPDisplayList(gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_medium_model.h b/assets_hm_pack/objects/object_ladder/ladder_medium_model.h
new file mode 100644
index 000000000..c374e3fb3
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_medium_model.h
@@ -0,0 +1,10 @@
+extern u64 gLadderMediumDL_Ladder_00_ci8[];
+extern u64 gLadderMediumDL_Ladder_00_pal_rgba16[];
+extern Vtx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_0[10];
+extern Gfx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_vtx_1[4];
+extern Gfx gLadderMediumDL_gLadderMediumDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gLadderMediumDL_Ladder[];
+extern Gfx mat_gLadderMediumDL_LadderShadow[];
+extern Gfx gLadderMediumDL[];
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_large_col.c b/assets_hm_pack/objects/object_ladder/ladder_metal_large_col.c
new file mode 100644
index 000000000..f11e6da41
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_large_col.c
@@ -0,0 +1,51 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gLadderMetalLargeCol_polygonTypes[] = {
+	{ 0x00400000, 0x000037c2 },
+	{ 0x00600000, 0x000037c2 },
+	{ 0x00000000, 0x000037c2 },
+};
+
+CollisionPoly gLadderMetalLargeCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0001, 0x2005, 0x0006, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.371135275960114e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0001, 0x2006, 0x0007, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.371135275960114e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0002, 0x2008, 0x0009, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xff2c },
+	{ 0x0002, 0x2008, 0x000a, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.391921137880672e-08), COLPOLY_SNORMAL(1.0), 0xff2c },
+};
+
+Vec3s gLadderMetalLargeCol_vertices[12] = {
+	{ 1556, 0, 424 },
+	{ 1556, 28500, 424 },
+	{ -1556, 28500, 424 },
+	{ -1556, 0, 424 },
+	{ 1556, 29000, 0 },
+	{ 1556, 27000, 0 },
+	{ -1556, 27000, 0 },
+	{ -1556, 29000, 0 },
+	{ 1556, 0, 212 },
+	{ 1556, 28500, 212 },
+	{ -1556, 28500, 212 },
+	{ -1556, 0, 212 },
+};
+
+CollisionHeader gLadderMetalLargeCol_collisionHeader = {
+	-1556,
+	0,
+	0,
+	1556,
+	29000,
+	424,
+	12,
+	gLadderMetalLargeCol_vertices,
+	6,
+	gLadderMetalLargeCol_polygons,
+	gLadderMetalLargeCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_large_col.h b/assets_hm_pack/objects/object_ladder/ladder_metal_large_col.h
new file mode 100644
index 000000000..184a01285
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_large_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gLadderMetalLargeCol_polygonTypes[];
+extern CollisionPoly gLadderMetalLargeCol_polygons[];
+extern Vec3s gLadderMetalLargeCol_vertices[12];
+extern CollisionHeader gLadderMetalLargeCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_large_model.c b/assets_hm_pack/objects/object_ladder/ladder_metal_large_model.c
new file mode 100644
index 000000000..af68e7f27
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_large_model.c
@@ -0,0 +1,130 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gLadderMetalLargeDL_Ladder_01_ci8[] = {
+	0x0001020304000505, 0x000607000408090a, 0x0a0b0c0d000e0f0e, 0x100e0e110e111211, 0x1314131315151416, 0x1714171814191a1b, 0x1c1d161e1f1e1f1e, 0x141a1418151d2021, 
+	0x151a222324131725, 0x1626162713161520, 0x1527141622151528, 0x1a26171615152528, 0x151a2329232a2b2c, 0x2d2e151527151513, 0x2f30311632012815, 0x26171515171a1528, 
+	0x2233341435133637, 0x38393a2a16213918, 0x3b193c3c163d1525, 0x263e3e182e161528, 0x3f31194018354142, 0x4335441e28212115, 0x0114231816231714, 0x21143e2717322d45, 
+	0x2326221e23443535, 0x3543221718211601, 0x21161816391f3e1e, 0x2414141726262645, 0x2e222222131a2e35, 0x432e3e461e392516, 0x1516141416391a14, 0x2223141715472d26, 
+	0x1f1f2a1f131a2243, 0x4348353543231722, 0x183e2426193b1930, 0x193c49441e3e181e, 0x4a4b4c4d35353535, 0x4e3535354f505150, 0x5252505252535154, 0x555350505052524b, 
+	0x5656574d35353535, 0x354e353558595050, 0x4b5a4b5252525254, 0x54525a5a5a52524b, 0x564c574d35351f35, 0x353543355b595050, 0x4b5a525252525254, 0x5452525252525252, 
+	0x5656564b351e1e49, 0x3524241a4c4c5050, 0x4b5a525252525454, 0x54545452525c5c5c, 0x56564b5d2e1a435e, 0x391e132459595050, 0x4b5252525254545f, 0x5f5f5f5f5f5f5f5f, 
+	0x4c4c4c5935606144, 0x5e1e1e495959504b, 0x4b525252525f5f5f, 0x5f5f5f5f5f5f5f62, 0x5959595923221861, 0x4361235e4f59504b, 0x5252525c5f5f5f5f, 0x5f5f626364646464, 
+	0x5959595643222223, 0x491f61615950504b, 0x52525c5f5f5f5f62, 0x6464646464646465, 0x59595866221e2344, 0x1f4949494c504b4b, 0x525c5f5f5f626464, 0x6464646565676767, 
+	0x59594f68401e6123, 0x40603a1e4b4b4b52, 0x525c5f5f62646464, 0x6567676767676769, 0x595959591e1f1a6a, 0x1e491a49504b4b52, 0x5c5f5f6264646567, 0x67676769696b6b6c, 
+	0x59594c4a60444929, 0x35404944504b525c, 0x5f5f6264646d6767, 0x696b6c6c6c6c6e6e, 0x5959505214391944, 0x431a2249504b525c, 0x5f6264656767696b, 0x6c6c6e6e6f707070, 
+	0x59595971191f6a43, 0x612240604b4b525f, 0x62646567676b6c6c, 0x6e6f707070727373, 0x594f4f68233b4343, 0x43444361714b5c5f, 0x646567696b6c6e70, 0x7072727374747575, 
+	0x594f7676446a4443, 0x491e296150525f62, 0x6467696c6e707072, 0x7374747577787878, 0x59595866466a7943, 0x39391e5e50525f64, 0x67696c6e70727474, 0x757778787a7b7b7b, 
+	0x4c59595940444444, 0x1e601e1e525f646d, 0x696c6f7274757778, 0x7a7b7b7c7d7d7d7e, 0x4b4b594d2a221943, 0x43391e1f5f626567, 0x6c70727477787b7b, 0x7c7d7e7e7f7f8080, 
+	0x5c524b5223233b23, 0x193143315f64676c, 0x707375787b7c7d7e, 0x7f80818181828283, 0x5d5f527633231943, 0x311484445f646b70, 0x74777b7c7e7f8081, 0x8283858585858687, 
+	0x6b6d5f5014317943, 0x6a23146a5f676e74, 0x787b7e8081828385, 0x8688888888888889, 0x7570698a25313e19, 0x14182e43646c7378, 0x7b7f838586858888, 0x898b8c8b8b8b8b8c, 
+	
+};
+
+u64 gLadderMetalLargeDL_Ladder_01_pal_rgba16[] = {
+	0x84615ad7631994e5, 0x6317a529841f7bdd, 0x735b6b5b7bdfb5ad, 0x84218c61ad69ad6b, 0xa527b5ab8ca339cf, 0x398b4a51420f41cd, 0x39cd3107398d4251, 0x5b1942112909318b, 
+	0x4a954a53314b3149, 0x104352934a0f5295, 0x525328c7318d6b59, 0x9ca152514a1149cd, 0x418b39495ad54a0d, 0x418d0843ce2fe6f5, 0x94612949294b3147, 0x39894a9341cf6b17, 
+	0x21071083945f2907, 0x20c562d531094189, 0x394b20c729482908, 0x21061042084120c4, 0x2906310631483146, 0x3948418a210818c6, 0x188420c6310818c4, 0x314a39cc1883398a, 
+	0x21092085398c418c, 0x41cc41ce08424a0e, 0x18824a1028c54a50, 0x5250420e52525292, 0x5a9228c65a945ad4, 0x62d462d620846316, 0x6b1629056b186b58, 0x7358735a739a7b9a, 
+	0x7b9c7bdc83dc83de, 0x6b15841e8c1e8c20, 0x8c60946239ce94a2, 0x9ca2000000000000
+};
+
+Vtx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1626, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 28500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 28500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 28500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 28500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_0[12] = {
+	{{ {-1626, 28500, 212}, 0, {0, -18040}, {0, 0, 129, 254} }},
+	{{ {1556, 27000, 212}, 0, {2048, -17496}, {0, 0, 129, 254} }},
+	{{ {-1626, 27000, 212}, 0, {0, -17496}, {0, 0, 129, 254} }},
+	{{ {1556, 28500, 212}, 0, {2048, -18040}, {0, 0, 129, 254} }},
+	{{ {-1556, 27000, 424}, 0, {0, -17496}, {0, 0, 127, 254} }},
+	{{ {1556, 28500, 424}, 0, {2048, -18040}, {0, 0, 127, 254} }},
+	{{ {-1556, 28500, 424}, 0, {0, -18040}, {0, 0, 127, 254} }},
+	{{ {1556, 27000, 424}, 0, {2048, -17496}, {0, 0, 127, 254} }},
+	{{ {-1556, 0, 424}, 0, {0, 984}, {0, 0, 127, 254} }},
+	{{ {1556, 27000, 424}, 0, {2048, -17498}, {0, 0, 127, 254} }},
+	{{ {-1556, 27000, 424}, 0, {0, -17498}, {0, 0, 127, 254} }},
+	{{ {1556, 0, 424}, 0, {2048, 984}, {0, 0, 127, 254} }},
+};
+
+Gfx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_0 + 0, 12, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 11, 9, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_1[5] = {
+	{{ {-1626, 27000, 212}, 0, {0, -17498}, {0, 0, 129, 254} }},
+	{{ {1556, 27000, 212}, 0, {2048, -17498}, {0, 0, 129, 254} }},
+	{{ {1556, 0, 212}, 0, {2048, 984}, {0, 0, 129, 254} }},
+	{{ {-1626, 27000, 212}, 0, {0, -17498}, {0, 0, 129, 254} }},
+	{{ {-1626, 0, 212}, 0, {0, 984}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMetalLargeDL_LadderMetal[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMetalLargeDL_Ladder_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 140),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMetalLargeDL_Ladder_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMetalLargeDL_LadderMetalShadow[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, ENVIRONMENT, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(0, 0, 0, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMetalLargeDL_Ladder_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 140),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMetalLargeDL_Ladder_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gLadderMetalLargeDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gLadderMetalLargeDL_LadderMetal),
+	gsSPDisplayList(gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gLadderMetalLargeDL_LadderMetalShadow),
+	gsSPDisplayList(gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_large_model.h b/assets_hm_pack/objects/object_ladder/ladder_metal_large_model.h
new file mode 100644
index 000000000..61a67f71a
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_large_model.h
@@ -0,0 +1,10 @@
+extern u64 gLadderMetalLargeDL_Ladder_01_ci8[];
+extern u64 gLadderMetalLargeDL_Ladder_01_pal_rgba16[];
+extern Vtx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_0[12];
+extern Gfx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_vtx_1[5];
+extern Gfx gLadderMetalLargeDL_gLadderMetalLargeDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gLadderMetalLargeDL_LadderMetal[];
+extern Gfx mat_gLadderMetalLargeDL_LadderMetalShadow[];
+extern Gfx gLadderMetalLargeDL[];
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_medium_col.c b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_col.c
new file mode 100644
index 000000000..b16fdee6c
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_col.c
@@ -0,0 +1,51 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gLadderMetalMediumCol_polygonTypes[] = {
+	{ 0x00400000, 0x000037c2 },
+	{ 0x00600000, 0x000037c2 },
+	{ 0x00000000, 0x000037c2 },
+};
+
+CollisionPoly gLadderMetalMediumCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.39939071839035e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.39939071839035e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0001, 0x2005, 0x0006, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711395392165286e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0001, 0x2006, 0x0007, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711395392165286e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0002, 0x2008, 0x0009, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.39939071839035e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+	{ 0x0002, 0x2008, 0x000b, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.39939071839035e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+};
+
+Vec3s gLadderMetalMediumCol_vertices[12] = {
+	{ 1591, 0, 424 },
+	{ 1591, 21000, 424 },
+	{ -1591, 21000, 424 },
+	{ -1591, 0, 424 },
+	{ 1591, 21500, 0 },
+	{ 1591, 19500, 0 },
+	{ -1591, 19500, 0 },
+	{ -1591, 21500, 0 },
+	{ 1591, 0, 212 },
+	{ -1591, 21000, 212 },
+	{ 1591, 21000, 212 },
+	{ -1591, 0, 212 },
+};
+
+CollisionHeader gLadderMetalMediumCol_collisionHeader = {
+	-1591,
+	0,
+	0,
+	1591,
+	21500,
+	424,
+	12,
+	gLadderMetalMediumCol_vertices,
+	6,
+	gLadderMetalMediumCol_polygons,
+	gLadderMetalMediumCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_medium_col.h b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_col.h
new file mode 100644
index 000000000..cdec7a3c5
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gLadderMetalMediumCol_polygonTypes[];
+extern CollisionPoly gLadderMetalMediumCol_polygons[];
+extern Vec3s gLadderMetalMediumCol_vertices[12];
+extern CollisionHeader gLadderMetalMediumCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_medium_model.c b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_model.c
new file mode 100644
index 000000000..76dc708cd
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_model.c
@@ -0,0 +1,127 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gLadderMetalMediumDL_Ladder_01_ci8[] = {
+	0x0001020304000505, 0x000607000408090a, 0x0a0b0c0d000e0f0e, 0x100e0e110e111211, 0x1314131315151416, 0x1714171814191a1b, 0x1c1d161e1f1e1f1e, 0x141a1418151d2021, 
+	0x151a222324131725, 0x1626162713161520, 0x1527141622151528, 0x1a26171615152528, 0x151a2329232a2b2c, 0x2d2e151527151513, 0x2f30311632012815, 0x26171515171a1528, 
+	0x2233341435133637, 0x38393a2a16213918, 0x3b193c3c163d1525, 0x263e3e182e161528, 0x3f31194018354142, 0x4335441e28212115, 0x0114231816231714, 0x21143e2717322d45, 
+	0x2326221e23443535, 0x3543221718211601, 0x21161816391f3e1e, 0x2414141726262645, 0x2e222222131a2e35, 0x432e3e461e392516, 0x1516141416391a14, 0x2223141715472d26, 
+	0x1f1f2a1f131a2243, 0x4348353543231722, 0x183e2426193b1930, 0x193c49441e3e181e, 0x4a4b4c4d35353535, 0x4e3535354f505150, 0x5252505252535154, 0x555350505052524b, 
+	0x5656574d35353535, 0x354e353558595050, 0x4b5a4b5252525254, 0x54525a5a5a52524b, 0x564c574d35351f35, 0x353543355b595050, 0x4b5a525252525254, 0x5452525252525252, 
+	0x5656564b351e1e49, 0x3524241a4c4c5050, 0x4b5a525252525454, 0x54545452525c5c5c, 0x56564b5d2e1a435e, 0x391e132459595050, 0x4b5252525254545f, 0x5f5f5f5f5f5f5f5f, 
+	0x4c4c4c5935606144, 0x5e1e1e495959504b, 0x4b525252525f5f5f, 0x5f5f5f5f5f5f5f62, 0x5959595923221861, 0x4361235e4f59504b, 0x5252525c5f5f5f5f, 0x5f5f626364646464, 
+	0x5959595643222223, 0x491f61615950504b, 0x52525c5f5f5f5f62, 0x6464646464646465, 0x59595866221e2344, 0x1f4949494c504b4b, 0x525c5f5f5f626464, 0x6464646565676767, 
+	0x59594f68401e6123, 0x40603a1e4b4b4b52, 0x525c5f5f62646464, 0x6567676767676769, 0x595959591e1f1a6a, 0x1e491a49504b4b52, 0x5c5f5f6264646567, 0x67676769696b6b6c, 
+	0x59594c4a60444929, 0x35404944504b525c, 0x5f5f6264646d6767, 0x696b6c6c6c6c6e6e, 0x5959505214391944, 0x431a2249504b525c, 0x5f6264656767696b, 0x6c6c6e6e6f707070, 
+	0x59595971191f6a43, 0x612240604b4b525f, 0x62646567676b6c6c, 0x6e6f707070727373, 0x594f4f68233b4343, 0x43444361714b5c5f, 0x646567696b6c6e70, 0x7072727374747575, 
+	0x594f7676446a4443, 0x491e296150525f62, 0x6467696c6e707072, 0x7374747577787878, 0x59595866466a7943, 0x39391e5e50525f64, 0x67696c6e70727474, 0x757778787a7b7b7b, 
+	0x4c59595940444444, 0x1e601e1e525f646d, 0x696c6f7274757778, 0x7a7b7b7c7d7d7d7e, 0x4b4b594d2a221943, 0x43391e1f5f626567, 0x6c70727477787b7b, 0x7c7d7e7e7f7f8080, 
+	0x5c524b5223233b23, 0x193143315f64676c, 0x707375787b7c7d7e, 0x7f80818181828283, 0x5d5f527633231943, 0x311484445f646b70, 0x74777b7c7e7f8081, 0x8283858585858687, 
+	0x6b6d5f5014317943, 0x6a23146a5f676e74, 0x787b7e8081828385, 0x8688888888888889, 0x7570698a25313e19, 0x14182e43646c7378, 0x7b7f838586858888, 0x898b8c8b8b8b8b8c, 
+	
+};
+
+u64 gLadderMetalMediumDL_Ladder_01_pal_rgba16[] = {
+	0x84615ad7631994e5, 0x6317a529841f7bdd, 0x735b6b5b7bdfb5ad, 0x84218c61ad69ad6b, 0xa527b5ab8ca339cf, 0x398b4a51420f41cd, 0x39cd3107398d4251, 0x5b1942112909318b, 
+	0x4a954a53314b3149, 0x104352934a0f5295, 0x525328c7318d6b59, 0x9ca152514a1149cd, 0x418b39495ad54a0d, 0x418d0843ce2fe6f5, 0x94612949294b3147, 0x39894a9341cf6b17, 
+	0x21071083945f2907, 0x20c562d531094189, 0x394b20c729482908, 0x21061042084120c4, 0x2906310631483146, 0x3948418a210818c6, 0x188420c6310818c4, 0x314a39cc1883398a, 
+	0x21092085398c418c, 0x41cc41ce08424a0e, 0x18824a1028c54a50, 0x5250420e52525292, 0x5a9228c65a945ad4, 0x62d462d620846316, 0x6b1629056b186b58, 0x7358735a739a7b9a, 
+	0x7b9c7bdc83dc83de, 0x6b15841e8c1e8c20, 0x8c60946239ce94a2, 0x9ca2000000000000
+};
+
+Vtx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1591, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1591, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1591, 21000, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1591, 21000, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 21000, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1591, 21000, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_0[10] = {
+	{{ {-1520, 19500, 424}, 0, {0, -12364}, {0, 0, 127, 254} }},
+	{{ {1591, 21000, 424}, 0, {2048, -12971}, {0, 0, 127, 254} }},
+	{{ {-1520, 21000, 424}, 0, {0, -12971}, {0, 0, 127, 254} }},
+	{{ {1591, 19500, 424}, 0, {2048, -12364}, {0, 0, 127, 254} }},
+	{{ {-1520, 0, 424}, 0, {0, 984}, {0, 0, 127, 254} }},
+	{{ {1591, 0, 424}, 0, {2048, 984}, {0, 0, 127, 254} }},
+	{{ {-1591, 21000, 212}, 0, {0, -12971}, {0, 0, 129, 254} }},
+	{{ {1591, 21000, 212}, 0, {2048, -12971}, {0, 0, 129, 254} }},
+	{{ {1591, 19500, 212}, 0, {2048, -12364}, {0, 0, 129, 254} }},
+	{{ {-1591, 19500, 212}, 0, {0, -12364}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_0 + 0, 10, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 5, 3, 0),
+	gsSP2Triangles(6, 7, 8, 0, 6, 8, 9, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_1[4] = {
+	{{ {-1591, 19500, 212}, 0, {0, -12364}, {0, 0, 129, 254} }},
+	{{ {1591, 19500, 212}, 0, {2048, -12364}, {0, 0, 129, 254} }},
+	{{ {1591, 0, 212}, 0, {2048, 984}, {0, 0, 129, 254} }},
+	{{ {-1591, 0, 212}, 0, {0, 984}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_1 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMetalMediumDL_LadderMetal[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMetalMediumDL_Ladder_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 140),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMetalMediumDL_Ladder_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMetalMediumDL_LadderMetalShadow[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, ENVIRONMENT, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(0, 0, 0, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMetalMediumDL_Ladder_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 140),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMetalMediumDL_Ladder_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gLadderMetalMediumDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gLadderMetalMediumDL_LadderMetal),
+	gsSPDisplayList(gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gLadderMetalMediumDL_LadderMetalShadow),
+	gsSPDisplayList(gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_medium_model.h b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_model.h
new file mode 100644
index 000000000..37c72985b
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_medium_model.h
@@ -0,0 +1,10 @@
+extern u64 gLadderMetalMediumDL_Ladder_01_ci8[];
+extern u64 gLadderMetalMediumDL_Ladder_01_pal_rgba16[];
+extern Vtx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_0[10];
+extern Gfx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_vtx_1[4];
+extern Gfx gLadderMetalMediumDL_gLadderMetalMediumDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gLadderMetalMediumDL_LadderMetal[];
+extern Gfx mat_gLadderMetalMediumDL_LadderMetalShadow[];
+extern Gfx gLadderMetalMediumDL[];
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_small_col.c b/assets_hm_pack/objects/object_ladder/ladder_metal_small_col.c
new file mode 100644
index 000000000..5278ce7f5
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_small_col.c
@@ -0,0 +1,51 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gLadderMetalSmallCol_polygonTypes[] = {
+	{ 0x00400000, 0x000037c2 },
+	{ 0x00600000, 0x000037c2 },
+	{ 0x00000000, 0x000037c2 },
+};
+
+CollisionPoly gLadderMetalSmallCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.4151590827823384e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.4151590827823384e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0001, 0x2005, 0x0006, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711398944878965e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0001, 0x2006, 0x0007, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711398944878965e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0002, 0x2008, 0x0009, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.4151590827823384e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+	{ 0x0002, 0x2008, 0x000b, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.4151590827823384e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+};
+
+Vec3s gLadderMetalSmallCol_vertices[12] = {
+	{ 1556, 0, 424 },
+	{ 1556, 13500, 424 },
+	{ -1556, 13500, 424 },
+	{ -1556, 0, 424 },
+	{ 1556, 14000, 0 },
+	{ 1556, 12000, 0 },
+	{ -1556, 12000, 0 },
+	{ -1556, 14000, 0 },
+	{ 1556, 0, 212 },
+	{ -1556, 13500, 212 },
+	{ 1556, 13500, 212 },
+	{ -1556, 0, 212 },
+};
+
+CollisionHeader gLadderMetalSmallCol_collisionHeader = {
+	-1556,
+	0,
+	0,
+	1556,
+	14000,
+	424,
+	12,
+	gLadderMetalSmallCol_vertices,
+	6,
+	gLadderMetalSmallCol_polygons,
+	gLadderMetalSmallCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_small_col.h b/assets_hm_pack/objects/object_ladder/ladder_metal_small_col.h
new file mode 100644
index 000000000..1fbfc728b
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_small_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gLadderMetalSmallCol_polygonTypes[];
+extern CollisionPoly gLadderMetalSmallCol_polygons[];
+extern Vec3s gLadderMetalSmallCol_vertices[12];
+extern CollisionHeader gLadderMetalSmallCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_small_model.c b/assets_hm_pack/objects/object_ladder/ladder_metal_small_model.c
new file mode 100644
index 000000000..c2548d383
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_small_model.c
@@ -0,0 +1,131 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gLadderMetalSmallDL_Ladder_01_ci8[] = {
+	0x0001020304000505, 0x000607000408090a, 0x0a0b0c0d000e0f0e, 0x100e0e110e111211, 0x1314131315151416, 0x1714171814191a1b, 0x1c1d161e1f1e1f1e, 0x141a1418151d2021, 
+	0x151a222324131725, 0x1626162713161520, 0x1527141622151528, 0x1a26171615152528, 0x151a2329232a2b2c, 0x2d2e151527151513, 0x2f30311632012815, 0x26171515171a1528, 
+	0x2233341435133637, 0x38393a2a16213918, 0x3b193c3c163d1525, 0x263e3e182e161528, 0x3f31194018354142, 0x4335441e28212115, 0x0114231816231714, 0x21143e2717322d45, 
+	0x2326221e23443535, 0x3543221718211601, 0x21161816391f3e1e, 0x2414141726262645, 0x2e222222131a2e35, 0x432e3e461e392516, 0x1516141416391a14, 0x2223141715472d26, 
+	0x1f1f2a1f131a2243, 0x4348353543231722, 0x183e2426193b1930, 0x193c49441e3e181e, 0x4a4b4c4d35353535, 0x4e3535354f505150, 0x5252505252535154, 0x555350505052524b, 
+	0x5656574d35353535, 0x354e353558595050, 0x4b5a4b5252525254, 0x54525a5a5a52524b, 0x564c574d35351f35, 0x353543355b595050, 0x4b5a525252525254, 0x5452525252525252, 
+	0x5656564b351e1e49, 0x3524241a4c4c5050, 0x4b5a525252525454, 0x54545452525c5c5c, 0x56564b5d2e1a435e, 0x391e132459595050, 0x4b5252525254545f, 0x5f5f5f5f5f5f5f5f, 
+	0x4c4c4c5935606144, 0x5e1e1e495959504b, 0x4b525252525f5f5f, 0x5f5f5f5f5f5f5f62, 0x5959595923221861, 0x4361235e4f59504b, 0x5252525c5f5f5f5f, 0x5f5f626364646464, 
+	0x5959595643222223, 0x491f61615950504b, 0x52525c5f5f5f5f62, 0x6464646464646465, 0x59595866221e2344, 0x1f4949494c504b4b, 0x525c5f5f5f626464, 0x6464646565676767, 
+	0x59594f68401e6123, 0x40603a1e4b4b4b52, 0x525c5f5f62646464, 0x6567676767676769, 0x595959591e1f1a6a, 0x1e491a49504b4b52, 0x5c5f5f6264646567, 0x67676769696b6b6c, 
+	0x59594c4a60444929, 0x35404944504b525c, 0x5f5f6264646d6767, 0x696b6c6c6c6c6e6e, 0x5959505214391944, 0x431a2249504b525c, 0x5f6264656767696b, 0x6c6c6e6e6f707070, 
+	0x59595971191f6a43, 0x612240604b4b525f, 0x62646567676b6c6c, 0x6e6f707070727373, 0x594f4f68233b4343, 0x43444361714b5c5f, 0x646567696b6c6e70, 0x7072727374747575, 
+	0x594f7676446a4443, 0x491e296150525f62, 0x6467696c6e707072, 0x7374747577787878, 0x59595866466a7943, 0x39391e5e50525f64, 0x67696c6e70727474, 0x757778787a7b7b7b, 
+	0x4c59595940444444, 0x1e601e1e525f646d, 0x696c6f7274757778, 0x7a7b7b7c7d7d7d7e, 0x4b4b594d2a221943, 0x43391e1f5f626567, 0x6c70727477787b7b, 0x7c7d7e7e7f7f8080, 
+	0x5c524b5223233b23, 0x193143315f64676c, 0x707375787b7c7d7e, 0x7f80818181828283, 0x5d5f527633231943, 0x311484445f646b70, 0x74777b7c7e7f8081, 0x8283858585858687, 
+	0x6b6d5f5014317943, 0x6a23146a5f676e74, 0x787b7e8081828385, 0x8688888888888889, 0x7570698a25313e19, 0x14182e43646c7378, 0x7b7f838586858888, 0x898b8c8b8b8b8b8c, 
+	
+};
+
+u64 gLadderMetalSmallDL_Ladder_01_pal_rgba16[] = {
+	0x84615ad7631994e5, 0x6317a529841f7bdd, 0x735b6b5b7bdfb5ad, 0x84218c61ad69ad6b, 0xa527b5ab8ca339cf, 0x398b4a51420f41cd, 0x39cd3107398d4251, 0x5b1942112909318b, 
+	0x4a954a53314b3149, 0x104352934a0f5295, 0x525328c7318d6b59, 0x9ca152514a1149cd, 0x418b39495ad54a0d, 0x418d0843ce2fe6f5, 0x94612949294b3147, 0x39894a9341cf6b17, 
+	0x21071083945f2907, 0x20c562d531094189, 0x394b20c729482908, 0x21061042084120c4, 0x2906310631483146, 0x3948418a210818c6, 0x188420c6310818c4, 0x314a39cc1883398a, 
+	0x21092085398c418c, 0x41cc41ce08424a0e, 0x18824a1028c54a50, 0x5250420e52525292, 0x5a9228c65a945ad4, 0x62d462d620846316, 0x6b1629056b186b58, 0x7358735a739a7b9a, 
+	0x7b9c7bdc83dc83de, 0x6b15841e8c1e8c20, 0x8c60946239ce94a2, 0x9ca2000000000000
+};
+
+Vtx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1626, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 13500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 13500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 13500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 13500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_0[13] = {
+	{{ {-1556, 0, 424}, 0, {0, 984}, {0, 0, 127, 254} }},
+	{{ {1556, 12000, 424}, 0, {2048, -7230}, {0, 0, 127, 254} }},
+	{{ {-1556, 12000, 424}, 0, {0, -7230}, {0, 0, 127, 254} }},
+	{{ {1556, 0, 424}, 0, {2048, 984}, {0, 0, 127, 254} }},
+	{{ {1556, 12000, 424}, 0, {2048, -7230}, {0, 0, 127, 254} }},
+	{{ {-1626, 13500, 212}, 0, {0, -7840}, {0, 0, 129, 254} }},
+	{{ {1556, 12000, 212}, 0, {2048, -7232}, {0, 0, 129, 254} }},
+	{{ {-1626, 12000, 212}, 0, {0, -7232}, {0, 0, 129, 254} }},
+	{{ {1556, 13500, 212}, 0, {2048, -7840}, {0, 0, 129, 254} }},
+	{{ {-1556, 12000, 424}, 0, {0, -7232}, {0, 0, 127, 254} }},
+	{{ {1556, 13500, 424}, 0, {2048, -7840}, {0, 0, 127, 254} }},
+	{{ {-1556, 13500, 424}, 0, {0, -7840}, {0, 0, 127, 254} }},
+	{{ {1556, 12000, 424}, 0, {2048, -7232}, {0, 0, 127, 254} }},
+};
+
+Gfx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_0 + 0, 13, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 4, 0),
+	gsSP2Triangles(5, 6, 7, 0, 5, 8, 6, 0),
+	gsSP2Triangles(9, 10, 11, 0, 9, 12, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_1[5] = {
+	{{ {-1626, 12000, 212}, 0, {0, -7230}, {0, 0, 129, 254} }},
+	{{ {1556, 12000, 212}, 0, {2048, -7230}, {0, 0, 129, 254} }},
+	{{ {1556, 0, 212}, 0, {2048, 984}, {0, 0, 129, 254} }},
+	{{ {-1626, 12000, 212}, 0, {0, -7230}, {0, 0, 129, 254} }},
+	{{ {-1626, 0, 212}, 0, {0, 984}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMetalSmallDL_LadderMetal[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMetalSmallDL_Ladder_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 140),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMetalSmallDL_Ladder_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderMetalSmallDL_LadderMetalShadow[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, ENVIRONMENT, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(0, 0, 0, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderMetalSmallDL_Ladder_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 140),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderMetalSmallDL_Ladder_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gLadderMetalSmallDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gLadderMetalSmallDL_LadderMetal),
+	gsSPDisplayList(gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gLadderMetalSmallDL_LadderMetalShadow),
+	gsSPDisplayList(gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_metal_small_model.h b/assets_hm_pack/objects/object_ladder/ladder_metal_small_model.h
new file mode 100644
index 000000000..d88135f0a
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_metal_small_model.h
@@ -0,0 +1,10 @@
+extern u64 gLadderMetalSmallDL_Ladder_01_ci8[];
+extern u64 gLadderMetalSmallDL_Ladder_01_pal_rgba16[];
+extern Vtx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_0[13];
+extern Gfx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_vtx_1[5];
+extern Gfx gLadderMetalSmallDL_gLadderMetalSmallDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gLadderMetalSmallDL_LadderMetal[];
+extern Gfx mat_gLadderMetalSmallDL_LadderMetalShadow[];
+extern Gfx gLadderMetalSmallDL[];
diff --git a/assets_hm_pack/objects/object_ladder/ladder_small_col.c b/assets_hm_pack/objects/object_ladder/ladder_small_col.c
new file mode 100644
index 000000000..ab0fabbbe
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_small_col.c
@@ -0,0 +1,51 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gLadderSmallCol_polygonTypes[] = {
+	{ 0x00400000, 0x000237ca },
+	{ 0x00600000, 0x000037ca },
+	{ 0x00000000, 0x000237ca },
+};
+
+CollisionPoly gLadderSmallCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.4151590827823384e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.4151590827823384e-08), COLPOLY_SNORMAL(1.0), 0xfe58 },
+	{ 0x0001, 0x2005, 0x0006, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711395392165286e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0001, 0x2006, 0x0007, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.3711395392165286e-08), COLPOLY_SNORMAL(-1.0), 0x0000 },
+	{ 0x0002, 0x2008, 0x0009, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.4151590827823384e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+	{ 0x0002, 0x2008, 0x000b, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.4151590827823384e-08), COLPOLY_SNORMAL(-1.0), 0x00d4 },
+};
+
+Vec3s gLadderSmallCol_vertices[12] = {
+	{ 1556, 0, 424 },
+	{ 1556, 13500, 424 },
+	{ -1556, 13500, 424 },
+	{ -1556, 0, 424 },
+	{ 1556, 14000, 0 },
+	{ 1556, 12000, 0 },
+	{ -1556, 12000, 0 },
+	{ -1556, 14000, 0 },
+	{ 1556, 0, 212 },
+	{ -1556, 13500, 212 },
+	{ 1556, 13500, 212 },
+	{ -1556, 0, 212 },
+};
+
+CollisionHeader gLadderSmallCol_collisionHeader = {
+	-1556,
+	0,
+	0,
+	1556,
+	14000,
+	424,
+	12,
+	gLadderSmallCol_vertices,
+	6,
+	gLadderSmallCol_polygons,
+	gLadderSmallCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_small_col.h b/assets_hm_pack/objects/object_ladder/ladder_small_col.h
new file mode 100644
index 000000000..75e3f1ace
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_small_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gLadderSmallCol_polygonTypes[];
+extern CollisionPoly gLadderSmallCol_polygons[];
+extern Vec3s gLadderSmallCol_vertices[12];
+extern CollisionHeader gLadderSmallCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_ladder/ladder_small_model.c b/assets_hm_pack/objects/object_ladder/ladder_small_model.c
new file mode 100644
index 000000000..ad583695e
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_small_model.c
@@ -0,0 +1,132 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gLadderSmallDL_Ladder_00_ci8[] = {
+	0x0001020304050607, 0x08090a0b0c0d0e0f, 0x1011121013121001, 0x1312121210101010, 0x14150b161718191a, 0x1b1c1d1e1f201a21, 0x1a22232425262426, 0x2727281d22292a2b, 
+	0x2c202d1a2e2f3031, 0x3132332434062f35, 0x3637381e393a173b, 0x36361e3c1f203d37, 0x1f1e3e253f404141, 0x304207221f094344, 0x44443936370b4420, 0x1e37454409460b37, 
+	0x47093648494a4b2b, 0x2f374c4d2f3f3636, 0x2f2f4e422f2f2f4f, 0x3e49420642502f3f, 0x4c13515253545556, 0x575856595a005b5b, 0x2e2e2e57572e5757, 0x2e5c51335c135c5c, 
+	0x0d5d5d015e5f6061, 0x620263640d5d6262, 0x40405d65620d5b33, 0x335b5b0d5151515c, 0x635b0254660c0c0c, 0x400c6567005d0240, 0x40405d6565624068, 0x405b5b6100005b00, 
+	0x134065610c0c4068, 0x4068606653654068, 0x5b5b005b61655b65, 0x4068406565405b5b, 0x6969636a0c606b6b, 0x606b0c6c572e6d69, 0x6e6f706d6f6f6f71, 0x7269707073747369, 
+	0x75767762600c606c, 0x6c6c60600d78796d, 0x6d6d6f6d6d6d6d6d, 0x6d6d7469746d746f, 0x757a7b7c60686c7d, 0x0c6c600c79787e79, 0x7979797979797979, 0x6d6d6d6d6d6d6d6d, 
+	0x757f7b7960406a5b, 0x0c7d0c0278787878, 0x7e79797979797979, 0x79796d6d6d6d6d6d, 0x7b7b7b7b6051023a, 0x807d0261817f827b, 0x7b78787e7e7e7979, 0x7979797979797979, 
+	0x7b7b7b7b40570383, 0x8402625b7a817f7f, 0x82827b7b7b7b787e, 0x7e79797979797979, 0x7b7b78790c5c8586, 0x8780335b88888181, 0x7f7f82827b7b7b7b, 0x7b7b7b7e7e7e7e7e, 
+	0x78787878893e8a36, 0x8b8062008c888881, 0x81817f7f8282827b, 0x7b7b7b7b7b7b7b7b, 0x7878797957572e07, 0x1e0062008d8c8888, 0x7c81817f7f7f7f82, 0x82827b7b7b7b7b7b, 
+	0x78797979505c4283, 0x865b62518e8c8888, 0x887a7c7c817f7f7f, 0x7f7f828282828282, 0x788f79794f5c2e51, 0x903385008c8c8888, 0x88887a7a7a7c7c7c, 0x7f7f7f7f7f7f7f82, 
+	0x787878780d3e5c50, 0x37082e4088888888, 0x888888887a7a7a7a, 0x7c7c7c7f7f7f7f7f, 0x78787878405c4950, 0x9103624092889393, 0x9393888888887a7a, 0x7a7a7a7c7c7c817f, 
+	0x7b7b7b7b5b5c3e07, 0x904f5b5b888c8c8c, 0x8c93939393888888, 0x7a7a7a7a7a7a7c7c, 0x7b7b7b785b832e17, 0x1e4f855b8c8c8d8d, 0x8d8d8d9494949393, 0x8888887a7a7a7a7a, 
+	0x7b7b7b7b512e4956, 0x9508625196969697, 0x9797978d8d949494, 0x9493938888887a7a, 0x7b7b7b78132e5c98, 0x372e8a5199969696, 0x9696979797978d8d, 0x9494949393938888, 
+	0x7b7b78795c494959, 0x980e5b009a9a9b9b, 0x9696969797979797, 0x978d949494949393, 0x7b7b78794c035c9c, 0x3f0185519a9d9d9d, 0x9e9e9b9696979797, 0x9797979794949494, 
+	0x9f7b7b7b85335c98, 0xa0852e009a9d9d9d, 0x9d9e9e9e9e9b9697, 0x9797979797979794, 0x757f7b784051420b, 0x3651850da1a2a2a3, 0xa39d9e9e9e9e9e9e, 0x9b97979797979797, 
+	0x7aa4756f5b518336, 0x395b5c5ba5a6a7a2, 0xa89d9e9e9e9e9e9e, 0x9e9e9ba9a9a99797, 0x947aaaab0c51ac49, 0x08850300adaeafa2, 0xa89e9e9e9e9e9e9e, 0x9e9e9ea99e9e9e9b, 
+	
+};
+
+u64 gLadderSmallDL_Ladder_00_pal_rgba16[] = {
+	0x310528c1184130c1, 0xa391e621518359c3, 0x41017acde663728b, 0x1041310331015249, 0x394149c741853945, 0xa4577a8b7a8d6205, 0xef29c51b8b4fde65, 0xef2dac556a477289, 
+	0x7acb8b0da4158351, 0x9bd39391b499bcdb, 0xac57b49b9bd5b4db, 0x830d6a05390359c5, 0xd59feee98b0f30c3, 0x7247518162076a49, 0x830f59c751875a03, 0x6a077a8949855a07, 
+	0x2083e6a951856a03, 0x7ac97287728d72c9, 0x72c549459393c5e3, 0x39017b0f51c54143, 0x49433905620949c9, 0x520b730f5a0b4987, 0x52095a09624928c3, 0x4145188173134a0b, 
+	0x080128c520813947, 0x72d320c329055a4d, 0x1883184010430841, 0x0001208220402080, 0x1040288228c41842, 0x188239465a4c1880, 0x310228c241863104, 0x4146100130c23944, 
+	0x2041414439044103, 0x51c928816a8b51c7, 0x498639432883620b, 0x51c651c859c82902, 0x72cd49c5498449c6, 0x49c872cb5a085208, 0x6a4b620862485a48, 0x6a45624a5a4a3144, 
+	0x62476a8a6a8c628a, 0x39867b507b1072ce, 0x628c5248524d520d, 0x3081cda193d5730e, 
+};
+
+Vtx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{ {-1626, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 13500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {-1626, 13500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 0, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 13500, 424}, 0, {-16, -16}, {0, 0, 0, 0} }},
+	{{ {1556, 13500, 212}, 0, {-16, -16}, {0, 0, 0, 0} }},
+};
+
+Vtx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_0[13] = {
+	{{ {-1556, 0, 424}, 0, {0, 984}, {0, 0, 127, 254} }},
+	{{ {1556, 12000, 424}, 0, {2048, -7230}, {0, 0, 127, 254} }},
+	{{ {-1556, 12000, 424}, 0, {0, -7230}, {0, 0, 127, 254} }},
+	{{ {1556, 0, 424}, 0, {2048, 984}, {0, 0, 127, 254} }},
+	{{ {1556, 12000, 424}, 0, {2048, -7230}, {0, 0, 127, 254} }},
+	{{ {-1626, 13500, 212}, 0, {0, -7840}, {0, 0, 129, 254} }},
+	{{ {1556, 12000, 212}, 0, {2048, -7232}, {0, 0, 129, 254} }},
+	{{ {-1626, 12000, 212}, 0, {0, -7232}, {0, 0, 129, 254} }},
+	{{ {1556, 13500, 212}, 0, {2048, -7840}, {0, 0, 129, 254} }},
+	{{ {-1556, 12000, 424}, 0, {0, -7232}, {0, 0, 127, 254} }},
+	{{ {1556, 13500, 424}, 0, {2048, -7840}, {0, 0, 127, 254} }},
+	{{ {-1556, 13500, 424}, 0, {0, -7840}, {0, 0, 127, 254} }},
+	{{ {1556, 12000, 424}, 0, {2048, -7232}, {0, 0, 127, 254} }},
+};
+
+Gfx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_0 + 0, 13, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 4, 0),
+	gsSP2Triangles(5, 6, 7, 0, 5, 8, 6, 0),
+	gsSP2Triangles(9, 10, 11, 0, 9, 12, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_1[5] = {
+	{{ {-1626, 12000, 212}, 0, {0, -7230}, {0, 0, 129, 254} }},
+	{{ {1556, 12000, 212}, 0, {2048, -7230}, {0, 0, 129, 254} }},
+	{{ {1556, 0, 212}, 0, {2048, 984}, {0, 0, 129, 254} }},
+	{{ {-1626, 12000, 212}, 0, {0, -7230}, {0, 0, 129, 254} }},
+	{{ {-1626, 0, 212}, 0, {0, 984}, {0, 0, 129, 254} }},
+};
+
+Gfx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderSmallDL_Ladder[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderSmallDL_Ladder_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 175),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderSmallDL_Ladder_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gLadderSmallDL_LadderShadow[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, ENVIRONMENT, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 3, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(0, 0, 0, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gLadderSmallDL_Ladder_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 175),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gLadderSmallDL_Ladder_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gLadderSmallDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPSetGeometryMode(G_LIGHTING),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gLadderSmallDL_Ladder),
+	gsSPDisplayList(gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gLadderSmallDL_LadderShadow),
+	gsSPDisplayList(gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_ladder/ladder_small_model.h b/assets_hm_pack/objects/object_ladder/ladder_small_model.h
new file mode 100644
index 000000000..fb33a8670
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/ladder_small_model.h
@@ -0,0 +1,10 @@
+extern u64 gLadderSmallDL_Ladder_00_ci8[];
+extern u64 gLadderSmallDL_Ladder_00_pal_rgba16[];
+extern Vtx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_0[13];
+extern Gfx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_vtx_1[5];
+extern Gfx gLadderSmallDL_gLadderSmallDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gLadderSmallDL_Ladder[];
+extern Gfx mat_gLadderSmallDL_LadderShadow[];
+extern Gfx gLadderSmallDL[];
diff --git a/assets_hm_pack/objects/object_ladder/object_ladder.h b/assets_hm_pack/objects/object_ladder/object_ladder.h
new file mode 100644
index 000000000..7a7932768
--- /dev/null
+++ b/assets_hm_pack/objects/object_ladder/object_ladder.h
@@ -0,0 +1,12 @@
+#include "ladder_medium_model.h"
+#include "ladder_small_model.h"
+#include "ladder_large_model.h"
+#include "ladder_medium_col.h"
+#include "ladder_small_col.h"
+#include "ladder_large_col.h"
+#include "ladder_metal_medium_model.h"
+#include "ladder_metal_small_model.h"
+#include "ladder_metal_large_model.h"
+#include "ladder_metal_medium_col.h"
+#include "ladder_metal_small_col.h"
+#include "ladder_metal_large_col.h"
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_metal_crate/gMetalCrateCol.c b/assets_hm_pack/objects/object_metal_crate/gMetalCrateCol.c
new file mode 100644
index 000000000..8347470ab
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/gMetalCrateCol.c
@@ -0,0 +1,51 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gMetalCrateCol_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+};
+
+CollisionPoly gMetalCrateCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff06 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff06 },
+	{ 0x0000, 0x2003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.768371297814156e-08), COLPOLY_SNORMAL(-1.0), 0xff06 },
+	{ 0x0000, 0x2003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-4.768371297814156e-08), COLPOLY_SNORMAL(-1.0), 0xff06 },
+	{ 0x0000, 0x2005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff06 },
+	{ 0x0000, 0x2005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff06 },
+	{ 0x0000, 0x2007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.768371297814156e-08), COLPOLY_SNORMAL(1.0), 0xff06 },
+	{ 0x0000, 0x2007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.768371297814156e-08), COLPOLY_SNORMAL(1.0), 0xff06 },
+	{ 0x0000, 0x2003, 0x0005, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.371138828673793e-08), 0x0000 },
+	{ 0x0000, 0x2003, 0x0007, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.371138828673793e-08), 0x0000 },
+	{ 0x0000, 0x2004, 0x0002, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), 0xfe0c },
+	{ 0x0000, 0x2004, 0x0001, 0x0006, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), 0xfe0c },
+};
+
+Vec3s gMetalCrateCol_vertices[8] = {
+	{ -250, 0, 250 },
+	{ -250, 500, 250 },
+	{ -250, 500, -250 },
+	{ -250, 0, -250 },
+	{ 250, 500, -250 },
+	{ 250, 0, -250 },
+	{ 250, 500, 250 },
+	{ 250, 0, 250 },
+};
+
+CollisionHeader gMetalCrateCol_collisionHeader = {
+	-250,
+	0,
+	-250,
+	250,
+	500,
+	250,
+	8,
+	gMetalCrateCol_vertices,
+	12,
+	gMetalCrateCol_polygons,
+	gMetalCrateCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_metal_crate/gMetalCrateCol.h b/assets_hm_pack/objects/object_metal_crate/gMetalCrateCol.h
new file mode 100644
index 000000000..00dab0413
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/gMetalCrateCol.h
@@ -0,0 +1,4 @@
+extern SurfaceType gMetalCrateCol_polygonTypes[];
+extern CollisionPoly gMetalCrateCol_polygons[];
+extern Vec3s gMetalCrateCol_vertices[8];
+extern CollisionHeader gMetalCrateCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_metal_crate/gMetalCrateDL.c b/assets_hm_pack/objects/object_metal_crate/gMetalCrateDL.c
new file mode 100644
index 000000000..e66743fb5
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/gMetalCrateDL.c
@@ -0,0 +1,127 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gMetalCrateDL_metal_crate_ci4[] = {
+	0x0001011120010113, 0x4401010111110111, 0x1101566666666666, 0x6666666666666666, 0x1222274022084449, 0x559555982a222242, 0x2224466666666666, 0x6666666666666666, 
+	0x1472829082229498, 0xb7b55557a4a29492, 0x7872466666666666, 0x6666666666666666, 0x3222244988984489, 0x5999455524989499, 0x8994466666666666, 0x6666666666666666, 
+	0x1222994959599994, 0x0195555059895988, 0x5984766666666666, 0x6666666666666666, 0x3222840888989859, 0x9899989998988588, 0x9994866666666666, 0x6666666666666666, 
+	0x3222899852855989, 0x5989998459595555, 0x5854466666666666, 0x6666666666666666, 0x3228889588488989, 0x8944494848992988, 0x5559466666666666, 0x6666666666666666, 
+	0x1275575859598899, 0x5994899498595985, 0x5884466666666666, 0x6666666666666666, 0x3289494494452825, 0x8449220095888585, 0x8874466666666666, 0x6666666666666666, 
+	0x1284999599995998, 0x9989928898895885, 0x5780466666666666, 0x6666666666666666, 0x3992484799284898, 0x2949998848958848, 0x9994466666666666, 0x6666666666666666, 
+	0x3998998558248859, 0x8998898889888988, 0x5899066666666666, 0x6666666666666666, 0x3998888999144089, 0x9288994840988985, 0x9844066666666666, 0x6666666666666666, 
+	0x3958549989940478, 0x8289949984888859, 0x8821466666666666, 0x6666666666666666, 0x3989989598594549, 0x2428499998888998, 0x8801466666666666, 0x6666666666666666, 
+	0x3858555555449849, 0x8999998858888555, 0x8580966666666666, 0x6666666666666666, 0x3849958849049549, 0x5929499449098957, 0x2920866666666666, 0x6666666666666666, 
+	0x3284988959824949, 0x9999944992795488, 0x2224566666666666, 0x6666666666666666, 0x3409299944988948, 0x4998444244592428, 0x4824966666666666, 0x6666666666666666, 
+	0x3108988944948989, 0x5958444894599422, 0xa284566666666666, 0x6666666666666666, 0x3095555889958757, 0x5845440849282022, 0x0224466666666666, 0x6666666666666666, 
+	0x1975585855895858, 0x7888528284828082, 0x22a0066666666666, 0x6666666666666666, 0x0999285585989558, 0x5548884929984022, 0x4020066666666666, 0x6666666666666666, 
+	0x1044985594587755, 0x849958999592a222, 0xa020466666666666, 0x6666666666666666, 0x3904889824885555, 0x8599994948282222, 0x2200066666666666, 0x6666666666666666, 
+	0x3282895885755898, 0x9958898422922282, 0x2420066666666666, 0x6666666666666666, 0x3828955597289598, 0x2948999822221228, 0x0440466666666666, 0x6666666666666666, 
+	0x1299898282229889, 0x5955588222222220, 0x8220966666666666, 0x6666666666666666, 0x3949492827222728, 0x9555955525222242, 0x2824466666666666, 0x6666666666666666, 
+	0x129472227772a229, 0x8855885888828858, 0x82a2566666666666, 0x6666666666666666, 0x3111313010013110, 0x0104011400001110, 0x11115cdcbdbb5bbb, 0xbb55955757bbbd66, 
+	0x010048884004b555, 0x5875788222828294, 0x4489589220204020, 0x9440404440004094, 0x97577b57ab7d7757, 0x577b777bacaa77a7, 0x7757475aaaaa7ea7, 0x7557855b7a2a7750, 
+	0xbbb7bdcbbecdeeeb, 0xb77dddb7e7eaebb7, 0x7b7a87b7da6eedee, 0xdedb77bde7aabdb9, 0xbcc6c66666666666, 0x6cccc666cccccccc, 0xdc55d6ccccccccc6, 0xecceecccceccc6d7, 
+	0xa77bcd6d6ccaaabb, 0xb7bbea6eebdbbbde, 0xc50877bbcbbbcbcb, 0xabb7bdddeabeb778, 0x51075ceead777777, 0x557b8a7aa77a77dc, 0x4537edbbbda77be7, 0x775577777b8b7784, 
+	0xbecb89bcd777787b, 0xbbd777e7aa77ded8, 0x7656cbdbb7d7dba7, 0x7abb7777aba777b9, 0xbea5478766666666, 0x66666666c6666dad, 0x8dacdb5a77ab7b77, 0x75777bea777777a4, 
+	0x0ce77de77c6dccce, 0xcecddecdd6cea5db, 0x75cd9aabbbbb6666, 0x66666666a7877779, 0x0bc67b7ba586cddd, 0xddadadadd6577777, 0xbcd79daba7256dee, 0xeedcedd6287bb759, 
+	0x0bb66d777b79ceeb, 0xebebddece9b7777d, 0x6cb78b777805b57d, 0xeeeee87e70bb7779, 0x057c666a5d7e986b, 0x55885ece2b7757dc, 0xcd5727e75adc66e5, 0x01048c66ccd75774, 
+	0x97e66666c8bbe776, 0x666666e57777c666, 0x6bb795a7abcc6c6d, 0xcbdbecbe6bb7a774, 0x4bbccbbc6c777b7b, 0xa666b87b557c6ccc, 0x67779b5b777d755e, 0xeddbb59bbbb75725, 
+	0x45bbebbdcc6a77db, 0x7be57b7b7766cdce, 0x68b7877bb7d7577a, 0xbadbb7b7dbb7aaa7, 0x0b5bbbadbdeca7ab, 0xb4127e77e66ea7cc, 0xc57a455775775777, 0x577b777dba7a2aab, 
+	0x45be67bbbbdec6d7, 0x827857d66e77bbbd, 0x65b747777da777d7, 0x7bbbbbbbedbaaaab, 0x1bae6ceeeec666bb, 0x7b3b7d6666c6b666, 0x657747777d77577b, 0x7d7bbb58bda72aa7, 
+	0x077bebdddbdbd78b, 0xbcae6d77cdceebce, 0xc8b79a77b77777bb, 0x7bcbe7bddba7aab8, 0x477dbbbdabdd97ed, 0xadd6a7750cedaddd, 0xc577077775777d7b, 0x775bb7bbb77daa77, 
+	0x957e6bbedb75d77b, 0xee6ea7b7b0bccddd, 0xc7779e77a777a777, 0xb7bbb7b7aa77b7b7, 0x4bbeebbde84aaa77, 0x6666cb5dbb49bdad, 0xc7772aaaabb77777, 0x777e7bba777bad77, 
+	0x87be67b792cca7d6, 0x6cbe66cbbb75977b, 0x67778aa7ebbbd777, 0x777dbbb7777abaa5, 0x475cdd55aa7a7cc6, 0xcdeeee66bd77757d, 0xcb572aaaabbb5ba7, 0x5badbb7d7b777b75, 
+	0x95bcd57aa7ac66ee, 0xcbcbbbec6dbb7789, 0xccb75aaa67d7a7bb, 0xadd7bbbab777b7d5, 0x4b5e5b7a28e6ce7d, 0xbb777badd6677a79, 0x97ab9aade77dbb5d, 0x7e777b77877a7758, 
+	0x976488558c6ced77, 0xb55577a7ed66b598, 0x787b5a6eedcebbdd, 0xa7bbbb77b7dbd7b8, 0x888d580b6666ccdd, 0xbb77aedeececce47, 0x7b7757aaacda7c7b, 0x7bb787a7ac7bbbb5, 
+	0x508bb76cc98857b7, 0xb9955752a577bec7, 0x7717baeae7ead6db, 0xe7b7757bcbb7a7b5, 0x577b7ebbbb7b7bbb, 0x5b57aa7aaaa7777e, 0xbc0cdd7aaa7aaeab, 0xbb77777bbdbb77b5, 
+	0x4ed7e777b77bb7b5, 0x75a7aaa7aad7b7a7, 0xcceebeaaaa6acdbb, 0xdbb7b7b7b7bb77b7, 0x987dabab7b775755, 0x572a2a7a2a7b7a7b, 0x7bedaeab7aadae7b, 0x5e7a7777577bb77b, 
+	
+};
+
+u64 gMetalCrateDL_metal_crate_ci4_pal_rgba16[] = {
+	0x420d4a9139896357, 0x39cd294908432107, 0x2989318b20c518c7, 0x108318c510850000
+};
+
+Vtx gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{{-250, 0, -250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-250, 0, 250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-250, 500, 250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-250, 500, -250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{250, 0, -250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{250, 0, 250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{250, 500, 250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{250, 500, -250}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+};
+
+Vtx gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_vtx_0[24] = {
+	{{{-250, 0, 250}, 0, {2032, 2032}, {0x81, 0x0, 0x0, 0x0}}},
+	{{{-250, 500, 250}, 0, {2032, 1008}, {0x81, 0x0, 0x0, 0x0}}},
+	{{{-250, 500, -250}, 0, {1136, 1008}, {0x81, 0x0, 0x0, 0x0}}},
+	{{{-250, 0, -250}, 0, {1136, 2032}, {0x81, 0x0, 0x0, 0x0}}},
+	{{{-250, 0, -250}, 0, {1168, 2032}, {0x0, 0x0, 0x81, 0x0}}},
+	{{{-250, 500, -250}, 0, {1168, 1008}, {0x0, 0x0, 0x81, 0x0}}},
+	{{{250, 500, -250}, 0, {-16, 1008}, {0x0, 0x0, 0x81, 0x0}}},
+	{{{250, 0, -250}, 0, {-16, 2032}, {0x0, 0x0, 0x81, 0x0}}},
+	{{{250, 0, -250}, 0, {2032, 2032}, {0x7F, 0x0, 0x0, 0x0}}},
+	{{{250, 500, -250}, 0, {2032, 1008}, {0x7F, 0x0, 0x0, 0x0}}},
+	{{{250, 500, 250}, 0, {1136, 1008}, {0x7F, 0x0, 0x0, 0x0}}},
+	{{{250, 0, 250}, 0, {1136, 2032}, {0x7F, 0x0, 0x0, 0x0}}},
+	{{{250, 0, 250}, 0, {1168, 2032}, {0x0, 0x0, 0x7F, 0x0}}},
+	{{{250, 500, 250}, 0, {1168, 1008}, {0x0, 0x0, 0x7F, 0x0}}},
+	{{{-250, 500, 250}, 0, {-16, 1008}, {0x0, 0x0, 0x7F, 0x0}}},
+	{{{-250, 0, 250}, 0, {-16, 2032}, {0x0, 0x0, 0x7F, 0x0}}},
+	{{{-250, 0, -250}, 0, {-16, 1008}, {0x0, 0x81, 0x0, 0x0}}},
+	{{{250, 0, -250}, 0, {1168, 1008}, {0x0, 0x81, 0x0, 0x0}}},
+	{{{250, 0, 250}, 0, {1168, -16}, {0x0, 0x81, 0x0, 0x0}}},
+	{{{-250, 0, 250}, 0, {-16, -16}, {0x0, 0x81, 0x0, 0x0}}},
+	{{{250, 500, -250}, 0, {-16, 1008}, {0x0, 0x7F, 0x0, 0x0}}},
+	{{{-250, 500, -250}, 0, {1168, 1008}, {0x0, 0x7F, 0x0, 0x0}}},
+	{{{-250, 500, 250}, 0, {1168, -16}, {0x0, 0x7F, 0x0, 0x0}}},
+	{{{250, 500, 250}, 0, {-16, -16}, {0x0, 0x7F, 0x0, 0x0}}},
+};
+
+Gfx gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_vtx_0 + 0, 24, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
+	gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gMetalCrateDL_f3dlite_material_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMetalCrateDL_metal_crate_ci4_pal_rgba16),
+	gsDPTileSync(),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadSync(),
+	gsDPLoadTLUTCmd(7, 14),
+	gsDPPipeSync(),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMetalCrateDL_metal_crate_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPLoadSync(),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsSPEndDisplayList(),
+};
+
+Gfx gMetalCrateDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gMetalCrateDL_f3dlite_material_layerOpaque),
+	gsSPDisplayList(gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_metal_crate/gMetalCrateDL.h b/assets_hm_pack/objects/object_metal_crate/gMetalCrateDL.h
new file mode 100644
index 000000000..c3c4d4f72
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/gMetalCrateDL.h
@@ -0,0 +1,7 @@
+extern u64 gMetalCrateDL_metal_crate_ci4[];
+extern u64 gMetalCrateDL_metal_crate_ci4_pal_rgba16[];
+extern Vtx gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_vtx_0[24];
+extern Gfx gMetalCrateDL_gMetalCrateDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gMetalCrateDL_f3dlite_material_layerOpaque[];
+extern Gfx gMetalCrateDL[];
diff --git a/assets_hm_pack/objects/object_metal_crate/gMetalCrateFragmentDL.c b/assets_hm_pack/objects/object_metal_crate/gMetalCrateFragmentDL.c
new file mode 100644
index 000000000..edd42f831
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/gMetalCrateFragmentDL.c
@@ -0,0 +1,102 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gMetalCrateFragmentDL_metal_crate_ci4[] = {
+	0x0001011120010113, 0x4401010111110111, 0x1101566666666666, 0x6666666666666666, 0x1222274022084449, 0x559555982a222242, 0x2224466666666666, 0x6666666666666666, 
+	0x1472829082229498, 0xb7b55557a4a29492, 0x7872466666666666, 0x6666666666666666, 0x3222244988984489, 0x5999455524989499, 0x8994466666666666, 0x6666666666666666, 
+	0x1222994959599994, 0x0195555059895988, 0x5984766666666666, 0x6666666666666666, 0x3222840888989859, 0x9899989998988588, 0x9994866666666666, 0x6666666666666666, 
+	0x3222899852855989, 0x5989998459595555, 0x5854466666666666, 0x6666666666666666, 0x3228889588488989, 0x8944494848992988, 0x5559466666666666, 0x6666666666666666, 
+	0x1275575859598899, 0x5994899498595985, 0x5884466666666666, 0x6666666666666666, 0x3289494494452825, 0x8449220095888585, 0x8874466666666666, 0x6666666666666666, 
+	0x1284999599995998, 0x9989928898895885, 0x5780466666666666, 0x6666666666666666, 0x3992484799284898, 0x2949998848958848, 0x9994466666666666, 0x6666666666666666, 
+	0x3998998558248859, 0x8998898889888988, 0x5899066666666666, 0x6666666666666666, 0x3998888999144089, 0x9288994840988985, 0x9844066666666666, 0x6666666666666666, 
+	0x3958549989940478, 0x8289949984888859, 0x8821466666666666, 0x6666666666666666, 0x3989989598594549, 0x2428499998888998, 0x8801466666666666, 0x6666666666666666, 
+	0x3858555555449849, 0x8999998858888555, 0x8580966666666666, 0x6666666666666666, 0x3849958849049549, 0x5929499449098957, 0x2920866666666666, 0x6666666666666666, 
+	0x3284988959824949, 0x9999944992795488, 0x2224566666666666, 0x6666666666666666, 0x3409299944988948, 0x4998444244592428, 0x4824966666666666, 0x6666666666666666, 
+	0x3108988944948989, 0x5958444894599422, 0xa284566666666666, 0x6666666666666666, 0x3095555889958757, 0x5845440849282022, 0x0224466666666666, 0x6666666666666666, 
+	0x1975585855895858, 0x7888528284828082, 0x22a0066666666666, 0x6666666666666666, 0x0999285585989558, 0x5548884929984022, 0x4020066666666666, 0x6666666666666666, 
+	0x1044985594587755, 0x849958999592a222, 0xa020466666666666, 0x6666666666666666, 0x3904889824885555, 0x8599994948282222, 0x2200066666666666, 0x6666666666666666, 
+	0x3282895885755898, 0x9958898422922282, 0x2420066666666666, 0x6666666666666666, 0x3828955597289598, 0x2948999822221228, 0x0440466666666666, 0x6666666666666666, 
+	0x1299898282229889, 0x5955588222222220, 0x8220966666666666, 0x6666666666666666, 0x3949492827222728, 0x9555955525222242, 0x2824466666666666, 0x6666666666666666, 
+	0x129472227772a229, 0x8855885888828858, 0x82a2566666666666, 0x6666666666666666, 0x3111313010013110, 0x0104011400001110, 0x11115cdcbdbb5bbb, 0xbb55955757bbbd66, 
+	0x010048884004b555, 0x5875788222828294, 0x4489589220204020, 0x9440404440004094, 0x97577b57ab7d7757, 0x577b777bacaa77a7, 0x7757475aaaaa7ea7, 0x7557855b7a2a7750, 
+	0xbbb7bdcbbecdeeeb, 0xb77dddb7e7eaebb7, 0x7b7a87b7da6eedee, 0xdedb77bde7aabdb9, 0xbcc6c66666666666, 0x6cccc666cccccccc, 0xdc55d6ccccccccc6, 0xecceecccceccc6d7, 
+	0xa77bcd6d6ccaaabb, 0xb7bbea6eebdbbbde, 0xc50877bbcbbbcbcb, 0xabb7bdddeabeb778, 0x51075ceead777777, 0x557b8a7aa77a77dc, 0x4537edbbbda77be7, 0x775577777b8b7784, 
+	0xbecb89bcd777787b, 0xbbd777e7aa77ded8, 0x7656cbdbb7d7dba7, 0x7abb7777aba777b9, 0xbea5478766666666, 0x66666666c6666dad, 0x8dacdb5a77ab7b77, 0x75777bea777777a4, 
+	0x0ce77de77c6dccce, 0xcecddecdd6cea5db, 0x75cd9aabbbbb6666, 0x66666666a7877779, 0x0bc67b7ba586cddd, 0xddadadadd6577777, 0xbcd79daba7256dee, 0xeedcedd6287bb759, 
+	0x0bb66d777b79ceeb, 0xebebddece9b7777d, 0x6cb78b777805b57d, 0xeeeee87e70bb7779, 0x057c666a5d7e986b, 0x55885ece2b7757dc, 0xcd5727e75adc66e5, 0x01048c66ccd75774, 
+	0x97e66666c8bbe776, 0x666666e57777c666, 0x6bb795a7abcc6c6d, 0xcbdbecbe6bb7a774, 0x4bbccbbc6c777b7b, 0xa666b87b557c6ccc, 0x67779b5b777d755e, 0xeddbb59bbbb75725, 
+	0x45bbebbdcc6a77db, 0x7be57b7b7766cdce, 0x68b7877bb7d7577a, 0xbadbb7b7dbb7aaa7, 0x0b5bbbadbdeca7ab, 0xb4127e77e66ea7cc, 0xc57a455775775777, 0x577b777dba7a2aab, 
+	0x45be67bbbbdec6d7, 0x827857d66e77bbbd, 0x65b747777da777d7, 0x7bbbbbbbedbaaaab, 0x1bae6ceeeec666bb, 0x7b3b7d6666c6b666, 0x657747777d77577b, 0x7d7bbb58bda72aa7, 
+	0x077bebdddbdbd78b, 0xbcae6d77cdceebce, 0xc8b79a77b77777bb, 0x7bcbe7bddba7aab8, 0x477dbbbdabdd97ed, 0xadd6a7750cedaddd, 0xc577077775777d7b, 0x775bb7bbb77daa77, 
+	0x957e6bbedb75d77b, 0xee6ea7b7b0bccddd, 0xc7779e77a777a777, 0xb7bbb7b7aa77b7b7, 0x4bbeebbde84aaa77, 0x6666cb5dbb49bdad, 0xc7772aaaabb77777, 0x777e7bba777bad77, 
+	0x87be67b792cca7d6, 0x6cbe66cbbb75977b, 0x67778aa7ebbbd777, 0x777dbbb7777abaa5, 0x475cdd55aa7a7cc6, 0xcdeeee66bd77757d, 0xcb572aaaabbb5ba7, 0x5badbb7d7b777b75, 
+	0x95bcd57aa7ac66ee, 0xcbcbbbec6dbb7789, 0xccb75aaa67d7a7bb, 0xadd7bbbab777b7d5, 0x4b5e5b7a28e6ce7d, 0xbb777badd6677a79, 0x97ab9aade77dbb5d, 0x7e777b77877a7758, 
+	0x976488558c6ced77, 0xb55577a7ed66b598, 0x787b5a6eedcebbdd, 0xa7bbbb77b7dbd7b8, 0x888d580b6666ccdd, 0xbb77aedeececce47, 0x7b7757aaacda7c7b, 0x7bb787a7ac7bbbb5, 
+	0x508bb76cc98857b7, 0xb9955752a577bec7, 0x7717baeae7ead6db, 0xe7b7757bcbb7a7b5, 0x577b7ebbbb7b7bbb, 0x5b57aa7aaaa7777e, 0xbc0cdd7aaa7aaeab, 0xbb77777bbdbb77b5, 
+	0x4ed7e777b77bb7b5, 0x75a7aaa7aad7b7a7, 0xcceebeaaaa6acdbb, 0xdbb7b7b7b7bb77b7, 0x987dabab7b775755, 0x572a2a7a2a7b7a7b, 0x7bedaeab7aadae7b, 0x5e7a7777577bb77b, 
+	
+};
+
+u64 gMetalCrateFragmentDL_metal_crate_ci4_pal_rgba16[] = {
+	0x420d4a9139896357, 0x39cd294908432107, 0x2989318b20c518c7, 0x108318c510850000
+};
+
+Vtx gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{{-55, -202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-55, -202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-55, 202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-55, 202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{255, -202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{255, -202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{255, 202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{255, 202, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+};
+
+Vtx gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_vtx_0[4] = {
+	{{{255, -202, 0}, 0, {1168, 2032}, {0x0, 0x0, 0x7F, 0x0}}},
+	{{{255, 202, 0}, 0, {2000, 2032}, {0x0, 0x0, 0x7F, 0x0}}},
+	{{{-55, 202, 0}, 0, {2000, 1392}, {0x0, 0x0, 0x7F, 0x0}}},
+	{{{-55, -202, 0}, 0, {1168, 1392}, {0x0, 0x0, 0x7F, 0x0}}},
+};
+
+Gfx gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_vtx_0 + 0, 4, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gMetalCrateFragmentDL_metal_fragment_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMetalCrateFragmentDL_metal_crate_ci4_pal_rgba16),
+	gsDPTileSync(),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadSync(),
+	gsDPLoadTLUTCmd(7, 14),
+	gsDPPipeSync(),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMetalCrateFragmentDL_metal_crate_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPLoadSync(),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsSPEndDisplayList(),
+};
+
+Gfx gMetalCrateFragmentDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gMetalCrateFragmentDL_metal_fragment_layerOpaque),
+	gsSPDisplayList(gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_metal_crate/gMetalCrateFragmentDL.h b/assets_hm_pack/objects/object_metal_crate/gMetalCrateFragmentDL.h
new file mode 100644
index 000000000..695acf54d
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/gMetalCrateFragmentDL.h
@@ -0,0 +1,7 @@
+extern u64 gMetalCrateFragmentDL_metal_crate_ci4[];
+extern u64 gMetalCrateFragmentDL_metal_crate_ci4_pal_rgba16[];
+extern Vtx gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_vtx_0[4];
+extern Gfx gMetalCrateFragmentDL_gMetalCrateFragmentDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gMetalCrateFragmentDL_metal_fragment_layerOpaque[];
+extern Gfx gMetalCrateFragmentDL[];
diff --git a/assets_hm_pack/objects/object_metal_crate/object_metal_crate.c b/assets_hm_pack/objects/object_metal_crate/object_metal_crate.c
new file mode 100644
index 000000000..be8a622df
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/object_metal_crate.c
@@ -0,0 +1,6 @@
+#include "ultra64.h"
+#include "global.h"
+
+#include "gMetalCrateDL.c"
+#include "gMetalCrateCol.c"
+#include "gMetalCrateFragmentDL.c"
diff --git a/assets_hm_pack/objects/object_metal_crate/object_metal_crate.h b/assets_hm_pack/objects/object_metal_crate/object_metal_crate.h
new file mode 100644
index 000000000..3491d0417
--- /dev/null
+++ b/assets_hm_pack/objects/object_metal_crate/object_metal_crate.h
@@ -0,0 +1,8 @@
+#ifndef OBJECT_METAL_CRATE_H
+#define OBJECT_METAL_CRATE_H 1
+
+#include "gMetalCrateDL.h"
+#include "gMetalCrateCol.h"
+#include "gMetalCrateFragmentDL.h"
+
+#endif
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_platforms/object_platforms.h b/assets_hm_pack/objects/object_platforms/object_platforms.h
new file mode 100644
index 000000000..750093661
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/object_platforms.h
@@ -0,0 +1,16 @@
+#include "platform_cone_grass_model.h"
+#include "platform_cone_grass_col.h"
+#include "platform_hex_grass_model.h"
+#include "platform_hex_grass_col.h"
+#include "platform_hex_ice_model.h"
+#include "platform_hex_ice_col.h"
+#include "platform_square_grass_model.h"
+#include "platform_square_grass_col.h"
+#include "platform_square_stone_model.h"
+#include "platform_square_stone_checkermodel.h"
+#include "platform_square_stone_col.h"
+#include "platform_square_wood_model.h"
+#include "platform_square_wood_checkermodel.h"
+#include "platform_square_wood_col.h"
+#include "platform_square_ice_model.h"
+#include "platform_square_ice_col.h"
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_platforms/platform_cone_grass_col.c b/assets_hm_pack/objects/object_platforms/platform_cone_grass_col.c
new file mode 100644
index 000000000..0ca955fd8
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_cone_grass_col.c
@@ -0,0 +1,67 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPlatform_FloatingConeDL_polygonTypes[] = {
+	{ 0x00000000, 0x00000000 },
+	{ 0x00000000, 0x00000008 },
+};
+
+CollisionPoly gPlatform_FloatingConeDL_polygons[] = {
+	{ 0x0000, 0x0001, 0x0002, 0x0000, COLPOLY_SNORMAL(0.411899596452713), COLPOLY_SNORMAL(-0.5671626925468445), COLPOLY_SNORMAL(0.7132075428962708), 0xf587 },
+	{ 0x0000, 0x0001, 0x0003, 0x0002, COLPOLY_SNORMAL(0.8235907554626465), COLPOLY_SNORMAL(-0.5671844482421875), COLPOLY_SNORMAL(0.0), 0xf587 },
+	{ 0x0000, 0x0001, 0x0004, 0x0003, COLPOLY_SNORMAL(0.411899596452713), COLPOLY_SNORMAL(-0.5671626925468445), COLPOLY_SNORMAL(-0.7132075428962708), 0xf587 },
+	{ 0x0000, 0x0001, 0x0005, 0x0004, COLPOLY_SNORMAL(-0.411899596452713), COLPOLY_SNORMAL(-0.5671626925468445), COLPOLY_SNORMAL(-0.7132075428962708), 0xf587 },
+	{ 0x0000, 0x0001, 0x0006, 0x0005, COLPOLY_SNORMAL(-0.8235907554626465), COLPOLY_SNORMAL(-0.5671844482421875), COLPOLY_SNORMAL(0.0), 0xf587 },
+	{ 0x0000, 0x0001, 0x0000, 0x0006, COLPOLY_SNORMAL(-0.411899596452713), COLPOLY_SNORMAL(-0.5671626925468445), COLPOLY_SNORMAL(0.7132075428962708), 0xf587 },
+	{ 0x0000, 0x0004, 0x0005, 0x0007, COLPOLY_SNORMAL(-0.5001174807548523), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0004, 0x0007, 0x0008, COLPOLY_SNORMAL(-0.5001174807548523), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0003, 0x0004, 0x0008, COLPOLY_SNORMAL(0.5001174807548523), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0003, 0x0008, 0x0009, COLPOLY_SNORMAL(0.5001174807548523), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0002, 0x0003, 0x0009, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf463 },
+	{ 0x0000, 0x0002, 0x0009, 0x000a, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf463 },
+	{ 0x0000, 0x0006, 0x0000, 0x000b, COLPOLY_SNORMAL(-0.5001174211502075), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0006, 0x000b, 0x000c, COLPOLY_SNORMAL(-0.5001174211502075), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0000, 0x0002, 0x000a, COLPOLY_SNORMAL(0.5001174211502075), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0000, 0x000a, 0x000b, COLPOLY_SNORMAL(0.5001174211502075), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.8659576177597046), 0xf463 },
+	{ 0x0000, 0x0005, 0x0006, 0x000c, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf463 },
+	{ 0x0000, 0x0005, 0x000c, 0x0007, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf463 },
+	{ 0x0001, 0x000c, 0x000b, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), 0xfb3f },
+	{ 0x0001, 0x000a, 0x0008, 0x000c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.6303860301577515e-08), 0xfb3f },
+	{ 0x0001, 0x000a, 0x0009, 0x0008, COLPOLY_SNORMAL(4.01206712297153e-08), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-6.946928010620468e-08), 0xfb3f },
+	{ 0x0001, 0x0008, 0x0007, 0x000c, COLPOLY_SNORMAL(-4.01206712297153e-08), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-6.946928010620468e-08), 0xfb3f },
+};
+
+Vec3s gPlatform_FloatingConeDL_vertices[13] = {
+	{ 0, -410, 3433 },
+	{ 0, -4727, 0 },
+	{ 2973, -410, 1716 },
+	{ 2973, -410, -1716 },
+	{ 0, -410, -3433 },
+	{ -2973, -410, -1716 },
+	{ -2973, -410, 1716 },
+	{ -2973, 1217, -1716 },
+	{ 0, 1217, -3433 },
+	{ 2973, 1217, -1716 },
+	{ 2973, 1217, 1716 },
+	{ 0, 1217, 3433 },
+	{ -2973, 1217, 1716 },
+};
+
+CollisionHeader gPlatform_FloatingConeDL_collisionHeader = {
+	-2973,
+	-4727,
+	-3433,
+	2973,
+	1217,
+	3433,
+	13,
+	gPlatform_FloatingConeDL_vertices,
+	22,
+	gPlatform_FloatingConeDL_polygons,
+	gPlatform_FloatingConeDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_cone_grass_col.h b/assets_hm_pack/objects/object_platforms/platform_cone_grass_col.h
new file mode 100644
index 000000000..b44a98ba5
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_cone_grass_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPlatform_FloatingConeDL_polygonTypes[];
+extern CollisionPoly gPlatform_FloatingConeDL_polygons[];
+extern Vec3s gPlatform_FloatingConeDL_vertices[13];
+extern CollisionHeader gPlatform_FloatingConeDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_platforms/platform_cone_grass_model.c b/assets_hm_pack/objects/object_platforms/platform_cone_grass_model.c
new file mode 100644
index 000000000..d381e61e2
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_cone_grass_model.c
@@ -0,0 +1,238 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_gPlatform_FloatingConeDL_ZELD_ci8[] = {
+	0x0001020304050601, 0x0708090a0b070c0d, 0x0e0f100105111201, 0x1314151614171806, 0x01190b0b1a0d1b1c, 0x070f1d1e1f202111, 0x1212142203112324, 0x0103011925051a26, 
+	0x270328260525292a, 0x2b251d212b2c2d21, 0x25122e0303221d12, 0x190305242501132f, 0x1511302211092531, 0x2b24251127323321, 0x2525203403353637, 0x3839013a123b042b, 
+	0x141101272c090f01, 0x11242c1010333c3d, 0x3e250b3f032d4012, 0x11013b4142383b03, 0x4303141f33364419, 0x45093a14462d4748, 0x36230e493a2d363e, 0x09344a432d4b4c48, 
+	0x412d034d484e2436, 0x454f47500b2d514f, 0x4f1d25524832333e, 0x1d153b532d155021, 0x54214d13553e5616, 0x4f21213a202d3357, 0x483e2520484f4721, 0x25030558590b5a5b, 
+	0x2d21035c54480e08, 0x5d48214341475e33, 0x2d332503485f3260, 0x09032221254b5021, 0x2d2103055e3c4203, 0x485143212147472d, 0x4760092c43615b47, 0x433d3d211d223a2d, 
+	0x4121502233625911, 0x21633347215e645e, 0x472d40432d653a43, 0x3d5066431d11432d, 0x43212d192165212d, 0x2d5e5e4747624747, 0x473c2d335133215e, 0x21435050092c472d, 
+	0x644747213c3c6657, 0x6467614762616247, 0x4f4f33484f57474f, 0x573347665e3c3c47, 0x626666473332622d, 0x2d66655b68676247, 0x333c333c475e4751, 0x63575e6664634f47, 
+	0x69654747643c475e, 0x5e47656a5b6b673c, 0x5e47325e69624757, 0x63515e685e4f4f5e, 0x666247642d33573c, 0x5e5b695b69616562, 0x61692d6667654764, 0x514f3c4764332d62, 
+	0x6169624733323c47, 0x47695b4747656447, 0x695b645e4747475e, 0x3c4f4f5e3348573c, 0x6c6d695b5e2d6661, 0x6561625e64616162, 0x62625e5e642d645e, 0x685e4f5763634f47, 
+	0x61616d6d686e475b, 0x5b6d6162626f706d, 0x6761625b665e645e, 0x5b47324748324848, 0x6169716d62476269, 0x69715b6972737470, 0x5e2d626561615b67, 0x7562665b48767747, 
+	0x6c65617562476565, 0x6570696a6f73786f, 0x6747656961797a6b, 0x6d3c6269577b5a61, 0x6d5b69614765655e, 0x476147477c7d797d, 0x7a6162697e7f7a61, 0x702d626162627072, 
+	0x67616b5b2d656166, 0x3c5b642d67798081, 0x72614747626c7562, 0x706c6c7d71706f6c, 0x82838470475b7272, 0x4762474765707172, 0x474762472d5e6862, 0x6572818581818172, 
+	0x6c70737967617161, 0x628687625b696d81, 0x7c81716247625b6c, 0x5b675b71726c6d72, 0x707a887a6c726c62, 0x61897e6569686c6f, 0x7070726647617c61, 0x7172645b6d616565, 
+	0x8a798b8c6d6c868d, 0x8986866a69618a80, 0x7a6c724768708461, 0x6d6b336247656247, 0x5b8a726a6262897e, 0x626b6a5b718e8f90, 0x6f678c47478c7f7d, 0x6c616a8b695b6147, 
+	0x6c84816a62658c7d, 0x6a6c7d676f747478, 0x86608962628c7870, 0x727581916f6c6165, 0x8a73798c5b5b7272, 0x697e92788e939495, 0x96976265616c7071, 0x8a8584808572616d, 
+	0x749574886262707a, 0x618c74947498999a, 0x9b65693c68728580, 0x748f856c7567626d, 0x9c949d9a9e9b9f79, 0x6c7a78748f9ca093, 0x7d8171975e897f8f, 0xa1a2a3a45e476581, 
+	0x939c9d9a86a58278, 0x7f8b7d848e9ca693, 0x888b709e5e727473, 0x94a0a78c64476c8c, 0x8b789c938ba88278, 0x9c7f79789c787fa9, 0xaa9f6c8d218b748e, 0x919ca27d62979bab, 
+	0x8b78747f866a8878, 0x74a6ac9fadae7a9f, 0xafb0b1875e658a73, 0x8584738a616aa8a5, 0x7f9c947a475e8278, 0x9c9878729fad8888, 0x829f8c873c5ba37a, 0x726c8185726c8a7f, 
+	0x8e7a7f7a977bab8b, 0xb29d796d8c9ab388, 0xb4aa81612d8db5b6, 0x847985706d61708e, 0x748e8a6c47628c87, 0xae937d6167b79a79, 0x9ab88b7d475eb77a, 0x8078938c4764676f, 
+	0x7895737262697d85, 0xa9b58d47898d9a7f, 0xa7b97a72475ea46c, 0x8a79a7a35b645e5b, 0x8c848f856d6aba8e, 0xbb825e3c6c5b888b, 0xa799786c6a69628b, 0x67a3a6786b69643c, 
+	0xbc858581727a9fbc, 0x93bdab677c6161b1, 0xbea68e6d61616861, 0x607e73795b656865, 0xa29573706ca3a39f, 0xbfb378a37d706589, 0xb8a683616967628b, 0xa37d84786a3c6181, 
+	0xa2957479678c788b, 0x867d7f9c798b615a, 0xc0b5c16262694767, 0x8480808a5b336e72, 0x9da1a2886586798a, 0x616ba89a8b97629f, 0x8bc2a89762473c5b, 0x7084786c62473372, 
+	0x7fa2bb7d6a6c7979, 0x6c70b7b8a387478b, 0x8b8cb197655e3c62, 0x8390786764643261, 0x8b747f8c657d74c3, 0x7d7d7fa6786b618c, 0xa9a37a676a5e5e65, 0x6c85787061625e6a, 
+	0x8cb2c08c6a8574a3, 0xc4728b78795b618a, 0xa29d79847a62695b, 0x727378846f725b61, 0xb7829f837d909cb7, 0x474772847867478a, 0x9c9dc391796a5b6c, 0x70b6917261756c5b, 
+	0xc1a57d797a79a7a3, 0x5b4770808a69476f, 0x8f9c948e85618762, 0x627d78725b617a72, 0xaec57d84b7c6b878, 0x6b61707972696180, 0x9ca2a6747070625b, 0x6a8b788c6c879f70, 
+	0x78b3b285817e7979, 0x5b617984706c8a84, 0xa6a7a77d6c7a817d, 0x8b8b7a796f626b72, 0x749d747d7c728478, 0x67687071c78a7a8b, 0xbb947a5bb778798b, 0xb8a3626f8e706d7a, 
+	0x8fa1748a6d7c808a, 0x67676f81c76d6c5a, 0x747867477d787870, 0x889a867a8e858574, 0x749c84723c618872, 0x617a8e8e846a6d6a, 0x7f786c62798f7478, 0x70a3b1b37d7278a7, 
+	0x749473703c6a7dc8, 0xabbc74918f858a6c, 0x797d6170747895a2, 0x737faeb88c877f9d, 0x95748e6c8c7d749d, 0x9ca2c99495748a70, 0x7072676f88627a94, 0x74a293ad7d7d959f, 
+	0x91748a89bdbba2a1, 0xb694949494bb7981, 0x5b6d628b82646c78, 0xa378bb86657d7484, 0x78938c676c8cbc79, 0x708e8f74b68b706c, 0x655b5e9fab336279, 0xab87aa876a818eca, 
+	0x707f8c676d5b706f, 0x7d8e9179aa704772, 0x7d473c8bb1515e70, 0x615e9f8c7a787395, 0x6f7d816270707c6f, 0x7fbbb387425e4772, 0x886062c0c0476266, 0x696170b285726f85, 
+	0xcbcc703c6bcdcecf, 0x7d6c89162d4f5e62, 0xd0d1436c893ad259, 0xd321625343d20b91, 0x03cbd45147d5d63d, 0x724703d7d7473c59, 0xd858626262033ad2, 0x4f33434f2dd24dd9, 
+	0xda19226441414cd6, 0xdb5038dada6bd3dc, 0x583a5b6ad43add4f, 0x475922ded1d20b08, 0xda581958dadf08e0, 0xd1d10508e1e0cede, 0xe2e3084cd6e430e5, 0xe653e703dd3ad1e8, 
+	
+};
+
+u64 gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_gPlatform_FloatingConeDL_ZELD_pal_rgba16[] = {
+	0x9d1573cf7c13630d, 0x7c516b8f9d55634f, 0x5b0d4a4bb5957c11, 0x424d528d424b3a0b, 0x73915acd39cb740f, 0x6b4f7bcf4a8b7411, 0x744f634d84516bcf, 0x8cd131899d138cd3, 
+	0x738f524b6b4d2949, 0x52cd420b8c918c93, 0x94d56b9195138491, 0x528b4a098c9594d3, 0x840fa555418941c9, 0x8c51630f39c9420d, 0x7bd1638f5acb9491, 0x49c96b0d3989b593, 
+	0x41cb62cb4a0b5a8b, 0x4a4d290763515a4b, 0x31478cd5ad558411, 0x7b8f6b8d21053987, 0x62cd3947845339c7, 0x41c731874a8d4187, 0x4a49420983916acd, 0x7c0f3145520b2945, 
+	0x5a8d7b0f628d2905, 0x52096a8d628b730f, 0x624b72cd72cf7b4f, 0x8351834f5a0b9c13, 0x93d393918b91b499, 0xbd1d8b514a0d5a8f, 0xb4dbac99a45749cb, 0x93d19c157b11b4dd, 
+	0xac559bd39c59a417, 0xac57a45573116acf, 0xa4597b51a41593d5, 0x8b93628fac97bcdb, 0xb497b4d9b51dc563, 0xc55fbd1f73535a4d, 0xd5e7d629bd637313, 0xc561cda562cf9c17, 
+	0xd627cda3c5a3ac9b, 0x624d8b95cde5cde7, 0x7b53b4dfac9d8393, 0xac59b51f9417a45b, 0xa49d8353acdbbd21, 0x9c5bb521bcdd8bd5, 0xc5a5d5e99393bd61, 0xb49bacddc5a79c19, 
+	0xa49b83959415bd5f, 0x9bd58bd79419a413, 0x8bd3c5a1c51f734f, 0xa4999c1162c98c11, 0x8bd14a893a075249, 0x730d5ac9738d630b, 0x5289734b5b0b83d1, 0x31c952cb42474289, 
+	0x7b8d6b0b4a8752c9, 0x945163096b4b4249, 0x4207000000000000
+};
+
+u64 gPlatform_FloatingConeDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16[] = {
+	0xd71bb5d78c0fa555, 0xbe59df9bce99c657, 0xd6dbb5d5a595b617, 0x8c51a513ce99d719, 0xa595ad959491b595, 0x9cd394d38c91b617, 0xbe17ad95cf19c6db, 0xbe599d1394919cd3, 
+	0xc697b5d5ad53be17, 0xbe97cf19ced9ad55, 0xc659b5d5add5be99, 0xadd7be17be97ced9, 0x94d39d13b5d7c657, 0xb5d5ad95be17c659, 0xb5d7add5cf19cf1b, 0xcf1bad959d13a555, 
+	0xc659d71bd6d9b615, 0xc6d9a553ad55ad95, 0x9d1394d18c9194d1, 0xbe19be59a595add5, 0xb615b5d5b5d5c697, 0xc699cf19c697be57, 0xc699df5badd5a555, 0xb5d7c699be17ad95, 
+	0xbe17c659c659ced9, 0xcf1ba55394d3be17, 0xa5959d53a555a513, 0x9d13b657b6178c91, 0xbe17be17ad95b5d5, 0xbe57ad959cd3c697, 0xbe97c699b5d5ad93, 0xa555c659cedbad97, 
+	0xadd5a595b5d7a595, 0x94d394917bcf8c91, 0x8cd194d3ad97ad95, 0xa553ad95840f9cd3, 0xbe17ced9c699be57, 0xdf5bbe17b5d5c699, 0xae15add5ad959491, 0x9491ad95be57b617, 
+	0x9491a555a555b617, 0x8c117bcf94d3a593, 0x8c919cd3be17add7, 0xadd79d537bcf9491, 0xbe17d71bbe57be17, 0xd71bd71bc699be99, 0xc699efdddf1bad95, 0x9491add5df9dc697, 
+	0xa55394d1ad95c659, 0xb5d59cd3add59d13, 0x8c51ad55cedba595, 0xb617c699ad55ad53, 0xbe57be17add5840f, 0xb5d5be57a555a595, 0xa595ad95b5d5add5, 0xa59594d3b5d79d13, 
+	0x94d194d1a555c659, 0xadd7be57be97a595, 0x9491add5be598491, 0x9d13be17be17a553, 0xb5d5b617be179491, 0xb5d57c0f94d38c91, 0x7c0f844fa595a553, 0xbe578cd194d18c91, 
+	0xad558c5194d1add5, 0xcf1bc6d9b615ad95, 0xad95a5958d119553, 0xb617ad97c699df9d, 0xd71bb617c659b597, 0x949194d18c918c91, 0x844f6b4d7c4f9513, 0xadd594d1b5d5c697, 
+	0xa553a595b5d5b617, 0xbe99b5d79d13b5d5, 0xce99b617a5d5a555, 0xc699c65bbe59be99, 0xb615b5d5ad53a595, 0xc6d9add5add5d75b, 0xc6997c0f848f94d3, 0x94d1add5ce97e79d, 
+	0xced7c657e7ddbe97, 0xb5d5844f840fa513, 0xadd5a555a595ad55, 0xb5d7be59b619a555, 0xb617be599491b615, 0xa5d38c8fbe17d75b, 0xbe97e7ddadd59d13, 0x7c0fad55df1bced9, 
+	0xd71bd71befddc699, 0xadd5ad959d13840f, 0x8c91a595b597ad95, 0x9d13a595a5959d13, 0xb595ced9b617b617, 0xa593c699c6d994d1, 0xb615e7ddd71bbe17, 0x9491b5d5be17a555, 
+	0xc657e79bced99d13, 0xa553ce99c657a553, 0x8cd1cf1bd71bb5d7, 0x9d15b619b5d7b5d7, 0x9cd3be99b6179513, 0xbe99cf1badd5ad55, 0xad95a555ad95be59, 0xb5d7a51394d194d1, 
+	0xced9cf19a5539491, 0x9d13be57efddad93, 0xa553ced9cedbb5d7, 0x7bcf8cd384517bcf, 0x73cd8cd17c4f844f, 0xa555ae17b617ad53, 0xdf1bbe17be59ced9, 0xbe579513add5b5d5, 
+	0xdf9bbe97b5d59cd1, 0x8c4fadd5f7dfce99, 0xb5d5be57be179491, 0x8c9194d39d158c91, 0x7c0f73cf844f9513, 0x9d53ad95c659c617, 0xced9e75bdf9bb657, 0x9d53a595d71bd71b, 
+	0xdf9bd71bd7199d13, 0x9d13c6d9e79dce99, 0xefddced9b5d59d13, 0x9d13ad959d158cd3, 0xa5978c918c91840f, 0x9491be19ce9bb5d5, 0xdf1bf7dfefdfced9, 0xbe57be57ad95c699, 
+	0xc657be17be179d13, 0xadd5e7ddd75bce99, 0xd7199511d719be57, 0xad53d6db8c516b8d, 0x9513a5959d13840f, 0x9cd39cd3be99be17, 0xad95d71bd71bbe17, 0xced9df5bd6d9df1b, 
+	0xbe57ad95a553be57, 0xd759cf19ad95a553, 0xadd5c699d71ba513, 0x8c0fad55a5539d55, 0x9d55add7ad579493, 0xa5539d55a595add5, 0xbe57ce99a553be17, 0xdf5db5d7b5d5b5d5, 
+	0xbe57ced9ced99511, 0xbe17ad5583cfa553, 0xc699d71bce999cd1, 0x94d19d11be15c659, 0xadd7ad979d158451, 0xbe99cf1ba595b617, 0xe7dfdf5dbdd5be17, 0xc6598c4fa553add5, 
+	0x840f844f9d53ad95, 0xb5d58c51840fbe57, 0xc6d9b615ad93ad55, 0x7b8da553be17a555, 0xadd7a59794d3a595, 0xbe99a5d59cd3ad97, 0xa5558c517b8da555, 0xadd5add59d13a595, 
+	0x8c91840fa553d719, 0xdf5bad95b5d5df9d, 0xd71bced9a5139491, 0x9491b595e75bad95, 0x7bcf8cd194d3be59, 0xcf1dadd77bcf9d13, 0x9d137bcfa553be17, 0xbe57add5cf1badd5, 
+	0x8c8f844f8c51be57, 0xd719df5dbe57c6d9, 0xf7dff7dfad95a513, 0xa553d719e79b9d51, 0x8c919d13a595b617, 0xcedbc699ad95add5, 0xbe17a59594d19d53, 0x8cd19d138c919cd3, 
+	0x8c91738d9d13b5d7, 0xb617ae15c6d9efdf, 0xd719be57d6dbdf1b, 0xe79bf7dfced9d719, 0xc699c699ced9b617, 0xad959cd39cd3be17, 0xb617c6d9be59a5d5, 0x94d394d3949394d3, 
+	0x9d139d13a513c699, 0xbe59be17ce99d71b, 0xbe17c659be57cf19, 0xdf5badd5a595c699, 0xb617df5bced9b5d7, 0x9d138c919cd3ad95, 0xa595be99a595a595, 0xb5d79491a555a515, 
+	0xa513a513a513add5, 0xbe57e79dc6599491, 0xb5d7b5d7b5d5e7db, 0xdf9bc697be179cd1, 0x7bcddf5ddf5bb5d7, 0xb5d7b619b617a595, 0xa593951394d39d53, 0xb5d7be17a513ad55, 
+	0xa4d3b5d5ad93ad95, 0xd71bc699be5794d1, 0x8c9194d39d13be57, 0xd719e79bad958c4f, 0xad95d6dbc699b5d7, 0x9d13add5add7a593, 0xbe57c699a553a555, 0xa513be57b6178c91, 
+	0xb617ad95b5d5be17, 0xbe579d13bdd7d719, 0x9d139d13ad95b5d7, 0xc697e79bdf1bad95, 0xad55b5d7be17a595, 0x95139d539d53ced9, 0xd71bce99d6dbd6db, 0x94d3add5e7dd9d53, 
+	0xad958c4fa593a553, 0x8c91a51394d1a593, 0xbe17ad95c699ced9, 0xa513d6d9ced9be17, 0xa595add5b617a593, 0xae15c699b617b617, 0x9cd3ad95b615add5, 0x9d53b6179d139513, 
+	0xad95ad95b5d59d55, 0x8c518c919d13c6d9, 0xa5937bcdbe57c659, 0xbd97c619ad95d71b, 0xa595df9ddf9dd75b, 0xbe99be57e79db5d5, 0x9d13add5b5d5add5, 0xbe57ad9594919d13, 
+	0xa555add5add5add5, 0xadd78c919d55b617, 0x94917bcdad95a553, 0xb617ad95c699d75b, 0xd75bdf5bbe57c657, 0xc657e75df7dfc659, 0xbe57c71bced9be57, 0xb5d78c919d139cd3, 
+	0x9d139d55b617b617, 0xa553951394d39d13, 0x7b8d9cd1c6579d53, 0xb615c719d79bd71b, 0xc697b617c699be17, 0xdf5bd6d9e75dd71b, 0xc6d9c6d9be99b5d5, 0xb5d7a513ad55b5d7, 
+	0x94d194d3b617a595, 0xbe17ced9c69ba553, 0x8c4f9d13b6179d11, 0x844fb657efdde7dd, 0xc697a513b597b5d7, 0xb5d7b617b615a593, 0x95139d53be59cedb, 0xa5559d13a5139d53, 
+	
+};
+
+u64 gPlatform_FloatingConeDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16[] = {
+	0x4b4d4b0b638f7c51, 0x74116b8f42c94207, 0x8495a55794d59d57, 0x4207eee5534d6b8f, 0x4207a599eeefeeed, 0xeea9ee65c51952cb, 0x7c51c51b9c138cd5, 0x94d5951594d55b0d, 
+	0xf731534d7453534d, 0x8cd57c1173d194d5, 0x8cd5be1b9cd5738f, 0x6b8f534d8cd58453, 0x634d73cfc65deeed, 0xcd5bc51b73d16b8f, 0x84517493a453e5df, 0x7c5194d58cd55b0b, 
+	0xf6adf6f1eeab638d, 0x42c9a5178453a559, 0x8cd7ad578c93638d, 0xb4d742c942c9c69d, 0xb599530bb61bac95, 0x4b4d6bd18c936b8f, 0x638f845373d1eea9, 0x6bcf9d5984935b0b, 
+	0x4b4df6edee65e61f, 0x4a89e76badd9a599, 0xd627534d534dac95, 0x93d1eea9534dad57, 0xa515ae1be66173d1, 0x7c538cd58c9373cf, 0x5b0b94d79d5794d7, 0x8c959d597c137c11, 
+	0x84938453f6eb9d17, 0x7c53ad999557ee67, 0xb497730d9c13bd17, 0xf6ebf773f72f534d, 0xa5998b917c938493, 0x7c538cd574116b8f, 0x6b8d8493a5999d59, 0x8cd584958c958c95, 
+	0x8cd58cd5a599b61b, 0x84538cd552c99d17, 0xcd5b9c13ee67eea9, 0x4b4dbe9fee67d59d, 0xf6adc4db8cd55bcf, 0x8493849374117411, 0x6c117453a59bb5dd, 0xb61d8c958cd39d17, 
+	0xb61fa55da59d94d5, 0xbe1bad554a876b8f, 0xac55ac15f6ad534d, 0x8cd58cd58d17ac55, 0xf6adf6efdd9d4b0b, 0x6bcf74117c53638f, 0x84539d17addbc6a1, 0x94d58c958cd394d3, 
+	0xa559eea9ce21a517, 0xbe1ba5557c91c51b, 0xdddfbcd96c0f7451, 0x9d57b5d94207534d, 0x93d1ee65ee61638f, 0x74117c5184958453, 0x94d57c118c958cd5, 0x534d7c537c519d55, 
+	0x8cd39dd78493c65f, 0x94d595579d99b497, 0xb4d7ee6163cf638f, 0x8cd5be1b530b4249, 0xb497b4d7534d73d1, 0x84d584936bcfa557, 0x84517bcf8cd5e6ad, 0xd5e3ee657c119515, 
+	0x8c9394d3a557ad99, 0xa59b84d584934acb, 0xf6eff72fbd195b4d, 0x9d577bcf8cd593d1, 0xb497b4d75acb6b8f, 0x7c937c11634d8cd5, 0x534da599d59be667, 0xdddd42c98cd59d17, 
+	0x84938c938cd59517, 0xc65d9517634b7493, 0x7c517b0f8b9193d1, 0x5a497cd5f72dee61, 0xee67c519de1f634d, 0x6bcf6bcf638ddddf, 0xeea5f6edee61d5e5, 0xc51b638d6bcf8cd5, 
+	0x9515849384959d17, 0xbe1bb5db94d57c11, 0x6bcf9c5352896acd, 0x94536c114b4db497, 0x93d1eeeb6bcf638d, 0x7c515b4dcd5beea7, 0x4b4d7c51eea5ee21, 0xc51bcd5b7c1194d5, 
+	0x8cd57c519d57a559, 0x95159d57a55794d5, 0x7c117c118c937cd5, 0x6b8d74934185534d, 0xb49773d184937c51, 0x84934a897c519d17, 0x7c53634d6c51dddd, 0xa4133a0563cf7411, 
+	0x8c9584938cd58cd5, 0xa557c65d94d56bcf, 0x6b8f6b8d84539515, 0x7c9394d573d14b4d, 0x42c96b8f84534ac9, 0x73cf9d17a599d725, 0x84534ac952c99d17, 0x534d6b8f84515b4d, 
+	0x84937c517c518493, 0xad99be5f8c957c11, 0xde1d42c97c518493, 0x7c516bcf8cd5ee21, 0x8cd57c51a517634d, 0x738fb61bcf23a557, 0xc69d8453530b8cd5, 0x8cd54249634d7411, 
+	0x9c957c535b0b738f, 0xb5dda59995178cd5, 0xde1d83d142c96c11, 0x7c114185eea9a495, 0xe5dfa557ad57a515, 0xcf23c69db5997c51, 0x8451a515cf238cd5, 0x534da5176b8f9515, 
+	0x84d5638f73cf7c51, 0xa5598453530be627, 0xe5e5b4d7acd7534d, 0x63cf8bd14b4d9d99, 0x9411ee6742c94b4d, 0xe76bad57a515638d, 0x42c9a599f735c4d9, 0x4207845194919d97, 
+	0xf6a5534da599534d, 0x84515b4d42c9ee69, 0xf66bd5a1cd1b628b, 0x9c1373d1a5996b8f, 0x538dc51973d17c53, 0x8cd56c117453ac55, 0xcddff6abf6eb4b4d, 0x7c517c51bedfeea5, 
+	0x94117c116bcfdddd, 0x62cb4a89dd9dc519, 0xcd5b8b9193d18351, 0x41857c5184937411, 0x6b8d5b4d7c118c93, 0x8cd54a8973d1bd19, 0xde65f733c65da599, 0x6b8f9557ee67f6ef, 
+	0x84536bcf638f5ac9, 0x9391cd5b630d5b4d, 0xa495a4554185634f, 0x6bcf8d17b5dd9d55, 0xa51574115bcfa517, 0x6bcf52cb4249eea9, 0xf72f534d8cd5ad99, 0x8cd59d579d178c53, 
+	0x84938c938c938411, 0x73cf73cf741163cf, 0x6c519d176b8f7c53, 0xb5dd9d57ad998cd5, 0x7c118c136c117c53, 0x8493638deea7f72f, 0xf6efae1b8d15b61b, 0xb599741173d1638f, 
+	0x63cf9d579d1794d5, 0x7cd5849395996b8d, 0x638f8cd573d19d99, 0xcea3ad99b61ba599, 0x6c0fcd5bc51b5b4d, 0x638f7c51b497c519, 0xee67ee657c51be1b, 0xbe5b8cd5c55952cb, 
+	0x630b84939d179517, 0x7c518cd58c936bcf, 0x638d74119517b5dd, 0x95197c5384535289, 0x4249ee61c5199d17, 0x73cf634d630d7c51, 0xc51bc4d9ee657c51, 0xbedf9453c5199c53, 
+	0x8493951784958453, 0x845184938493740f, 0x7c537c1384956bd1, 0x534d6b8f420749c7, 0x8b91dd9f534d7c51, 0x8cd56b8f7c11534d, 0x4b4da3d3dd9feea9, 0xee23ddddc51941c5, 
+	0x7c116b8f745173d1, 0x73cf84d39d578493, 0x7c1173d1634d534d, 0xac154207534deea9, 0xeeabe667ae1b52cb, 0x84936b8f8cd57411, 0x5a494207b457c51b, 0xa45393d1534d73cf, 
+	0x9d17738f638f4207, 0x534d638d73cf7c11, 0x845384936b8f6b8f, 0x534d9391dd9df6ef, 0xe625eea9eee941c7, 0x630d8cd59d177c11, 0x8c11638d8b919c13, 0x734d4a076b4d8411, 
+	0x845142474b4dac55, 0xc51942c96b8f7411, 0x741194d59d17a557, 0x8c934249eea7e61f, 0xdd9dc4d9a4538391, 0x4a07951595158c93, 0x7c118c53534d9c13, 0xa45542c96b4d8451, 
+	0x8c935b8d7b0f7b0f, 0xb457ac554207534d, 0x8b9174119d17b5db, 0x6b8f52c973d1b497, 0x630d7c51bd1942c9, 0x84938cd57c938d15, 0x7c117c11630b4249, 0xb4d7ee61a5578c93, 
+	0xae1b638f4a476a4b, 0x8b91d59dcd5b8b91, 0x6acb4207534d9d57, 0xad99530b4b4d73d1, 0x7c53638d63cf7411, 0x7c5373d16bcf6bcf, 0x84937c1173cf4207, 0x534dcd9fde2773cf, 
+	0xa5578c935b4d4185, 0xac55c519ee67ee23, 0xa413dddd7c519515, 0x8453638d42c96b8f, 0x6b8f6b8f74117c51, 0x534d6b8f5b4d4207, 0x7c117c117c1173d1, 0x7c535b0bbe9fc51b, 
+	0x9d577411638d49c7, 0x534dd59dffffac95, 0x834f3a05be1f534d, 0x534dc51b8cd5534d, 0x7c538453738fb61b, 0xee677c51a599a413, 0x6b8f634d7c118cd5, 0x8cd58c9394d59dd9, 
+	0x84536bcf73cf530b, 0x8cd54b4dbe9feea5, 0x534d94d7a59b6c51, 0xacd5b497bc97534d, 0x6b8fa515ae1bf6ef, 0xeeebeea9f6ed9c13, 0xc519420774539517, 0x8cd594d58c938453, 
+	
+};
+
+Vtx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_vtx_0[21] = {
+	{{ {0, -410, 3433}, 0, {1124, 816}, {0, 218, 121, 254} }},
+	{{ {0, -4727, 0}, 0, {500, 2016}, {0, 129, 0, 254} }},
+	{{ {2973, -410, 1716}, 0, {-104, 816}, {105, 218, 61, 254} }},
+	{{ {2973, 1197, 1716}, 0, {-104, 16}, {87, 78, 50, 254} }},
+	{{ {0, 1197, 3433}, 0, {1124, 16}, {0, 78, 101, 254} }},
+	{{ {-2973, -410, 1716}, 0, {-100, 816}, {151, 218, 61, 254} }},
+	{{ {-2973, 1197, 1716}, 0, {-100, 16}, {169, 78, 50, 254} }},
+	{{ {0, -4727, 0}, 0, {520, 2016}, {0, 129, 0, 254} }},
+	{{ {2973, -410, 1716}, 0, {-100, 816}, {105, 218, 61, 254} }},
+	{{ {2973, -410, -1716}, 0, {1124, 816}, {105, 218, 195, 254} }},
+	{{ {2973, 1197, -1716}, 0, {1124, 16}, {87, 78, 206, 254} }},
+	{{ {0, 1197, -3433}, 0, {-104, 16}, {0, 78, 155, 254} }},
+	{{ {0, -410, -3433}, 0, {-104, 816}, {0, 218, 135, 254} }},
+	{{ {2973, 1197, 1716}, 0, {-100, 16}, {87, 78, 50, 254} }},
+	{{ {0, -410, -3433}, 0, {-100, 816}, {0, 218, 135, 254} }},
+	{{ {-2973, 1197, -1716}, 0, {1124, 16}, {169, 78, 206, 254} }},
+	{{ {0, 1197, -3433}, 0, {-100, 16}, {0, 78, 155, 254} }},
+	{{ {-2973, -410, -1716}, 0, {1124, 816}, {151, 218, 195, 254} }},
+	{{ {0, -4727, 0}, 0, {520, 2016}, {0, 129, 0, 254} }},
+	{{ {-2973, -410, 1716}, 0, {-104, 816}, {151, 218, 61, 254} }},
+	{{ {-2973, 1197, 1716}, 0, {-104, 16}, {169, 78, 50, 254} }},
+};
+
+Gfx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_vtx_0 + 0, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(0, 3, 4, 0),
+	gsSP1Triangle(5, 0, 4, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(5, 7, 0, 0),
+	gsSP1Triangle(8, 7, 9, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(9, 12, 11, 0),
+	gsSP1Triangle(9, 1, 12, 0),
+	gsSP1Triangle(8, 10, 13, 0),
+	gsSPVertex(gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_vtx_0 + 14, 7, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(0, 4, 3, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(3, 5, 6, 0),
+	gsSP1Triangle(3, 6, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_vtx_1[6] = {
+	{{ {-2973, 1197, 1716}, 0, {528, -1360}, {169, 78, 50, 254} }},
+	{{ {0, 1197, 3433}, 0, {-1072, -432}, {0, 78, 101, 254} }},
+	{{ {2973, 1197, 1716}, 0, {-1072, 1424}, {87, 78, 50, 254} }},
+	{{ {0, 1197, -3433}, 0, {2128, 1424}, {0, 78, 155, 254} }},
+	{{ {2973, 1197, -1716}, 0, {528, 2352}, {87, 78, 206, 254} }},
+	{{ {-2973, 1197, -1716}, 0, {2128, -432}, {169, 78, 206, 254} }},
+};
+
+Gfx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_vtx_1 + 0, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(3, 5, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_FloatingConeDL_GrassSideTall_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_gPlatform_FloatingConeDL_ZELD_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 232),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_gPlatform_FloatingConeDL_ZELD_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_FloatingConeDL_GrassSolid_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL1, TEXEL0, ENV_ALPHA, TEXEL0, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(255, 255, 255, 128),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_FloatingConeDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_FloatingConeDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 256, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(6, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 256, 1, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 3, G_TX_WRAP | G_TX_NOMIRROR, 5, 3),
+	gsDPSetTileSize(1, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_FloatingConeDL[] = {
+	gsSPDisplayList(mat_gPlatform_FloatingConeDL_GrassSideTall_layerOpaque),
+	gsSPDisplayList(gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPlatform_FloatingConeDL_GrassSolid_layerOpaque),
+	gsSPDisplayList(gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_cone_grass_model.h b/assets_hm_pack/objects/object_platforms/platform_cone_grass_model.h
new file mode 100644
index 000000000..c85eedf0b
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_cone_grass_model.h
@@ -0,0 +1,11 @@
+extern u64 gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_gPlatform_FloatingConeDL_ZELD_ci8[];
+extern u64 gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_gPlatform_FloatingConeDL_ZELD_pal_rgba16[];
+extern u64 gPlatform_FloatingConeDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16[];
+extern u64 gPlatform_FloatingConeDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16[];
+extern Vtx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_vtx_0[21];
+extern Gfx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_vtx_1[6];
+extern Gfx gPlatform_FloatingConeDL_gPlatform_FloatingConeDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gPlatform_FloatingConeDL_GrassSideTall_layerOpaque[];
+extern Gfx mat_gPlatform_FloatingConeDL_GrassSolid_layerOpaque[];
+extern Gfx gPlatform_FloatingConeDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_grass_col.c b/assets_hm_pack/objects/object_platforms/platform_hex_grass_col.c
new file mode 100644
index 000000000..089251873
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_grass_col.c
@@ -0,0 +1,67 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPlatform_HexGrassDL_polygonTypes[] = {
+	{ 0x00000000, 0x00000000 },
+	{ 0x80000000, 0x00000000 },
+};
+
+CollisionPoly gPlatform_HexGrassDL_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-0.8660255074501038), COLPOLY_SNORMAL(-2.1855685261584767e-08), COLPOLY_SNORMAL(-0.4999997615814209), 0xf01b },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-0.8660255074501038), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.4999997019767761), 0xf01b },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(1.0149943108217485e-07), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf01b },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(1.0149943108217485e-07), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf01b },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(0.8660255074501038), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.4999998211860657), 0xf01b },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(0.8660255074501038), COLPOLY_SNORMAL(-2.1855688814298446e-08), COLPOLY_SNORMAL(-0.4999998211860657), 0xf01b },
+	{ 0x0000, 0x0007, 0x0006, 0x0008, COLPOLY_SNORMAL(0.8660253286361694), COLPOLY_SNORMAL(2.1855701248796322e-08), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x0007, 0x0008, 0x0009, COLPOLY_SNORMAL(0.8660252690315247), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x0009, 0x0008, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf01b },
+	{ 0x0000, 0x0009, 0x000a, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf01b },
+	{ 0x0000, 0x000b, 0x000a, 0x0001, COLPOLY_SNORMAL(-0.8660253882408142), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x000b, 0x0001, 0x0000, COLPOLY_SNORMAL(-0.8660253286361694), COLPOLY_SNORMAL(2.1855701248796322e-08), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x0000, 0x0003, 0x000c, COLPOLY_SNORMAL(2.973971853083659e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300370130158626e-08), 0xfbab },
+	{ 0x0000, 0x0003, 0x0005, 0x000c, COLPOLY_SNORMAL(-2.973970794292475e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300370130158626e-08), 0xfbab },
+	{ 0x0000, 0x0005, 0x0007, 0x000c, COLPOLY_SNORMAL(5.074973330465582e-08), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.189588910640053e-14), 0xfbab },
+	{ 0x0000, 0x0007, 0x0009, 0x000c, COLPOLY_SNORMAL(5.07497368573695e-08), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(5.860075447117197e-08), 0xfbab },
+	{ 0x0000, 0x000b, 0x0000, 0x000c, COLPOLY_SNORMAL(1.301112275442517e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300373682872305e-08), 0xfbab },
+	{ 0x0000, 0x0009, 0x000b, 0x000c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300366577444947e-08), 0xfbab },
+	{ 0x0001, 0x0004, 0x0002, 0x0001, COLPOLY_SNORMAL(4.460955344405765e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3950542760740063e-08), 0xfd79 },
+	{ 0x0001, 0x0001, 0x000a, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.395055697159478e-08), 0xfd79 },
+	{ 0x0001, 0x0008, 0x0006, 0x0004, COLPOLY_SNORMAL(-5.947944129683792e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.39505534188811e-08), 0xfd79 },
+	{ 0x0001, 0x0001, 0x0008, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.39505534188811e-08), 0xfd79 },
+};
+
+Vec3s gPlatform_HexGrassDL_vertices[13] = {
+	{ -4698, -1109, 0 },
+	{ -4698, 647, 0 },
+	{ -2349, 647, -4069 },
+	{ -2349, -1109, -4069 },
+	{ 2349, 647, -4069 },
+	{ 2349, -1109, -4069 },
+	{ 4698, 647, 0 },
+	{ 4698, -1109, 0 },
+	{ 2349, 647, 4069 },
+	{ 2349, -1109, 4069 },
+	{ -2349, 647, 4069 },
+	{ -2349, -1109, 4069 },
+	{ 0, -1109, 0 },
+};
+
+CollisionHeader gPlatform_HexGrassDL_collisionHeader = {
+	-4698,
+	-1109,
+	-4069,
+	4698,
+	647,
+	4069,
+	13,
+	gPlatform_HexGrassDL_vertices,
+	22,
+	gPlatform_HexGrassDL_polygons,
+	gPlatform_HexGrassDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_grass_col.h b/assets_hm_pack/objects/object_platforms/platform_hex_grass_col.h
new file mode 100644
index 000000000..74d6ce867
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_grass_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPlatform_HexGrassDL_polygonTypes[];
+extern CollisionPoly gPlatform_HexGrassDL_polygons[];
+extern Vec3s gPlatform_HexGrassDL_vertices[13];
+extern CollisionHeader gPlatform_HexGrassDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_grass_model.c b/assets_hm_pack/objects/object_platforms/platform_hex_grass_model.c
new file mode 100644
index 000000000..a1ba6f7d5
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_grass_model.c
@@ -0,0 +1,222 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_ci8[] = {
+	0x0001020304050607, 0x08090a0b0c03000d, 0x0e070f1011041213, 0x140014150416170a, 0x0a001804120d191a, 0x1b1c0b1d1e1f1a09, 0x20210e0e2215000d, 0x0a23152406072526, 
+	0x270004201c191900, 0x28292a2b2c2d0b0b, 0x2a2a0e0013040d00, 0x14132e0424152f0e, 0x302b071707062612, 0x310b1809000e0632, 0x0333343512000919, 0x090d043604091504, 
+	0x30370f0e0d260938, 0x39373a3b09150d0a, 0x3c08081900273d3e, 0x0a3f0a003a090940, 0x0441424344454646, 0x4746483e0030060e, 0x2a3c3b3f49263b26, 0x094a09294b4c4d10, 
+	0x484e4d454f505152, 0x534f544814152055, 0x48454d44464d5609, 0x574347474d454547, 0x5854595a5950545b, 0x454f5a545a465445, 0x465854454f4f455c, 0x474d464546484651, 
+	0x5051535d5e5a5051, 0x4f54514f52545d50, 0x455b45464645454f, 0x455246464646544f, 0x5f5b605d5e535d59, 0x5e5a50614f505950, 0x605d505450505450, 0x5954584f4f455059, 
+	0x5d5d626362646566, 0x676869595d596a6b, 0x6c595a6d5d505850, 0x6e4f525454615969, 0x636f666c706c7065, 0x686564716c6c7253, 0x53695e685d50735e, 0x5a51595a4f696370, 
+	0x717463757063685d, 0x6868636463636268, 0x5d6c7063685d6963, 0x6968505d69636272, 0x6263626868647664, 0x6864666363645d64, 0x6f71716376686975, 0x6464716c5e646264, 
+	0x6970707077776263, 0x7668646368687678, 0x71797a6364766477, 0x695d705d686d6362, 0x706370657b7c7164, 0x68687d6977686364, 0x707e7e647a636f7f, 0x7a7a77706380706c, 
+	
+};
+
+u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_pal_rgba16[] = {
+	0x8493ce5bbe19b5d7, 0x8cd59d198c959d17, 0xad9774117c119493, 0x845184539515a555, 0x8c938d137c519d55, 0x8cd394d5a59b9d57, 0xbdd973d19cd38c51, 0x7bd19d13a557b599, 
+	0x95179d159d977c91, 0x8c9795137c5373cf, 0x94918c53b597ad57, 0x7c938cd7a559b619, 0x94d78c119c93b5d9, 0xa515638f9d599cd5, 0x7c0f841184d36bcf, 0x94d374136bd16b8f, 
+	0x8495845552cb4a4b, 0x628f62cf5a8d524b, 0x5acd5b4d634f528b, 0x4a0b524d528d6b0f, 0x7351731162cd730f, 0x6b117bcf634d52cd, 0x6acf7b937b53628d, 0x5a8f83937b515a8b, 
+	0x83d5735394159c57, 0x9c5994578c1583d3, 0x94178bd57b919c99, 0x8bd383918395a457, 0xa499acdb7b4f6acd, 0xac999c17a49ba459, 0x8b93bd1db51dbd1f, 0xac9bb51fbd5fc5a1, 
+	0xacdd000000000000
+};
+
+u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16[] = {
+	0xd71bb5d78c0fa555, 0xbe59df9bce99c657, 0xd6dbb5d5a595b617, 0x8c51a513ce99d719, 0xa595ad959491b595, 0x9cd394d38c91b617, 0xbe17ad95cf19c6db, 0xbe599d1394919cd3, 
+	0xc697b5d5ad53be17, 0xbe97cf19ced9ad55, 0xc659b5d5add5be99, 0xadd7be17be97ced9, 0x94d39d13b5d7c657, 0xb5d5ad95be17c659, 0xb5d7add5cf19cf1b, 0xcf1bad959d13a555, 
+	0xc659d71bd6d9b615, 0xc6d9a553ad55ad95, 0x9d1394d18c9194d1, 0xbe19be59a595add5, 0xb615b5d5b5d5c697, 0xc699cf19c697be57, 0xc699df5badd5a555, 0xb5d7c699be17ad95, 
+	0xbe17c659c659ced9, 0xcf1ba55394d3be17, 0xa5959d53a555a513, 0x9d13b657b6178c91, 0xbe17be17ad95b5d5, 0xbe57ad959cd3c697, 0xbe97c699b5d5ad93, 0xa555c659cedbad97, 
+	0xadd5a595b5d7a595, 0x94d394917bcf8c91, 0x8cd194d3ad97ad95, 0xa553ad95840f9cd3, 0xbe17ced9c699be57, 0xdf5bbe17b5d5c699, 0xae15add5ad959491, 0x9491ad95be57b617, 
+	0x9491a555a555b617, 0x8c117bcf94d3a593, 0x8c919cd3be17add7, 0xadd79d537bcf9491, 0xbe17d71bbe57be17, 0xd71bd71bc699be99, 0xc699efdddf1bad95, 0x9491add5df9dc697, 
+	0xa55394d1ad95c659, 0xb5d59cd3add59d13, 0x8c51ad55cedba595, 0xb617c699ad55ad53, 0xbe57be17add5840f, 0xb5d5be57a555a595, 0xa595ad95b5d5add5, 0xa59594d3b5d79d13, 
+	0x94d194d1a555c659, 0xadd7be57be97a595, 0x9491add5be598491, 0x9d13be17be17a553, 0xb5d5b617be179491, 0xb5d57c0f94d38c91, 0x7c0f844fa595a553, 0xbe578cd194d18c91, 
+	0xad558c5194d1add5, 0xcf1bc6d9b615ad95, 0xad95a5958d119553, 0xb617ad97c699df9d, 0xd71bb617c659b597, 0x949194d18c918c91, 0x844f6b4d7c4f9513, 0xadd594d1b5d5c697, 
+	0xa553a595b5d5b617, 0xbe99b5d79d13b5d5, 0xce99b617a5d5a555, 0xc699c65bbe59be99, 0xb615b5d5ad53a595, 0xc6d9add5add5d75b, 0xc6997c0f848f94d3, 0x94d1add5ce97e79d, 
+	0xced7c657e7ddbe97, 0xb5d5844f840fa513, 0xadd5a555a595ad55, 0xb5d7be59b619a555, 0xb617be599491b615, 0xa5d38c8fbe17d75b, 0xbe97e7ddadd59d13, 0x7c0fad55df1bced9, 
+	0xd71bd71befddc699, 0xadd5ad959d13840f, 0x8c91a595b597ad95, 0x9d13a595a5959d13, 0xb595ced9b617b617, 0xa593c699c6d994d1, 0xb615e7ddd71bbe17, 0x9491b5d5be17a555, 
+	0xc657e79bced99d13, 0xa553ce99c657a553, 0x8cd1cf1bd71bb5d7, 0x9d15b619b5d7b5d7, 0x9cd3be99b6179513, 0xbe99cf1badd5ad55, 0xad95a555ad95be59, 0xb5d7a51394d194d1, 
+	0xced9cf19a5539491, 0x9d13be57efddad93, 0xa553ced9cedbb5d7, 0x7bcf8cd384517bcf, 0x73cd8cd17c4f844f, 0xa555ae17b617ad53, 0xdf1bbe17be59ced9, 0xbe579513add5b5d5, 
+	0xdf9bbe97b5d59cd1, 0x8c4fadd5f7dfce99, 0xb5d5be57be179491, 0x8c9194d39d158c91, 0x7c0f73cf844f9513, 0x9d53ad95c659c617, 0xced9e75bdf9bb657, 0x9d53a595d71bd71b, 
+	0xdf9bd71bd7199d13, 0x9d13c6d9e79dce99, 0xefddced9b5d59d13, 0x9d13ad959d158cd3, 0xa5978c918c91840f, 0x9491be19ce9bb5d5, 0xdf1bf7dfefdfced9, 0xbe57be57ad95c699, 
+	0xc657be17be179d13, 0xadd5e7ddd75bce99, 0xd7199511d719be57, 0xad53d6db8c516b8d, 0x9513a5959d13840f, 0x9cd39cd3be99be17, 0xad95d71bd71bbe17, 0xced9df5bd6d9df1b, 
+	0xbe57ad95a553be57, 0xd759cf19ad95a553, 0xadd5c699d71ba513, 0x8c0fad55a5539d55, 0x9d55add7ad579493, 0xa5539d55a595add5, 0xbe57ce99a553be17, 0xdf5db5d7b5d5b5d5, 
+	0xbe57ced9ced99511, 0xbe17ad5583cfa553, 0xc699d71bce999cd1, 0x94d19d11be15c659, 0xadd7ad979d158451, 0xbe99cf1ba595b617, 0xe7dfdf5dbdd5be17, 0xc6598c4fa553add5, 
+	0x840f844f9d53ad95, 0xb5d58c51840fbe57, 0xc6d9b615ad93ad55, 0x7b8da553be17a555, 0xadd7a59794d3a595, 0xbe99a5d59cd3ad97, 0xa5558c517b8da555, 0xadd5add59d13a595, 
+	0x8c91840fa553d719, 0xdf5bad95b5d5df9d, 0xd71bced9a5139491, 0x9491b595e75bad95, 0x7bcf8cd194d3be59, 0xcf1dadd77bcf9d13, 0x9d137bcfa553be17, 0xbe57add5cf1badd5, 
+	0x8c8f844f8c51be57, 0xd719df5dbe57c6d9, 0xf7dff7dfad95a513, 0xa553d719e79b9d51, 0x8c919d13a595b617, 0xcedbc699ad95add5, 0xbe17a59594d19d53, 0x8cd19d138c919cd3, 
+	0x8c91738d9d13b5d7, 0xb617ae15c6d9efdf, 0xd719be57d6dbdf1b, 0xe79bf7dfced9d719, 0xc699c699ced9b617, 0xad959cd39cd3be17, 0xb617c6d9be59a5d5, 0x94d394d3949394d3, 
+	0x9d139d13a513c699, 0xbe59be17ce99d71b, 0xbe17c659be57cf19, 0xdf5badd5a595c699, 0xb617df5bced9b5d7, 0x9d138c919cd3ad95, 0xa595be99a595a595, 0xb5d79491a555a515, 
+	0xa513a513a513add5, 0xbe57e79dc6599491, 0xb5d7b5d7b5d5e7db, 0xdf9bc697be179cd1, 0x7bcddf5ddf5bb5d7, 0xb5d7b619b617a595, 0xa593951394d39d53, 0xb5d7be17a513ad55, 
+	0xa4d3b5d5ad93ad95, 0xd71bc699be5794d1, 0x8c9194d39d13be57, 0xd719e79bad958c4f, 0xad95d6dbc699b5d7, 0x9d13add5add7a593, 0xbe57c699a553a555, 0xa513be57b6178c91, 
+	0xb617ad95b5d5be17, 0xbe579d13bdd7d719, 0x9d139d13ad95b5d7, 0xc697e79bdf1bad95, 0xad55b5d7be17a595, 0x95139d539d53ced9, 0xd71bce99d6dbd6db, 0x94d3add5e7dd9d53, 
+	0xad958c4fa593a553, 0x8c91a51394d1a593, 0xbe17ad95c699ced9, 0xa513d6d9ced9be17, 0xa595add5b617a593, 0xae15c699b617b617, 0x9cd3ad95b615add5, 0x9d53b6179d139513, 
+	0xad95ad95b5d59d55, 0x8c518c919d13c6d9, 0xa5937bcdbe57c659, 0xbd97c619ad95d71b, 0xa595df9ddf9dd75b, 0xbe99be57e79db5d5, 0x9d13add5b5d5add5, 0xbe57ad9594919d13, 
+	0xa555add5add5add5, 0xadd78c919d55b617, 0x94917bcdad95a553, 0xb617ad95c699d75b, 0xd75bdf5bbe57c657, 0xc657e75df7dfc659, 0xbe57c71bced9be57, 0xb5d78c919d139cd3, 
+	0x9d139d55b617b617, 0xa553951394d39d13, 0x7b8d9cd1c6579d53, 0xb615c719d79bd71b, 0xc697b617c699be17, 0xdf5bd6d9e75dd71b, 0xc6d9c6d9be99b5d5, 0xb5d7a513ad55b5d7, 
+	0x94d194d3b617a595, 0xbe17ced9c69ba553, 0x8c4f9d13b6179d11, 0x844fb657efdde7dd, 0xc697a513b597b5d7, 0xb5d7b617b615a593, 0x95139d53be59cedb, 0xa5559d13a5139d53, 
+	
+};
+
+u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16[] = {
+	0x4b4d4b0b638f7c51, 0x74116b8f42c94207, 0x8495a55794d59d57, 0x4207eee5534d6b8f, 0x4207a599eeefeeed, 0xeea9ee65c51952cb, 0x7c51c51b9c138cd5, 0x94d5951594d55b0d, 
+	0xf731534d7453534d, 0x8cd57c1173d194d5, 0x8cd5be1b9cd5738f, 0x6b8f534d8cd58453, 0x634d73cfc65deeed, 0xcd5bc51b73d16b8f, 0x84517493a453e5df, 0x7c5194d58cd55b0b, 
+	0xf6adf6f1eeab638d, 0x42c9a5178453a559, 0x8cd7ad578c93638d, 0xb4d742c942c9c69d, 0xb599530bb61bac95, 0x4b4d6bd18c936b8f, 0x638f845373d1eea9, 0x6bcf9d5984935b0b, 
+	0x4b4df6edee65e61f, 0x4a89e76badd9a599, 0xd627534d534dac95, 0x93d1eea9534dad57, 0xa515ae1be66173d1, 0x7c538cd58c9373cf, 0x5b0b94d79d5794d7, 0x8c959d597c137c11, 
+	0x84938453f6eb9d17, 0x7c53ad999557ee67, 0xb497730d9c13bd17, 0xf6ebf773f72f534d, 0xa5998b917c938493, 0x7c538cd574116b8f, 0x6b8d8493a5999d59, 0x8cd584958c958c95, 
+	0x8cd58cd5a599b61b, 0x84538cd552c99d17, 0xcd5b9c13ee67eea9, 0x4b4dbe9fee67d59d, 0xf6adc4db8cd55bcf, 0x8493849374117411, 0x6c117453a59bb5dd, 0xb61d8c958cd39d17, 
+	0xb61fa55da59d94d5, 0xbe1bad554a876b8f, 0xac55ac15f6ad534d, 0x8cd58cd58d17ac55, 0xf6adf6efdd9d4b0b, 0x6bcf74117c53638f, 0x84539d17addbc6a1, 0x94d58c958cd394d3, 
+	0xa559eea9ce21a517, 0xbe1ba5557c91c51b, 0xdddfbcd96c0f7451, 0x9d57b5d94207534d, 0x93d1ee65ee61638f, 0x74117c5184958453, 0x94d57c118c958cd5, 0x534d7c537c519d55, 
+	0x8cd39dd78493c65f, 0x94d595579d99b497, 0xb4d7ee6163cf638f, 0x8cd5be1b530b4249, 0xb497b4d7534d73d1, 0x84d584936bcfa557, 0x84517bcf8cd5e6ad, 0xd5e3ee657c119515, 
+	0x8c9394d3a557ad99, 0xa59b84d584934acb, 0xf6eff72fbd195b4d, 0x9d577bcf8cd593d1, 0xb497b4d75acb6b8f, 0x7c937c11634d8cd5, 0x534da599d59be667, 0xdddd42c98cd59d17, 
+	0x84938c938cd59517, 0xc65d9517634b7493, 0x7c517b0f8b9193d1, 0x5a497cd5f72dee61, 0xee67c519de1f634d, 0x6bcf6bcf638ddddf, 0xeea5f6edee61d5e5, 0xc51b638d6bcf8cd5, 
+	0x9515849384959d17, 0xbe1bb5db94d57c11, 0x6bcf9c5352896acd, 0x94536c114b4db497, 0x93d1eeeb6bcf638d, 0x7c515b4dcd5beea7, 0x4b4d7c51eea5ee21, 0xc51bcd5b7c1194d5, 
+	0x8cd57c519d57a559, 0x95159d57a55794d5, 0x7c117c118c937cd5, 0x6b8d74934185534d, 0xb49773d184937c51, 0x84934a897c519d17, 0x7c53634d6c51dddd, 0xa4133a0563cf7411, 
+	0x8c9584938cd58cd5, 0xa557c65d94d56bcf, 0x6b8f6b8d84539515, 0x7c9394d573d14b4d, 0x42c96b8f84534ac9, 0x73cf9d17a599d725, 0x84534ac952c99d17, 0x534d6b8f84515b4d, 
+	0x84937c517c518493, 0xad99be5f8c957c11, 0xde1d42c97c518493, 0x7c516bcf8cd5ee21, 0x8cd57c51a517634d, 0x738fb61bcf23a557, 0xc69d8453530b8cd5, 0x8cd54249634d7411, 
+	0x9c957c535b0b738f, 0xb5dda59995178cd5, 0xde1d83d142c96c11, 0x7c114185eea9a495, 0xe5dfa557ad57a515, 0xcf23c69db5997c51, 0x8451a515cf238cd5, 0x534da5176b8f9515, 
+	0x84d5638f73cf7c51, 0xa5598453530be627, 0xe5e5b4d7acd7534d, 0x63cf8bd14b4d9d99, 0x9411ee6742c94b4d, 0xe76bad57a515638d, 0x42c9a599f735c4d9, 0x4207845194919d97, 
+	0xf6a5534da599534d, 0x84515b4d42c9ee69, 0xf66bd5a1cd1b628b, 0x9c1373d1a5996b8f, 0x538dc51973d17c53, 0x8cd56c117453ac55, 0xcddff6abf6eb4b4d, 0x7c517c51bedfeea5, 
+	0x94117c116bcfdddd, 0x62cb4a89dd9dc519, 0xcd5b8b9193d18351, 0x41857c5184937411, 0x6b8d5b4d7c118c93, 0x8cd54a8973d1bd19, 0xde65f733c65da599, 0x6b8f9557ee67f6ef, 
+	0x84536bcf638f5ac9, 0x9391cd5b630d5b4d, 0xa495a4554185634f, 0x6bcf8d17b5dd9d55, 0xa51574115bcfa517, 0x6bcf52cb4249eea9, 0xf72f534d8cd5ad99, 0x8cd59d579d178c53, 
+	0x84938c938c938411, 0x73cf73cf741163cf, 0x6c519d176b8f7c53, 0xb5dd9d57ad998cd5, 0x7c118c136c117c53, 0x8493638deea7f72f, 0xf6efae1b8d15b61b, 0xb599741173d1638f, 
+	0x63cf9d579d1794d5, 0x7cd5849395996b8d, 0x638f8cd573d19d99, 0xcea3ad99b61ba599, 0x6c0fcd5bc51b5b4d, 0x638f7c51b497c519, 0xee67ee657c51be1b, 0xbe5b8cd5c55952cb, 
+	0x630b84939d179517, 0x7c518cd58c936bcf, 0x638d74119517b5dd, 0x95197c5384535289, 0x4249ee61c5199d17, 0x73cf634d630d7c51, 0xc51bc4d9ee657c51, 0xbedf9453c5199c53, 
+	0x8493951784958453, 0x845184938493740f, 0x7c537c1384956bd1, 0x534d6b8f420749c7, 0x8b91dd9f534d7c51, 0x8cd56b8f7c11534d, 0x4b4da3d3dd9feea9, 0xee23ddddc51941c5, 
+	0x7c116b8f745173d1, 0x73cf84d39d578493, 0x7c1173d1634d534d, 0xac154207534deea9, 0xeeabe667ae1b52cb, 0x84936b8f8cd57411, 0x5a494207b457c51b, 0xa45393d1534d73cf, 
+	0x9d17738f638f4207, 0x534d638d73cf7c11, 0x845384936b8f6b8f, 0x534d9391dd9df6ef, 0xe625eea9eee941c7, 0x630d8cd59d177c11, 0x8c11638d8b919c13, 0x734d4a076b4d8411, 
+	0x845142474b4dac55, 0xc51942c96b8f7411, 0x741194d59d17a557, 0x8c934249eea7e61f, 0xdd9dc4d9a4538391, 0x4a07951595158c93, 0x7c118c53534d9c13, 0xa45542c96b4d8451, 
+	0x8c935b8d7b0f7b0f, 0xb457ac554207534d, 0x8b9174119d17b5db, 0x6b8f52c973d1b497, 0x630d7c51bd1942c9, 0x84938cd57c938d15, 0x7c117c11630b4249, 0xb4d7ee61a5578c93, 
+	0xae1b638f4a476a4b, 0x8b91d59dcd5b8b91, 0x6acb4207534d9d57, 0xad99530b4b4d73d1, 0x7c53638d63cf7411, 0x7c5373d16bcf6bcf, 0x84937c1173cf4207, 0x534dcd9fde2773cf, 
+	0xa5578c935b4d4185, 0xac55c519ee67ee23, 0xa413dddd7c519515, 0x8453638d42c96b8f, 0x6b8f6b8f74117c51, 0x534d6b8f5b4d4207, 0x7c117c117c1173d1, 0x7c535b0bbe9fc51b, 
+	0x9d577411638d49c7, 0x534dd59dffffac95, 0x834f3a05be1f534d, 0x534dc51b8cd5534d, 0x7c538453738fb61b, 0xee677c51a599a413, 0x6b8f634d7c118cd5, 0x8cd58c9394d59dd9, 
+	0x84536bcf73cf530b, 0x8cd54b4dbe9feea5, 0x534d94d7a59b6c51, 0xacd5b497bc97534d, 0x6b8fa515ae1bf6ef, 0xeeebeea9f6ed9c13, 0xc519420774539517, 0x8cd594d58c938453, 
+	
+};
+
+Vtx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_vtx_0[31] = {
+	{{ {-4698, -1109, 0}, 0, {999, 496}, {155, 178, 0, 254} }},
+	{{ {-4698, 647, 0}, 0, {999, -16}, {155, 78, 0, 254} }},
+	{{ {-2349, 647, -4069}, 0, {-1062, -16}, {206, 78, 169, 254} }},
+	{{ {-2349, -1109, -4069}, 0, {-1062, 496}, {206, 178, 169, 254} }},
+	{{ {-2349, -1109, -4069}, 0, {999, 496}, {206, 178, 169, 254} }},
+	{{ {-2349, 647, -4069}, 0, {999, -16}, {206, 78, 169, 254} }},
+	{{ {2349, 647, -4069}, 0, {-1062, -16}, {50, 78, 169, 254} }},
+	{{ {2349, -1109, -4069}, 0, {-1062, 496}, {50, 178, 169, 254} }},
+	{{ {2349, -1109, -4069}, 0, {999, 496}, {50, 178, 169, 254} }},
+	{{ {2349, 647, -4069}, 0, {999, -16}, {50, 78, 169, 254} }},
+	{{ {4698, 647, 0}, 0, {-1062, -16}, {101, 78, 0, 254} }},
+	{{ {4698, -1109, 0}, 0, {-1062, 496}, {101, 178, 0, 254} }},
+	{{ {4698, -1109, 0}, 0, {999, 496}, {101, 178, 0, 254} }},
+	{{ {4698, 647, 0}, 0, {999, -16}, {101, 78, 0, 254} }},
+	{{ {2349, 647, 4069}, 0, {-1062, -16}, {50, 78, 87, 254} }},
+	{{ {2349, -1109, 4069}, 0, {-1062, 496}, {50, 178, 87, 254} }},
+	{{ {2349, -1109, 4069}, 0, {999, 496}, {50, 178, 87, 254} }},
+	{{ {2349, 647, 4069}, 0, {999, -16}, {50, 78, 87, 254} }},
+	{{ {-2349, 647, 4069}, 0, {-1062, -16}, {206, 78, 87, 254} }},
+	{{ {-2349, -1109, 4069}, 0, {-1062, 496}, {206, 178, 87, 254} }},
+	{{ {-2349, -1109, 4069}, 0, {999, 496}, {206, 178, 87, 254} }},
+	{{ {-2349, 647, 4069}, 0, {999, -16}, {206, 78, 87, 254} }},
+	{{ {-4698, 647, 0}, 0, {-1062, -16}, {155, 78, 0, 254} }},
+	{{ {-4698, -1109, 0}, 0, {-1062, 496}, {155, 178, 0, 254} }},
+	{{ {-4698, -1109, 0}, 0, {-572, 446}, {155, 178, 0, 254} }},
+	{{ {-2349, -1109, -4069}, 0, {972, 446}, {206, 178, 169, 254} }},
+	{{ {0, -1109, 0}, 0, {241, 193}, {0, 129, 0, 254} }},
+	{{ {2349, -1109, -4069}, 0, {-572, 446}, {50, 178, 169, 254} }},
+	{{ {4698, -1109, 0}, 0, {972, 446}, {101, 178, 0, 254} }},
+	{{ {2349, -1109, 4069}, 0, {-572, 446}, {50, 178, 87, 254} }},
+	{{ {-2349, -1109, 4069}, 0, {972, 446}, {206, 178, 87, 254} }},
+};
+
+Gfx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_vtx_0 + 16, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(11, 12, 10, 0),
+	gsSP1Triangle(12, 13, 10, 0),
+	gsSP1Triangle(13, 14, 10, 0),
+	gsSP1Triangle(14, 8, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_vtx_1[6] = {
+	{{ {2349, 647, -4069}, 0, {432, -1488}, {50, 78, 169, 254} }},
+	{{ {-2349, 647, -4069}, 0, {-1296, -528}, {206, 78, 169, 254} }},
+	{{ {-4698, 647, 0}, 0, {-1296, 1520}, {155, 78, 0, 254} }},
+	{{ {2349, 647, 4069}, 0, {2160, 1520}, {50, 78, 87, 254} }},
+	{{ {-2349, 647, 4069}, 0, {432, 2480}, {206, 78, 87, 254} }},
+	{{ {4698, 647, 0}, 0, {2160, -528}, {101, 78, 0, 254} }},
+};
+
+Gfx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_vtx_1 + 0, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(3, 5, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_HexGrassDL_GrassSide[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 128),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_HexGrassDL_Grass[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL1, TEXEL0, ENV_ALPHA, TEXEL0, 0, 0, 0, PRIMITIVE, COMBINED, 0, SHADE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(255, 255, 255, 128),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_HexGrassDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 256, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(6, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 256, 1, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 3, G_TX_WRAP | G_TX_NOMIRROR, 5, 3),
+	gsDPSetTileSize(1, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_HexGrassDL[] = {
+	gsSPDisplayList(mat_gPlatform_HexGrassDL_GrassSide),
+	gsSPDisplayList(gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPlatform_HexGrassDL_Grass),
+	gsSPDisplayList(gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_grass_model.h b/assets_hm_pack/objects/object_platforms/platform_hex_grass_model.h
new file mode 100644
index 000000000..cb6236ae1
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_grass_model.h
@@ -0,0 +1,11 @@
+extern u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_ci8[];
+extern u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_pal_rgba16[];
+extern u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16[];
+extern u64 gPlatform_HexGrassDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16[];
+extern Vtx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_vtx_0[31];
+extern Gfx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_vtx_1[6];
+extern Gfx gPlatform_HexGrassDL_gPlatform_HexGrassDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gPlatform_HexGrassDL_GrassSide[];
+extern Gfx mat_gPlatform_HexGrassDL_Grass[];
+extern Gfx gPlatform_HexGrassDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_ice_col.c b/assets_hm_pack/objects/object_platforms/platform_hex_ice_col.c
new file mode 100644
index 000000000..5626e6ce9
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_ice_col.c
@@ -0,0 +1,64 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPlatform_HexIceDL_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+	{ 0x0000a000, 0x0000000c },
+};
+
+CollisionPoly gPlatform_HexIceDL_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-0.866025447845459), COLPOLY_SNORMAL(-2.1855699472439483e-08), COLPOLY_SNORMAL(-0.5), 0xf01b },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-0.866025447845459), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.4999999403953552), 0xf01b },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(1.0149945950388428e-07), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf01b },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(1.0149945950388428e-07), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf01b },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(0.8660253286361694), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-0.5000001192092896), 0xf01b },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(0.8660253286361694), COLPOLY_SNORMAL(-2.185570480151e-08), COLPOLY_SNORMAL(-0.5000001192092896), 0xf01b },
+	{ 0x0000, 0x0007, 0x0006, 0x0008, COLPOLY_SNORMAL(0.8660253286361694), COLPOLY_SNORMAL(2.1855701248796322e-08), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x0007, 0x0008, 0x0009, COLPOLY_SNORMAL(0.8660252690315247), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x0009, 0x0008, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf01b },
+	{ 0x0000, 0x0009, 0x000a, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf01b },
+	{ 0x0000, 0x000b, 0x000a, 0x0001, COLPOLY_SNORMAL(-0.8660253882408142), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x000b, 0x0001, 0x0000, COLPOLY_SNORMAL(-0.8660253286361694), COLPOLY_SNORMAL(2.1855701248796322e-08), COLPOLY_SNORMAL(0.5000000596046448), 0xf01b },
+	{ 0x0000, 0x000b, 0x0000, 0x0003, COLPOLY_SNORMAL(5.94794158858495e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300366577444947e-08), 0xfbab },
+	{ 0x0000, 0x0003, 0x0005, 0x0007, COLPOLY_SNORMAL(-2.9739722766001326e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300373682872305e-08), 0xfbab },
+	{ 0x0000, 0x0007, 0x0009, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300373682872305e-08), 0xfbab },
+	{ 0x0000, 0x0003, 0x0007, 0x000b, COLPOLY_SNORMAL(-1.9826479020557727e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(2.9300373682872305e-08), 0xfbab },
+	{ 0x0001, 0x0004, 0x0002, 0x0001, COLPOLY_SNORMAL(4.460957885504607e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.39505534188811e-08), 0xfd79 },
+	{ 0x0001, 0x0001, 0x000a, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.39505534188811e-08), 0xfd79 },
+	{ 0x0001, 0x0008, 0x0006, 0x0004, COLPOLY_SNORMAL(-5.94794158858495e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.39505534188811e-08), 0xfd79 },
+	{ 0x0001, 0x0001, 0x0008, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.39505534188811e-08), 0xfd79 },
+};
+
+Vec3s gPlatform_HexIceDL_vertices[12] = {
+	{ -4698, -1109, 0 },
+	{ -4698, 647, 0 },
+	{ -2349, 647, -4069 },
+	{ -2349, -1109, -4069 },
+	{ 2349, 647, -4069 },
+	{ 2349, -1109, -4069 },
+	{ 4698, 647, 0 },
+	{ 4698, -1109, 0 },
+	{ 2349, 647, 4069 },
+	{ 2349, -1109, 4069 },
+	{ -2349, 647, 4069 },
+	{ -2349, -1109, 4069 },
+};
+
+CollisionHeader gPlatform_HexIceDL_collisionHeader = {
+	-4698,
+	-1109,
+	-4069,
+	4698,
+	647,
+	4069,
+	12,
+	gPlatform_HexIceDL_vertices,
+	20,
+	gPlatform_HexIceDL_polygons,
+	gPlatform_HexIceDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_ice_col.h b/assets_hm_pack/objects/object_platforms/platform_hex_ice_col.h
new file mode 100644
index 000000000..2f6d946c0
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_ice_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPlatform_HexIceDL_polygonTypes[];
+extern CollisionPoly gPlatform_HexIceDL_polygons[];
+extern Vec3s gPlatform_HexIceDL_vertices[12];
+extern CollisionHeader gPlatform_HexIceDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_ice_model.c b/assets_hm_pack/objects/object_platforms/platform_hex_ice_model.c
new file mode 100644
index 000000000..cdff48a7d
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_ice_model.c
@@ -0,0 +1,276 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x1F650_32x64_RGBA16_rgba16_rgba16[] = {
+	0x524f6ad36ad12905, 0x2905290383959c9f, 0x945b5a8f4a0b8395, 0x7b5193d7839341c9, 0x73137b535a8f6291, 0x6ad37b978bd7949f, 0xc6b3d739c6f9a5f1, 0xbeb7cf3bc6f9ae75, 
+	0x520d520d7b953989, 0x314541cb945b9419, 0x949d8bd72907624d, 0x7b5172cd94196b15, 0x8bd793d7628d6a8f, 0x5a4f8397949d945b, 0xc6b3ae73aeb795b1, 0xa675ae759e3395f3, 
+	0x7b5351cb83535a8d, 0x5a4da4e1a49f9417, 0x9c59ad255a4b2905, 0x5a4f73117b557313, 0x949d9459628d5a4f, 0x520d8bd794599c5b, 0xc6b3beb5c6f7a633, 0x9e35957395b18d6f, 
+	0x8c17624d6ad3520d, 0x93d9e629b5259c9d, 0x9c9fb52583513987, 0x5a4f6ad362916291, 0xa49f9c9d6ad16ad1, 0x520d83d7945b94a3, 0xbef7bef9cf3995b1, 0x84a795b39df595f5, 
+	0x9c9d7b515a4f49cb, 0x8351ace3a4a1a4e3, 0xb565cda59c9f6ad1, 0x7b577b9373117313, 0x8bd79c9d83975a4f, 0x41897b9793d79527, 0x95f19e33beb595b1, 0x95b5957395b1a673, 
+	0x624d624d93938bd7, 0x945da49d949da4e3, 0xa525ace3b5239417, 0x6ad15a4d7bdd7c21, 0x8c1bad237b554189, 0x31457b53ad2595ad, 0x956fa6779e35a677, 0x9df58d31a635a673, 
+	0x3147520d8c1bac9f, 0xac9f945b7b518393, 0x949face3b5659ca1, 0x4a0b520b73157c1f, 0x8461ad2573973189, 0x41cb8c5d9dab9df1, 0x8ca9ae7774658d2f, 0x7cef84ef95b59df5, 
+	0x49cb3989624ba49d, 0xd5a5ac9f83d57b93, 0x949fa49fb525ace3, 0x5a4d628d83515a4b, 0x7bdbb5ed9d6995ab, 0x956dae31ae73ae75, 0xbef7a6359df59e37, 0x9df5b6b7b6b58d6f, 
+	0x41c941c749cb8355, 0xb523ac9d730f8b93, 0x83d98bd5ac9fb525, 0x6acf41895a4f41c9, 0x7b539d67a5efaeb7, 0xa631adedbeb595b1, 0x94e58ceb8d7195b1, 0xcf39bef7aeb59e37, 
+	0x31453947314772d1, 0x9c9b731373577311, 0x5a4f6ad3ac9fbda7, 0x8c1b398741c94189, 0x8c1ba4e1b5eb956d, 0x8ca57b9773dd84a7, 0x841d9d298d2f95b1, 0xb6b7b6f79e337ced, 
+	0x41c9398741c97b53, 0x7b0f6b136ad1730f, 0x520b524f9c9fdde7, 0xc5236acf628d49cb, 0x8393ad25945b841d, 0x8ca7739d7c237465, 0x631995279df1a675, 0xbeb5c739ae7795f5, 
+	0x835549c93987520d, 0x73117b4f8353628f, 0x4a0d520d8355b523, 0xad25ad23ace17311, 0x8b979c9d945d7357, 0x8ce9956f8d2f7421, 0x4a4d7c1f9defbeb5, 0xdf7bbef7a67584ef, 
+	0xace38b93524d49cb, 0x6acf6ad17b517311, 0x72cd624d8397a4e1, 0x9ca1ad25b5238bd9, 0x62d1a525adedadad, 0x952d9573b6757c63, 0x4a0b7359956dcf39, 0xd77ba6319e3395b3, 
+	0xbd65ac9f9c9d4a0b, 0x73157b5583956ad3, 0x730f6ad38395945b, 0x93d5a49da49f6b15, 0x6acf94a1a5adbeb5, 0x9df3beb7cef99d69, 0x73576b17952bae77, 0xae33bef7c6f99571, 
+	0xad25a4e3945b49c9, 0x62936ad173138395, 0x628f5a4f945d9c9d, 0x945d945d9459624d, 0x7b537b5563179d27, 0xadf1cef795b1b671, 0x94a56b998ceb95b3, 0x9df1beb7beb58531, 
+	0xbda9b5238bdb4189, 0x6ad3730f731172d1, 0x6ad16a918bd9c5eb, 0x9ca1ace18bd7520d, 0x8b95629162d3ad23, 0xace5d62bdeafb5ab, 0x94a784a374a795b3, 0x9e33a63595739571, 
+	0xad25ad23945d3987, 0x520d6ad37b5583d5, 0x72d162919419b5a9, 0xadab945f8bd7628f, 0x9c9d8b958393d5a5, 0xe629ee6bee29cde7, 0x8395629173dd956d, 0x9def9e3395b3bef9, 
+	0xad25ad258c173987, 0x41895a4f62917313, 0x73116ad3945dbd65, 0xb62d8ca58c1f6291, 0x9c9dac9fc565dda5, 0xdda5ee6be629e629, 0x9c9f73138c197bdd, 0x956d9e35a635b673, 
+	0xb525ad25945b3987, 0x41cb520b5a4f5a4f, 0x6291520d93d79c9d, 0xa567be7394a56ad1, 0x945bac9fc565e629, 0xe627ee6bf6abee69, 0xc56583936acf6b15, 0x8ce7b6b7c675d77b, 
+	0xbda99ce59c9f49cb, 0x41c9520d49cb4a0b, 0x41c94a0d7b539c9f, 0x9ce5ad677bd962d5, 0x8397a4a1c523e629, 0xdde7dde7c565f66b, 0xc565731339873147, 0x841fd739be73ae33, 
+	0x9ce5ad25ad255a4d, 0x4189520d520d41c9, 0x41c941878395a4e1, 0xa49f945d5a4f41cb, 0x6ad1ace1b525bd65, 0xbd65e629cda5ee6b, 0xcda5420b294741cb, 0x94a1d6f7cf39b6b7, 
+	0xb567ad25b5238bd9, 0x3989624d4a0b41c9, 0x41c939877311ac9d, 0x945d6a8d41c93987, 0x5a4b8c1bbd25c523, 0xcda5e627dda5e629, 0xc5656b55529362d3, 0x945dc6739df19df1, 
+	0xace1ac9fa49f945b, 0x5a4b41c939874189, 0x4a0b49cb62cf949d, 0x945d49cb39873147, 0x520d949d9c9dc523, 0xc565a525c565dde7, 0xcda58c1d420d7399, 0xadabb6b7ae77ae77, 
+	0xad25ac9fa49d93d5, 0x624d49cb49cb41c9, 0x49cb41c9628dada9, 0x83d949c931473147, 0x41c994199c9da4e1, 0xace3b525d5a5b523, 0xd5a5945b39c97357, 0xb5efbef7ae31b675, 
+	0xbd65b525ac9fa49d, 0x628d5a4d628d520d, 0x41c941c98bd9ad25, 0x83d78c195a4b3147, 0x3147628d93d39419, 0x9ca1c523b565c5a5, 0xce29b56552916b57, 0xb5edcef7d73bd73b, 
+	0xc565a49b949ba4a1, 0x49cb49cb49cb3987, 0x4a0b524f94e59c9f, 0x83d98c177b133947, 0x290549cb628f730f, 0x9c59c565b523ad25, 0xb62f9dad739b524f, 0x9ce5c6b5be73ae31, 
+	0xa49dace1ace1ace3, 0x41895a4b628d41cb, 0x628f7bddb6739d67, 0xad25bd6594194189, 0x20c3290539873987, 0x5a8d9c9bace5a56b, 0xc6b5ae337c1f4a0b, 0x8c61df39c6f7952d, 
+	0x949dad25b4e19c59, 0x39875a4f6291520d, 0x735594e5be719d29, 0xb567b5659d2562d5, 0x2905314731472947, 0x5ad59d6ba5f1ae75, 0xa633beb58ca541cb, 0xa527d739ae339db1, 
+	0x8bd9b49fa49f8b93, 0x3147520b520d41cb, 0x735594e39c9fa49d, 0xace194599c9f8c5f, 0x398b3a0f5b196bdf, 0xadedae75956f95f3, 0x95f1aeb5adef9d69, 0xc673d6f7be75b675, 
+	0x839594599419841b, 0x29053105520b3989, 0x5a8d8c1bb4e1c565, 0x9c5b93d58bd7841d, 0x3189420f63a1956d, 0xa6317ca57423a631, 0xa633c6f9df3bdf7b, 0xd6f7d6f7df39c6f9, 
+	0x5a4b93d794177b11, 0x20c3290549cb3989, 0x5a4b83d594179c9f, 0x8c1b8c1b8397a525, 0x63172907425194e7, 0x8ce74a933189741f, 0x8d2fc6f7df39d77b, 0xd6f7ef7bcef795b1, 
+	0x624d73118bd36acf, 0x2083314741c9520b, 0x7b518395839783d9, 0x8c1b945d9ca5b62f, 0x84a56b9b31896359, 0x9d6b52d541cd8ca3, 0xcf39e77bd739d77b, 0xc6b5cef7a5f3a635, 
+	0x83918bd78bd57b95, 0x29053989624d7b0f, 0x945b9ca194199419, 0x8c5d945bb5abadef, 0x956d95af9529be71, 0xae318ca37bdbc631, 0xcef7be31a56b94e7, 0xb673cf39c6f9ae75, 
+	0x83d98399949f8395, 0x520b520983938c5d, 0x949f9d699ce39419, 0x83d77b53945f7c63, 0x7c2184e9ae31b6b5, 0xb6b5b6b3c673d6f5, 0xbeb5846173557b55, 0x8ce7a6359e3395f3, 
+	0x83957311a49f8393, 0x6acd5a4b945bac9f, 0xa49f94e594a1949f, 0x83db94a19d276317, 0x4a0d6bddbe73beb5, 0xb6b7a675b6b5df7b, 0xc6b59d678c5b949d, 0x841f84a995b18d6f, 
+	0x628f520b94199419, 0x8bd78c1bb49fc5a5, 0x7b557c218c5d9c59, 0x835183d794e56319, 0x5a914a0d9ca59d29, 0x8ce78d2995afbef9, 0xbef7ae3394a1945b, 0x945973dd95b195f5, 
+	0x628f5a4f520b8395, 0xace1c565dda5ad23, 0x520b841f95299ce3, 0x945d7c218ca5520b, 0x8c198b97b4df945d, 0x4a0d52919529ae75, 0x95f19df1a5ed9527, 0x94e58ca995afa673, 
+	0x49cb398731475a4b, 0x8bd5a4e3cda7b523, 0x3147841f8d2b9529, 0x952fa5ef94a17b57, 0x94199c5b93d5ac9f, 0x94596acf63158d29, 0x852b9e359e33a633, 0x9df38d2f9e35a673, 
+	0x41c9418939873145, 0x6b139419b523a4a1, 0x3147735794a7841b, 0x9529ae31a4e39c5b, 0x8b939c59a49f9c9d, 0x941994598bd58ca1, 0x735973df6b9f8ceb, 0x8ceb84ed95b59df5, 
+	0x41c9628d5a8d2905, 0x628f6ad39c9fb4e1, 0x29475a8f94a1949d, 0xa4e595299419a49d, 0x7b939c9da49f949d, 0x9c597b0f83958c5d, 0x9417628f63198ca1, 0x9d27ae73b6b58d6f, 
+	0x624da45973112905, 0x49cb5a4f835593d5, 0x2903398973559c9d, 0x9c5b94a19ca183d5, 0x628d9419a49f8c17, 0xace3a45b8bd58c5d, 0x8c9f8bd75b198465, 0xbe2fbeb5aeb59e37, 
+	0x7b577b515a4f2905, 0x39877b5394199417, 0x628f314752914189, 0x7b539ce3ace19c9d, 0x62cf73139c9f9c9f, 0x9459949d9c9f83d9, 0x8ce79d6984a98d2f, 0xb6b5b6b79e337ced, 
+	0x6ad36ad16acf3987, 0x628dac9f83977b53, 0x94177b5331893147, 0x31476b13945da567, 0x94a3628f8b93949d, 0x9459a49d9c596ad1, 0x84a9ae75a633a675, 0xbeb5c739ae7795f5, 
+	0x5a4f83557b0f3987, 0x7b53949d7b5572cf, 0x8bd58bd729052905, 0x3147314749cd7b97, 0xa5258c5b9419a4e1, 0x9c5b94179c598c1b, 0x95af95b3ae75beb5, 0xdf7bbef7a67584ef, 
+	0x6acf8c1b7b51520b, 0x83958c1b4a0b41c9, 0x5a4f72d131452905, 0x31473147314541c9, 0x8c199c9dc565a49d, 0x7b538bd78bd594a1, 0xb6758d71a675cf39, 0xd77ba6319e3395b3, 
+	0x628d83937b538393, 0x83d77b9331475a4f, 0x7311520d314520c3, 0x2903290529053147, 0x83958bd79459a49f, 0x73557b57b567ae31, 0xb6b9a6759e35aeb7, 0xae33bef7c6f99571, 
+	0x49c96a8f7b97945b, 0x7b93735541878b95, 0xa49f524d29453147, 0x2905188129052905, 0x628f945b8395945d, 0x949f9d25952fbeb7, 0xbef9b6b795f595b3, 0x9df1beb7beb58531, 
+	0x624f6a8d6ad18395, 0x8393735531477b51, 0xa49f945b41cb3145, 0x4189188110413145, 0x49c994199c9f9ce5, 0xa5af9df3ae75ae31, 0xae77b6b784ef95b3, 0x9e33a63595739571, 
+	0x9459949dac9d93d7, 0x520d5a4d5a4f8c1b, 0x9419b4e183976b13, 0x6b13084118813145, 0x520b8351949d8ca5, 0xa5afadf195afb675, 0xb6b7a6339dada5ef, 0x9def9e3395b3bef9, 
+	0x83d7a49f9c9d8bd7, 0x5a4f628d624d7b51, 0x7311a49dbd259c9d, 0x8351394729055a4b, 0x41896ad1945d94a5, 0x8c5f94a194a5ceb3, 0xc6f9c6b5b5eb9d25, 0x956d9e35a635b673, 
+	0x83957b4face1945d, 0x628d4189398749c9, 0x624f9419a4e3a49f, 0x7b5173554a0b941b, 0x524b73139c9f9419, 0x949d7b536ad19ca1, 0xd737cef7c671b5ed, 0x95afb6b7c675d77b, 
+	0x8395624d628f8b93, 0x628f5a4b520d520d, 0x5a4f7b0f9c9b9ca1, 0x839383515a8f8b93, 0x5a8d628f9c9da45b, 0x9c9d8bd76ad18bd9, 0xcef5c6f9d739beb5, 0xae75d77bbe73ae33, 
+	0x5a4f5a4f628d72cd, 0x5a4f5a4d520d4a0b, 0x49cb73118bd3a4a1, 0x83537b0f73117b97, 0x7b577b57a49fac9f, 0x8b936ad37313945b, 0xb62fa633d6f7d739, 0xa631e77bcf39b6b7, 
+	0x524d6ad3524d520d, 0x4a0b49cb49cb49cb, 0x6ad372d183957311, 0x9419949f73555a4b, 0x6ad36ad3941793d5, 0x7b4f72d1949dad65, 0xbe73bef9cf39d77b, 0xdf39cef99df19df1, 
+	0x628d520d49cb49c9, 0x5a4b4a0b5a0b5a4f, 0x62916ad3735549cb, 0x7313945b83db5a8f, 0x72cd628f8bd57b57, 0x628d8393ace5be73, 0xae73c739cf39b6b7, 0xcef7b6f9ae77ae77, 
+	0x49cb398931473147, 0x5a4b520d520d520d, 0x6ad3628f628f3147, 0x5a4f731162cf73df, 0x94e58ca595298ca5, 0x7c238ce98d2b8d6f, 0xae759e33ae75bef7, 0xcf39c6f7ae31b675, 
+	0x31473987314749cb, 0x520d624d6a8d5a4d, 0x520d5a4f520b3987, 0x7b537353418941cb, 0x7bdd9d6b956f95af, 0x9df58d3195b595b3, 0xc739b6f7aeb7b6b5, 0xd739cef7d73bd73b, 
+	0x3987398739875a4b, 0x49cb5a4b6a8d6a8b, 0x628f6ad141cb41c9, 0xa49d5a4f39873987, 0x5a4d7b559d29ae31, 0xa5f184a795b395b3, 0xbef79e33beb7bef9, 0xc6f7c6f7be73ae31, 
+	0x6b13290541c95a4b, 0x41c95a4b520d5a4f, 0x5a4f73157bdb6ad1, 0xa49b731541c941c9, 0x5a8d4a0b529194a3, 0x8c5da52594e99db1, 0xc6f7b675cf39a635, 0xc6b5df7bc6f7952d, 
+	0x62d120c33145520d, 0x49cb4a0b624d520d, 0x520d6ad394a19419, 0x9459949d628d3947, 0x83996b5349cb5a4f, 0x8395ac9face5aded, 0xadf1beb5bef7b6b5, 0xe77bdf39ae339db1, 
+	0x628f5a4d3147520d, 0x624d5a4d6291520d, 0x398739878c5d94a3, 0x945d9c5973133987, 0x945b93d949cb6ad1, 0x8b93ac9da4e1a569, 0xada9b62fbe73d739, 0xd739d6f7be75b675, 
+	0x520d731129052905, 0x3147314739873147, 0x398739877b99a525, 0xa525a49f94173145, 0x83978bd55a097b53, 0x9419ace3a49fbda7, 0xada7be71df39df7b, 0xd6f7d6f7df39c6f9, 
+	0x39896ad139871881, 0x3147290541c941c9, 0x7b5352096b1594a3, 0x94a19c9f945b3987, 0x8b9383936acf6ad1, 0x7313c565bd23ad25, 0x956bbeb5def9d77b, 0xd6f7ef7bcef795b1, 
+	0x5a4b7b535a8f2905, 0x20c32905628f8b95, 0xa4df5a8d7b9b9ce5, 0x94a39ca1945b3145, 0x7b5383935a4d49cb, 0x73579c9da49d945b, 0xc66fe77bdf39d77b, 0xc6b5cef7a5f3a635, 
+	
+};
+
+u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x376F8_64x64_CI4_ci4_ci4[] = {
+	0x0121122202234563, 0x1461763686659aaa, 0x94999a5810624445, 0x16319b33b33711b0, 0x32b212232b238513, 0x0100333666854299, 0x995559949a775554, 0x00b50b333773c773, 
+	0xb3bbb32b373335a5, 0x0332333628866699, 0x5500505999354991, 0x304550b3b0b7c331, 0x33bb6bbb3bb11a99, 0x133333855b186845, 0x445113b59990b5a4, 0x55499945b3373385, 
+	0x3663bb3bb3110999, 0x4673630aa5108555, 0x519018b11245b19a, 0xa4599210b3333633, 0x12bbbbb3bb551094, 0x4b333b499a4444b7, 0x7ba41517737b2b61, 0x5a95515b73333337, 
+	0x021bb6bb61510125, 0x4423b49aa9999573, 0x329401b37c3451b1, 0x11551bb83777337c, 0xb316bb5154101335, 0x9a954945418251bb, 0x155336b331599905, 0x63610331633c3d37, 
+	0x12452155101b3334, 0x951511110141b23b, 0x5451373bb1554a94, 0x166bb36713812b83, 0x3492913545b83373, 0x1513bb61b15551b8, 0x1599451b3b3b1594, 0x451183b32151b23b, 
+	0x90510037310b7733, 0x7b3bb32b16111110, 0x1155445611b36155, 0x5445441bb33b0332, 0x0111bb376763b373, 0xb8336bbb51112133, 0x3b55410055586b07, 0x11b2994b1b7bb373, 
+	0x36bbb17b333b3337, 0x3833333bb05bbb18, 0x33555999450bb113, 0x73199a916bbb3b37, 0xb3b33bb3b1051b33, 0xb1b7373b24b63311, 0x383314995b33b100, 0x6b5aa95bbb33b333, 
+	0xb21b151119a55513, 0x4153337bb11b333b, 0xb33354555490110b, 0x11101012b33bbbbb, 0x6b18499944994994, 0x50bb6b33bb1bbb33, 0x3136995062995113, 0xb5b3750b3bbb3b3b, 
+	0x2b15599594599556, 0x115b6bb3b6237833, 0xb351599536105773, 0x33b6bbb33bb3b3b3, 0x30b1b595204940bb, 0x55551b8bbbb733bb, 0x3a54049a58661377, 0x3363b3b73618bb33, 
+	0xbb00315955599115, 0x51bbbbbbb1b7c33b, 0x844290b9a4517363, 0xbb3bb3b373bbbb63, 0xbb141159994559a5, 0x10533bbbb52b26bb, 0xb5928b65599133bb, 0x18bbb77b377b36b7, 
+	0xbb3b505459583325, 0x765377b314445111, 0xb745555006217737, 0x3bb3b3bb3373b517, 0xb2bc7b5265063d72, 0x173733bb555b245b, 0x71513151155913b3, 0x363355163333100b, 
+	0x13b33b15540bbb29, 0x1333bb6b55bb1554, 0xb733b3638377b8b3, 0x3b3b081407333501, 0x181400b055500004, 0x53bbbbb3387b1599, 0x9510b372311bbbbb, 0x83bb140995b10105, 
+	0x5161bb3b44495554, 0x43b8b31133bb3714, 0x949a5610b3551bbb, 0xbbb3101144406145, 0x3855994259b55014, 0x53bbbb04bbb63376, 0x5114a950504990bb, 0xb15b73155994159b, 
+	0x6205999945644505, 0x551b11b636bbbb33, 0x7715542320599941, 0x6b038b1159999456, 0x266b9a9559911b10, 0x09a555137b2bbb77, 0x35a5522541059a54, 0xb30010b619a94599, 
+	0x635509a49427b235, 0x5010bbb0951b6733, 0x1945504a95515011, 0x373b0b65529a5942, 0x515025992213313b, 0xbb333b044951b2bb, 0x595554525546333b, 0xb3052515025995b0, 
+	0x4011bb545b875333, 0x8b833b15551b3b11, 0x5a99aa40517377b2, 0xbb3154011b659a5b, 0x415115500835553b, 0xbb1b12bb51277363, 0x305999421b37c345, 0x1bbb941511549542, 
+	0x5513099405599425, 0x9bbb133b12b033bb, 0xb14555373b331599, 0x90bb255130994551, 0xbbb1155210599994, 0x5553b33315b7b09b, 0x1699451373bb1554, 0xa9b205b11bb36533, 
+	0xbb61159456b9a955, 0x9bbbb8bb14115494, 0x1551599451b3b361, 0x59112b28183bb63b, 0xbb30962a95509a49, 0x553b101165502159, 0xa951655445611b3b, 0x1551bb3812bbbb3b, 
+	0xb6b1586595015995, 0x8553b11b6b135832, 0x4445155500555583, 0xb45b211112b37bb3, 0xb2bbb1854b86659a, 0x555b3b33373bb3bb, 0x31051555999450bb, 0x14a111411133310b, 
+	0xbbb5b44224805594, 0x43377763833b3bbb, 0x3211b6315995b336, 0x199101052bb3001b, 0xb121094544533635, 0x5373bb8bbbb8b3bb, 0x8373b377145b7bb3, 0x125511b55b1150bb, 
+	0x15411215611bb3b5, 0x33bbb11110bbb8bb, 0xbb37bb337b176b11, 0x114421bb1b155451, 0x951b112b28183bb3, 0x3bbb611594133b12, 0xbbb1b8b737736554, 0x5554bb59a5545994, 
+	0x522111bb3112bbbb, 0x3bbb3099913bbbb1, 0x2bb21bbb77373155, 0x552a6145252663b5, 0x42421b201118b37b, 0xb36bb15415121114, 0x415452bbb3144555, 0x449944563b682205, 
+	0xa448111141113331, 0x0bb2bbb725501595, 0x4aa9a4b6b599a900, 0x52459a5533b88458, 0x92454211052bb700, 0x5bbb65b7b5508448, 0x1545991b14999942, 0x1052299928010158, 
+	0xa2535511b54b1151, 0xb6b15801554505a4, 0x032119164b455554, 0x44922a4528549454, 0x559454016b161554, 0x511551849111159a, 0x4bb772239555248b, 0x58849559510159b1, 
+	0x565554bb59a55459, 0x9595b6b490111599, 0x9553733b19558106, 0x5b66556516123237, 0x151555914a9959a9, 0x5450088422111559, 0x4945712205555054, 0x994545443bb3bb31, 
+	0x01b3714125995545, 0x450141101b501445, 0x4594301214554455, 0x42405a5b3b3bbb32, 0x33b33713b55a4555, 0x499448011311b545, 0x5425555105555555, 0x4455595bb8b3bb23, 
+	0x73bb3771b1445555, 0x99b045455731b122, 0xb545a2b361452b33, 0x31510555bbb8bbbb, 0xb162b73577355545, 0x59025754237b6bbb, 0xb999583773733773, 0x3b155015133b12bb, 
+	0x611bbb7513b99526, 0x099517b413373336, 0xb26549837377c3c7, 0x7bb111453bbbb12b, 0x5452b6b455059953, 0x6105477113733b32, 0x333b442337c3777c, 0x3773155112111441, 
+	0xa9a4bbb5a54149a5, 0x866051b53b3733b3, 0x3b7719077bb638b3, 0x7737bbb05105954a, 0x45991b0144290b9a, 0x4551b155bbbbb373, 0xbbb3b5233bb1b146, 0x3c7bb13155b45225, 
+	0x54556b44590b8655, 0x994505503bb6bb83, 0xbb81541732150325, 0x5377b37377044499, 0xe54bb79a45455500, 0x62454418b2bb1bbb, 0xbbb5541771441bbb, 0x52bb87377b162999, 
+	0x59454b1995999518, 0x5592292bbb1b6122, 0xb373b5373154161b, 0x311333733555255a, 0x4999a994509999a4, 0x1092625b10bb111b, 0x6b3338337b1516bb, 0x1548373310049449, 
+	0x5022504004599a99, 0x5324041bbbbbb511, 0x917303b73666bb3b, 0x051b3773323b2555, 0x52080850580854a9, 0x94554a07b16bb299, 0xa53013b733b3b1b8, 0x1b14337b3b3b5590, 
+	
+};
+
+u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x376F8_64x64_CI4_ci4_pal_rgba16[] = {
+	0x94a57ceb94a763e1, 0xae319dad73e3639f, 0x84a5b77bdef76c65, 0x52954211e7390000
+};
+
+u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x20650_32x32_RGBA16_ci8_ci8[] = {
+	0x0001020304050607, 0x0708090a0b0c0d0e, 0x0f10111212131414, 0x0715071617001816, 0x0d191a1b1c1d1e07, 0x1f202122121c1a23, 0x24070a121b250726, 0x1f241e2728001829, 
+	0x02212a1c142b2c2d, 0x1d1d2b2e2f213011, 0x0d152e31320f290c, 0x331434350d0a0a15, 0x0500021f361f370b, 0x0738393a3b3b1c16, 0x211f3c3d09023e3f, 0x3e0d403535413b31, 
+	0x320505024214430b, 0x3c44421d45463b47, 0x37291400111c1c25, 0x28142e062d2a0522, 0x114803111c0a2a21, 0x4900274a4b140d11, 0x0c24073001164648, 0x481a160b2d1f3b3c, 
+	0x34142e002f1a4c1c, 0x4d160c244e1e354f, 0x30061a0a29502e3b, 0x0001110807062420, 0x515240482f1c0202, 0x531245243e240616, 0x104417243454552d, 0x3b484848213e2b56, 
+	0x1556140500122f02, 0x1c0a14153e145711, 0x24141f585854595a, 0x0d0a0a4712072d3a, 0x51350705481b1b1b, 0x171b0d24075b0216, 0x0d2b5c5d585d5859, 0x361c3b471106242d, 
+	0x342b521a475e0047, 0x4646021f27023147, 0x5f2435364a586054, 0x4a003d004507152d, 0x352b2d1419006148, 0x0048113e45610303, 0x003e1f351d206060, 0x626364170a2a2435, 
+	0x1d151f2d173b6561, 0x0000023e370d2103, 0x6616673724364b39, 0x6824031812111c24, 0x2c2b2b1f0916696a, 0x4167292b2d1f1461, 0x3d6b03226114521e, 0x2c316b05001b1b57, 
+	0x251f6c2822471b05, 0x6d376e342d060d41, 0x3d6b6b0303031145, 0x176b036b051b1b11, 0x5f45281c6f6b4848, 0x7045064063631a16, 0x093d3d6b226b6b48, 0x223d030322001b1b, 
+	0x4557074c05462145, 0x71070d0d7237021b, 0x48326b0547486148, 0x0547195f4747010d, 0x02112473372e2d51, 0x142e5b29450c2300, 0x3148164803056509, 0x655f210745311607, 
+	0x3b6a471c71207420, 0x47677502762a140a, 0x7373776c3c3b4803, 0x4803310d24021602, 0x4619786b792e7a15, 0x7b1614733e072975, 0x376e1f2475280b4d, 0x6731097c2d291100, 
+	0x0a100a6b487d0d06, 0x3132161a732c153e, 0x114524071f293e02, 0x0d147e16242d0247, 0x2f2a7f322124451c, 0x28026b6b03171a37, 0x0c21142c3e073f1c, 0x082d25111c0a8066, 
+	0x810d02212525481b, 0x0a11226b6b6b6b05, 0x25141f1f2e023e82, 0x630d141317833105, 0x167f2e634c840537, 0x2d2e03220385866b, 0x161414732830733a, 0x4e1c7c0287026719, 
+	0x0d711f0d1616160f, 0x452b40251c883d61, 0x61670725062e2314, 0x0d3307712d1f8924, 0x457f0d06113b0000, 0x16372d2d7667170d, 0x160a24294e45111c, 0x242b158a4b1d1f24, 
+	0x0e01165f163b3b31, 0x0144450d37281a0a, 0x1a233e3f761c8b07, 0x2d2c352b2434348b, 0x3b000909193b3b1b, 0x12120a090a252147, 0x190a1457160b292b, 0x2424152b8c2b3406, 
+	0x0503053b318d5f41, 0x0111000573120505, 0x31300e2e02402936, 0x517a152d5207432e, 0x0a6b051631161616, 0x1b2f0a0275253b47, 0x1a11050110345639, 0x60511e1f8e06480a, 
+	0x165f6b0961483109, 0x05462e07071f1032, 0x8f0d3b1c28343a20, 0x1d2036354202471b, 0x6102313d6b6b3b11, 0x14192306144e0703, 0x0c375f010834421f, 0x342c1f3543901100, 
+	
+};
+
+u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x20650_32x32_RGBA16_ci8_pal_rgba16[] = {
+	0x49cb5a4f7b533147, 0x294539879417945b, 0x735539896ad17b51, 0x83538bd75a8f7b95, 0x8b95628f62917b97, 0x9419ac9f5a4d524d, 0x4a0d5a4b7313520d, 0x7311bd65ace3a49d, 
+	0xb5256acf31456b13, 0x9c9d83d78b93941b, 0x8bd59c5b7b13ace1, 0x9c9fa49f7b556ad3, 0x6a8f4a0b394793d5, 0xb4e1b523c5658393, 0xa4dfb565a4e1520b, 0x6b1120c394599c59, 
+	0x945d624dacdf7353, 0x72d1839541874189, 0x41c951cbc5a5bd25, 0x7b9372cd949d7b57, 0xb49fbd23ad236a91, 0xee6be66bb4e38397, 0xdde7f66bde2983d5, 0xcd65e6295a0d628d, 
+	0xcda549c9d5a58c19, 0x21035a0b31057b11, 0xc5a7624f41cb2905, 0x9c5d5a09a49b2083, 0x6acd949b83d993d7, 0xd5a79c9b8351a45b, 0x4a0962d1aca12105, 0x835572d3524b72cf, 
+	0x29035a8d8c17524f, 0x73151881188362cf, 0x28c58b97a4a18bd9, 0x9ca1624bac9d93d9, 0x628b000000000000
+};
+
+Vtx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_0[14] = {
+	{{ {2349, -1109, 4069}, 0, {24, 2032}, {50, 178, 87, 254} }},
+	{{ {-2349, 647, 4069}, 0, {1008, -80}, {206, 78, 87, 254} }},
+	{{ {-2349, -1109, 4069}, 0, {24, -80}, {206, 178, 87, 254} }},
+	{{ {2349, 647, 4069}, 0, {1008, 2032}, {50, 78, 87, 254} }},
+	{{ {4698, -1109, 0}, 0, {24, 4144}, {101, 178, 0, 254} }},
+	{{ {4698, 647, 0}, 0, {1008, 4144}, {101, 78, 0, 254} }},
+	{{ {2349, -1109, -4069}, 0, {24, 6256}, {50, 178, 169, 254} }},
+	{{ {2349, 647, -4069}, 0, {1008, 6256}, {50, 78, 169, 254} }},
+	{{ {-2349, -1109, -4069}, 0, {24, 8368}, {206, 178, 169, 254} }},
+	{{ {-2349, 647, -4069}, 0, {1008, 8368}, {206, 78, 169, 254} }},
+	{{ {-4698, -1109, 0}, 0, {24, 10480}, {155, 178, 0, 254} }},
+	{{ {-4698, 647, 0}, 0, {1008, 10480}, {155, 78, 0, 254} }},
+	{{ {-2349, -1109, 4069}, 0, {24, 12592}, {206, 178, 87, 254} }},
+	{{ {-2349, 647, 4069}, 0, {1008, 12592}, {206, 78, 87, 254} }},
+};
+
+Gfx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_0 + 0, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSP1Triangle(6, 5, 4, 0),
+	gsSP1Triangle(6, 7, 5, 0),
+	gsSP1Triangle(8, 7, 6, 0),
+	gsSP1Triangle(8, 9, 7, 0),
+	gsSP1Triangle(10, 9, 8, 0),
+	gsSP1Triangle(10, 11, 9, 0),
+	gsSP1Triangle(12, 11, 10, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_1[6] = {
+	{{ {2349, 647, -4069}, 0, {871, -1013}, {50, 78, 169, 254} }},
+	{{ {-2349, 647, -4069}, 0, {-880, -3}, {206, 78, 169, 254} }},
+	{{ {-4698, 647, 0}, 0, {-880, 2019}, {155, 78, 0, 254} }},
+	{{ {2349, 647, 4069}, 0, {2621, 2019}, {50, 78, 87, 254} }},
+	{{ {-2349, 647, 4069}, 0, {871, 3029}, {206, 78, 87, 254} }},
+	{{ {4698, 647, 0}, 0, {2621, -3}, {101, 78, 0, 254} }},
+};
+
+Gfx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_1 + 0, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(3, 5, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_2[6] = {
+	{{ {-2349, -1109, 4069}, 0, {427, 1728}, {206, 178, 87, 254} }},
+	{{ {-4698, -1109, 0}, 0, {1494, 1112}, {155, 178, 0, 254} }},
+	{{ {-2349, -1109, -4069}, 0, {1494, -120}, {206, 178, 169, 254} }},
+	{{ {4698, -1109, 0}, 0, {-640, -120}, {101, 178, 0, 254} }},
+	{{ {2349, -1109, -4069}, 0, {427, -736}, {50, 178, 169, 254} }},
+	{{ {2349, -1109, 4069}, 0, {-640, 1112}, {50, 178, 87, 254} }},
+};
+
+Gfx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_2 + 0, 6, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(3, 5, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_HexIceDL_f3dlite_material_015[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x1F650_32x64_RGBA16_rgba16_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 2047, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_HexIceDL_f3dlite_material_016[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x376F8_64x64_CI4_ci4_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 14),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x376F8_64x64_CI4_ci4_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_HexIceDL_f3dlite_material_017[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x20650_32x32_RGBA16_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 144),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x20650_32x32_RGBA16_ci8_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_HexIceDL[] = {
+	gsSPDisplayList(mat_gPlatform_HexIceDL_f3dlite_material_015),
+	gsSPDisplayList(gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPlatform_HexIceDL_f3dlite_material_016),
+	gsSPDisplayList(gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_gPlatform_HexIceDL_f3dlite_material_017),
+	gsSPDisplayList(gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_2),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_hex_ice_model.h b/assets_hm_pack/objects/object_platforms/platform_hex_ice_model.h
new file mode 100644
index 000000000..df2715e46
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_hex_ice_model.h
@@ -0,0 +1,15 @@
+extern u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x1F650_32x64_RGBA16_rgba16_rgba16[];
+extern u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x376F8_64x64_CI4_ci4_ci4[];
+extern u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x376F8_64x64_CI4_ci4_pal_rgba16[];
+extern u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x20650_32x32_RGBA16_ci8_ci8[];
+extern u64 gPlatform_HexIceDL_gPlatform_HexIceDL_IC_0x20650_32x32_RGBA16_ci8_pal_rgba16[];
+extern Vtx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_0[14];
+extern Gfx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_1[6];
+extern Gfx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_1[];
+extern Vtx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_vtx_2[6];
+extern Gfx gPlatform_HexIceDL_gPlatform_HexIceDL_mesh_layer_Opaque_tri_2[];
+extern Gfx mat_gPlatform_HexIceDL_f3dlite_material_015[];
+extern Gfx mat_gPlatform_HexIceDL_f3dlite_material_016[];
+extern Gfx mat_gPlatform_HexIceDL_f3dlite_material_017[];
+extern Gfx gPlatform_HexIceDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_grass_col.c b/assets_hm_pack/objects/object_platforms/platform_square_grass_col.c
new file mode 100644
index 000000000..4f509ca9c
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_grass_col.c
@@ -0,0 +1,58 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPlatform_GrassDL_polygonTypes[] = {
+	{ 0x00000000, 0x00000000 },
+	{ 0x80000000, 0x00000000 },
+};
+
+CollisionPoly gPlatform_GrassDL_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0005, 0x0008, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428158846836595e-08), 0xfdc2 },
+	{ 0x0000, 0x0003, 0x0008, 0x0000, COLPOLY_SNORMAL(3.616187363252423e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0000, 0x0008, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.342814818869556e-08), 0xfdc2 },
+	{ 0x0000, 0x0007, 0x0008, 0x0005, COLPOLY_SNORMAL(-3.616187363252423e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0001, 0x0006, 0x0004, 0x0009, COLPOLY_SNORMAL(3.616187363252423e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0001, 0x0001, 0x0006, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.342814818869556e-08), 0xfdc2 },
+	{ 0x0001, 0x0002, 0x0001, 0x0009, COLPOLY_SNORMAL(-3.616187363252423e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0001, 0x0004, 0x0002, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428158846836595e-08), 0xfdc2 },
+};
+
+Vec3s gPlatform_GrassDL_vertices[10] = {
+	{ -2863, -574, 2745 },
+	{ -2863, 574, 2745 },
+	{ -2863, 574, -2745 },
+	{ -2863, -574, -2745 },
+	{ 2863, 574, -2745 },
+	{ 2863, -574, -2745 },
+	{ 2863, 574, 2745 },
+	{ 2863, -574, 2745 },
+	{ 0, -574, 0 },
+	{ 0, 574, 0 },
+};
+
+CollisionHeader gPlatform_GrassDL_collisionHeader = {
+	-2863,
+	-574,
+	-2745,
+	2863,
+	574,
+	2745,
+	10,
+	gPlatform_GrassDL_vertices,
+	16,
+	gPlatform_GrassDL_polygons,
+	gPlatform_GrassDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_grass_col.h b/assets_hm_pack/objects/object_platforms/platform_square_grass_col.h
new file mode 100644
index 000000000..c98e3edc5
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_grass_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPlatform_GrassDL_polygonTypes[];
+extern CollisionPoly gPlatform_GrassDL_polygons[];
+extern Vec3s gPlatform_GrassDL_vertices[10];
+extern CollisionHeader gPlatform_GrassDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_grass_model.c b/assets_hm_pack/objects/object_platforms/platform_square_grass_model.c
new file mode 100644
index 000000000..343af4987
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_grass_model.c
@@ -0,0 +1,201 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_ci8[] = {
+	0x0001020304050607, 0x08090a0b0c03000d, 0x0e070f1011041213, 0x140014150416170a, 0x0a001804120d191a, 0x1b1c0b1d1e1f1a09, 0x20210e0e2215000d, 0x0a23152406072526, 
+	0x270004201c191900, 0x28292a2b2c2d0b0b, 0x2a2a0e0013040d00, 0x14132e0424152f0e, 0x302b071707062612, 0x310b1809000e0632, 0x0333343512000919, 0x090d043604091504, 
+	0x30370f0e0d260938, 0x39373a3b09150d0a, 0x3c08081900273d3e, 0x0a3f0a003a090940, 0x0441424344454646, 0x4746483e0030060e, 0x2a3c3b3f49263b26, 0x094a09294b4c4d10, 
+	0x484e4d454f505152, 0x534f544814152055, 0x48454d44464d5609, 0x574347474d454547, 0x5854595a5950545b, 0x454f5a545a465445, 0x465854454f4f455c, 0x474d464546484651, 
+	0x5051535d5e5a5051, 0x4f54514f52545d50, 0x455b45464645454f, 0x455246464646544f, 0x5f5b605d5e535d59, 0x5e5a50614f505950, 0x605d505450505450, 0x5954584f4f455059, 
+	0x5d5d626362646566, 0x676869595d596a6b, 0x6c595a6d5d505850, 0x6e4f525454615969, 0x636f666c706c7065, 0x686564716c6c7253, 0x53695e685d50735e, 0x5a51595a4f696370, 
+	0x717463757063685d, 0x6868636463636268, 0x5d6c7063685d6963, 0x6968505d69636272, 0x6263626868647664, 0x6864666363645d64, 0x6f71716376686975, 0x6464716c5e646264, 
+	0x6970707077776263, 0x7668646368687678, 0x71797a6364766477, 0x695d705d686d6362, 0x706370657b7c7164, 0x68687d6977686364, 0x707e7e647a636f7f, 0x7a7a77706380706c, 
+	
+};
+
+u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_pal_rgba16[] = {
+	0x8493ce5bbe19b5d7, 0x8cd59d198c959d17, 0xad9774117c119493, 0x845184539515a555, 0x8c938d137c519d55, 0x8cd394d5a59b9d57, 0xbdd973d19cd38c51, 0x7bd19d13a557b599, 
+	0x95179d159d977c91, 0x8c9795137c5373cf, 0x94918c53b597ad57, 0x7c938cd7a559b619, 0x94d78c119c93b5d9, 0xa515638f9d599cd5, 0x7c0f841184d36bcf, 0x94d374136bd16b8f, 
+	0x8495845552cb4a4b, 0x628f62cf5a8d524b, 0x5acd5b4d634f528b, 0x4a0b524d528d6b0f, 0x7351731162cd730f, 0x6b117bcf634d52cd, 0x6acf7b937b53628d, 0x5a8f83937b515a8b, 
+	0x83d5735394159c57, 0x9c5994578c1583d3, 0x94178bd57b919c99, 0x8bd383918395a457, 0xa499acdb7b4f6acd, 0xac999c17a49ba459, 0x8b93bd1db51dbd1f, 0xac9bb51fbd5fc5a1, 
+	0xacdd000000000000
+};
+
+u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16[] = {
+	0xd71bb5d78c0fa555, 0xbe59df9bce99c657, 0xd6dbb5d5a595b617, 0x8c51a513ce99d719, 0xa595ad959491b595, 0x9cd394d38c91b617, 0xbe17ad95cf19c6db, 0xbe599d1394919cd3, 
+	0xc697b5d5ad53be17, 0xbe97cf19ced9ad55, 0xc659b5d5add5be99, 0xadd7be17be97ced9, 0x94d39d13b5d7c657, 0xb5d5ad95be17c659, 0xb5d7add5cf19cf1b, 0xcf1bad959d13a555, 
+	0xc659d71bd6d9b615, 0xc6d9a553ad55ad95, 0x9d1394d18c9194d1, 0xbe19be59a595add5, 0xb615b5d5b5d5c697, 0xc699cf19c697be57, 0xc699df5badd5a555, 0xb5d7c699be17ad95, 
+	0xbe17c659c659ced9, 0xcf1ba55394d3be17, 0xa5959d53a555a513, 0x9d13b657b6178c91, 0xbe17be17ad95b5d5, 0xbe57ad959cd3c697, 0xbe97c699b5d5ad93, 0xa555c659cedbad97, 
+	0xadd5a595b5d7a595, 0x94d394917bcf8c91, 0x8cd194d3ad97ad95, 0xa553ad95840f9cd3, 0xbe17ced9c699be57, 0xdf5bbe17b5d5c699, 0xae15add5ad959491, 0x9491ad95be57b617, 
+	0x9491a555a555b617, 0x8c117bcf94d3a593, 0x8c919cd3be17add7, 0xadd79d537bcf9491, 0xbe17d71bbe57be17, 0xd71bd71bc699be99, 0xc699efdddf1bad95, 0x9491add5df9dc697, 
+	0xa55394d1ad95c659, 0xb5d59cd3add59d13, 0x8c51ad55cedba595, 0xb617c699ad55ad53, 0xbe57be17add5840f, 0xb5d5be57a555a595, 0xa595ad95b5d5add5, 0xa59594d3b5d79d13, 
+	0x94d194d1a555c659, 0xadd7be57be97a595, 0x9491add5be598491, 0x9d13be17be17a553, 0xb5d5b617be179491, 0xb5d57c0f94d38c91, 0x7c0f844fa595a553, 0xbe578cd194d18c91, 
+	0xad558c5194d1add5, 0xcf1bc6d9b615ad95, 0xad95a5958d119553, 0xb617ad97c699df9d, 0xd71bb617c659b597, 0x949194d18c918c91, 0x844f6b4d7c4f9513, 0xadd594d1b5d5c697, 
+	0xa553a595b5d5b617, 0xbe99b5d79d13b5d5, 0xce99b617a5d5a555, 0xc699c65bbe59be99, 0xb615b5d5ad53a595, 0xc6d9add5add5d75b, 0xc6997c0f848f94d3, 0x94d1add5ce97e79d, 
+	0xced7c657e7ddbe97, 0xb5d5844f840fa513, 0xadd5a555a595ad55, 0xb5d7be59b619a555, 0xb617be599491b615, 0xa5d38c8fbe17d75b, 0xbe97e7ddadd59d13, 0x7c0fad55df1bced9, 
+	0xd71bd71befddc699, 0xadd5ad959d13840f, 0x8c91a595b597ad95, 0x9d13a595a5959d13, 0xb595ced9b617b617, 0xa593c699c6d994d1, 0xb615e7ddd71bbe17, 0x9491b5d5be17a555, 
+	0xc657e79bced99d13, 0xa553ce99c657a553, 0x8cd1cf1bd71bb5d7, 0x9d15b619b5d7b5d7, 0x9cd3be99b6179513, 0xbe99cf1badd5ad55, 0xad95a555ad95be59, 0xb5d7a51394d194d1, 
+	0xced9cf19a5539491, 0x9d13be57efddad93, 0xa553ced9cedbb5d7, 0x7bcf8cd384517bcf, 0x73cd8cd17c4f844f, 0xa555ae17b617ad53, 0xdf1bbe17be59ced9, 0xbe579513add5b5d5, 
+	0xdf9bbe97b5d59cd1, 0x8c4fadd5f7dfce99, 0xb5d5be57be179491, 0x8c9194d39d158c91, 0x7c0f73cf844f9513, 0x9d53ad95c659c617, 0xced9e75bdf9bb657, 0x9d53a595d71bd71b, 
+	0xdf9bd71bd7199d13, 0x9d13c6d9e79dce99, 0xefddced9b5d59d13, 0x9d13ad959d158cd3, 0xa5978c918c91840f, 0x9491be19ce9bb5d5, 0xdf1bf7dfefdfced9, 0xbe57be57ad95c699, 
+	0xc657be17be179d13, 0xadd5e7ddd75bce99, 0xd7199511d719be57, 0xad53d6db8c516b8d, 0x9513a5959d13840f, 0x9cd39cd3be99be17, 0xad95d71bd71bbe17, 0xced9df5bd6d9df1b, 
+	0xbe57ad95a553be57, 0xd759cf19ad95a553, 0xadd5c699d71ba513, 0x8c0fad55a5539d55, 0x9d55add7ad579493, 0xa5539d55a595add5, 0xbe57ce99a553be17, 0xdf5db5d7b5d5b5d5, 
+	0xbe57ced9ced99511, 0xbe17ad5583cfa553, 0xc699d71bce999cd1, 0x94d19d11be15c659, 0xadd7ad979d158451, 0xbe99cf1ba595b617, 0xe7dfdf5dbdd5be17, 0xc6598c4fa553add5, 
+	0x840f844f9d53ad95, 0xb5d58c51840fbe57, 0xc6d9b615ad93ad55, 0x7b8da553be17a555, 0xadd7a59794d3a595, 0xbe99a5d59cd3ad97, 0xa5558c517b8da555, 0xadd5add59d13a595, 
+	0x8c91840fa553d719, 0xdf5bad95b5d5df9d, 0xd71bced9a5139491, 0x9491b595e75bad95, 0x7bcf8cd194d3be59, 0xcf1dadd77bcf9d13, 0x9d137bcfa553be17, 0xbe57add5cf1badd5, 
+	0x8c8f844f8c51be57, 0xd719df5dbe57c6d9, 0xf7dff7dfad95a513, 0xa553d719e79b9d51, 0x8c919d13a595b617, 0xcedbc699ad95add5, 0xbe17a59594d19d53, 0x8cd19d138c919cd3, 
+	0x8c91738d9d13b5d7, 0xb617ae15c6d9efdf, 0xd719be57d6dbdf1b, 0xe79bf7dfced9d719, 0xc699c699ced9b617, 0xad959cd39cd3be17, 0xb617c6d9be59a5d5, 0x94d394d3949394d3, 
+	0x9d139d13a513c699, 0xbe59be17ce99d71b, 0xbe17c659be57cf19, 0xdf5badd5a595c699, 0xb617df5bced9b5d7, 0x9d138c919cd3ad95, 0xa595be99a595a595, 0xb5d79491a555a515, 
+	0xa513a513a513add5, 0xbe57e79dc6599491, 0xb5d7b5d7b5d5e7db, 0xdf9bc697be179cd1, 0x7bcddf5ddf5bb5d7, 0xb5d7b619b617a595, 0xa593951394d39d53, 0xb5d7be17a513ad55, 
+	0xa4d3b5d5ad93ad95, 0xd71bc699be5794d1, 0x8c9194d39d13be57, 0xd719e79bad958c4f, 0xad95d6dbc699b5d7, 0x9d13add5add7a593, 0xbe57c699a553a555, 0xa513be57b6178c91, 
+	0xb617ad95b5d5be17, 0xbe579d13bdd7d719, 0x9d139d13ad95b5d7, 0xc697e79bdf1bad95, 0xad55b5d7be17a595, 0x95139d539d53ced9, 0xd71bce99d6dbd6db, 0x94d3add5e7dd9d53, 
+	0xad958c4fa593a553, 0x8c91a51394d1a593, 0xbe17ad95c699ced9, 0xa513d6d9ced9be17, 0xa595add5b617a593, 0xae15c699b617b617, 0x9cd3ad95b615add5, 0x9d53b6179d139513, 
+	0xad95ad95b5d59d55, 0x8c518c919d13c6d9, 0xa5937bcdbe57c659, 0xbd97c619ad95d71b, 0xa595df9ddf9dd75b, 0xbe99be57e79db5d5, 0x9d13add5b5d5add5, 0xbe57ad9594919d13, 
+	0xa555add5add5add5, 0xadd78c919d55b617, 0x94917bcdad95a553, 0xb617ad95c699d75b, 0xd75bdf5bbe57c657, 0xc657e75df7dfc659, 0xbe57c71bced9be57, 0xb5d78c919d139cd3, 
+	0x9d139d55b617b617, 0xa553951394d39d13, 0x7b8d9cd1c6579d53, 0xb615c719d79bd71b, 0xc697b617c699be17, 0xdf5bd6d9e75dd71b, 0xc6d9c6d9be99b5d5, 0xb5d7a513ad55b5d7, 
+	0x94d194d3b617a595, 0xbe17ced9c69ba553, 0x8c4f9d13b6179d11, 0x844fb657efdde7dd, 0xc697a513b597b5d7, 0xb5d7b617b615a593, 0x95139d53be59cedb, 0xa5559d13a5139d53, 
+	
+};
+
+u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16[] = {
+	0x4b4d4b0b638f7c51, 0x74116b8f42c94207, 0x8495a55794d59d57, 0x4207eee5534d6b8f, 0x4207a599eeefeeed, 0xeea9ee65c51952cb, 0x7c51c51b9c138cd5, 0x94d5951594d55b0d, 
+	0xf731534d7453534d, 0x8cd57c1173d194d5, 0x8cd5be1b9cd5738f, 0x6b8f534d8cd58453, 0x634d73cfc65deeed, 0xcd5bc51b73d16b8f, 0x84517493a453e5df, 0x7c5194d58cd55b0b, 
+	0xf6adf6f1eeab638d, 0x42c9a5178453a559, 0x8cd7ad578c93638d, 0xb4d742c942c9c69d, 0xb599530bb61bac95, 0x4b4d6bd18c936b8f, 0x638f845373d1eea9, 0x6bcf9d5984935b0b, 
+	0x4b4df6edee65e61f, 0x4a89e76badd9a599, 0xd627534d534dac95, 0x93d1eea9534dad57, 0xa515ae1be66173d1, 0x7c538cd58c9373cf, 0x5b0b94d79d5794d7, 0x8c959d597c137c11, 
+	0x84938453f6eb9d17, 0x7c53ad999557ee67, 0xb497730d9c13bd17, 0xf6ebf773f72f534d, 0xa5998b917c938493, 0x7c538cd574116b8f, 0x6b8d8493a5999d59, 0x8cd584958c958c95, 
+	0x8cd58cd5a599b61b, 0x84538cd552c99d17, 0xcd5b9c13ee67eea9, 0x4b4dbe9fee67d59d, 0xf6adc4db8cd55bcf, 0x8493849374117411, 0x6c117453a59bb5dd, 0xb61d8c958cd39d17, 
+	0xb61fa55da59d94d5, 0xbe1bad554a876b8f, 0xac55ac15f6ad534d, 0x8cd58cd58d17ac55, 0xf6adf6efdd9d4b0b, 0x6bcf74117c53638f, 0x84539d17addbc6a1, 0x94d58c958cd394d3, 
+	0xa559eea9ce21a517, 0xbe1ba5557c91c51b, 0xdddfbcd96c0f7451, 0x9d57b5d94207534d, 0x93d1ee65ee61638f, 0x74117c5184958453, 0x94d57c118c958cd5, 0x534d7c537c519d55, 
+	0x8cd39dd78493c65f, 0x94d595579d99b497, 0xb4d7ee6163cf638f, 0x8cd5be1b530b4249, 0xb497b4d7534d73d1, 0x84d584936bcfa557, 0x84517bcf8cd5e6ad, 0xd5e3ee657c119515, 
+	0x8c9394d3a557ad99, 0xa59b84d584934acb, 0xf6eff72fbd195b4d, 0x9d577bcf8cd593d1, 0xb497b4d75acb6b8f, 0x7c937c11634d8cd5, 0x534da599d59be667, 0xdddd42c98cd59d17, 
+	0x84938c938cd59517, 0xc65d9517634b7493, 0x7c517b0f8b9193d1, 0x5a497cd5f72dee61, 0xee67c519de1f634d, 0x6bcf6bcf638ddddf, 0xeea5f6edee61d5e5, 0xc51b638d6bcf8cd5, 
+	0x9515849384959d17, 0xbe1bb5db94d57c11, 0x6bcf9c5352896acd, 0x94536c114b4db497, 0x93d1eeeb6bcf638d, 0x7c515b4dcd5beea7, 0x4b4d7c51eea5ee21, 0xc51bcd5b7c1194d5, 
+	0x8cd57c519d57a559, 0x95159d57a55794d5, 0x7c117c118c937cd5, 0x6b8d74934185534d, 0xb49773d184937c51, 0x84934a897c519d17, 0x7c53634d6c51dddd, 0xa4133a0563cf7411, 
+	0x8c9584938cd58cd5, 0xa557c65d94d56bcf, 0x6b8f6b8d84539515, 0x7c9394d573d14b4d, 0x42c96b8f84534ac9, 0x73cf9d17a599d725, 0x84534ac952c99d17, 0x534d6b8f84515b4d, 
+	0x84937c517c518493, 0xad99be5f8c957c11, 0xde1d42c97c518493, 0x7c516bcf8cd5ee21, 0x8cd57c51a517634d, 0x738fb61bcf23a557, 0xc69d8453530b8cd5, 0x8cd54249634d7411, 
+	0x9c957c535b0b738f, 0xb5dda59995178cd5, 0xde1d83d142c96c11, 0x7c114185eea9a495, 0xe5dfa557ad57a515, 0xcf23c69db5997c51, 0x8451a515cf238cd5, 0x534da5176b8f9515, 
+	0x84d5638f73cf7c51, 0xa5598453530be627, 0xe5e5b4d7acd7534d, 0x63cf8bd14b4d9d99, 0x9411ee6742c94b4d, 0xe76bad57a515638d, 0x42c9a599f735c4d9, 0x4207845194919d97, 
+	0xf6a5534da599534d, 0x84515b4d42c9ee69, 0xf66bd5a1cd1b628b, 0x9c1373d1a5996b8f, 0x538dc51973d17c53, 0x8cd56c117453ac55, 0xcddff6abf6eb4b4d, 0x7c517c51bedfeea5, 
+	0x94117c116bcfdddd, 0x62cb4a89dd9dc519, 0xcd5b8b9193d18351, 0x41857c5184937411, 0x6b8d5b4d7c118c93, 0x8cd54a8973d1bd19, 0xde65f733c65da599, 0x6b8f9557ee67f6ef, 
+	0x84536bcf638f5ac9, 0x9391cd5b630d5b4d, 0xa495a4554185634f, 0x6bcf8d17b5dd9d55, 0xa51574115bcfa517, 0x6bcf52cb4249eea9, 0xf72f534d8cd5ad99, 0x8cd59d579d178c53, 
+	0x84938c938c938411, 0x73cf73cf741163cf, 0x6c519d176b8f7c53, 0xb5dd9d57ad998cd5, 0x7c118c136c117c53, 0x8493638deea7f72f, 0xf6efae1b8d15b61b, 0xb599741173d1638f, 
+	0x63cf9d579d1794d5, 0x7cd5849395996b8d, 0x638f8cd573d19d99, 0xcea3ad99b61ba599, 0x6c0fcd5bc51b5b4d, 0x638f7c51b497c519, 0xee67ee657c51be1b, 0xbe5b8cd5c55952cb, 
+	0x630b84939d179517, 0x7c518cd58c936bcf, 0x638d74119517b5dd, 0x95197c5384535289, 0x4249ee61c5199d17, 0x73cf634d630d7c51, 0xc51bc4d9ee657c51, 0xbedf9453c5199c53, 
+	0x8493951784958453, 0x845184938493740f, 0x7c537c1384956bd1, 0x534d6b8f420749c7, 0x8b91dd9f534d7c51, 0x8cd56b8f7c11534d, 0x4b4da3d3dd9feea9, 0xee23ddddc51941c5, 
+	0x7c116b8f745173d1, 0x73cf84d39d578493, 0x7c1173d1634d534d, 0xac154207534deea9, 0xeeabe667ae1b52cb, 0x84936b8f8cd57411, 0x5a494207b457c51b, 0xa45393d1534d73cf, 
+	0x9d17738f638f4207, 0x534d638d73cf7c11, 0x845384936b8f6b8f, 0x534d9391dd9df6ef, 0xe625eea9eee941c7, 0x630d8cd59d177c11, 0x8c11638d8b919c13, 0x734d4a076b4d8411, 
+	0x845142474b4dac55, 0xc51942c96b8f7411, 0x741194d59d17a557, 0x8c934249eea7e61f, 0xdd9dc4d9a4538391, 0x4a07951595158c93, 0x7c118c53534d9c13, 0xa45542c96b4d8451, 
+	0x8c935b8d7b0f7b0f, 0xb457ac554207534d, 0x8b9174119d17b5db, 0x6b8f52c973d1b497, 0x630d7c51bd1942c9, 0x84938cd57c938d15, 0x7c117c11630b4249, 0xb4d7ee61a5578c93, 
+	0xae1b638f4a476a4b, 0x8b91d59dcd5b8b91, 0x6acb4207534d9d57, 0xad99530b4b4d73d1, 0x7c53638d63cf7411, 0x7c5373d16bcf6bcf, 0x84937c1173cf4207, 0x534dcd9fde2773cf, 
+	0xa5578c935b4d4185, 0xac55c519ee67ee23, 0xa413dddd7c519515, 0x8453638d42c96b8f, 0x6b8f6b8f74117c51, 0x534d6b8f5b4d4207, 0x7c117c117c1173d1, 0x7c535b0bbe9fc51b, 
+	0x9d577411638d49c7, 0x534dd59dffffac95, 0x834f3a05be1f534d, 0x534dc51b8cd5534d, 0x7c538453738fb61b, 0xee677c51a599a413, 0x6b8f634d7c118cd5, 0x8cd58c9394d59dd9, 
+	0x84536bcf73cf530b, 0x8cd54b4dbe9feea5, 0x534d94d7a59b6c51, 0xacd5b497bc97534d, 0x6b8fa515ae1bf6ef, 0xeeebeea9f6ed9c13, 0xc519420774539517, 0x8cd594d58c938453, 
+	
+};
+
+Vtx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_vtx_0[20] = {
+	{{ {-2863, -574, 2745}, 0, {-1070, 464}, {183, 183, 73, 254} }},
+	{{ {-2863, 574, -2745}, 0, {1008, -16}, {183, 73, 183, 254} }},
+	{{ {-2863, -574, -2745}, 0, {1008, 464}, {183, 183, 183, 254} }},
+	{{ {-2863, 574, 2745}, 0, {-1070, -16}, {183, 73, 73, 254} }},
+	{{ {2863, -574, 2745}, 0, {1008, 464}, {73, 183, 73, 254} }},
+	{{ {2863, 574, 2745}, 0, {1008, -16}, {73, 73, 73, 254} }},
+	{{ {-2863, -574, -2745}, 0, {-1070, 464}, {183, 183, 183, 254} }},
+	{{ {-2863, 574, -2745}, 0, {-1070, -16}, {183, 73, 183, 254} }},
+	{{ {2863, 574, -2745}, 0, {1008, -16}, {73, 73, 183, 254} }},
+	{{ {2863, -574, -2745}, 0, {1008, 464}, {73, 183, 183, 254} }},
+	{{ {2863, 574, 2745}, 0, {-1070, -16}, {73, 73, 73, 254} }},
+	{{ {2863, -574, 2745}, 0, {-1070, 464}, {73, 183, 73, 254} }},
+	{{ {2863, -574, -2745}, 0, {2020, 494}, {73, 183, 183, 254} }},
+	{{ {0, -574, 0}, 0, {1508, 246}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {996, 494}, {183, 183, 183, 254} }},
+	{{ {2863, -574, 2745}, 0, {996, 494}, {73, 183, 73, 254} }},
+	{{ {-2863, -574, 2745}, 0, {2020, 494}, {183, 183, 73, 254} }},
+	{{ {0, -574, 0}, 0, {1508, 246}, {0, 129, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {996, 494}, {73, 183, 73, 254} }},
+	{{ {-2863, -574, -2745}, 0, {996, 494}, {183, 183, 183, 254} }},
+};
+
+Gfx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 3, 0, 0),
+	gsSP1Triangle(4, 5, 3, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(6, 8, 9, 0),
+	gsSP1Triangle(9, 8, 10, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(15, 13, 12, 0),
+	gsSPVertex(gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_vtx_0 + 16, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_vtx_1[4] = {
+	{{ {2863, 574, 2745}, 0, {-1136, -1136}, {73, 73, 73, 254} }},
+	{{ {2863, 574, -2745}, 0, {-1136, 2128}, {73, 73, 183, 254} }},
+	{{ {-2863, 574, -2745}, 0, {2128, 2128}, {183, 73, 183, 254} }},
+	{{ {-2863, 574, 2745}, 0, {2128, -1136}, {183, 73, 73, 254} }},
+};
+
+Gfx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_vtx_1 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_GrassDL_GrassSide[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 128),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_GrassDL_Grass[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL1, TEXEL0, ENV_ALPHA, TEXEL0, 0, 0, 0, PRIMITIVE, COMBINED, 0, SHADE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetEnvColor(255, 255, 255, 128),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_GrassDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 256, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(6, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 256, 1, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 3, G_TX_WRAP | G_TX_NOMIRROR, 5, 3),
+	gsDPSetTileSize(1, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_GrassDL[] = {
+	gsSPDisplayList(mat_gPlatform_GrassDL_GrassSide),
+	gsSPDisplayList(gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPlatform_GrassDL_Grass),
+	gsSPDisplayList(gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_grass_model.h b/assets_hm_pack/objects/object_platforms/platform_square_grass_model.h
new file mode 100644
index 000000000..6369cde8e
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_grass_model.h
@@ -0,0 +1,11 @@
+extern u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_ci8[];
+extern u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_GrassDL_ZELDA_MAJORA_S_MAS_pal_rgba16[];
+extern u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh_gPlatform_HexGrassDL_ZELDA_MAJORA_S_MASK_rgba16[];
+extern u64 gPlatform_GrassDL_gPlatform_GrassDL_mesh__0001AB98_32x32_rgba16_rgba16_rgba16[];
+extern Vtx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_vtx_0[20];
+extern Gfx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_vtx_1[4];
+extern Gfx gPlatform_GrassDL_gPlatform_GrassDL_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gPlatform_GrassDL_GrassSide[];
+extern Gfx mat_gPlatform_GrassDL_Grass[];
+extern Gfx gPlatform_GrassDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_ice_col.c b/assets_hm_pack/objects/object_platforms/platform_square_ice_col.c
new file mode 100644
index 000000000..9925f050a
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_ice_col.c
@@ -0,0 +1,58 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPlatform_IceDL_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+	{ 0x0000a000, 0x0000000c },
+};
+
+CollisionPoly gPlatform_IceDL_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0003, 0x0008, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0005, 0x0008, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0007, 0x0008, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0000, 0x0008, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0001, 0x0002, 0x0001, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0001, 0x0004, 0x0002, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0001, 0x0006, 0x0004, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0001, 0x0001, 0x0006, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+};
+
+Vec3s gPlatform_IceDL_vertices[10] = {
+	{ -2863, -574, 2745 },
+	{ -2863, 574, 2745 },
+	{ -2863, 574, -2745 },
+	{ -2863, -574, -2745 },
+	{ 2863, 574, -2745 },
+	{ 2863, -574, -2745 },
+	{ 2863, 574, 2745 },
+	{ 2863, -574, 2745 },
+	{ 0, -574, 0 },
+	{ 0, 574, 0 },
+};
+
+CollisionHeader gPlatform_IceDL_collisionHeader = {
+	-2863,
+	-574,
+	-2745,
+	2863,
+	574,
+	2745,
+	10,
+	gPlatform_IceDL_vertices,
+	16,
+	gPlatform_IceDL_polygons,
+	gPlatform_IceDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_ice_col.h b/assets_hm_pack/objects/object_platforms/platform_square_ice_col.h
new file mode 100644
index 000000000..6e7575a99
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_ice_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPlatform_IceDL_polygonTypes[];
+extern CollisionPoly gPlatform_IceDL_polygons[];
+extern Vec3s gPlatform_IceDL_vertices[10];
+extern CollisionHeader gPlatform_IceDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_ice_model.c b/assets_hm_pack/objects/object_platforms/platform_square_ice_model.c
new file mode 100644
index 000000000..0c533b24c
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_ice_model.c
@@ -0,0 +1,260 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x1F650_32x64_RGBA16_rgba16_rgba16[] = {
+	0x524f6ad36ad12905, 0x2905290383959c9f, 0x945b5a8f4a0b8395, 0x7b5193d7839341c9, 0x73137b535a8f6291, 0x6ad37b978bd7949f, 0xc6b3d739c6f9a5f1, 0xbeb7cf3bc6f9ae75, 
+	0x520d520d7b953989, 0x314541cb945b9419, 0x949d8bd72907624d, 0x7b5172cd94196b15, 0x8bd793d7628d6a8f, 0x5a4f8397949d945b, 0xc6b3ae73aeb795b1, 0xa675ae759e3395f3, 
+	0x7b5351cb83535a8d, 0x5a4da4e1a49f9417, 0x9c59ad255a4b2905, 0x5a4f73117b557313, 0x949d9459628d5a4f, 0x520d8bd794599c5b, 0xc6b3beb5c6f7a633, 0x9e35957395b18d6f, 
+	0x8c17624d6ad3520d, 0x93d9e629b5259c9d, 0x9c9fb52583513987, 0x5a4f6ad362916291, 0xa49f9c9d6ad16ad1, 0x520d83d7945b94a3, 0xbef7bef9cf3995b1, 0x84a795b39df595f5, 
+	0x9c9d7b515a4f49cb, 0x8351ace3a4a1a4e3, 0xb565cda59c9f6ad1, 0x7b577b9373117313, 0x8bd79c9d83975a4f, 0x41897b9793d79527, 0x95f19e33beb595b1, 0x95b5957395b1a673, 
+	0x624d624d93938bd7, 0x945da49d949da4e3, 0xa525ace3b5239417, 0x6ad15a4d7bdd7c21, 0x8c1bad237b554189, 0x31457b53ad2595ad, 0x956fa6779e35a677, 0x9df58d31a635a673, 
+	0x3147520d8c1bac9f, 0xac9f945b7b518393, 0x949face3b5659ca1, 0x4a0b520b73157c1f, 0x8461ad2573973189, 0x41cb8c5d9dab9df1, 0x8ca9ae7774658d2f, 0x7cef84ef95b59df5, 
+	0x49cb3989624ba49d, 0xd5a5ac9f83d57b93, 0x949fa49fb525ace3, 0x5a4d628d83515a4b, 0x7bdbb5ed9d6995ab, 0x956dae31ae73ae75, 0xbef7a6359df59e37, 0x9df5b6b7b6b58d6f, 
+	0x41c941c749cb8355, 0xb523ac9d730f8b93, 0x83d98bd5ac9fb525, 0x6acf41895a4f41c9, 0x7b539d67a5efaeb7, 0xa631adedbeb595b1, 0x94e58ceb8d7195b1, 0xcf39bef7aeb59e37, 
+	0x31453947314772d1, 0x9c9b731373577311, 0x5a4f6ad3ac9fbda7, 0x8c1b398741c94189, 0x8c1ba4e1b5eb956d, 0x8ca57b9773dd84a7, 0x841d9d298d2f95b1, 0xb6b7b6f79e337ced, 
+	0x41c9398741c97b53, 0x7b0f6b136ad1730f, 0x520b524f9c9fdde7, 0xc5236acf628d49cb, 0x8393ad25945b841d, 0x8ca7739d7c237465, 0x631995279df1a675, 0xbeb5c739ae7795f5, 
+	0x835549c93987520d, 0x73117b4f8353628f, 0x4a0d520d8355b523, 0xad25ad23ace17311, 0x8b979c9d945d7357, 0x8ce9956f8d2f7421, 0x4a4d7c1f9defbeb5, 0xdf7bbef7a67584ef, 
+	0xace38b93524d49cb, 0x6acf6ad17b517311, 0x72cd624d8397a4e1, 0x9ca1ad25b5238bd9, 0x62d1a525adedadad, 0x952d9573b6757c63, 0x4a0b7359956dcf39, 0xd77ba6319e3395b3, 
+	0xbd65ac9f9c9d4a0b, 0x73157b5583956ad3, 0x730f6ad38395945b, 0x93d5a49da49f6b15, 0x6acf94a1a5adbeb5, 0x9df3beb7cef99d69, 0x73576b17952bae77, 0xae33bef7c6f99571, 
+	0xad25a4e3945b49c9, 0x62936ad173138395, 0x628f5a4f945d9c9d, 0x945d945d9459624d, 0x7b537b5563179d27, 0xadf1cef795b1b671, 0x94a56b998ceb95b3, 0x9df1beb7beb58531, 
+	0xbda9b5238bdb4189, 0x6ad3730f731172d1, 0x6ad16a918bd9c5eb, 0x9ca1ace18bd7520d, 0x8b95629162d3ad23, 0xace5d62bdeafb5ab, 0x94a784a374a795b3, 0x9e33a63595739571, 
+	0xad25ad23945d3987, 0x520d6ad37b5583d5, 0x72d162919419b5a9, 0xadab945f8bd7628f, 0x9c9d8b958393d5a5, 0xe629ee6bee29cde7, 0x8395629173dd956d, 0x9def9e3395b3bef9, 
+	0xad25ad258c173987, 0x41895a4f62917313, 0x73116ad3945dbd65, 0xb62d8ca58c1f6291, 0x9c9dac9fc565dda5, 0xdda5ee6be629e629, 0x9c9f73138c197bdd, 0x956d9e35a635b673, 
+	0xb525ad25945b3987, 0x41cb520b5a4f5a4f, 0x6291520d93d79c9d, 0xa567be7394a56ad1, 0x945bac9fc565e629, 0xe627ee6bf6abee69, 0xc56583936acf6b15, 0x8ce7b6b7c675d77b, 
+	0xbda99ce59c9f49cb, 0x41c9520d49cb4a0b, 0x41c94a0d7b539c9f, 0x9ce5ad677bd962d5, 0x8397a4a1c523e629, 0xdde7dde7c565f66b, 0xc565731339873147, 0x841fd739be73ae33, 
+	0x9ce5ad25ad255a4d, 0x4189520d520d41c9, 0x41c941878395a4e1, 0xa49f945d5a4f41cb, 0x6ad1ace1b525bd65, 0xbd65e629cda5ee6b, 0xcda5420b294741cb, 0x94a1d6f7cf39b6b7, 
+	0xb567ad25b5238bd9, 0x3989624d4a0b41c9, 0x41c939877311ac9d, 0x945d6a8d41c93987, 0x5a4b8c1bbd25c523, 0xcda5e627dda5e629, 0xc5656b55529362d3, 0x945dc6739df19df1, 
+	0xace1ac9fa49f945b, 0x5a4b41c939874189, 0x4a0b49cb62cf949d, 0x945d49cb39873147, 0x520d949d9c9dc523, 0xc565a525c565dde7, 0xcda58c1d420d7399, 0xadabb6b7ae77ae77, 
+	0xad25ac9fa49d93d5, 0x624d49cb49cb41c9, 0x49cb41c9628dada9, 0x83d949c931473147, 0x41c994199c9da4e1, 0xace3b525d5a5b523, 0xd5a5945b39c97357, 0xb5efbef7ae31b675, 
+	0xbd65b525ac9fa49d, 0x628d5a4d628d520d, 0x41c941c98bd9ad25, 0x83d78c195a4b3147, 0x3147628d93d39419, 0x9ca1c523b565c5a5, 0xce29b56552916b57, 0xb5edcef7d73bd73b, 
+	0xc565a49b949ba4a1, 0x49cb49cb49cb3987, 0x4a0b524f94e59c9f, 0x83d98c177b133947, 0x290549cb628f730f, 0x9c59c565b523ad25, 0xb62f9dad739b524f, 0x9ce5c6b5be73ae31, 
+	0xa49dace1ace1ace3, 0x41895a4b628d41cb, 0x628f7bddb6739d67, 0xad25bd6594194189, 0x20c3290539873987, 0x5a8d9c9bace5a56b, 0xc6b5ae337c1f4a0b, 0x8c61df39c6f7952d, 
+	0x949dad25b4e19c59, 0x39875a4f6291520d, 0x735594e5be719d29, 0xb567b5659d2562d5, 0x2905314731472947, 0x5ad59d6ba5f1ae75, 0xa633beb58ca541cb, 0xa527d739ae339db1, 
+	0x8bd9b49fa49f8b93, 0x3147520b520d41cb, 0x735594e39c9fa49d, 0xace194599c9f8c5f, 0x398b3a0f5b196bdf, 0xadedae75956f95f3, 0x95f1aeb5adef9d69, 0xc673d6f7be75b675, 
+	0x839594599419841b, 0x29053105520b3989, 0x5a8d8c1bb4e1c565, 0x9c5b93d58bd7841d, 0x3189420f63a1956d, 0xa6317ca57423a631, 0xa633c6f9df3bdf7b, 0xd6f7d6f7df39c6f9, 
+	0x5a4b93d794177b11, 0x20c3290549cb3989, 0x5a4b83d594179c9f, 0x8c1b8c1b8397a525, 0x63172907425194e7, 0x8ce74a933189741f, 0x8d2fc6f7df39d77b, 0xd6f7ef7bcef795b1, 
+	0x624d73118bd36acf, 0x2083314741c9520b, 0x7b518395839783d9, 0x8c1b945d9ca5b62f, 0x84a56b9b31896359, 0x9d6b52d541cd8ca3, 0xcf39e77bd739d77b, 0xc6b5cef7a5f3a635, 
+	0x83918bd78bd57b95, 0x29053989624d7b0f, 0x945b9ca194199419, 0x8c5d945bb5abadef, 0x956d95af9529be71, 0xae318ca37bdbc631, 0xcef7be31a56b94e7, 0xb673cf39c6f9ae75, 
+	0x83d98399949f8395, 0x520b520983938c5d, 0x949f9d699ce39419, 0x83d77b53945f7c63, 0x7c2184e9ae31b6b5, 0xb6b5b6b3c673d6f5, 0xbeb5846173557b55, 0x8ce7a6359e3395f3, 
+	0x83957311a49f8393, 0x6acd5a4b945bac9f, 0xa49f94e594a1949f, 0x83db94a19d276317, 0x4a0d6bddbe73beb5, 0xb6b7a675b6b5df7b, 0xc6b59d678c5b949d, 0x841f84a995b18d6f, 
+	0x628f520b94199419, 0x8bd78c1bb49fc5a5, 0x7b557c218c5d9c59, 0x835183d794e56319, 0x5a914a0d9ca59d29, 0x8ce78d2995afbef9, 0xbef7ae3394a1945b, 0x945973dd95b195f5, 
+	0x628f5a4f520b8395, 0xace1c565dda5ad23, 0x520b841f95299ce3, 0x945d7c218ca5520b, 0x8c198b97b4df945d, 0x4a0d52919529ae75, 0x95f19df1a5ed9527, 0x94e58ca995afa673, 
+	0x49cb398731475a4b, 0x8bd5a4e3cda7b523, 0x3147841f8d2b9529, 0x952fa5ef94a17b57, 0x94199c5b93d5ac9f, 0x94596acf63158d29, 0x852b9e359e33a633, 0x9df38d2f9e35a673, 
+	0x41c9418939873145, 0x6b139419b523a4a1, 0x3147735794a7841b, 0x9529ae31a4e39c5b, 0x8b939c59a49f9c9d, 0x941994598bd58ca1, 0x735973df6b9f8ceb, 0x8ceb84ed95b59df5, 
+	0x41c9628d5a8d2905, 0x628f6ad39c9fb4e1, 0x29475a8f94a1949d, 0xa4e595299419a49d, 0x7b939c9da49f949d, 0x9c597b0f83958c5d, 0x9417628f63198ca1, 0x9d27ae73b6b58d6f, 
+	0x624da45973112905, 0x49cb5a4f835593d5, 0x2903398973559c9d, 0x9c5b94a19ca183d5, 0x628d9419a49f8c17, 0xace3a45b8bd58c5d, 0x8c9f8bd75b198465, 0xbe2fbeb5aeb59e37, 
+	0x7b577b515a4f2905, 0x39877b5394199417, 0x628f314752914189, 0x7b539ce3ace19c9d, 0x62cf73139c9f9c9f, 0x9459949d9c9f83d9, 0x8ce79d6984a98d2f, 0xb6b5b6b79e337ced, 
+	0x6ad36ad16acf3987, 0x628dac9f83977b53, 0x94177b5331893147, 0x31476b13945da567, 0x94a3628f8b93949d, 0x9459a49d9c596ad1, 0x84a9ae75a633a675, 0xbeb5c739ae7795f5, 
+	0x5a4f83557b0f3987, 0x7b53949d7b5572cf, 0x8bd58bd729052905, 0x3147314749cd7b97, 0xa5258c5b9419a4e1, 0x9c5b94179c598c1b, 0x95af95b3ae75beb5, 0xdf7bbef7a67584ef, 
+	0x6acf8c1b7b51520b, 0x83958c1b4a0b41c9, 0x5a4f72d131452905, 0x31473147314541c9, 0x8c199c9dc565a49d, 0x7b538bd78bd594a1, 0xb6758d71a675cf39, 0xd77ba6319e3395b3, 
+	0x628d83937b538393, 0x83d77b9331475a4f, 0x7311520d314520c3, 0x2903290529053147, 0x83958bd79459a49f, 0x73557b57b567ae31, 0xb6b9a6759e35aeb7, 0xae33bef7c6f99571, 
+	0x49c96a8f7b97945b, 0x7b93735541878b95, 0xa49f524d29453147, 0x2905188129052905, 0x628f945b8395945d, 0x949f9d25952fbeb7, 0xbef9b6b795f595b3, 0x9df1beb7beb58531, 
+	0x624f6a8d6ad18395, 0x8393735531477b51, 0xa49f945b41cb3145, 0x4189188110413145, 0x49c994199c9f9ce5, 0xa5af9df3ae75ae31, 0xae77b6b784ef95b3, 0x9e33a63595739571, 
+	0x9459949dac9d93d7, 0x520d5a4d5a4f8c1b, 0x9419b4e183976b13, 0x6b13084118813145, 0x520b8351949d8ca5, 0xa5afadf195afb675, 0xb6b7a6339dada5ef, 0x9def9e3395b3bef9, 
+	0x83d7a49f9c9d8bd7, 0x5a4f628d624d7b51, 0x7311a49dbd259c9d, 0x8351394729055a4b, 0x41896ad1945d94a5, 0x8c5f94a194a5ceb3, 0xc6f9c6b5b5eb9d25, 0x956d9e35a635b673, 
+	0x83957b4face1945d, 0x628d4189398749c9, 0x624f9419a4e3a49f, 0x7b5173554a0b941b, 0x524b73139c9f9419, 0x949d7b536ad19ca1, 0xd737cef7c671b5ed, 0x95afb6b7c675d77b, 
+	0x8395624d628f8b93, 0x628f5a4b520d520d, 0x5a4f7b0f9c9b9ca1, 0x839383515a8f8b93, 0x5a8d628f9c9da45b, 0x9c9d8bd76ad18bd9, 0xcef5c6f9d739beb5, 0xae75d77bbe73ae33, 
+	0x5a4f5a4f628d72cd, 0x5a4f5a4d520d4a0b, 0x49cb73118bd3a4a1, 0x83537b0f73117b97, 0x7b577b57a49fac9f, 0x8b936ad37313945b, 0xb62fa633d6f7d739, 0xa631e77bcf39b6b7, 
+	0x524d6ad3524d520d, 0x4a0b49cb49cb49cb, 0x6ad372d183957311, 0x9419949f73555a4b, 0x6ad36ad3941793d5, 0x7b4f72d1949dad65, 0xbe73bef9cf39d77b, 0xdf39cef99df19df1, 
+	0x628d520d49cb49c9, 0x5a4b4a0b5a0b5a4f, 0x62916ad3735549cb, 0x7313945b83db5a8f, 0x72cd628f8bd57b57, 0x628d8393ace5be73, 0xae73c739cf39b6b7, 0xcef7b6f9ae77ae77, 
+	0x49cb398931473147, 0x5a4b520d520d520d, 0x6ad3628f628f3147, 0x5a4f731162cf73df, 0x94e58ca595298ca5, 0x7c238ce98d2b8d6f, 0xae759e33ae75bef7, 0xcf39c6f7ae31b675, 
+	0x31473987314749cb, 0x520d624d6a8d5a4d, 0x520d5a4f520b3987, 0x7b537353418941cb, 0x7bdd9d6b956f95af, 0x9df58d3195b595b3, 0xc739b6f7aeb7b6b5, 0xd739cef7d73bd73b, 
+	0x3987398739875a4b, 0x49cb5a4b6a8d6a8b, 0x628f6ad141cb41c9, 0xa49d5a4f39873987, 0x5a4d7b559d29ae31, 0xa5f184a795b395b3, 0xbef79e33beb7bef9, 0xc6f7c6f7be73ae31, 
+	0x6b13290541c95a4b, 0x41c95a4b520d5a4f, 0x5a4f73157bdb6ad1, 0xa49b731541c941c9, 0x5a8d4a0b529194a3, 0x8c5da52594e99db1, 0xc6f7b675cf39a635, 0xc6b5df7bc6f7952d, 
+	0x62d120c33145520d, 0x49cb4a0b624d520d, 0x520d6ad394a19419, 0x9459949d628d3947, 0x83996b5349cb5a4f, 0x8395ac9face5aded, 0xadf1beb5bef7b6b5, 0xe77bdf39ae339db1, 
+	0x628f5a4d3147520d, 0x624d5a4d6291520d, 0x398739878c5d94a3, 0x945d9c5973133987, 0x945b93d949cb6ad1, 0x8b93ac9da4e1a569, 0xada9b62fbe73d739, 0xd739d6f7be75b675, 
+	0x520d731129052905, 0x3147314739873147, 0x398739877b99a525, 0xa525a49f94173145, 0x83978bd55a097b53, 0x9419ace3a49fbda7, 0xada7be71df39df7b, 0xd6f7d6f7df39c6f9, 
+	0x39896ad139871881, 0x3147290541c941c9, 0x7b5352096b1594a3, 0x94a19c9f945b3987, 0x8b9383936acf6ad1, 0x7313c565bd23ad25, 0x956bbeb5def9d77b, 0xd6f7ef7bcef795b1, 
+	0x5a4b7b535a8f2905, 0x20c32905628f8b95, 0xa4df5a8d7b9b9ce5, 0x94a39ca1945b3145, 0x7b5383935a4d49cb, 0x73579c9da49d945b, 0xc66fe77bdf39d77b, 0xc6b5cef7a5f3a635, 
+	
+};
+
+u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x376F8_64x64_CI4_ci4_ci4[] = {
+	0x0121122202234563, 0x1461763686659aaa, 0x94999a5810624445, 0x16319b33b33711b0, 0x32b212232b238513, 0x0100333666854299, 0x995559949a775554, 0x00b50b333773c773, 
+	0xb3bbb32b373335a5, 0x0332333628866699, 0x5500505999354991, 0x304550b3b0b7c331, 0x33bb6bbb3bb11a99, 0x133333855b186845, 0x445113b59990b5a4, 0x55499945b3373385, 
+	0x3663bb3bb3110999, 0x4673630aa5108555, 0x519018b11245b19a, 0xa4599210b3333633, 0x12bbbbb3bb551094, 0x4b333b499a4444b7, 0x7ba41517737b2b61, 0x5a95515b73333337, 
+	0x021bb6bb61510125, 0x4423b49aa9999573, 0x329401b37c3451b1, 0x11551bb83777337c, 0xb316bb5154101335, 0x9a954945418251bb, 0x155336b331599905, 0x63610331633c3d37, 
+	0x12452155101b3334, 0x951511110141b23b, 0x5451373bb1554a94, 0x166bb36713812b83, 0x3492913545b83373, 0x1513bb61b15551b8, 0x1599451b3b3b1594, 0x451183b32151b23b, 
+	0x90510037310b7733, 0x7b3bb32b16111110, 0x1155445611b36155, 0x5445441bb33b0332, 0x0111bb376763b373, 0xb8336bbb51112133, 0x3b55410055586b07, 0x11b2994b1b7bb373, 
+	0x36bbb17b333b3337, 0x3833333bb05bbb18, 0x33555999450bb113, 0x73199a916bbb3b37, 0xb3b33bb3b1051b33, 0xb1b7373b24b63311, 0x383314995b33b100, 0x6b5aa95bbb33b333, 
+	0xb21b151119a55513, 0x4153337bb11b333b, 0xb33354555490110b, 0x11101012b33bbbbb, 0x6b18499944994994, 0x50bb6b33bb1bbb33, 0x3136995062995113, 0xb5b3750b3bbb3b3b, 
+	0x2b15599594599556, 0x115b6bb3b6237833, 0xb351599536105773, 0x33b6bbb33bb3b3b3, 0x30b1b595204940bb, 0x55551b8bbbb733bb, 0x3a54049a58661377, 0x3363b3b73618bb33, 
+	0xbb00315955599115, 0x51bbbbbbb1b7c33b, 0x844290b9a4517363, 0xbb3bb3b373bbbb63, 0xbb141159994559a5, 0x10533bbbb52b26bb, 0xb5928b65599133bb, 0x18bbb77b377b36b7, 
+	0xbb3b505459583325, 0x765377b314445111, 0xb745555006217737, 0x3bb3b3bb3373b517, 0xb2bc7b5265063d72, 0x173733bb555b245b, 0x71513151155913b3, 0x363355163333100b, 
+	0x13b33b15540bbb29, 0x1333bb6b55bb1554, 0xb733b3638377b8b3, 0x3b3b081407333501, 0x181400b055500004, 0x53bbbbb3387b1599, 0x9510b372311bbbbb, 0x83bb140995b10105, 
+	0x5161bb3b44495554, 0x43b8b31133bb3714, 0x949a5610b3551bbb, 0xbbb3101144406145, 0x3855994259b55014, 0x53bbbb04bbb63376, 0x5114a950504990bb, 0xb15b73155994159b, 
+	0x6205999945644505, 0x551b11b636bbbb33, 0x7715542320599941, 0x6b038b1159999456, 0x266b9a9559911b10, 0x09a555137b2bbb77, 0x35a5522541059a54, 0xb30010b619a94599, 
+	0x635509a49427b235, 0x5010bbb0951b6733, 0x1945504a95515011, 0x373b0b65529a5942, 0x515025992213313b, 0xbb333b044951b2bb, 0x595554525546333b, 0xb3052515025995b0, 
+	0x4011bb545b875333, 0x8b833b15551b3b11, 0x5a99aa40517377b2, 0xbb3154011b659a5b, 0x415115500835553b, 0xbb1b12bb51277363, 0x305999421b37c345, 0x1bbb941511549542, 
+	0x5513099405599425, 0x9bbb133b12b033bb, 0xb14555373b331599, 0x90bb255130994551, 0xbbb1155210599994, 0x5553b33315b7b09b, 0x1699451373bb1554, 0xa9b205b11bb36533, 
+	0xbb61159456b9a955, 0x9bbbb8bb14115494, 0x1551599451b3b361, 0x59112b28183bb63b, 0xbb30962a95509a49, 0x553b101165502159, 0xa951655445611b3b, 0x1551bb3812bbbb3b, 
+	0xb6b1586595015995, 0x8553b11b6b135832, 0x4445155500555583, 0xb45b211112b37bb3, 0xb2bbb1854b86659a, 0x555b3b33373bb3bb, 0x31051555999450bb, 0x14a111411133310b, 
+	0xbbb5b44224805594, 0x43377763833b3bbb, 0x3211b6315995b336, 0x199101052bb3001b, 0xb121094544533635, 0x5373bb8bbbb8b3bb, 0x8373b377145b7bb3, 0x125511b55b1150bb, 
+	0x15411215611bb3b5, 0x33bbb11110bbb8bb, 0xbb37bb337b176b11, 0x114421bb1b155451, 0x951b112b28183bb3, 0x3bbb611594133b12, 0xbbb1b8b737736554, 0x5554bb59a5545994, 
+	0x522111bb3112bbbb, 0x3bbb3099913bbbb1, 0x2bb21bbb77373155, 0x552a6145252663b5, 0x42421b201118b37b, 0xb36bb15415121114, 0x415452bbb3144555, 0x449944563b682205, 
+	0xa448111141113331, 0x0bb2bbb725501595, 0x4aa9a4b6b599a900, 0x52459a5533b88458, 0x92454211052bb700, 0x5bbb65b7b5508448, 0x1545991b14999942, 0x1052299928010158, 
+	0xa2535511b54b1151, 0xb6b15801554505a4, 0x032119164b455554, 0x44922a4528549454, 0x559454016b161554, 0x511551849111159a, 0x4bb772239555248b, 0x58849559510159b1, 
+	0x565554bb59a55459, 0x9595b6b490111599, 0x9553733b19558106, 0x5b66556516123237, 0x151555914a9959a9, 0x5450088422111559, 0x4945712205555054, 0x994545443bb3bb31, 
+	0x01b3714125995545, 0x450141101b501445, 0x4594301214554455, 0x42405a5b3b3bbb32, 0x33b33713b55a4555, 0x499448011311b545, 0x5425555105555555, 0x4455595bb8b3bb23, 
+	0x73bb3771b1445555, 0x99b045455731b122, 0xb545a2b361452b33, 0x31510555bbb8bbbb, 0xb162b73577355545, 0x59025754237b6bbb, 0xb999583773733773, 0x3b155015133b12bb, 
+	0x611bbb7513b99526, 0x099517b413373336, 0xb26549837377c3c7, 0x7bb111453bbbb12b, 0x5452b6b455059953, 0x6105477113733b32, 0x333b442337c3777c, 0x3773155112111441, 
+	0xa9a4bbb5a54149a5, 0x866051b53b3733b3, 0x3b7719077bb638b3, 0x7737bbb05105954a, 0x45991b0144290b9a, 0x4551b155bbbbb373, 0xbbb3b5233bb1b146, 0x3c7bb13155b45225, 
+	0x54556b44590b8655, 0x994505503bb6bb83, 0xbb81541732150325, 0x5377b37377044499, 0xe54bb79a45455500, 0x62454418b2bb1bbb, 0xbbb5541771441bbb, 0x52bb87377b162999, 
+	0x59454b1995999518, 0x5592292bbb1b6122, 0xb373b5373154161b, 0x311333733555255a, 0x4999a994509999a4, 0x1092625b10bb111b, 0x6b3338337b1516bb, 0x1548373310049449, 
+	0x5022504004599a99, 0x5324041bbbbbb511, 0x917303b73666bb3b, 0x051b3773323b2555, 0x52080850580854a9, 0x94554a07b16bb299, 0xa53013b733b3b1b8, 0x1b14337b3b3b5590, 
+	
+};
+
+u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x376F8_64x64_CI4_ci4_pal_rgba16[] = {
+	0x94a57ceb94a763e1, 0xae319dad73e3639f, 0x84a5b77bdef76c65, 0x52954211e7390000
+};
+
+u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x20650_32x32_RGBA16_ci8_ci8[] = {
+	0x0001020304050607, 0x0708090a0b0c0d0e, 0x0f10111212131414, 0x0715071617001816, 0x0d191a1b1c1d1e07, 0x1f202122121c1a23, 0x24070a121b250726, 0x1f241e2728001829, 
+	0x02212a1c142b2c2d, 0x1d1d2b2e2f213011, 0x0d152e31320f290c, 0x331434350d0a0a15, 0x0500021f361f370b, 0x0738393a3b3b1c16, 0x211f3c3d09023e3f, 0x3e0d403535413b31, 
+	0x320505024214430b, 0x3c44421d45463b47, 0x37291400111c1c25, 0x28142e062d2a0522, 0x114803111c0a2a21, 0x4900274a4b140d11, 0x0c24073001164648, 0x481a160b2d1f3b3c, 
+	0x34142e002f1a4c1c, 0x4d160c244e1e354f, 0x30061a0a29502e3b, 0x0001110807062420, 0x515240482f1c0202, 0x531245243e240616, 0x104417243454552d, 0x3b484848213e2b56, 
+	0x1556140500122f02, 0x1c0a14153e145711, 0x24141f585854595a, 0x0d0a0a4712072d3a, 0x51350705481b1b1b, 0x171b0d24075b0216, 0x0d2b5c5d585d5859, 0x361c3b471106242d, 
+	0x342b521a475e0047, 0x4646021f27023147, 0x5f2435364a586054, 0x4a003d004507152d, 0x352b2d1419006148, 0x0048113e45610303, 0x003e1f351d206060, 0x626364170a2a2435, 
+	0x1d151f2d173b6561, 0x0000023e370d2103, 0x6616673724364b39, 0x6824031812111c24, 0x2c2b2b1f0916696a, 0x4167292b2d1f1461, 0x3d6b03226114521e, 0x2c316b05001b1b57, 
+	0x251f6c2822471b05, 0x6d376e342d060d41, 0x3d6b6b0303031145, 0x176b036b051b1b11, 0x5f45281c6f6b4848, 0x7045064063631a16, 0x093d3d6b226b6b48, 0x223d030322001b1b, 
+	0x4557074c05462145, 0x71070d0d7237021b, 0x48326b0547486148, 0x0547195f4747010d, 0x02112473372e2d51, 0x142e5b29450c2300, 0x3148164803056509, 0x655f210745311607, 
+	0x3b6a471c71207420, 0x47677502762a140a, 0x7373776c3c3b4803, 0x4803310d24021602, 0x4619786b792e7a15, 0x7b1614733e072975, 0x376e1f2475280b4d, 0x6731097c2d291100, 
+	0x0a100a6b487d0d06, 0x3132161a732c153e, 0x114524071f293e02, 0x0d147e16242d0247, 0x2f2a7f322124451c, 0x28026b6b03171a37, 0x0c21142c3e073f1c, 0x082d25111c0a8066, 
+	0x810d02212525481b, 0x0a11226b6b6b6b05, 0x25141f1f2e023e82, 0x630d141317833105, 0x167f2e634c840537, 0x2d2e03220385866b, 0x161414732830733a, 0x4e1c7c0287026719, 
+	0x0d711f0d1616160f, 0x452b40251c883d61, 0x61670725062e2314, 0x0d3307712d1f8924, 0x457f0d06113b0000, 0x16372d2d7667170d, 0x160a24294e45111c, 0x242b158a4b1d1f24, 
+	0x0e01165f163b3b31, 0x0144450d37281a0a, 0x1a233e3f761c8b07, 0x2d2c352b2434348b, 0x3b000909193b3b1b, 0x12120a090a252147, 0x190a1457160b292b, 0x2424152b8c2b3406, 
+	0x0503053b318d5f41, 0x0111000573120505, 0x31300e2e02402936, 0x517a152d5207432e, 0x0a6b051631161616, 0x1b2f0a0275253b47, 0x1a11050110345639, 0x60511e1f8e06480a, 
+	0x165f6b0961483109, 0x05462e07071f1032, 0x8f0d3b1c28343a20, 0x1d2036354202471b, 0x6102313d6b6b3b11, 0x14192306144e0703, 0x0c375f010834421f, 0x342c1f3543901100, 
+	
+};
+
+u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x20650_32x32_RGBA16_ci8_pal_rgba16[] = {
+	0x49cb5a4f7b533147, 0x294539879417945b, 0x735539896ad17b51, 0x83538bd75a8f7b95, 0x8b95628f62917b97, 0x9419ac9f5a4d524d, 0x4a0d5a4b7313520d, 0x7311bd65ace3a49d, 
+	0xb5256acf31456b13, 0x9c9d83d78b93941b, 0x8bd59c5b7b13ace1, 0x9c9fa49f7b556ad3, 0x6a8f4a0b394793d5, 0xb4e1b523c5658393, 0xa4dfb565a4e1520b, 0x6b1120c394599c59, 
+	0x945d624dacdf7353, 0x72d1839541874189, 0x41c951cbc5a5bd25, 0x7b9372cd949d7b57, 0xb49fbd23ad236a91, 0xee6be66bb4e38397, 0xdde7f66bde2983d5, 0xcd65e6295a0d628d, 
+	0xcda549c9d5a58c19, 0x21035a0b31057b11, 0xc5a7624f41cb2905, 0x9c5d5a09a49b2083, 0x6acd949b83d993d7, 0xd5a79c9b8351a45b, 0x4a0962d1aca12105, 0x835572d3524b72cf, 
+	0x29035a8d8c17524f, 0x73151881188362cf, 0x28c58b97a4a18bd9, 0x9ca1624bac9d93d9, 0x628b000000000000
+};
+
+Vtx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_0[10] = {
+	{{ {-2863, -574, 2745}, 0, {60, 18132}, {183, 183, 73, 254} }},
+	{{ {-2863, 574, 2745}, 0, {1008, 18132}, {183, 73, 73, 254} }},
+	{{ {-2863, 574, -2745}, 0, {1008, 13595}, {183, 73, 183, 254} }},
+	{{ {-2863, -574, -2745}, 0, {60, 13595}, {183, 183, 183, 254} }},
+	{{ {2863, 574, -2745}, 0, {1008, 9058}, {73, 73, 183, 254} }},
+	{{ {2863, -574, -2745}, 0, {60, 9058}, {73, 183, 183, 254} }},
+	{{ {2863, 574, 2745}, 0, {1008, 4521}, {73, 73, 73, 254} }},
+	{{ {2863, -574, 2745}, 0, {60, 4521}, {73, 183, 73, 254} }},
+	{{ {-2863, 574, 2745}, 0, {1008, -16}, {183, 73, 73, 254} }},
+	{{ {-2863, -574, 2745}, 0, {60, -16}, {183, 183, 73, 254} }},
+};
+
+Gfx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_0 + 0, 10, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(3, 2, 4, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(5, 4, 6, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_1[4] = {
+	{{ {2863, 574, -2745}, 0, {-521, 2537}, {73, 73, 183, 254} }},
+	{{ {-2863, 574, -2745}, 0, {2537, 2537}, {183, 73, 183, 254} }},
+	{{ {-2863, 574, 2745}, 0, {2537, -521}, {183, 73, 73, 254} }},
+	{{ {2863, 574, 2745}, 0, {-521, -521}, {73, 73, 73, 254} }},
+};
+
+Gfx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_1 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_2[4] = {
+	{{ {-2863, -574, 2745}, 0, {1479, -487}, {183, 183, 73, 254} }},
+	{{ {-2863, -574, -2745}, 0, {1479, 1479}, {183, 183, 183, 254} }},
+	{{ {2863, -574, -2745}, 0, {-487, 1479}, {73, 183, 183, 254} }},
+	{{ {2863, -574, 2745}, 0, {-487, -487}, {73, 183, 73, 254} }},
+};
+
+Gfx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_2 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_IceDL_f3dlite_material_012[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, gPlatform_IceDL_gPlatform_IceDL_IC_0x1F650_32x64_RGBA16_rgba16_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 2047, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_IceDL_f3dlite_material_013[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_IceDL_gPlatform_IceDL_IC_0x376F8_64x64_CI4_ci4_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 14),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gPlatform_IceDL_gPlatform_IceDL_IC_0x376F8_64x64_CI4_ci4_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_IceDL_f3dlite_material_014_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 231, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_IceDL_gPlatform_IceDL_IC_0x20650_32x32_RGBA16_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 144),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_IceDL_gPlatform_IceDL_IC_0x20650_32x32_RGBA16_ci8_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_IceDL[] = {
+	gsSPDisplayList(mat_gPlatform_IceDL_f3dlite_material_012),
+	gsSPDisplayList(gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPlatform_IceDL_f3dlite_material_013),
+	gsSPDisplayList(gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_gPlatform_IceDL_f3dlite_material_014_layerOpaque),
+	gsSPDisplayList(gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_2),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_ice_model.h b/assets_hm_pack/objects/object_platforms/platform_square_ice_model.h
new file mode 100644
index 000000000..110b31887
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_ice_model.h
@@ -0,0 +1,15 @@
+extern u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x1F650_32x64_RGBA16_rgba16_rgba16[];
+extern u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x376F8_64x64_CI4_ci4_ci4[];
+extern u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x376F8_64x64_CI4_ci4_pal_rgba16[];
+extern u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x20650_32x32_RGBA16_ci8_ci8[];
+extern u64 gPlatform_IceDL_gPlatform_IceDL_IC_0x20650_32x32_RGBA16_ci8_pal_rgba16[];
+extern Vtx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_0[10];
+extern Gfx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_1[4];
+extern Gfx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_1[];
+extern Vtx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_vtx_2[4];
+extern Gfx gPlatform_IceDL_gPlatform_IceDL_mesh_layer_Opaque_tri_2[];
+extern Gfx mat_gPlatform_IceDL_f3dlite_material_012[];
+extern Gfx mat_gPlatform_IceDL_f3dlite_material_013[];
+extern Gfx mat_gPlatform_IceDL_f3dlite_material_014_layerOpaque[];
+extern Gfx gPlatform_IceDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_stone_checkermodel.c b/assets_hm_pack/objects/object_platforms/platform_square_stone_checkermodel.c
new file mode 100644
index 000000000..67811a482
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_stone_checkermodel.c
@@ -0,0 +1,114 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_CheckStoneDL_stone_floor_square_spiders_ci4[] = {
+	0x0001211113111434, 0x2120023513111200, 0x0203167816313596, 0x6668441121220002, 0x21aa88b8bcad777d, 0xb77ccbbc77cc7a32, 0x08bddde848444139, 0x312141412221412f, 
+	0xf9a81168684bdbac, 0x688c8844bb1abcd1, 0xfbaacc4c425a8419, 0x3321131122012210, 0x05839196864adcca, 0x4241cc43ba8dcce3, 0x0c64c46820ca6812, 0x6222131212202222, 
+	0x09895554531de7cd, 0xaab8be54aabddde1, 0x0dccabb6faa69a21, 0x9651121121000201, 0x0388454942ceeee7, 0xeeeeeeed7bc8cee2, 0x1eeec7ec4b88ca11, 0xbba8831193122022, 
+	0x2589965318d7ddbb, 0x7eb7be77eedb5c81, 0x1eedadbc8caaaa21, 0xab88381153112422, 0x159268a94aacb69a, 0x44a66caabbbcc811, 0x2ac1448338668823, 0x83368ab633411312, 
+	0x2993395c61a89698, 0x11aca88b4c84a822, 0x0a43359118541a23, 0x5333adb761112111, 0x09a993c7b346c86a, 0x65a8c8bbcbc4c441, 0x2781558126819a02, 0x838328daa9222231, 
+	0xf8a218d77c138a4a, 0x34a6cbcc7c4668a3, 0x0a59363119933a02, 0x9931165389312122, 0x0c806abdb9939886, 0x3977baabd5634de1, 0xf1a4331361368a22, 0xa993451991b41302, 
+	0x0863886a39535868, 0x19b78a8ca8684ee1, 0xf1531336532a8602, 0x5353131128ba1102, 0x25498841966636a8, 0x668ddbd68aaaddd2, 0xf231358849399312, 0x939133323ab83530, 
+	0x2913b7b659561656, 0xca5cd78aacbedcb2, 0xf233365539690213, 0x132153333cc81920, 0x2988bdba8888a698, 0xcc896aa8babd6a82, 0xf3a1388396600131, 0x139199668bd84810, 
+	0xfa831313335201cb, 0x8aa8128c866ab622, 0xf18a5639590f0322, 0x192000f01bda1222, 0x2ac20233654222ab, 0xc86811aba8bb3032, 0xf014819992f03111, 0x922032204b781232, 
+	0x28836b39ac665622, 0xca9936888ca30083, 0xf2211469f0011113, 0x000933684e763810, 0x18557ea168a5ad30, 0x4bb668a68ac103d2, 0xf39202a2ff111132, 0x00913236ced84442, 
+	0x2c89beb85888a862, 0x29884cdc13335da0, 0xf353ff0921211912, 0x25111339abca3551, 0x1ab9de78658a836a, 0x106868db3028bbc0, 0xf21910f261119222, 0x9131356ca8da6642, 
+	0x28a687d868866898, 0x612936a58901abc0, 0xf41363ff09290f03, 0x33111958b6ac4a82, 0x13cdbbd6a8636883, 0x88114a8f1b904ad0, 0xf460151ff1a1ff93, 0x9332153245baa141, 
+	0x218de7b458966948, 0x589986221b6434c2, 0xf10f0122081ff331, 0x2221235618b448b1, 0x238cde746888a8b6, 0x49688125ccdd4281, 0x00006323a2ff8321, 0x30144114cc88cbb2, 
+	0x06ccceed468cacc3, 0x5483216bcbb7b631, 0xf00959362ff56923, 0x313821633cc84ba2, 0x2accd776ac88b845, 0x842f16b8adbddbd1, 0xf239936200932283, 0x465368696dea1dd0, 
+	0x2accb7a43a419428, 0x81ff4db84ccdd7d2, 0xf221390f0961ff26, 0x560166689c7b4da2, 0x14dbdeedcc752f37, 0x6238dde7a467eb40, 0x002310f033932ff9, 0x601883c81ceeec41, 
+	0x21ceeeee7c53005b, 0x36adc814a828d832, 0xf903200126595221, 0x02aca8464eeeec81, 0x0f02202020ff0f0f, 0x0020000020ff0f0f, 0xf22fff0f0220200f, 0xff00200022022442, 
+	0x20f0f0fff000230f, 0xf002022203222112, 0xfff000fff000f000, 0xf000f0010ffffff1, 0x19ca77a005dbabc5, 0x118bcac8614aa6b8, 0x004b7cbb7bbb3235, 0x7eeece7deeedb821, 
+	0x2dc6cee803a8335d, 0x90014846001a4439, 0x024bba8bbbbb61f2, 0xeee7da9beeeeee80, 0x3da3bd7a12938336, 0xc20f484f02454463, 0x04d88b819cb52231, 0x8dbbd64b7eeeeda2, 
+	0x1a89ab9852221914, 0x862244f014312511, 0xfcaca8835d6225ba, 0x16c7cccdbebadd82, 0x38a3ab8912532213, 0xa584400184436212, 0x2c8bb3abd6136abc, 0xc488aded7de78ba2, 
+	0x1335c78321253322, 0x5888f02685330022, 0x0a36ccad611aa688, 0xbc4a477d7eea3782, 0x8925bc9296614690, 0x2a8202633580f261, 0x2b86b77821cc58a6, 0x8acca7eeeeeb6ad1, 
+	0x53238ba326955831, 0x21202932f161f981, 0x0bc65c76f1c82388, 0x5aaa5cd7deeeaa71, 0x3293c7b311555519, 0x6f0013820f196661, 0x0cda43468a852038, 0xaab88cd83de7bc73, 
+	0x1533ab9914555319, 0x202316962ff29493, 0x1eb7d85bddc96322, 0x8baa6da83ce7cdb6, 0x3a69a7b441859582, 0x22319981920f2963, 0x9ee8ca638bcaba90, 0x8aaa698bbce7bd78, 
+	0x3ca4c7ca46532520, 0x292119202920f263, 0x5e522cc438c7aa83, 0x5aac99ac8de7ab7a, 0x5ac6b7ba84832191, 0x5119920f91100031, 0x97404abda6ab7a8a, 0x688abaaab7e7bc7c, 
+	0x16116b4124110156, 0x3129200911292021, 0x3d03bca77a56ab8a, 0xab336913368868a6, 0x533948c144112295, 0x9213008311116112, 0x4d4cccbb7b666bd6, 0xcb656563488486d8, 
+	0x36487ea846485953, 0x2121256321133832, 0x2e7bcdd7db84367d, 0x88aa8caaa7e7aceb, 0x3666e77a44848889, 0x322189a88669a689, 0x3ceeeceddbdc928d, 0xa8aaaaaabe7bc7ea, 
+	0x265abe7616544613, 0x2f03198aca8aa688, 0x042aebdbc86ca109, 0xbb8a86aaa7a6a7e8, 0x138ad7ea13438895, 0x0035916cc6aa86a5, 0x23a846c88468ba12, 0xa3116863abdc8ce8, 
+	0x134ace7d83144498, 0x018459568a88a6b5, 0x0c7c3886554b8a31, 0x835cbb6b7dbdbad8, 0x15884cec7c13a886, 0x02896933a8438ce3, 0x1e7aaca6a8886335, 0xb9abcb7b77dbdb78, 
+	0x149824cbdd444886, 0x00594c123838acd1, 0x5edc8886abc46a18, 0xc8a61bdc7b5adac4, 0x16664648dcb61486, 0x123343c443acbc74, 0xaeda86888acad838, 0xa6a866bbb886bdb1, 
+	0x289496436da32838, 0x2019a8ac448c4cd4, 0x5edcacaa88aab64d, 0xa88eebca48ab4b71, 0x461464899ca2488a, 0x20ab77ddddd7ec71, 0x47bdeeed77eddeee, 0xeeeeedb48cba68e4, 
+	0x38243431132138ac, 0x20b7c7eb7e7eeee9, 0x0cc7eeeddeee7eee, 0xeeeebbaa4a88ac79, 0x38446411419319aa, 0x32ca88caddbce7e5, 0x29bbbcccbb77cdda, 0x7cd7c88886a48ad3, 
+	0x1a51311629612158, 0x025321565814cbb8, 0xf1bda85896a65811, 0x5518dbc7b368a842, 0x3639316319321388, 0x006341948aa1ca81, 0x02adc8bba18b6393, 0xaa7de7edbcbaaca2, 
+	0x22023a59a92129aa, 0x016441014c410322, 0x011aabbb8abd88ac, 0xd7eeeee7d77bbda1, 0x2020112132122231, 0x2343331241422000, 0x322343121886aacc, 0x8abcbaaac6889110, 
+	
+};
+
+u64 gPlatform_CheckStoneDL_stone_floor_square_spiders_pal_rgba16[] = {
+	0x39cd52934a515ad5, 0x6b1562d76b579ca3, 0x73595b17739b841f, 0x7bdd945face3294b, 
+};
+
+Vtx gPlatform_CheckStoneDL_gPlatform_CheckStoneDL_mesh_layer_Opaque_vtx_0[24] = {
+	{{ {2863, 574, 2745}, 0, {1008, 2032}, {127, 0, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {2032, 2032}, {127, 0, 0, 254} }},
+	{{ {2863, -574, -2745}, 0, {2032, -16}, {127, 0, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {1008, -16}, {127, 0, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {1008, 2032}, {0, 0, 127, 254} }},
+	{{ {-2863, -574, 2745}, 0, {2032, 2032}, {0, 0, 127, 254} }},
+	{{ {2863, -574, 2745}, 0, {2032, -16}, {0, 0, 127, 254} }},
+	{{ {2863, 574, 2745}, 0, {1008, -16}, {0, 0, 127, 254} }},
+	{{ {2863, 574, -2745}, 0, {1008, 2032}, {0, 0, 129, 254} }},
+	{{ {2863, -574, -2745}, 0, {2032, 2032}, {0, 0, 129, 254} }},
+	{{ {-2863, -574, -2745}, 0, {2032, -16}, {0, 0, 129, 254} }},
+	{{ {-2863, 574, -2745}, 0, {1008, -16}, {0, 0, 129, 254} }},
+	{{ {-2863, -574, 2745}, 0, {-16, 2032}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {2032, 2032}, {0, 129, 0, 254} }},
+	{{ {2863, -574, -2745}, 0, {2032, -16}, {0, 129, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {-16, -16}, {0, 129, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {-16, 2032}, {0, 127, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {2032, 2032}, {0, 127, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {2032, -16}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {-16, -16}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {1008, 2032}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {2032, 2032}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, 2745}, 0, {2032, -16}, {129, 0, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {1008, -16}, {129, 0, 0, 254} }},
+};
+
+Gfx gPlatform_CheckStoneDL_gPlatform_CheckStoneDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_CheckStoneDL_gPlatform_CheckStoneDL_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(gPlatform_CheckStoneDL_gPlatform_CheckStoneDL_mesh_layer_Opaque_vtx_0 + 16, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_CheckStoneDL_f3dlite_material_011[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_CheckStoneDL_stone_floor_square_spiders_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 15),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gPlatform_CheckStoneDL_stone_floor_square_spiders_ci4),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_4b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_CheckStoneDL[] = {
+	gsSPDisplayList(mat_gPlatform_CheckStoneDL_f3dlite_material_011),
+	gsSPDisplayList(gPlatform_CheckStoneDL_gPlatform_CheckStoneDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_stone_checkermodel.h b/assets_hm_pack/objects/object_platforms/platform_square_stone_checkermodel.h
new file mode 100644
index 000000000..026f16dd1
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_stone_checkermodel.h
@@ -0,0 +1,6 @@
+extern u64 gPlatform_CheckStoneDL_stone_floor_square_spiders_ci4[];
+extern u64 gPlatform_CheckStoneDL_stone_floor_square_spiders_pal_rgba16[];
+extern Vtx gPlatform_CheckStoneDL_gPlatform_CheckStoneDL_mesh_layer_Opaque_vtx_0[24];
+extern Gfx gPlatform_CheckStoneDL_gPlatform_CheckStoneDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gPlatform_CheckStoneDL_f3dlite_material_011[];
+extern Gfx gPlatform_CheckStoneDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_stone_col.c b/assets_hm_pack/objects/object_platforms/platform_square_stone_col.c
new file mode 100644
index 000000000..eab152c1c
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_stone_col.c
@@ -0,0 +1,57 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPlatform_StoneDL_polygonTypes[] = {
+	{ 0x00000000, 0x00000002 },
+};
+
+CollisionPoly gPlatform_StoneDL_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0005, 0x0008, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428158846836595e-08), 0xfdc2 },
+	{ 0x0000, 0x0006, 0x0004, 0x0009, COLPOLY_SNORMAL(3.616187363252423e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0001, 0x0006, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.342814818869556e-08), 0xfdc2 },
+	{ 0x0000, 0x0002, 0x0001, 0x0009, COLPOLY_SNORMAL(-3.616187363252423e-15), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0004, 0x0002, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428158846836595e-08), 0xfdc2 },
+	{ 0x0000, 0x0003, 0x0008, 0x0000, COLPOLY_SNORMAL(3.616187363252423e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0000, 0x0008, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.342814818869556e-08), 0xfdc2 },
+	{ 0x0000, 0x0007, 0x0008, 0x0005, COLPOLY_SNORMAL(-3.616187363252423e-15), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+};
+
+Vec3s gPlatform_StoneDL_vertices[10] = {
+	{ -2863, -574, 2745 },
+	{ -2863, 574, 2745 },
+	{ -2863, 574, -2745 },
+	{ -2863, -574, -2745 },
+	{ 2863, 574, -2745 },
+	{ 2863, -574, -2745 },
+	{ 2863, 574, 2745 },
+	{ 2863, -574, 2745 },
+	{ 0, -574, 0 },
+	{ 0, 574, 0 },
+};
+
+CollisionHeader gPlatform_StoneDL_collisionHeader = {
+	-2863,
+	-574,
+	-2745,
+	2863,
+	574,
+	2745,
+	10,
+	gPlatform_StoneDL_vertices,
+	16,
+	gPlatform_StoneDL_polygons,
+	gPlatform_StoneDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_stone_col.h b/assets_hm_pack/objects/object_platforms/platform_square_stone_col.h
new file mode 100644
index 000000000..fe36db5a7
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_stone_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPlatform_StoneDL_polygonTypes[];
+extern CollisionPoly gPlatform_StoneDL_polygons[];
+extern Vec3s gPlatform_StoneDL_vertices[10];
+extern CollisionHeader gPlatform_StoneDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_stone_model.c b/assets_hm_pack/objects/object_platforms/platform_square_stone_model.c
new file mode 100644
index 000000000..4cc6ac5b6
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_stone_model.c
@@ -0,0 +1,118 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_StoneDL_gPlatform_StoneDL_rock_box_textire_ci8_ci8[] = {
+	0x0001020303040205, 0x0501020103010106, 0x0103010102020107, 0x0603080503060606, 0x0107090a0b0c090d, 0x0e080f09050d1009, 0x1112121314140b15, 0x160a17180a070405, 
+	0x0108191a1a1a1514, 0x0b190d15050a0b06, 0x1b1c1b1a131a1d1a, 0x141c111e151a1905, 0x021f1519200a1616, 0x0d19190b08180b21, 0x161519191a160f19, 0x16190b1c221b1f06, 
+	0x021a100c161f1f0d, 0x090a0a15080e150b, 0x1810161515141a1a, 0x1b16090f11150b05, 0x051a19190b090a16, 0x160b1616190e150b, 0x0a0c1a23151b111a, 0x24141c16251a1505, 
+	0x05090f091f192624, 0x1a0a190b0b190c19, 0x1a271a16161c1c24, 0x1c1c14230d1b1a05, 0x050b0b260d260a0b, 0x0a090d190b192619, 0x261a27160b1c2814, 0x12111b150a0b1a03, 
+	0x01111a151a151519, 0x092923160b0b0d0e, 0x0d15160d18191115, 0x1b1b1516150b1a03, 0x030c270a19161a0b, 0x1016230e290a0a19, 0x0d19160e0d191509, 0x2a19151a1a161b18, 
+	0x051623270b0b1b19, 0x0f0a19050e0c260d, 0x1019100a0d1a100d, 0x090916161a161a0f, 0x181e11230a0e0a18, 0x0d0f0f1520191f1f, 0x1629290d09090d0a, 0x111819111a1a1a0f, 
+	0x0f1c1909101a1016, 0x0a0d26140a191919, 0x190a0d0d090d0b0a, 0x09292b1a1615150f, 0x0f11150f19102511, 0x240b160a190d0e19, 0x0a191a0a190b1f09, 0x191616190a151510, 
+	0x0715230e18251919, 0x0a0b18250b191026, 0x191619191a190f1f, 0x0b0a0b150a1a110b, 0x0811100f0e0a0b0a, 0x0b0b0e0a0c260b0a, 0x0a1918190b100a27, 0x0a191a15151a1a08, 
+	0x0f1416180b241615, 0x1618102316241a19, 0x091810100e292c29, 0x180b161515290a16, 0x0924241e1c1a1a1a, 0x0b190b1a260d0a09, 0x091f29180d091f26, 0x191a0e0d0e1a2d29, 
+	0x071512151e0b100d, 0x182508102609100e, 0x0e191f0d0a0d1016, 0x1a1b0d190b1e2d0f, 0x0d28280a0b15190f, 0x18040819260a230e, 0x1629290d0a102929, 0x0e0b15150d1b1c1f, 
+	0x0d14122619271a0f, 0x100a19160d19090e, 0x0b0929160d0d0d1f, 0x1f1611111a230a21, 0x081e1c2e0a0b2310, 0x261f190e0a100b0a, 0x1a29260b09191f0d, 0x0d0a151b151a150d, 
+	0x0d14110b0a19180d, 0x190a1f1623260e16, 0x1f20191f2f090f0d, 0x180f0f0a0b260b07, 0x251e1c0b16201919, 0x0a0a0b1a140a0b15, 0x1f0d1908290e082c, 0x190a0e0f1a111a07, 
+	0x081e14160c1b100a, 0x19261616240e0b1e, 0x0a250a1f0b160404, 0x180b0b1a0e151a08, 0x09160b190b1b1a18, 0x19260b0d231a2716, 0x1a0a0a2616191825, 0x0e101a1625191105, 
+	0x080a0d100e191519, 0x0e0b190b0e150b20, 0x150b0a160b151a1f, 0x0826230e190e1409, 0x25160a0d090e2619, 0x0e0e151a0e0a1a1a, 0x0d2c0e260b1a1a0e, 0x08231a2326161b0f, 
+	0x08160e30071f080d, 0x180a160a10231a23, 0x0508190a111a1a15, 0x0f0f1f19260e0e08, 0x0f0e2c0d1a271609, 0x0d100b1616292320, 0x310b241b111b1e23, 0x1916270b1a150a0e, 
+	0x05080e111b111516, 0x0f090d150a0d1511, 0x0c12142d1c321b15, 0x1b11121c111b0e0e, 0x0d08051818080918, 0x08180f0a1809160e, 0x0d19190a260a0d23, 0x19292909080e0805, 
+	
+};
+
+u64 gPlatform_StoneDL_gPlatform_StoneDL_rock_box_textire_ci8_pal_rgba16[] = {
+	0x2909318b294b318d, 0x39cd41cf398d41cd, 0x420f4a5162d56317, 0x6b1952935a954a11, 0x5a937b9b9ca38c1d, 0x83dd73596b175ad7, 0x52535ad56b59739b, 0x8c1f31cd7bdb5295, 
+	0x63194a93a4e56295, 0x7bdd525162d7735b, 0x94a14a5342537b9d, 0x421194616b5b3a0f, 0x39cf5b17841f0000
+};
+
+Vtx gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_vtx_0[38] = {
+	{{ {2863, -574, -2745}, 0, {2020, 1004}, {0, 129, 0, 254} }},
+	{{ {0, -574, 0}, 0, {1508, -12}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {996, 1004}, {0, 129, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {996, 1004}, {0, 129, 0, 254} }},
+	{{ {0, -574, 0}, 0, {1508, -12}, {0, 129, 0, 254} }},
+	{{ {2863, -574, -2745}, 0, {2020, 1004}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, 2745}, 0, {2020, 1004}, {0, 129, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {996, 1004}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {996, 1004}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, 2745}, 0, {2020, 1004}, {0, 129, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {996, 1004}, {0, 127, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {2020, 1004}, {0, 127, 0, 254} }},
+	{{ {0, 574, 0}, 0, {1508, -12}, {0, 127, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {2020, 1004}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {996, 1004}, {0, 127, 0, 254} }},
+	{{ {0, 574, 0}, 0, {1508, -12}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {996, 1004}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {2020, 1004}, {0, 127, 0, 254} }},
+	{{ {0, 574, 0}, 0, {1508, -12}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {2020, 1004}, {0, 127, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {996, 1004}, {0, 127, 0, 254} }},
+	{{ {0, 574, 0}, 0, {1508, -12}, {0, 127, 0, 254} }},
+	{{ {-2863, -574, 2745}, 0, {-13, 1028}, {129, 0, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {629, 1028}, {129, 0, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {626, -11}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {-16, -11}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {-16, 1015}, {0, 0, 129, 254} }},
+	{{ {-2863, 574, -2745}, 0, {638, 1015}, {0, 0, 129, 254} }},
+	{{ {2863, 574, -2745}, 0, {638, -8}, {0, 0, 129, 254} }},
+	{{ {2863, -574, -2745}, 0, {-16, -8}, {0, 0, 129, 254} }},
+	{{ {2863, -574, -2745}, 0, {-16, 1015}, {127, 0, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {613, 1015}, {127, 0, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {613, -8}, {127, 0, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {-16, -8}, {127, 0, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {0, 1013}, {0, 0, 127, 254} }},
+	{{ {2863, 574, 2745}, 0, {616, 1013}, {0, 0, 127, 254} }},
+	{{ {-2863, 574, 2745}, 0, {616, -1}, {0, 0, 127, 254} }},
+	{{ {-2863, -574, 2745}, 0, {0, -1}, {0, 0, 127, 254} }},
+};
+
+Gfx gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(6, 1, 7, 0),
+	gsSP1Triangle(8, 4, 9, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_vtx_0 + 16, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(6, 7, 8, 0),
+	gsSP1Triangle(6, 8, 9, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(10, 12, 13, 0),
+	gsSPVertex(gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_vtx_0 + 30, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_StoneDL_f3dlite_material_010[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_StoneDL_gPlatform_StoneDL_rock_box_textire_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 50),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_StoneDL_gPlatform_StoneDL_rock_box_textire_ci8_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_StoneDL[] = {
+	gsSPDisplayList(mat_gPlatform_StoneDL_f3dlite_material_010),
+	gsSPDisplayList(gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_stone_model.h b/assets_hm_pack/objects/object_platforms/platform_square_stone_model.h
new file mode 100644
index 000000000..54e6abea5
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_stone_model.h
@@ -0,0 +1,6 @@
+extern u64 gPlatform_StoneDL_gPlatform_StoneDL_rock_box_textire_ci8_ci8[];
+extern u64 gPlatform_StoneDL_gPlatform_StoneDL_rock_box_textire_ci8_pal_rgba16[];
+extern Vtx gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_vtx_0[38];
+extern Gfx gPlatform_StoneDL_gPlatform_StoneDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gPlatform_StoneDL_f3dlite_material_010[];
+extern Gfx gPlatform_StoneDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_wood_checkermodel.c b/assets_hm_pack/objects/object_platforms/platform_square_wood_checkermodel.c
new file mode 100644
index 000000000..f054bd9e9
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_wood_checkermodel.c
@@ -0,0 +1,106 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_ZELDA_MAJORA_S_MASK_38716CF1_2_1_F84E_ci8[] = {
+	0x0000000000000102, 0x0304050607080603, 0x03090a0b0c0c0d0e, 0x0f10111210100310, 0x0013020202020214, 0x0304050615080c03, 0x10160a0b0c170d0d, 0x1819081a03030310, 
+	0x0013020202020213, 0x110d04170b081603, 0x1b171608150b0e0a, 0x1c1d0a1e0a0b0b03, 0x0013020202020213, 0x10040d0b1a081612, 0x1b1f0b0307071616, 0x1c20171a0b071a18, 
+	0x0013020002020213, 0x1c0a160b08121603, 0x1b170b120b070d0d, 0x101e1a211a1a2218, 0x0014020202020213, 0x1c0a060b22080a03, 0x1b1707080b07040d, 0x030c12211a08210f, 
+	0x0014131413020214, 0x180d160b21070a03, 0x100c070817060516, 0x102003081a081019, 0x1423242424141414, 0x11160607211a251f, 0x11060b1a1726051e, 0x1021111a08121927, 
+	0x2828282928292a2b, 0x1b06170b111a0408, 0x1b170b1a1604050c, 0x100812080807191b, 0x282b2c2d2d2d282e, 0x1b06171a0f210420, 0x10171a220405250c, 0x111d1f210b171b19, 
+	0x282b2d2d2d2d2d2e, 0x1016161a2f21161a, 0x10171a0805050a0c, 0x03201721171f1019, 0x282b2d2d2d2d2d2e, 0x1017161a21300522, 0x270b070b2517170a, 0x03203121060b1010, 
+	0x282b2d282d2d2d2e, 0x0f170d1708320508, 0x27220b17330b170c, 0x11200721260b1211, 0x282b2c2d282d282e, 0x0f170e1734320422, 0x35101a0b1f121203, 0x361a071a0d0b1203, 
+	0x282b2b2b2b2c2d37, 0x100b0e170b060d03, 0x3836100f1b272739, 0x3a2208200a071203, 0x2b37373b37372e37, 0x191a171a1a060603, 0x3c351a0803111036, 0x361203070a200b12, 
+	0x3d133e3e1313023f, 0x271240211a0e4112, 0x3a271a0b0e0b1127, 0x361a300617081742, 0x4344131313134546, 0x472f30211a06061d, 0x361017170a17121b, 0x354030060b121a1b, 
+	0x3d3f131313131346, 0x362108120b410620, 0x1b1a401716171211, 0x480712060b03081b, 0x433f131313131346, 0x36081a1a17410620, 0x0f17340616171212, 0x481f1205221b1227, 
+	0x3d3f133e13131324, 0x361a081717414122, 0x0304302617170812, 0x482208050f1b0818, 0x3d3f133e3e131324, 0x2722120617414003, 0x1005300417171a12, 0x48120804101b0848, 
+	0x3d443f3f493f4524, 0x480f210c0c060b18, 0x1905400515174a03, 0x271a1a16100f0835, 0x244646464b462424, 0x351b120c16171a36, 0x3504410507064121, 0x190c081a10030827, 
+	0x2a4c4c4c4c4c2a4d, 0x363610120b0b123a, 0x360b0b042215060b, 0x030a1a0319120827, 0x2a4d4c4c4c4c4d4e, 0x3a3a36471b11483c, 0x361f150622171617, 0x120a1a101b082227, 
+	0x2a4d4c4c4c4c4f4e, 0x3a35271922211939, 0x500b414130160e17, 0x120c08101b1a2235, 0x2a4d4c4c4c2a4c4e, 0x271a080b0a0b0827, 0x351741321a0e0d17, 0x030c1a12120b0835, 
+	0x2a4d4c4c2a4c4c4d, 0x030a1f160a0b0b10, 0x271e06340b0e0417, 0x0317171f07171a35, 0x2a4d4c2a2a2a4c4d, 0x030c160951171710, 0x271617344104090d, 0x031a170c17171a35, 
+	0x2a4d4d524c4c4c4d, 0x030a040925200603, 0x1b16173406040516, 0x1007170c53171a35, 0x4d4e54544e544e4d, 0x03250905161a0d12, 0x1b0a040b06040d06, 0x1c31170c17072248, 
+	
+};
+
+u64 gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_ZELDA_MAJORA_S_MASK_38716CF1_2_1_F84E_pal_rgba16[] = {
+	0x9d23bde5749d62cf, 0x9c59a49b94137b93, 0x7351b4db94198393, 0x8bd79c579c17628d, 0x5a8d62cd6b0f5415, 0x539583d394178bd5, 0x52095a4d7b51524b, 0x5a497b1584178395, 
+	0x7b95730f731142cd, 0x2a8b9c5b9c134a0b, 0xbccdbd0dbd4d9b49, 0xabcbb44b82c972cb, 0x7b4d83998bcf9459, 0x838d41c739877287, 0x3105314729035a47, 0x21037c576c134b4d, 
+	0x838f93d16ad18cd7, 0x42c953912a0749cb, 0x49c95b8f83512a05, 0xb54ba44b7bc7accd, 0x39459cddc54793d9, 0x6b45000000000000
+};
+
+Vtx gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_mesh_layer_Opaque_vtx_0[26] = {
+	{{ {-2863, -574, 2745}, 0, {-16, -16}, {129, 0, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {232, -16}, {129, 0, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {232, -1040}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {-16, -1040}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {-16, 996}, {0, 0, 129, 254} }},
+	{{ {-2863, 574, -2745}, 0, {232, 996}, {0, 0, 129, 254} }},
+	{{ {2863, 574, -2745}, 0, {232, -28}, {0, 0, 129, 254} }},
+	{{ {2863, -574, -2745}, 0, {-16, -28}, {0, 0, 129, 254} }},
+	{{ {2863, -574, -2745}, 0, {232, -24}, {127, 0, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {-16, -24}, {127, 0, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {-16, 1000}, {127, 0, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {232, 1000}, {127, 0, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {-16, 1008}, {0, 0, 127, 254} }},
+	{{ {2863, 574, 2745}, 0, {232, 1008}, {0, 0, 127, 254} }},
+	{{ {-2863, 574, 2745}, 0, {232, -16}, {0, 0, 127, 254} }},
+	{{ {-2863, -574, 2745}, 0, {-16, -16}, {0, 0, 127, 254} }},
+	{{ {2863, -574, -2745}, 0, {2016, -16}, {0, 129, 0, 254} }},
+	{{ {0, -574, 0}, 0, {1000, 496}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {2016, 1008}, {0, 129, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {2016, 1008}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, 2745}, 0, {2016, -16}, {0, 129, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {2016, -16}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {2016, 1008}, {0, 127, 0, 254} }},
+	{{ {0, 574, 0}, 0, {1000, 496}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {2016, -16}, {0, 127, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {2016, 1008}, {0, 127, 0, 254} }},
+};
+
+Gfx gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_mesh_layer_Opaque_vtx_0 + 16, 10, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 1, 0, 0),
+	gsSP1Triangle(4, 1, 3, 0),
+	gsSP1Triangle(2, 1, 4, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(6, 8, 7, 0),
+	gsSP1Triangle(8, 9, 7, 0),
+	gsSP1Triangle(9, 5, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_CheckWoodDL_f3dlite_material_009[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_ZELDA_MAJORA_S_MASK_38716CF1_2_1_F84E_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 84),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_ZELDA_MAJORA_S_MASK_38716CF1_2_1_F84E_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 6, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_CheckWoodDL[] = {
+	gsSPDisplayList(mat_gPlatform_CheckWoodDL_f3dlite_material_009),
+	gsSPDisplayList(gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_wood_checkermodel.h b/assets_hm_pack/objects/object_platforms/platform_square_wood_checkermodel.h
new file mode 100644
index 000000000..1be5ca30d
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_wood_checkermodel.h
@@ -0,0 +1,6 @@
+extern u64 gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_ZELDA_MAJORA_S_MASK_38716CF1_2_1_F84E_ci8[];
+extern u64 gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_ZELDA_MAJORA_S_MASK_38716CF1_2_1_F84E_pal_rgba16[];
+extern Vtx gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_mesh_layer_Opaque_vtx_0[26];
+extern Gfx gPlatform_CheckWoodDL_gPlatform_CheckWoodDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gPlatform_CheckWoodDL_f3dlite_material_009[];
+extern Gfx gPlatform_CheckWoodDL[];
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_wood_col.c b/assets_hm_pack/objects/object_platforms/platform_square_wood_col.c
new file mode 100644
index 000000000..ba4e4a07b
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_wood_col.c
@@ -0,0 +1,57 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPlatform_WoodDL_polygonTypes[] = {
+	{ 0x00000000, 0x0000000a },
+};
+
+CollisionPoly gPlatform_WoodDL_polygons[] = {
+	{ 0x0000, 0x0000, 0x0001, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0000, 0x0002, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0003, 0x0002, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0003, 0x0004, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), 0xf547 },
+	{ 0x0000, 0x0005, 0x0004, 0x0006, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0005, 0x0006, 0x0007, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xf4d1 },
+	{ 0x0000, 0x0007, 0x0006, 0x0001, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0007, 0x0001, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), 0xf547 },
+	{ 0x0000, 0x0002, 0x0001, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0004, 0x0002, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0006, 0x0004, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0001, 0x0006, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0003, 0x0009, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0005, 0x0009, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0007, 0x0009, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+	{ 0x0000, 0x0000, 0x0009, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(4.3428155294122917e-08), 0xfdc2 },
+};
+
+Vec3s gPlatform_WoodDL_vertices[10] = {
+	{ -2863, -574, 2745 },
+	{ -2863, 574, 2745 },
+	{ -2863, 574, -2745 },
+	{ -2863, -574, -2745 },
+	{ 2863, 574, -2745 },
+	{ 2863, -574, -2745 },
+	{ 2863, 574, 2745 },
+	{ 2863, -574, 2745 },
+	{ 0, 574, 0 },
+	{ 0, -574, 0 },
+};
+
+CollisionHeader gPlatform_WoodDL_collisionHeader = {
+	-2863,
+	-574,
+	-2745,
+	2863,
+	574,
+	2745,
+	10,
+	gPlatform_WoodDL_vertices,
+	16,
+	gPlatform_WoodDL_polygons,
+	gPlatform_WoodDL_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_wood_col.h b/assets_hm_pack/objects/object_platforms/platform_square_wood_col.h
new file mode 100644
index 000000000..25449c40a
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_wood_col.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPlatform_WoodDL_polygonTypes[];
+extern CollisionPoly gPlatform_WoodDL_polygons[];
+extern Vec3s gPlatform_WoodDL_vertices[10];
+extern CollisionHeader gPlatform_WoodDL_collisionHeader;
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_wood_model.c b/assets_hm_pack/objects/object_platforms/platform_square_wood_model.c
new file mode 100644
index 000000000..0ddde6172
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_wood_model.c
@@ -0,0 +1,117 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPlatform_WoodDL_gPlatform_WoodDL_ZELDA_MAJORA_S_MASK_F1F1C033_2_1_ci_ci8_ci8[] = {
+	0x0000010203040506, 0x05070801090a0b0a, 0x0c0d0e0f0a100611, 0x040b12130911130e, 0x0f140602030f1506, 0x0b160a170b151813, 0x13140e0909190a11, 0x110a1a1409111b0f, 
+	0x181318061c091505, 0x01051d1e1f060020, 0x1b211122230e0024, 0x00231a1425241b26, 0x0509090b27001506, 0x01080e0b280e2322, 0x1b292a24000a1818, 0x0e2b2c0f250f132d, 
+	0x2e0c180b2f0e0130, 0x15050c2315231323, 0x2431322b1d0b1718, 0x332b1319340e3523, 0x0c1b0918190e0136, 0x150b1b0e060f0c00, 0x0e2932260b0a0809, 0x2d0c37340a003823, 
+	0x2e1409180f390123, 0x3a042b34163b3c0a, 0x111b3d1b0a0b1734, 0x3e3f404142111200, 0x103109024344283e, 0x072e2e1915244504, 0x4611470c2415481c, 0x3649314a0a0f2323, 
+	0x144b112f4c44063e, 0x3a2f2e344d224e4f, 0x2f2435122d500e2e, 0x0821512f0e230024, 0x0c14042104171e01, 0x522f04065300124f, 0x1b0c140c23011005, 0x462a3f4f47002324, 
+	0x1904112910161e16, 0x0a2e110a150a1212, 0x24541b4f2d151806, 0x101b1b4f190a241b, 0x0a110e310f553e17, 0x0e04040e01004f3f, 0x1954120c2d080a23, 0x100d101b09561b10, 
+	0x0f23114f13553018, 0x0e0f271417052b3f, 0x0c0c3f0c230a0a00, 0x040057240f0f230a, 0x2311100c241f3e15, 0x2e3600230b0a0c2c, 0x4e0c3f2b000a1924, 0x24001b1000100f1d, 
+	0x4258194f23170807, 0x2d082313053e0c0c, 0x4e540c101d551859, 0x1b353f0f190f0006, 0x0958112e18550b1f, 0x0f3e0f230b0e132d, 0x1212120e1e554a12, 0x144f312e10110e3e, 
+	0x0a39110f17060006, 0x0e0f240501241320, 0x1b2e4e0f06181b4f, 0x355a142e24042605, 0x0a43580e555b2400, 0x470f0d06552d0c0c, 0x132e4e10160a0c59, 0x14214a14000f230a, 
+	0x0a11181842005c24, 0x3d0e0f4418230c0c, 0x242e3c1916241414, 0x0c5d0e2724110e00, 0x0e19171809112e2e, 0x435b0f5e18232e24, 0x0e350c00061b140c, 0x1b4a2e0438045b09, 
+	0x191d1700045f0e2e, 0x0460245606050f0f, 0x0e2f2e0a06120c0c, 0x0f04352e312e0a0f, 0x0055182d4100092b, 0x2322246152060e0f, 0x112a62050b0c122b, 0x0e044f41270f0000, 
+	0x1e0a0a041b0e000c, 0x000f0e613a180e0e, 0x113d2a00052e4f0f, 0x0611120419240e00, 0x0a0f0a1338470e23, 0x0a10004455000e0e, 0x5f412a003e230c23, 0x182e122e56190e1d, 
+	0x003e55244f470913, 0x001e0b1800041111, 0x0e43410e570a2400, 0x0b24122f250a0005, 0x00001f0f120e182b, 0x0f0b00051819583d, 0x0e3d046311201b0a, 0x01245a4f4208231d, 
+	0x220e422321090a1b, 0x041e1e0661110461, 0x0e5804634124130a, 0x180f641342550b3e, 0x0f340a0f3139112e, 0x1006163e460f2360, 0x18000f0e412e2316, 0x160e5d2e0142080a, 
+	0x190018231b43112e, 0x0f010b08172e2218, 0x0a23000014140e02, 0x1834413e3a420a00, 0x0f0946260c35464f, 0x2d060006422f240e, 0x180a3e0a14243041, 0x0a464a0055550b2e, 
+	0x24185f0d133b043f, 0x1006180a5204240a, 0x06100555240e000f, 0x4604110f550a0013, 0x26444313233b1313, 0x260b6034522e0f0a, 0x0f190a1f24000a10, 0x2541110a1f09160f, 
+	0x044246130013040e, 0x040f0a0a521c1024, 0x2b0f0e060f0f0000, 0x424c041955180100, 0x0f52091413241104, 0x0e09080a6541044f, 0x122e000b2d23102d, 0x1862040b15425524, 
+	0x24520e2c2b0f044a, 0x3e23183442040f1b, 0x4f242300240a2324, 0x083943152815062b, 0x04422e2c2b245f2a, 0x0f30080a1f192335, 0x4f1b19000f003e2d, 0x0a46045515180b2d, 
+	0x244224452b0f0966, 0x13230b081f242e14, 0x1b140e0000001b2d, 0x0b47041818201024, 0x230910121020091c, 0x0f23080655242e3f, 0x1b2e0e0e000f0c2d, 0x0a0f434609142b13, 
+	0x23060e140f230a19, 0x24203e06422d2f67, 0x1404000a0b111c2e, 0x0a412a2702001d26, 0x1355220d0f115b00, 0x1324001656041467, 0x4f0423061e0f4a13, 0x0968696a420f0024, 
+	0x54550441632e1800, 0x242d1e170e101b6b, 0x4f1300060b0a002d, 0x0a3d6c1c441b002b, 0x1b42462a692f0a23, 0x240f3e06182e1b5a, 0x5a0c0f16555f1323, 0x554c3d2f18040f2d, 
+	0x0c18021c3d040930, 0x1b13050155041b12, 0x4f0c13086d092e0f, 0x42612a2e432f230f, 0x130b093811000a0e, 0x14261e4218232f4b, 0x1433230b6e562f04, 0x18462a0f2e4f2324, 
+	0x2d16562f0e040919, 0x140d3e06170f632e, 0x101326061e092e04, 0x25256324143f2410, 0x3c064404112e1104, 0x2f260017062d632e, 0x0f2e131f08342e43, 0x4242272e1137132e, 
+	0x54075f413d0f4141, 0x0c132417162d2f04, 0x0f2d1315160f2463, 0x44172711094e1424, 0x236f0e4143141463, 0x377019080a136343, 0x112d23060026342a, 0x5e422e412f2d2e04, 
+	0x0a555f434112140f, 0x123b000b08100e0e, 0x2f5c10092d0a182f, 0x52522e412f4f2e24, 0x340a0f46663f4f11, 0x0f23000a15231809, 0x2f24230e30182511, 0x52281068472c2b19, 
+	0x415b0e0f2f2e5d2e, 0x0f00000a01710643, 0x042611720b0a0a0e, 0x5e282443583f120e, 0x14091104042f6a2e, 0x4a2d130a01051843, 0x0e104756160a0047, 0x424224464c3c541b, 
+	0x1234464647142a0e, 0x0f2d3e1507060404, 0x09101356061b0000, 0x070a0046430c4f4f, 0x371109252e0c1134, 0x0f0a080707302441, 0x1810130a3b350e06, 0x73342f040f143c1b, 
+	0x1a1108174f4f460f, 0x13001e150f30352e, 0x5b24330a33195674, 0x18112a4309124f0f, 0x142e080a29121134, 0x231d0a0010301b1c, 0x0f13233e2d5e2523, 0x1134431124140422, 
+	0x100f171d31644318, 0x3e3e171f0b05261c, 0x0e13240516171d24, 0x471904611138410f, 0x240f3a064f290417, 0x30130b5b23062e14, 0x18240d1d06000800, 0x3d0404466263751b, 
+	0x2e0e55052b643417, 0x1e1d06000f0a1b38, 0x18351b0e160b423d, 0x43110e466c41765d, 0x2e0a771e04380a15, 0x181715460f230d4b, 0x09131300161e0011, 0x470f115f2a476c6a, 
+	0x1b0a560a194a0115, 0x0a08175f0f002414, 0x4126130b55000134, 0x04342f420e101412, 0x0f09460a0e0f5506, 0x180b280e3435244f, 0x35130c0516231746, 0x0f096342040a0c0c, 
+	0x0b00560a5f0e0b55, 0x2416011934352d24, 0x2b0c3c1d160e0b25, 0x0e00190e11091b2b, 0x552318346a0a0608, 0x00730e05252e050a, 0x2b2b2b246e340a25, 0x11180f4a0e231b26, 
+	
+};
+
+u64 gPlatform_WoodDL_gPlatform_WoodDL_ZELDA_MAJORA_S_MASK_F1F1C033_2_1_ci_ci8_pal_rgba16[] = {
+	0x5a91318b5a4d9b95, 0x73134a4f41cd2107, 0x420d5a4f524f4a0f, 0x8bd97b9762916ad3, 0x6b136ad19c1b7b57, 0x8b97294939cd39cb, 0x4a0d62d1b4df8397, 0x8b955291420f3149, 
+	0x6ad5a45b629362d3, 0x7315524d73558395, 0x3189a41983538399, 0xa45f6b157b558355, 0x5a939c19a4177b99, 0x5a8f83575ad3ac9f, 0x93d76acf29077317, 0x9c5d7b115251a45d, 
+	0xb49f7b1341cb72d1, 0x49cbaca1628f72d3, 0x2947bce17b158bd7, 0x72cf31cba49d93d9, 0x10839bdb3989298b, 0x941d398b520d528f, 0x73119419a41b520f, 0x83d993974a0b6a91, 
+	0x49cd624d7acf7b53, 0x9bd9418b8b55ac9d, 0x83138b939bd7ac5d, 0x8b132909294b20c5, 0x7b594a51728f18c5, 0x21099bd5a3d52147, 
+};
+
+Vtx gPlatform_WoodDL_gPlatform_WoodDL_mesh_layer_Opaque_vtx_0[24] = {
+	{{ {-2863, -574, 2745}, 0, {-16, 2032}, {129, 0, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {-16, -16}, {129, 0, 0, 254} }},
+	{{ {-2863, 574, -2745}, 0, {2026, -16}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {2026, 2032}, {129, 0, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {-16, 2032}, {0, 0, 129, 254} }},
+	{{ {-2863, 574, -2745}, 0, {-16, -16}, {0, 0, 129, 254} }},
+	{{ {2863, 574, -2745}, 0, {2026, -16}, {0, 0, 129, 254} }},
+	{{ {2863, -574, -2745}, 0, {2026, 2032}, {0, 0, 129, 254} }},
+	{{ {2863, -574, -2745}, 0, {2026, 2032}, {127, 0, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {2026, -16}, {127, 0, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {-16, -16}, {127, 0, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {-16, 2032}, {127, 0, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {2026, 2032}, {0, 0, 127, 254} }},
+	{{ {2863, 574, 2745}, 0, {2026, -16}, {0, 0, 127, 254} }},
+	{{ {-2863, 574, 2745}, 0, {-16, -16}, {0, 0, 127, 254} }},
+	{{ {-2863, -574, 2745}, 0, {-16, 2032}, {0, 0, 127, 254} }},
+	{{ {-2863, 574, -2745}, 0, {1261, 2537}, {0, 127, 0, 254} }},
+	{{ {2863, 574, 2745}, 0, {-269, -521}, {0, 127, 0, 254} }},
+	{{ {2863, 574, -2745}, 0, {-269, 2537}, {0, 127, 0, 254} }},
+	{{ {-2863, 574, 2745}, 0, {1261, -521}, {0, 127, 0, 254} }},
+	{{ {-2863, -574, -2745}, 0, {1261, 2537}, {0, 129, 0, 254} }},
+	{{ {2863, -574, -2745}, 0, {-269, 2537}, {0, 129, 0, 254} }},
+	{{ {2863, -574, 2745}, 0, {-269, -521}, {0, 129, 0, 254} }},
+	{{ {-2863, -574, 2745}, 0, {1261, -521}, {0, 129, 0, 254} }},
+};
+
+Gfx gPlatform_WoodDL_gPlatform_WoodDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPlatform_WoodDL_gPlatform_WoodDL_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(gPlatform_WoodDL_gPlatform_WoodDL_mesh_layer_Opaque_vtx_0 + 16, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPlatform_WoodDL_f3dlite_material_007[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 2, G_AC_NONE | G_ZS_PIXEL),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPlatform_WoodDL_gPlatform_WoodDL_ZELDA_MAJORA_S_MASK_F1F1C033_2_1_ci_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 119),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPlatform_WoodDL_gPlatform_WoodDL_ZELDA_MAJORA_S_MASK_F1F1C033_2_1_ci_ci8_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 252),
+	gsSPDisplayList(0x8000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPlatform_WoodDL[] = {
+	gsSPDisplayList(mat_gPlatform_WoodDL_f3dlite_material_007),
+	gsSPDisplayList(gPlatform_WoodDL_gPlatform_WoodDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_platforms/platform_square_wood_model.h b/assets_hm_pack/objects/object_platforms/platform_square_wood_model.h
new file mode 100644
index 000000000..dc52a5f0d
--- /dev/null
+++ b/assets_hm_pack/objects/object_platforms/platform_square_wood_model.h
@@ -0,0 +1,6 @@
+extern u64 gPlatform_WoodDL_gPlatform_WoodDL_ZELDA_MAJORA_S_MASK_F1F1C033_2_1_ci_ci8_ci8[];
+extern u64 gPlatform_WoodDL_gPlatform_WoodDL_ZELDA_MAJORA_S_MASK_F1F1C033_2_1_ci_ci8_pal_rgba16[];
+extern Vtx gPlatform_WoodDL_gPlatform_WoodDL_mesh_layer_Opaque_vtx_0[24];
+extern Gfx gPlatform_WoodDL_gPlatform_WoodDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gPlatform_WoodDL_f3dlite_material_007[];
+extern Gfx gPlatform_WoodDL[];
diff --git a/assets_hm_pack/objects/object_pols_voice/object_pols_voice.h b/assets_hm_pack/objects/object_pols_voice/object_pols_voice.h
new file mode 100644
index 000000000..99b98dbf1
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/object_pols_voice.h
@@ -0,0 +1,6 @@
+#include "pols_voice_skel.h"
+#include "pols_voice_anim_idle.h"
+#include "pols_voice_anim_hop.h"
+#include "pols_voice_anim_grab.h"
+#include "pols_voice_anim_damaged.h"
+#include "pols_voice_anim_die.h"
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_damaged.c b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_damaged.c
new file mode 100644
index 000000000..d49768a0a
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_damaged.c
@@ -0,0 +1,35 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gPolsVoiceSkelDamagedAnimFrameData[273] = {
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x002c, 0x007d, 0x00a9, 0x00a3, 0x0093, 0x007d, 0x0062, 0x0046, 0x002c, 0x0015, 0x0006, 
+	0x0000, 0xbfff, 0xc04e, 0xc0e0, 0xc12f, 0xbde8, 0xb7ce, 0xb487, 0xb4ec, 0xb5f9, 0xb780, 0xb94f, 0xbb37, 0xbd07, 0xbe8e, 0xbf9b, 
+	0xbfff, 0x3d3b, 0x348b, 0x3663, 0x2587, 0x28c0, 0x2f12, 0x34c2, 0x373d, 0x3668, 0x3365, 0x321f, 0x3441, 0x379b, 0x3ab0, 0x3ca1, 
+	0x3d28, 0x0000, 0x005a, 0x023e, 0xff30, 0x00aa, 0x0090, 0xfef0, 0xfcb6, 0xfa86, 0xf9df, 0xfcb4, 0xff6d, 0x00a7, 0x00aa, 0x003a, 
+	0x0000, 0x0000, 0xfec1, 0xfe0c, 0xffec, 0x0032, 0x00cb, 0x0167, 0x01cc, 0x0232, 0x0269, 0x018e, 0x009d, 0x002b, 0x000a, 0x0002, 
+	0x0000, 0x085b, 0x0aa3, 0xf446, 0xf2e1, 0xf27d, 0xf324, 0xf65c, 0xfc49, 0x0391, 0x0abe, 0x0ec8, 0x0eb9, 0x0ccc, 0x0a81, 0x08e1, 
+	0x0873, 0xffff, 0xfee8, 0x01b1, 0x002e, 0xffbe, 0xff3d, 0xfef3, 0xff31, 0xffec, 0x00df, 0x011a, 0x00b1, 0x0052, 0x001e, 0x0007, 
+	0xffff, 0x0000, 0x092d, 0x0a18, 0x01c6, 0xfdf4, 0xfad7, 0xf82e, 0xf615, 0xf46c, 0xf47f, 0xf80b, 0xfbb2, 0xfe1a, 0xff56, 0xffd9, 
+	0x0000, 0xfdee, 0xfc33, 0xe226, 0xe7fd, 0xe649, 0xe4d5, 0xe5a5, 0xe9fa, 0xf093, 0xf865, 0xfe46, 0xfff3, 0xff82, 0xfe9d, 0xfe12, 
+	0xfdf5, 0xffff, 0x00d0, 0x0472, 0x007f, 0xff5a, 0xfe23, 0xfd05, 0xfc8a, 0xfccc, 0xfe03, 0xff5d, 0xffcd, 0xffed, 0xfff9, 0xfffe, 
+	0xffff, 0xffff, 0x092e, 0x0a22, 0x017c, 0xfe38, 0xfb3c, 0xf846, 0xf58d, 0xf310, 0xf299, 0xf6fb, 0xfb88, 0xfe4c, 0xff83, 0xffe7, 
+	0xffff, 0xfbf8, 0x0af1, 0x1ebc, 0x2357, 0x20d7, 0x1ae7, 0x0f41, 0xfbc9, 0xe83c, 0xddba, 0xdb2f, 0xdea2, 0xe63e, 0xf013, 0xf8b3, 
+	0xfc51, 0xd2a8, 0xd351, 0xdac1, 0xdfc3, 0xde12, 0xda27, 0xd51e, 0xd1dc, 0xd2c0, 0xd545, 0xd655, 0xd5a4, 0xd461, 0xd344, 0xd2be, 
+	0xd2a4, 0xd929, 0xc82d, 0xb016, 0xa85c, 0xa8f8, 0xac90, 0xb5c8, 0xc74a, 0xd9c3, 0xe406, 0xe6ef, 0xe5c7, 0xe2dd, 0xde97, 0xda8a, 
+	0xd8cc, 0xfbf8, 0x0aa6, 0x1e8d, 0x23c9, 0x2237, 0x1c94, 0x0ff9, 0xfd68, 0xef11, 0xe819, 0xe61c, 0xe794, 0xeba7, 0xf213, 0xf901, 
+	0xfc51, 0x2d57, 0x2cb6, 0x253b, 0x1fe4, 0x21c6, 0x2686, 0x2ba9, 0x2d70, 0x2ba9, 0x296d, 0x2882, 0x2926, 0x2aa1, 0x2c35, 0x2d23, 
+	0x2d5b, 0x26d6, 0x37c5, 0x5033, 0x57cb, 0x5585, 0x4e02, 0x3ecd, 0x2995, 0x191b, 0x10c4, 0x0e3a, 0x0fdd, 0x1487, 0x1bca, 0x2386, 
+	0x2733, };
+
+JointIndex gPolsVoiceSkelDamagedAnimJointIndices[7] = {
+	{ 0x0000, 0x0000, 0x0001, },
+	{ 0x0011, 0x0000, 0x0000, },
+	{ 0x0021, 0x0031, 0x0041, },
+	{ 0x0051, 0x0061, 0x0071, },
+	{ 0x0081, 0x0091, 0x00a1, },
+	{ 0x00b1, 0x00c1, 0x00d1, },
+	{ 0x00e1, 0x00f1, 0x0101, },
+};
+
+AnimationHeader gPolsVoiceSkelDamagedAnim = { { 16 }, gPolsVoiceSkelDamagedAnimFrameData, gPolsVoiceSkelDamagedAnimJointIndices, 1 };
+
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_damaged.h b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_damaged.h
new file mode 100644
index 000000000..f475c3744
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_damaged.h
@@ -0,0 +1 @@
+extern AnimationHeader gPolsVoiceSkelDamagedAnim;
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_die.c b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_die.c
new file mode 100644
index 000000000..01363f1fc
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_die.c
@@ -0,0 +1,36 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gPolsVoiceSkelDieAnimFrameData[289] = {
+	0x0000, 0x0000, 0x0190, 0x04ca, 0x0789, 0x086d, 0x0856, 0x07f8, 0x07ab, 0x078e, 0x078a, 0x077c, 0x0764, 0x0740, 0x0717, 0x06f6, 
+	0x06ea, 0x0000, 0x0184, 0x0457, 0x05e4, 0x05ef, 0x05f4, 0x05f7, 0x05f9, 0x05fb, 0x05ff, 0x060b, 0x0630, 0x0666, 0x069f, 0x06cc, 
+	0x06de, 0xbfff, 0xbd35, 0xb67c, 0xae40, 0xa659, 0x9eeb, 0x97d1, 0x9106, 0x8aa5, 0x84e6, 0x801a, 0x7c8c, 0x7a10, 0x7874, 0x7793, 
+	0x774f, 0x3d3b, 0x348b, 0x371c, 0x2587, 0x279c, 0x2c81, 0x3218, 0x35e3, 0x338e, 0x33ae, 0x28f1, 0x2c06, 0x30a8, 0x3586, 0x3a48, 
+	0x3d3b, 0x0000, 0x005a, 0x023e, 0xff30, 0xffa5, 0xffea, 0x0004, 0x0008, 0x0001, 0xfff5, 0x0019, 0x0003, 0x0000, 0xffff, 0xffff, 
+	0x0000, 0x0000, 0xfec1, 0xfe40, 0xffec, 0xffe9, 0xffea, 0xfff3, 0xfff9, 0xfffc, 0x0001, 0xfff5, 0xfffe, 0xffff, 0xffff, 0x0000, 
+	0x0000, 0x085b, 0x0aa3, 0xf39a, 0xf2e1, 0xf2ad, 0xf2ad, 0xf40a, 0xf7f8, 0x0027, 0x0073, 0x191c, 0x16e0, 0x1442, 0x1082, 0x0bd7, 
+	0x085b, 0xffff, 0xfee8, 0x019b, 0x002e, 0x001e, 0x0013, 0x000a, 0x0004, 0x0000, 0xffff, 0xfffb, 0xfffe, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0x0000, 0x092d, 0x0900, 0x01c6, 0x0101, 0x0088, 0x0041, 0x0022, 0x0012, 0x0000, 0x001a, 0x0005, 0x0001, 0x0000, 0x0000, 
+	0x0000, 0xfdee, 0xfc33, 0xe0f7, 0xe7fd, 0xe6a5, 0xe471, 0xe363, 0xe5b2, 0xf0d6, 0xff9c, 0xfeab, 0x052d, 0x049f, 0x0231, 0xff5c, 
+	0xfdee, 0xffff, 0x00d0, 0x0423, 0x007f, 0x004f, 0x0031, 0x001a, 0x000d, 0x0004, 0xffff, 0x0004, 0xffff, 0xffff, 0x0000, 0x0000, 
+	0xffff, 0xffff, 0x092e, 0x0910, 0x017c, 0x00de, 0x007c, 0x003e, 0x0022, 0x0011, 0xffff, 0x0025, 0x0007, 0x0002, 0x0000, 0x0000, 
+	0xffff, 0xfbf8, 0x0ae9, 0x1eb1, 0x2357, 0x20fd, 0x1b1b, 0x0e9c, 0xf86d, 0xe377, 0xd8ce, 0xd48a, 0xd3b8, 0xd7c4, 0xe2e3, 0xf324, 
+	0xfbf8, 0xd2a8, 0xd350, 0xdabe, 0xdfc3, 0xde0a, 0xd9f3, 0xd4b6, 0xd200, 0xd4be, 0xd965, 0xdcae, 0xdd9f, 0xdb45, 0xd6a5, 0xd34e, 
+	0xd2a8, 0xd929, 0xc82d, 0xb012, 0xa85c, 0xa942, 0xadbb, 0xb912, 0xcea8, 0xe3b7, 0xeeec, 0xf3ce, 0xf513, 0xf2eb, 0xebe4, 0xdffd, 
+	0xd929, 0xfbf8, 0x0ae8, 0x1ef3, 0x23c9, 0x2194, 0x1bc7, 0x0f3a, 0xf8a2, 0xe358, 0xd8a8, 0xd46c, 0xd3a4, 0xd7b8, 0xe2dd, 0xf322, 
+	0xfbf8, 0x2d57, 0x2caf, 0x251d, 0x1fe4, 0x2197, 0x25be, 0x2b25, 0x2dfa, 0x2b2b, 0x2676, 0x232f, 0x2246, 0x24aa, 0x2954, 0x2cb1, 
+	0x2d57, 0x26d6, 0x37c5, 0x500f, 0x57cb, 0x56db, 0x526a, 0x4711, 0x312d, 0x1be9, 0x10ca, 0x0c02, 0x0aca, 0x0cf8, 0x1409, 0x1ffc, 
+	0x26d6, };
+
+JointIndex gPolsVoiceSkelDieAnimJointIndices[7] = {
+	{ 0x0000, 0x0001, 0x0011, },
+	{ 0x0021, 0x0000, 0x0000, },
+	{ 0x0031, 0x0041, 0x0051, },
+	{ 0x0061, 0x0071, 0x0081, },
+	{ 0x0091, 0x00a1, 0x00b1, },
+	{ 0x00c1, 0x00d1, 0x00e1, },
+	{ 0x00f1, 0x0101, 0x0111, },
+};
+
+AnimationHeader gPolsVoiceSkelDieAnim = { { 16 }, gPolsVoiceSkelDieAnimFrameData, gPolsVoiceSkelDieAnimJointIndices, 1 };
+
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_die.h b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_die.h
new file mode 100644
index 000000000..f6508841b
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_die.h
@@ -0,0 +1 @@
+extern AnimationHeader gPolsVoiceSkelDieAnim;
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_grab.c b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_grab.c
new file mode 100644
index 000000000..cf5f78e42
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_grab.c
@@ -0,0 +1,60 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gPolsVoiceSkelGrabAnimFrameData[685] = {
+	0x0000, 0xd7bc, 0xd82f, 0xd8bd, 0xd937, 0xd96b, 0xd964, 0xd955, 0xd942, 0xd92f, 0xd921, 0xd916, 0xd8ef, 0xd888, 0xd7bc, 0xca2b, 
+	0xb9b5, 0xb43e, 0xb0ea, 0xaf29, 0xae78, 0xae59, 0xaf2f, 0xb17d, 0xb4f7, 0xb94f, 0xbe2f, 0xc341, 0xc82f, 0xccb6, 0xd0ae, 0xd3e8, 
+	0xd628, 0xd72f, 0xd766, 0xd775, 0xd776, 0xd785, 0xd7bc, 0x0000, 0xff73, 0xfe40, 0xfd0c, 0xfc80, 0xfd4b, 0xff2e, 0x0171, 0x0355, 
+	0x0420, 0x037b, 0x0210, 0x00a5, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0004, 
+	0x0002, 0x0000, 0x0001, 0x0002, 0x0003, 0x0002, 0x0001, 0x0001, 0xfffe, 0xfffe, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x26ac, 0x27f8, 0x29e6, 0x28d3, 0x26c6, 0x24b5, 0x245d, 0x264d, 0x297e, 0x2c91, 0x2de6, 0x2ca4, 0x2987, 
+	0x26ac, 0x2a63, 0x3967, 0x3670, 0x352a, 0x3498, 0x345c, 0x344f, 0x347b, 0x350e, 0x3639, 0x385d, 0x3bd7, 0x3eb3, 0x34fe, 0x3063, 
+	0x2cb3, 0x29c8, 0x27c8, 0x2704, 0x2704, 0x26fe, 0x26ef, 0x26d3, 0x26ac, 0x0000, 0x0008, 0x001a, 0x0036, 0x0059, 0x0072, 0x005a, 
+	0x0026, 0x0005, 0xfff9, 0xfff8, 0xfff8, 0xfffb, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0xfffb, 0xfff2, 0xffe4, 0xffd2, 0xffc2, 0xffce, 0xffea, 0xfffc, 0x0004, 0x0006, 0x0005, 0x0003, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x20ce, 0x1e1d, 0x1b1b, 0x1bfd, 0x1dd7, 0x1fb0, 0x20cb, 0x212e, 0x2141, 0x2167, 0x21cd, 
+	0x21ae, 0x21a3, 0x20ce, 0x1990, 0x0075, 0x0071, 0x006f, 0x006c, 0x006b, 0x006b, 0x006c, 0x006e, 0x0075, 0x0075, 0x0079, 0x02c5, 
+	0x11be, 0x1772, 0x1ba5, 0x1eba, 0x20b8, 0x2173, 0x2172, 0x216a, 0x2151, 0x2121, 0x20ce, 0xffff, 0xfffb, 0xfff3, 0xffe7, 0xffd8, 
+	0xffcc, 0xffd3, 0xffe8, 0xfffb, 0x0008, 0x000c, 0x0009, 0x0004, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0x0000, 0x000d, 0x002b, 0x0055, 0x0082, 0x009f, 0x0081, 0x0040, 0x000b, 0xffec, 0xffe2, 0xffe8, 0xfff6, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x121e, 0x0ea9, 0x0af7, 0x0bcd, 0x0da7, 0x0f9f, 0x114e, 0x1291, 0x1304, 
+	0x132a, 0x1381, 0x1373, 0x1375, 0x121e, 0x08b7, 0xff9b, 0xff9d, 0xff9e, 0xffa0, 0xffa1, 0xffa1, 0xffa0, 0xff9e, 0xff99, 0xff9a, 
+	0xff98, 0xfdf5, 0x0345, 0x085f, 0x0ca1, 0x0ffc, 0x1235, 0x1307, 0x1305, 0x12f8, 0x12d6, 0x1294, 0x121e, 0xffff, 0xfffd, 0xfffb, 
+	0xfff5, 0xffec, 0xffe3, 0xffe5, 0xfff1, 0xfffc, 0x0004, 0x0006, 0x0005, 0x0002, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0x0000, 0x0010, 0x0036, 0x006c, 0x00a8, 0x00d0, 0x00a9, 0x0051, 0x000e, 0xffe9, 0xffde, 0xffe5, 0xfff4, 
+	0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1a47, 0x1f9e, 0x239a, 0x2671, 0x2854, 0x296c, 0x29ca, 
+	0x29aa, 0x293f, 0x2871, 0x2718, 0x24e0, 0x211d, 0x1a47, 0x0c23, 0xf599, 0xe1fe, 0xd67d, 0xd034, 0xccf4, 0xcbe6, 0xcc0d, 0xcc80, 
+	0xcd40, 0xce4e, 0xcfb4, 0xd181, 0xd3c8, 0xd6a8, 0xda4f, 0xdefa, 0xe4f8, 0xec93, 0xf5d7, 0x0032, 0x0a68, 0x1347, 0x1a47, 0xd63a, 
+	0xd872, 0xdaca, 0xdcff, 0xded5, 0xe015, 0xe08b, 0xe068, 0xdff3, 0xdf1a, 0xddc9, 0xdbe8, 0xd95f, 0xd63a, 0xd334, 0xd344, 0xd7db, 
+	0xdda9, 0xe224, 0xe4c9, 0xe5ac, 0xe58d, 0xe533, 0xe49d, 0xe3c8, 0xe2b1, 0xe155, 0xdfaf, 0xddc2, 0xdb95, 0xd93c, 0xd6e1, 0xd4c6, 
+	0xd33f, 0xd2a0, 0xd309, 0xd457, 0xd63a, 0xbf8f, 0xba32, 0xb5f4, 0xb2ba, 0xb06d, 0xaf01, 0xae80, 0xaea1, 0xaf14, 0xaff7, 0xb17a, 
+	0xb3f8, 0xb824, 0xbf8f, 0xcd11, 0xe0b3, 0xf007, 0xf720, 0xf9d4, 0xfac2, 0xfaf9, 0xfaf5, 0xfae6, 0xfac7, 0xfa90, 0xfa36, 0xf9a5, 
+	0xf8c5, 0xf771, 0xf574, 0xf284, 0xee44, 0xe856, 0xe09d, 0xd795, 0xce68, 0xc63c, 0xbf8f, 0x1a47, 0x1f9e, 0x239a, 0x2671, 0x2854, 
+	0x296c, 0x29ca, 0x29aa, 0x293f, 0x2871, 0x2718, 0x24e0, 0x211d, 0x1a47, 0x0c23, 0xf599, 0xe1fe, 0xd67d, 0xd034, 0xccf4, 0xcbe6, 
+	0xcc0d, 0xcc80, 0xcd40, 0xce4e, 0xcfb4, 0xd181, 0xd3c7, 0xd6a8, 0xda4f, 0xdefa, 0xe4f8, 0xec93, 0xf5d7, 0x0032, 0x0a68, 0x1347, 
+	0x1a47, 0x29c5, 0x278d, 0x2535, 0x2300, 0x212a, 0x1fea, 0x1f74, 0x1f97, 0x200c, 0x20e5, 0x2236, 0x2417, 0x26a0, 0x29c5, 0x2ccb, 
+	0x2cbb, 0x2824, 0x2256, 0x1ddb, 0x1b36, 0x1a53, 0x1a72, 0x1acc, 0x1b62, 0x1c37, 0x1d4e, 0x1eaa, 0x2050, 0x223d, 0x246a, 0x26c3, 
+	0x291e, 0x2b39, 0x2cc0, 0x2d5f, 0x2cf6, 0x2ba8, 0x29c5, 0x4070, 0x45cd, 0x4a0b, 0x4d45, 0x4f92, 0x50fe, 0x517f, 0x515e, 0x50eb, 
+	0x5008, 0x4e85, 0x4c07, 0x47db, 0x4070, 0x32ee, 0x1f4c, 0x0ff8, 0x08df, 0x062b, 0x053d, 0x0506, 0x050a, 0x0519, 0x0538, 0x056f, 
+	0x05c9, 0x065a, 0x073a, 0x088e, 0x0a8b, 0x0d7b, 0x11bb, 0x17a9, 0x1f62, 0x286a, 0x3197, 0x39c3, 0x4070, };
+
+JointIndex gPolsVoiceSkelGrabAnimJointIndices[7] = {
+	{ 0x0000, 0x0000, 0x0000, },
+	{ 0x0001, 0x0027, 0x004d, },
+	{ 0x0073, 0x0099, 0x00bf, },
+	{ 0x00e5, 0x010b, 0x0131, },
+	{ 0x0157, 0x017d, 0x01a3, },
+	{ 0x01c9, 0x01ef, 0x0215, },
+	{ 0x023b, 0x0261, 0x0287, },
+};
+
+AnimationHeader gPolsVoiceSkelGrabAnim = { { 38 }, gPolsVoiceSkelGrabAnimFrameData, gPolsVoiceSkelGrabAnimJointIndices, 1 };
+
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_grab.h b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_grab.h
new file mode 100644
index 000000000..fd052c05d
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_grab.h
@@ -0,0 +1 @@
+extern AnimationHeader gPolsVoiceSkelGrabAnim;
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_hop.c b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_hop.c
new file mode 100644
index 000000000..62924d7ef
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_hop.c
@@ -0,0 +1,36 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gPolsVoiceSkelHopAnimFrameData[288] = {
+	0x0000, 0xffff, 0x0000, 0x0053, 0x0134, 0x0268, 0x039f, 0x049a, 0x0535, 0x0569, 0x0541, 0x04cb, 0x0409, 0x030d, 0x01f7, 0x00f8, 
+	0x0042, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xd7bc, 0xd180, 0xc477, 0xb9b5, 
+	0xb43e, 0xb0ea, 0xaf29, 0xae78, 0xae59, 0xaf2f, 0xb17d, 0xb4f7, 0xb94f, 0xbe2f, 0xc341, 0xc82f, 0xccb6, 0xd0ae, 0xd3e8, 0xd628, 
+	0xd72f, 0xd774, 0xd79e, 0xd7b3, 0xd7bb, 0xd7bc, 0x26ac, 0x286c, 0x2d2f, 0x3a81, 0x379e, 0x35df, 0x34e7, 0x346e, 0x344f, 0x347b, 
+	0x350e, 0x3639, 0x385d, 0x3bd7, 0x3eb2, 0x34fe, 0x3063, 0x2cb3, 0x29c8, 0x27c8, 0x2704, 0x2704, 0x26fe, 0x26ef, 0x26d3, 0x26ac, 
+	0x20ce, 0x1dee, 0x16c3, 0x0075, 0x0072, 0x0074, 0x006e, 0x006b, 0x006b, 0x006c, 0x006e, 0x0075, 0x0075, 0x0079, 0x02c5, 0x11be, 
+	0x1772, 0x1ba5, 0x1eba, 0x20b8, 0x2173, 0x2172, 0x216a, 0x2151, 0x2121, 0x20ce, 0x121e, 0x0e91, 0x0624, 0xff9b, 0xff9d, 0xff9a, 
+	0xff9f, 0xffa1, 0xffa1, 0xffa0, 0xff9e, 0xff99, 0xff9a, 0xff98, 0xfdf5, 0x0345, 0x085f, 0x0ca1, 0x0ffc, 0x1235, 0x1307, 0x1305, 
+	0x12f8, 0x12d6, 0x1294, 0x121e, 0x1a47, 0x17d6, 0x1064, 0x0398, 0xf3de, 0xe692, 0xde02, 0xd96a, 0xd7ed, 0xd842, 0xd93f, 0xdae6, 
+	0xdd49, 0xe084, 0xe4b8, 0xea00, 0xf05a, 0xf789, 0xff0a, 0x0633, 0x0c76, 0x118c, 0x1569, 0x181d, 0x19bb, 0x1a47, 0xd63a, 0xd585, 
+	0xd3e8, 0xd2a4, 0xd33a, 0xd5cb, 0xd8ed, 0xdb4d, 0xdc33, 0xdbfe, 0xdb66, 0xda79, 0xd943, 0xd7db, 0xd65a, 0xd4e8, 0xd3b1, 0xd2e1, 
+	0xd293, 0xd2c4, 0xd356, 0xd41c, 0xd4e9, 0xd598, 0xd60f, 0xd63a, 0xbf8f, 0xc17b, 0xc783, 0xd234, 0xdf75, 0xea51, 0xf0de, 0xf421, 
+	0xf522, 0xf4e9, 0xf43e, 0xf319, 0xf165, 0xef00, 0xebc6, 0xe793, 0xe261, 0xdc61, 0xd60d, 0xd003, 0xcac4, 0xc690, 0xc36c, 0xc143, 
+	0xbffd, 0xbf8f, 0x1a47, 0x17d6, 0x1064, 0x0398, 0xf3de, 0xe692, 0xde02, 0xd96a, 0xd7ed, 0xd842, 0xd93f, 0xdae6, 0xdd49, 0xe084, 
+	0xe4b8, 0xea00, 0xf05a, 0xf789, 0xff0a, 0x0633, 0x0c76, 0x118c, 0x1569, 0x181d, 0x19bb, 0x1a47, 0x29c5, 0x2a7a, 0x2c17, 0x2d5b, 
+	0x2cc5, 0x2a34, 0x2712, 0x24b2, 0x23cc, 0x2401, 0x2499, 0x2586, 0x26bc, 0x2824, 0x29a5, 0x2b17, 0x2c4e, 0x2d1e, 0x2d6c, 0x2d3b, 
+	0x2ca9, 0x2be3, 0x2b16, 0x2a67, 0x29f0, 0x29c5, 0x4070, 0x3e84, 0x387c, 0x2dcb, 0x208a, 0x15ae, 0x0f21, 0x0bde, 0x0add, 0x0b16, 
+	0x0bc1, 0x0ce6, 0x0e9a, 0x10ff, 0x1439, 0x186c, 0x1d9e, 0x239e, 0x29f2, 0x2ffc, 0x353b, 0x396f, 0x3c93, 0x3ebc, 0x4002, 0x4070, 
+};
+
+JointIndex gPolsVoiceSkelHopAnimJointIndices[7] = {
+	{ 0x0000, 0x0002, 0x0000, },
+	{ 0x001c, 0x0000, 0x0000, },
+	{ 0x0036, 0x0000, 0x0000, },
+	{ 0x0050, 0x0001, 0x0000, },
+	{ 0x006a, 0x0001, 0x0000, },
+	{ 0x0084, 0x009e, 0x00b8, },
+	{ 0x00d2, 0x00ec, 0x0106, },
+};
+
+AnimationHeader gPolsVoiceSkelHopAnim = { { 26 }, gPolsVoiceSkelHopAnimFrameData, gPolsVoiceSkelHopAnimJointIndices, 2 };
+
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_hop.h b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_hop.h
new file mode 100644
index 000000000..c7acf25c5
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_hop.h
@@ -0,0 +1 @@
+extern AnimationHeader gPolsVoiceSkelHopAnim;
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_idle.c b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_idle.c
new file mode 100644
index 000000000..a4c15b92d
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_idle.c
@@ -0,0 +1,37 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gPolsVoiceSkelIdleAnimFrameData[312] = {
+	0x0000, 0xffff, 0xbfff, 0xc01c, 0xc06d, 0xc0ec, 0xc194, 0xc25e, 0xc344, 0xc441, 0xc54d, 0xc663, 0xc77b, 0xc891, 0xc99d, 0xca9a, 
+	0xcb80, 0xcc4a, 0xccf2, 0xcd71, 0xcdc2, 0xcddf, 0xcd8c, 0xccaa, 0xcb58, 0xc9b5, 0xc7e1, 0xc5fd, 0xc429, 0xc286, 0xc134, 0xc052, 
+	0xbfff, 0x3d3b, 0x3d1e, 0x3cca, 0x3c49, 0x3ba6, 0x3aeb, 0x3a1f, 0x3949, 0x386b, 0x3788, 0x36a1, 0x35b5, 0x34c4, 0x33cd, 0x32d5, 
+	0x31ec, 0x3121, 0x3083, 0x3019, 0x2ff4, 0x3029, 0x30bb, 0x31a0, 0x32ce, 0x343a, 0x35da, 0x379f, 0x3972, 0x3b30, 0x3c94, 0x3d28, 
+	0x085b, 0x086f, 0x08a9, 0x0900, 0x096b, 0x09e2, 0x0a5f, 0x0ae1, 0x0b67, 0x0bf3, 0x0c89, 0x0d2e, 0x0de4, 0x0eaf, 0x0f8c, 0x1063, 
+	0x1125, 0x11bf, 0x1227, 0x124c, 0x122b, 0x11ce, 0x1140, 0x1085, 0x0f9f, 0x0e8a, 0x0d46, 0x0bda, 0x0a5b, 0x090a, 0x0873, 0xfdee, 
+	0xfdf2, 0xfe00, 0xfe14, 0xfe31, 0xfe50, 0xfe70, 0xfe8f, 0xfeaf, 0xfed0, 0xfef2, 0xff1a, 0xff4b, 0xff8a, 0xffda, 0x0034, 0x008c, 
+	0x00d5, 0x010a, 0x011f, 0x0124, 0x0135, 0x0135, 0x0119, 0x00d8, 0x006c, 0xffdc, 0xff3a, 0xfe9a, 0xfe22, 0xfdf5, 0xfbf8, 0xfc5d, 
+	0xfd79, 0xff36, 0x017a, 0x0426, 0x0715, 0x0a21, 0x0d21, 0x0ff0, 0x1273, 0x1497, 0x164f, 0x1793, 0x185d, 0x18a4, 0x185e, 0x1797, 
+	0x1656, 0x14a4, 0x1287, 0x100c, 0x0d47, 0x0a51, 0x0750, 0x0469, 0x01c5, 0xff87, 0xfdce, 0xfcb4, 0xfc51, 0xd2a8, 0xd2a4, 0xd29a, 
+	0xd291, 0xd294, 0xd2aa, 0xd2db, 0xd32b, 0xd398, 0xd41e, 0xd4b3, 0xd54a, 0xd5d5, 0xd648, 0xd694, 0xd6b0, 0xd695, 0xd649, 0xd5d8, 
+	0xd54e, 0xd4b8, 0xd424, 0xd39f, 0xd331, 0xd2e0, 0xd2ad, 0xd295, 0xd291, 0xd297, 0xd2a0, 0xd2a4, 0xd929, 0xd8bf, 0xd792, 0xd5bc, 
+	0xd357, 0xd084, 0xcd67, 0xca2c, 0xc6fc, 0xc3fd, 0xc14c, 0xbeff, 0xbd24, 0xbbc4, 0xbae9, 0xba9c, 0xbae8, 0xbbc1, 0xbd1c, 0xbef1, 
+	0xc137, 0xc3de, 0xc6d4, 0xc9f9, 0xcd29, 0xd03c, 0xd307, 0xd566, 0xd738, 0xd862, 0xd8cc, 0xfbf8, 0xfc5d, 0xfd79, 0xff36, 0x017a, 
+	0x0426, 0x0715, 0x0a21, 0x0d21, 0x0ff0, 0x1273, 0x1497, 0x164f, 0x1793, 0x185d, 0x18a4, 0x185e, 0x1797, 0x1656, 0x14a4, 0x1287, 
+	0x100c, 0x0d47, 0x0a51, 0x0750, 0x0469, 0x01c5, 0xff87, 0xfdce, 0xfcb4, 0xfc51, 0x2d57, 0x2d5b, 0x2d65, 0x2d6e, 0x2d6b, 0x2d55, 
+	0x2d24, 0x2cd4, 0x2c67, 0x2be1, 0x2b4c, 0x2ab5, 0x2a2a, 0x29b7, 0x296b, 0x294f, 0x296a, 0x29b6, 0x2a27, 0x2ab1, 0x2b47, 0x2bdb, 
+	0x2c60, 0x2cce, 0x2d1f, 0x2d52, 0x2d6a, 0x2d6e, 0x2d68, 0x2d5f, 0x2d5b, 0x26d6, 0x2740, 0x286d, 0x2a43, 0x2ca8, 0x2f7b, 0x3298, 
+	0x35d3, 0x3903, 0x3c02, 0x3eb3, 0x4100, 0x42db, 0x443b, 0x4516, 0x4563, 0x4517, 0x443e, 0x42e3, 0x410e, 0x3ec8, 0x3c21, 0x392b, 
+	0x3606, 0x32d6, 0x2fc3, 0x2cf8, 0x2a99, 0x28c7, 0x279d, 0x2733, };
+
+JointIndex gPolsVoiceSkelIdleAnimJointIndices[7] = {
+	{ 0x0000, 0x0000, 0x0000, },
+	{ 0x0002, 0x0000, 0x0000, },
+	{ 0x0021, 0x0000, 0x0000, },
+	{ 0x0040, 0x0001, 0x0000, },
+	{ 0x005f, 0x0001, 0x0001, },
+	{ 0x007e, 0x009d, 0x00bc, },
+	{ 0x00db, 0x00fa, 0x0119, },
+};
+
+AnimationHeader gPolsVoiceSkelIdleAnim = { { 31 }, gPolsVoiceSkelIdleAnimFrameData, gPolsVoiceSkelIdleAnimJointIndices, 2 };
+
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_idle.h b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_idle.h
new file mode 100644
index 000000000..a9050aeec
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_idle.h
@@ -0,0 +1 @@
+extern AnimationHeader gPolsVoiceSkelIdleAnim;
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_skel.c b/assets_hm_pack/objects/object_pols_voice/pols_voice_skel.c
new file mode 100644
index 000000000..32f7f77bb
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_skel.c
@@ -0,0 +1,776 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPolsVoiceSkel_PolsVoice_Fur_00_ci8[] = {
+	0x0000010203040503, 0x0606070809090a04, 0x0b0c0d0e0f0d1011, 0x1206021314140803, 0x1516170009180913, 0x19061a131b09131c, 0x1d13051e1f092009, 0x0d1a131421202223, 
+	0x141b0024251b1b14, 0x0214092625142216, 0x1303132703031113, 0x141b28292a032b2c, 0x1314132d21221113, 0x142e291a042f1b2f, 0x14092c06212c1030, 0x3132030033060303, 
+	0x3435223635373038, 0x341d202e393a3b3c, 0x313d203b3e373f31, 0x300f0f403a303041, 0x3c420f3b31434444, 0x454647481d3b494a, 0x4b3944350f100920, 0x494c4d273a444e4f, 
+	0x354a3a4709421350, 0x3d514b5243205354, 0x0f3f0f0911555056, 0x094513490f1a1c02, 0x57472958152f590f, 0x205a5b3a4429022f, 0x2509255c5d181a0f, 0x5e255f4e4347201e, 
+	0x001a051a1d60061b, 0x002d61410f280a00, 0x0b05620247191011, 0x12022d0836580803, 0x1506630009180913, 0x190611102920131c, 0x361d641e6509200f, 0x661a131413202d02, 
+	0x31351a1036081035, 0x210f356768681d27, 0x694b696a5a4b5a3d, 0x4735313b686b6c6a, 0x36473a363a6d6d6e, 0x3d353547216d3d6f, 0x100f1315201d473c, 0x4436095227700936, 
+	0x3d137124573d5743, 0x20721d737420493d, 0x092f04214710573d, 0x09752456253a0858, 0x1d33132068502420, 0x106376252f432913, 0x09183a14291c2556, 0x200c1d7129472677, 
+	0x095020131a0c7879, 0x14141300201d135b, 0x130f1327067a5b1a, 0x032e2f292922427b, 0x2113222c05635b29, 0x1a03041d0f132c7c, 0x2725042f067d2320, 0x1c000420083d2064, 
+	
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Fur_00_pal_rgba16[] = {
+	0xcd8fee99d58fbccb, 0xddd1de13d5d1dd91, 0x9b87a409a3c7cdd3, 0xde55eed7d5cf9347, 0x9bc9bd0de653b48b, 0xac49b4cdde11ee97, 0xc50fee95c50db489, 0xc4cdac4bc551ac89, 
+	0xa3c9bc8bcd4fd591, 0xac8bbccdabc9c54d, 0x9bc7ac09cd0db4cb, 0xc54fcd4db449cd91, 0x62056a45bc8dde53, 0x59838307938959c5, 0x4943b48d8b077245, 0x7ac5938751836a05, 
+	0xa3078285bd0f82c7, 0x7a8572859c0b8b47, 0xcccb82c593077ac7, 0x940b6a858ac7a389, 0xac0b6245a44ba387, 0xb3c9c5d3b44b9b89, 0x9c09b40b8347cd0f, 0xac8db4cfb409d54f, 
+	0xd551d50fe693e695, 0xddd3a449eed59b47, 0x93497b0783497287, 0x72c78b8993c99c4b, 0x93cbde15a44d9bcb, 0xa40bcdcfb50dbc4d, 0xcd51c48def1bbd51, 0xc593e61300000000
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Tooth_00_ci8[] = {
+	0x0001020202010101, 0x0101010101000000, 0x0102030404040303, 0x0305030303020100, 0x0204060708080808, 0x08090909060a0302, 0x0407080b0c0d0e0f, 0x0f0f0e0d0b10110a, 
+	0x090b0d1213141515, 0x15151516130f0c10, 0x0b0f13151718191a, 0x1a1a19181715130d, 0x121417191b1c1d1d, 0x1e1d1d1c1b191714, 0x1f201a211e222324, 0x252423221e1c1a20, 
+	0x201a1d2224262728, 0x2928272624221d1a, 0x1a1d2a2b282c2d2d, 0x2e2d2d2c282b221d, 0x1c222b282f303132, 0x323231302f282b22, 0x3324282f30323435, 0x36353437302f2825, 
+	0x22262c3032353839, 0x3939383532302c26, 0x23272d3134383a3b, 0x3c3b3a3834312d27, 0x25282d3235393b3d, 0x3e3d3f3935322d28, 0x2529403741423c3e, 0x433e3c3936374029, 
+	
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Tooth_00_pal_rgba16[] = {
+	0xfffffffdfffbffb9, 0xffb7f7b9f775f773, 0xef31ef33f777e6ef, 0xe6addeadde6dde6b, 0xeef1ef73d66bd629, 0xce29c5e7cde9c5a5, 0xbd65b563b523ad23, 0xace1a49f9c9fcde7, 
+	0xbda5a4e1945d941b, 0x8c1b8bdb83997b97, 0x7b577b55945b8bd9, 0x73156ad362d16b13, 0x62915a4f524f9c9d, 0x49cd49cb41cb520f, 0x4189394931072905, 0x28c520c520832907, 
+	0x62d3418b31491843, 
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Nose_00_ci8[] = {
+	0x0001020304050607, 0x08090a0b0c0d0e0f, 0x1002020311121314, 0x1516161718191a1b, 0x1c1d1e1f20212223, 0x240625261904011d, 0x0e272829192a2b23, 0x2c2d2e2f28041e0f, 
+	0x0e30313233343536, 0x37380c2028391e3a, 0x0e1a0e01293b153c, 0x1e3d3e1101010110, 0x322704013f064015, 0x1e3941422d10310f, 0x1920434445464735, 0x4849384a4b4c4d01, 
+	0x483b15354e474f50, 0x511e014a52532731, 0x54080855564f5758, 0x463a5911525a3200, 0x215b5c5d5e575f60, 0x6162104a523e5363, 0x6416655d66605f67, 0x682538696a3e3845, 
+	0x136b6c6d6e6f6870, 0x2f52717271737445, 0x1c74544e35757677, 0x3e787179727a4b06, 0x7b7b747c7d7a7e78, 0x79797171717f770c, 0x423e3e7271727980, 0x8179798080808272, 
+	
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Nose_00_pal_rgba16[] = {
+	0xc50db48bcd4fb489, 0xa3c9c48dcd93c513, 0xde1bd61bc5159b8d, 0x9c0da3cb9bc9cd8f, 0xc54f82c7ddd3ac4f, 0xc597de19cd97bcd1, 0xac4dac4b9b87bc8b, 0xac8dbccbcd4db449, 
+	0x9b89bd13b4d3cddb, 0xde17cdd7bd119387, 0xb44bb48dac8fbd15, 0xe657b4cdc553b48f, 0x9347ac49a409b4cf, 0xbccfcd95d619d5d1, 0x9389ac09de11c511, 0xde59ac8b7287b44d, 
+	0xde1d7a877ac7bccd, 0xc551bc8fd5d5d5dd, 0xac0babc98309a44d, 0xbd51b4cbc555d621, 0xcd57c50f7b09a40b, 0xb4d1cd99c557de65, 0xde1fc50b8307de9f, 0xd5dbcd9dc55de6eb, 
+	0xde67d61de699c4cd, 0xb491bd19cde1e6ab, 0xd5df7ac96a45b451, 0xb4d5c59bcd9bde5f, 0xc51962056a477b07, 0x9bcbd5d7a3cd8b49, 0x61c559c593cb9349, 0x938b93cd72477285, 
+	0x5183598559830000
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Eye_00_ci8[] = {
+	0x0001020304020506, 0x060708090a030b0b, 0x0c0d0e0f10111213, 0x1313141516171819, 0x1a1b1c1d111e1f20, 0x2122232425262627, 0x192829112a2b2c2d, 0x2e2f2f3031183233, 
+	0x340035363738393a, 0x3b3c3d3e3f064041, 0x0d42434445464748, 0x494a4a4b061c4c4d, 0x4e4f505152535455, 0x5657585925095a31, 0x5b4f5c5d5e5f604a, 0x6162636465013166, 
+	0x6742682c665f696a, 0x6b6c6d6e6f171c70, 0x7172142328737475, 0x767778797a7b7c71, 0x7d03317e7f708081, 0x828384858687880b, 0x89038a7101288b8c, 0x8d8e8f909192935a, 
+	0x0f94957096011c4b, 0x8c9798999a9b9c31, 0x1a0d09050f07050d, 0x9d809e9fa0a1a2a3, 0xa434a4a5a634a61b, 0xa7a8a95d9baaaba5, 0x0fac170f17adadae, 0x1b0d0dac04ad1baf, 
+	
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Eye_00_pal_rgba16[] = {
+	0xac49a409c54fd5d1, 0xbc8b9bc97a859b87, 0xa3c7c50dde53bccb, 0x59838307cd4f9389, 0x8b058ac382836a03, 0x6a058a87b48b8b07, 0x72457ac56a459387, 0xa3c98ac559438acd, 
+	0xc55bcd99d5d9c491, 0xa2c979c562058285, 0xbd0f9b475945c519, 0xcd95c50fbd11cd93, 0xe611d58f82c59307, 0x7ac792c54903c517, 0xd5d7d5917acb4905, 0x510559896a4782c7, 
+	0x8ac7a3899b456203, 0x934fde1bde136a07, 0x1001080310036945, 0xa387b3c993479305, 0x5985cdd9e6559c0d, 0x2083104330053047, 0x08011803c4cd9b89, 0x5185d5dbe6516207, 
+	0x204560cd5a136a55, 0x00013883cd91bccd, 0x514328454087b3e1, 0xf6b7eeb538495087, 0xc551cd8fac077ac9, 0x30039045ed2bf7bd, 0xe6b78b1b58c9ac4d, 0xbcd1cdd3ab4bbd0d, 
+	0x4843a003c10bf35f, 0xeadf78cf48c7cd97, 0xd597b4cde6957205, 0x8001a043c087c88d, 0x804758c5ddd9e65b, 0xac4bddd3a4499803, 0xa84388018a07e65d, 0xe69b7185380150c3, 
+	0xdddbee9fcd53c54d, 0x7b0783498347c555, 0xcddbc599bd1572c7, 0x8b478b8993c99c4b, 
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Ear_00_ci8[] = {
+	0x0000010203040503, 0x0606070809090a04, 0x0b0c0d0e0f101112, 0x1314151616161703, 0x140618191a1b0f16, 0x1c1d1e1f20202122, 0x2323242526272829, 0x2a2b2c2d2e2f1e30, 
+	0x3131251632333435, 0x363738393a2e203b, 0x3c311a212b3d3e3e, 0x3f3f3e4041424344, 0x3c0845462d374748, 0x484749404a4b4c13, 0x034d4e2a4f383f3f, 0x3e3a415051525303, 
+	0x545556434f3e3e49, 0x3a57505158595a5b, 0x3c5c5d5e3a493941, 0x5f50585860616263, 0x0364656667686950, 0x5051586a6b6c216d, 0x3c556e6f42707172, 0x5273747576776578, 
+	0x5b79177a7b76617c, 0x7d757c7e7721797f, 0x0317808182838484, 0x8586858765888910, 0x8a8055558b8c8d8e, 0x8f9091457a161b10, 0x9293041306943095, 0x2200049508119505, 
+	
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Ear_00_pal_rgba16[] = {
+	0xcd8fee99d58fbccb, 0xddd1de13d5d1dd91, 0x9b87a409a3c7cdd3, 0xde55ee97d5cf8b47, 0xe6559387ac8bcd91, 0xb4cdb48d93898b07, 0xe695cd4f9bc9ac8d, 0xac8f93cb83097287, 
+	0x7a878b49c4cdac4b, 0xd5d3bd0f93c98307, 0x72856a457ac96205, 0x59c55185598561c5, 0xd591ac4983496245, 0x51c5494351454103, 0x40c349035103de11, 0xb48b498538c33083, 
+	0x5105590569857247, 0xc54f93497ac73883, 0x288348c371877a07, 0x7a479347938b5143, 0x798781c7824982c9, 0xb449ac4da4516105, 0x81c98a8b7a89b489, 0xb4d19bcd6a056945, 
+	0x930db453938dcd4d, 0xb5138b0969c55943, 0x61457145ab91d599, 0xac11d54f7a457205, 0x71c582078209a34f, 0xcd15e65bb4938289, 0xcd0f9b8b82c79b8d, 0xcd57d597a3cfd551, 
+	0x9b899bcbac0fbcd5, 0xabcfa3cd9b4b9309, 0xa40da44dbc8bbc8f, 0xc511b40da34bac0d, 0xabcbb48fc54dbccd, 0xe613a3c900000000
+};
+
+u64 gPolsVoiceSkel_PolsVoice_Whisker_00_ia8[] = {
+	0xd0d0d0e0e0e0e0e0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0e0e0e0, 0xe0e0e0e0e0e0e0e0, 0xd0d0d0e0e0e0e0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0e0e0e0, 0xe0e0e0e0e0e0e0e0, 
+	0xd0d0d0d0e0e0e0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0e0e0e0, 0xe0e0e0e0e0e0e0e0, 0xd0d0d0d0d0d0e0e4, 0xe8f7f3f0f0f0f0f0, 0xf0f0f0f0f0e0e0e0, 0xe0e0e0e0e0e0e0e0, 
+	0xd0d0d0d0d0d0d0d0, 0xc0b4dafef9f2f0f0, 0xf0f0f0f0f0f0e0e0, 0xe0e0e0e0e0e0e0e0, 0xd0d0d0d0d0d0d0c0, 0xb0907198cdeffcf5, 0xf0f0f0f0f0f0e0e0, 0xe0e0e0e0e0e0e0e0, 
+	0xd0d0d0d0d0d0c0c0, 0xb0a08070307bbfef, 0xfcf3f0f0f0f0e0e0, 0xe0e0e0e0e0e0e0e0, 0xd0d0d0d0d0c0c0c0, 0xb0a090706050346d, 0xbfeef9f0f0f0e0e0, 0xe0e0e0e0e0e0e0e0, 
+	0xd0d0d0d0d0d0c0c0, 0xb0a0908070604011, 0x3b8fdffcf1f0e0e0, 0xe0e0e0e0e0e0e0e0, 0xd0d0d0d0d0d0c0c0, 0xc0b0a09080706040, 0x30255fbfedf2e0e0, 0xe0e0e0e0e0e0e0e0, 
+	0xd0d0d0d0d0d0d0d0, 0xc0c0b0b0a0908060, 0x5030123e7fddd0e0, 0xe0e0e0e0e0e0e0e0, 0xd0d0d0d0d0d0d0d0, 0xd0d0c0c0b0b0a090, 0x705030122e6fcbd0, 0xe0e0e0e0e0e0e0e0, 
+	0xd0d0d0d0d0e0e0e0, 0xe0e0e0d0d0d0c0b0, 0xa0806030111e7fe5, 0xe0e0e0e0e0e0e0e0, 0xc0c0c0d0d0f2f8f9, 0xf9f9faf8f7f5f3f1, 0xd0b0906030123eae, 0xe4f0e0e0e0e0e0e0, 
+	0xc0c0c0c0c0b09344, 0x36496c8ebfcfeeec, 0xf9f4c0906040256f, 0xddf3f0e0e0e0e0e0, 0xc0c0c0c0b0a09070, 0x50504010243b4f6f, 0x8edcebd29070504b, 0xbef8f0e0e0e0e0e0, 
+	0xc0c0c0b0b0a09080, 0x7070605040403137, 0x3f5f8ecbc5906032, 0x6fedf0e0e0e0e0e0, 0xc0c0c0b0b0b0a090, 0x9080807070606050, 0x40262f6fcdb49060, 0x49bff4f0e0e0e0e0, 
+	0xc0c0c0c0b0b0b0a0, 0xa0a0a09090909080, 0x706040496fcec890, 0x708dfaf0e0e0e0e0, 0xc0c0c0c0c0c0c0b0, 0xb0b0b0b0b0c0c0b0, 0xb0908070627cbdc9, 0x9045edf1e0e0e0e0, 
+	0xc0c0c0c0c0c0c0d0, 0xd0d0d0d0e0f1f1f1, 0xf0d0c0b0a0806bdf, 0xcd61eef6e0e0d0d0, 0xc0c0c0c0c0d0d0d0, 0xe0f0f4f9fcfdfdfc, 0xfbf9f7f6f48363d8, 0xfe9fadfbe0d0d0d0, 
+	0xc0c0c0c0c0d0e0e0, 0xf2fbfebd5d4d4d3c, 0x2b3b3a3a6b9a7a5b, 0xccfbede7d0d0c0c0, 0xb0b0c0c0c0d0f1f8, 0xdc7c482513114060, 0x7080908071d3facd, 0xbc9b9ab2b0c0c0c0, 
+	0xb0b0b0b0c0d2a955, 0x3150504040507090, 0xc0f0f3f9fdbd6e5b, 0x5663a1a0b0b0b0b0, 0xb0b0b0b0b1929070, 0x606060607080a0c0, 0xf0fbfe7f4d235050, 0x60709090a0a0a0a0, 
+	0xb0b0b0a0a0909080, 0x7070808090a0c0d0, 0xf9cf4e2551405060, 0x607080909090a0a0, 0xb0a0a0a0a0909090, 0x809090a0b0c0d0f9, 0xad33404040505060, 0x6070808090909090, 
+	0xa0a0a0a0a0a09090, 0x9090a0b0c0f0f379, 0x3240404050505060, 0x6070708080909090, 0xa0a0a0a0a0a09090, 0x90a0a0b0c0f08570, 0x5050505050506060, 0x6070708080809090, 
+	0xa0a0a0a0a0a0a0a0, 0xa0a0a0b0b0c09080, 0x6060505050506060, 0x6070708080808080, 0xa0a0a0a0a0a0a0a0, 0xa0a0a0b0b0b09080, 0x7060505050506060, 0x6070708080808080, 
+	
+};
+
+Vtx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_0[18] = {
+	{{ {-765, 416, -1824}, 0, {-1108, 1024}, {209, 232, 140, 255} }},
+	{{ {-592, 97, -1427}, 0, {-1108, 1128}, {168, 164, 251, 255} }},
+	{{ {-1430, 40, -591}, 0, {-794, 1126}, {1, 171, 162, 255} }},
+	{{ {-1848, 342, -744}, 0, {-796, 1024}, {142, 227, 207, 255} }},
+	{{ {-1430, -40, 591}, 0, {-445, 1126}, {175, 167, 216, 255} }},
+	{{ {-1848, 238, 783}, 0, {-448, 1024}, {142, 221, 45, 255} }},
+	{{ {-592, -97, 1427}, 0, {-43, 1127}, {34, 172, 167, 255} }},
+	{{ {-765, 165, 1863}, 0, {-46, 1024}, {208, 212, 109, 255} }},
+	{{ {592, -97, 1427}, 0, {401, 1128}, {222, 159, 74, 255} }},
+	{{ {765, 165, 1863}, 0, {404, 1024}, {47, 210, 109, 255} }},
+	{{ {1430, -40, 591}, 0, {803, 1127}, {173, 169, 216, 255} }},
+	{{ {1848, 238, 783}, 0, {806, 1024}, {114, 219, 42, 255} }},
+	{{ {1430, 40, -591}, 0, {1156, 1126}, {81, 162, 28, 255} }},
+	{{ {1848, 342, -744}, 0, {1158, 1024}, {114, 227, 207, 255} }},
+	{{ {592, 97, -1427}, 0, {1479, 1126}, {222, 161, 77, 255} }},
+	{{ {765, 416, -1824}, 0, {1468, 1024}, {47, 232, 140, 255} }},
+	{{ {-592, 97, -1427}, 0, {1964, 1128}, {168, 164, 251, 255} }},
+	{{ {-765, 416, -1824}, 0, {1964, 1024}, {209, 232, 140, 255} }},
+};
+
+Gfx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_0 + 0, 18, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(3, 2, 4, 0, 3, 4, 5, 0),
+	gsSP2Triangles(5, 4, 6, 0, 5, 6, 7, 0),
+	gsSP2Triangles(7, 6, 8, 0, 7, 8, 9, 0),
+	gsSP2Triangles(9, 8, 10, 0, 9, 10, 11, 0),
+	gsSP2Triangles(11, 10, 12, 0, 11, 12, 13, 0),
+	gsSP2Triangles(13, 12, 14, 0, 13, 14, 15, 0),
+	gsSP2Triangles(15, 14, 16, 0, 15, 16, 17, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_1[96] = {
+	{{ {0, 149, -1374}, 0, {240, 336}, {178, 159, 232, 255} }},
+	{{ {0, -31, -635}, 0, {240, -176}, {178, 159, 232, 255} }},
+	{{ {-566, 594, -1329}, 0, {528, 624}, {178, 159, 232, 255} }},
+	{{ {0, -31, -635}, 0, {240, -176}, {157, 254, 80, 255} }},
+	{{ {0, 1018, -620}, 0, {240, 336}, {157, 254, 80, 255} }},
+	{{ {-566, 594, -1329}, 0, {528, 624}, {157, 254, 80, 255} }},
+	{{ {-977, 352, -955}, 0, {240, 336}, {26, 140, 211, 255} }},
+	{{ {-566, 594, -1329}, 0, {-48, 624}, {26, 140, 211, 255} }},
+	{{ {-447, 266, -430}, 0, {240, -176}, {26, 140, 211, 255} }},
+	{{ {-447, 266, -430}, 0, {240, -176}, {126, 10, 244, 255} }},
+	{{ {-566, 594, -1329}, 0, {-48, 624}, {126, 10, 244, 255} }},
+	{{ {-486, 730, -438}, 0, {240, 336}, {126, 10, 244, 255} }},
+	{{ {-1381, 55, 4}, 0, {240, 336}, {239, 163, 171, 255} }},
+	{{ {-1367, 539, -531}, 0, {-48, 624}, {239, 163, 171, 255} }},
+	{{ {-632, -74, -5}, 0, {240, -176}, {239, 163, 171, 255} }},
+	{{ {-632, -74, -5}, 0, {240, -176}, {92, 45, 180, 255} }},
+	{{ {-1367, 539, -531}, 0, {-48, 624}, {92, 45, 180, 255} }},
+	{{ {-1064, 918, 62}, 0, {240, 336}, {92, 45, 180, 255} }},
+	{{ {-977, 352, -955}, 0, {240, 336}, {219, 136, 18, 255} }},
+	{{ {-447, 266, -430}, 0, {240, -176}, {219, 136, 18, 255} }},
+	{{ {-1367, 539, -531}, 0, {528, 624}, {219, 136, 18, 255} }},
+	{{ {-447, 266, -430}, 0, {240, -176}, {243, 0, 126, 255} }},
+	{{ {-486, 730, -438}, 0, {240, 336}, {243, 0, 126, 255} }},
+	{{ {-1367, 539, -531}, 0, {528, 624}, {243, 0, 126, 255} }},
+	{{ {1381, 55, 4}, 0, {240, 336}, {17, 163, 171, 255} }},
+	{{ {632, -74, -5}, 0, {240, -176}, {17, 163, 171, 255} }},
+	{{ {1367, 539, -531}, 0, {528, 624}, {17, 163, 171, 255} }},
+	{{ {632, -74, -5}, 0, {240, -176}, {164, 45, 180, 255} }},
+	{{ {1064, 918, 62}, 0, {240, 336}, {164, 45, 180, 255} }},
+	{{ {1367, 539, -531}, 0, {528, 624}, {164, 45, 180, 255} }},
+	{{ {977, 352, -955}, 0, {240, 336}, {37, 136, 18, 255} }},
+	{{ {1367, 539, -531}, 0, {-48, 624}, {37, 136, 18, 255} }},
+	{{ {447, 266, -430}, 0, {240, -176}, {37, 136, 18, 255} }},
+	{{ {447, 266, -430}, 0, {240, -176}, {247, 69, 106, 255} }},
+	{{ {1367, 539, -531}, 0, {-48, 624}, {247, 69, 106, 255} }},
+	{{ {753, 727, -705}, 0, {240, 336}, {247, 69, 106, 255} }},
+	{{ {0, 149, -1374}, 0, {240, 336}, {78, 159, 232, 255} }},
+	{{ {566, 594, -1329}, 0, {-48, 624}, {78, 159, 232, 255} }},
+	{{ {0, -31, -635}, 0, {240, -176}, {78, 159, 232, 255} }},
+	{{ {0, -31, -635}, 0, {240, -176}, {99, 254, 80, 255} }},
+	{{ {566, 594, -1329}, 0, {-48, 624}, {99, 254, 80, 255} }},
+	{{ {0, 1018, -620}, 0, {240, 336}, {99, 254, 80, 255} }},
+	{{ {977, 352, -955}, 0, {240, 336}, {230, 140, 211, 255} }},
+	{{ {447, 266, -430}, 0, {240, -176}, {230, 140, 211, 255} }},
+	{{ {566, 594, -1329}, 0, {528, 624}, {230, 140, 211, 255} }},
+	{{ {447, 266, -430}, 0, {240, -176}, {155, 75, 13, 255} }},
+	{{ {753, 727, -705}, 0, {240, 336}, {155, 75, 13, 255} }},
+	{{ {566, 594, -1329}, 0, {528, 624}, {155, 75, 13, 255} }},
+	{{ {1381, 55, 4}, 0, {240, 336}, {17, 152, 71, 255} }},
+	{{ {1367, 462, 599}, 0, {-48, 624}, {17, 152, 71, 255} }},
+	{{ {632, -74, -5}, 0, {240, -176}, {17, 152, 71, 255} }},
+	{{ {632, -74, -5}, 0, {240, -176}, {164, 34, 81, 255} }},
+	{{ {1367, 462, 599}, 0, {-48, 624}, {164, 34, 81, 255} }},
+	{{ {1064, 918, 62}, 0, {240, 336}, {164, 34, 81, 255} }},
+	{{ {977, 220, 994}, 0, {240, 336}, {37, 139, 222, 255} }},
+	{{ {447, 205, 462}, 0, {240, -176}, {37, 139, 222, 255} }},
+	{{ {1367, 462, 599}, 0, {528, 624}, {37, 139, 222, 255} }},
+	{{ {447, 205, 462}, 0, {240, -176}, {13, 18, 131, 255} }},
+	{{ {486, 664, 532}, 0, {240, 336}, {13, 18, 131, 255} }},
+	{{ {1367, 462, 599}, 0, {528, 624}, {13, 18, 131, 255} }},
+	{{ {0, -38, 1382}, 0, {240, 336}, {78, 156, 10, 255} }},
+	{{ {0, -117, 625}, 0, {240, -176}, {78, 156, 10, 255} }},
+	{{ {566, 408, 1398}, 0, {528, 624}, {78, 156, 10, 255} }},
+	{{ {0, -117, 625}, 0, {240, -176}, {99, 9, 177, 255} }},
+	{{ {0, 924, 752}, 0, {240, 336}, {99, 9, 177, 255} }},
+	{{ {566, 408, 1398}, 0, {528, 624}, {99, 9, 177, 255} }},
+	{{ {977, 220, 994}, 0, {240, 336}, {230, 135, 30, 255} }},
+	{{ {566, 408, 1398}, 0, {-48, 624}, {230, 135, 30, 255} }},
+	{{ {447, 205, 462}, 0, {240, -176}, {230, 135, 30, 255} }},
+	{{ {447, 205, 462}, 0, {240, -176}, {130, 8, 14, 255} }},
+	{{ {566, 408, 1398}, 0, {-48, 624}, {130, 8, 14, 255} }},
+	{{ {486, 664, 532}, 0, {240, 336}, {130, 8, 14, 255} }},
+	{{ {0, -38, 1382}, 0, {240, 336}, {178, 156, 10, 255} }},
+	{{ {-566, 408, 1398}, 0, {-48, 624}, {178, 156, 10, 255} }},
+	{{ {0, -117, 625}, 0, {240, -176}, {178, 156, 10, 255} }},
+	{{ {0, -117, 625}, 0, {240, -176}, {157, 9, 177, 255} }},
+	{{ {-566, 408, 1398}, 0, {-48, 624}, {157, 9, 177, 255} }},
+	{{ {0, 924, 752}, 0, {240, 336}, {157, 9, 177, 255} }},
+	{{ {-977, 220, 994}, 0, {240, 336}, {26, 135, 30, 255} }},
+	{{ {-447, 205, 462}, 0, {240, -176}, {26, 135, 30, 255} }},
+	{{ {-566, 408, 1398}, 0, {528, 624}, {26, 135, 30, 255} }},
+	{{ {-447, 205, 462}, 0, {240, -176}, {101, 77, 252, 255} }},
+	{{ {-753, 625, 797}, 0, {240, 336}, {101, 77, 252, 255} }},
+	{{ {-566, 408, 1398}, 0, {528, 624}, {101, 77, 252, 255} }},
+	{{ {-1381, 55, 4}, 0, {240, 336}, {239, 152, 71, 255} }},
+	{{ {-632, -74, -5}, 0, {240, -176}, {239, 152, 71, 255} }},
+	{{ {-1367, 462, 599}, 0, {528, 624}, {239, 152, 71, 255} }},
+	{{ {-632, -74, -5}, 0, {240, -176}, {92, 34, 81, 255} }},
+	{{ {-1064, 918, 62}, 0, {240, 336}, {92, 34, 81, 255} }},
+	{{ {-1367, 462, 599}, 0, {528, 624}, {92, 34, 81, 255} }},
+	{{ {-977, 220, 994}, 0, {240, 336}, {219, 139, 222, 255} }},
+	{{ {-1367, 462, 599}, 0, {-48, 624}, {219, 139, 222, 255} }},
+	{{ {-447, 205, 462}, 0, {240, -176}, {219, 139, 222, 255} }},
+	{{ {-447, 205, 462}, 0, {240, -176}, {9, 83, 160, 255} }},
+	{{ {-1367, 462, 599}, 0, {-48, 624}, {9, 83, 160, 255} }},
+	{{ {-753, 625, 797}, 0, {240, 336}, {9, 83, 160, 255} }},
+};
+
+Gfx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_1 + 0, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
+	gsSPVertex(gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_1 + 30, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
+	gsSPVertex(gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_1 + 60, 30, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
+	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
+	gsSPVertex(gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_1 + 90, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_vtx_0[21] = {
+	{{ {-574, -176, -1275}, 0, {-1108, 644}, {208, 18, 140, 255} }},
+	{{ {-1386, -65, -470}, 0, {-818, 644}, {143, 29, 206, 255} }},
+	{{ {-1386, 92, 667}, 0, {-482, 644}, {141, 39, 36, 255} }},
+	{{ {-738, 280, 1438}, 0, {-124, 628}, {164, 15, 86, 255} }},
+	{{ {0, 223, 1622}, 0, {182, 644}, {0, 208, 118, 255} }},
+	{{ {738, 280, 1438}, 0, {482, 628}, {91, 18, 87, 255} }},
+	{{ {1386, 92, 667}, 0, {844, 644}, {116, 41, 33, 255} }},
+	{{ {1386, -65, -470}, 0, {1180, 644}, {113, 30, 207, 255} }},
+	{{ {574, -176, -1275}, 0, {1468, 644}, {48, 18, 140, 255} }},
+	{{ {-574, -176, -1275}, 0, {1964, 644}, {208, 18, 140, 255} }},
+	{{ {738, 826, 1307}, 0, {492, 512}, {95, 45, 71, 255} }},
+	{{ {-738, 826, 1307}, 0, {-134, 512}, {161, 42, 73, 255} }},
+	{{ {-1848, 342, -744}, 0, {-796, 1024}, {142, 227, 207, 255} }},
+	{{ {-765, 416, -1824}, 0, {-1108, 1024}, {209, 232, 140, 255} }},
+	{{ {-1848, 238, 783}, 0, {-448, 1024}, {142, 221, 45, 255} }},
+	{{ {-765, 165, 1863}, 0, {-46, 1024}, {208, 212, 109, 255} }},
+	{{ {765, 165, 1863}, 0, {404, 1024}, {47, 210, 109, 255} }},
+	{{ {1848, 238, 783}, 0, {806, 1024}, {114, 219, 42, 255} }},
+	{{ {1848, 342, -744}, 0, {1158, 1024}, {114, 227, 207, 255} }},
+	{{ {765, 416, -1824}, 0, {1468, 1024}, {47, 232, 140, 255} }},
+	{{ {-765, 416, -1824}, 0, {1964, 1024}, {209, 232, 140, 255} }},
+};
+
+Gfx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_vtx_0 + 0, 12, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_vtx_0 + 12, 9, 12),
+	gsSP2Triangles(12, 0, 13, 0, 12, 1, 0, 0),
+	gsSP2Triangles(12, 2, 1, 0, 12, 14, 2, 0),
+	gsSP2Triangles(15, 2, 14, 0, 15, 3, 2, 0),
+	gsSP2Triangles(15, 4, 3, 0, 4, 15, 16, 0),
+	gsSP2Triangles(4, 16, 5, 0, 17, 5, 16, 0),
+	gsSP2Triangles(17, 6, 5, 0, 17, 7, 6, 0),
+	gsSP2Triangles(17, 18, 7, 0, 19, 7, 18, 0),
+	gsSP2Triangles(19, 8, 7, 0, 19, 9, 8, 0),
+	gsSP2Triangles(19, 20, 9, 0, 10, 5, 6, 0),
+	gsSP1Triangle(2, 3, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_vtx_1[11] = {
+	{{ {738, 280, 1438}, 0, {486, 476}, {91, 18, 87, 255} }},
+	{{ {373, 496, 2244}, 0, {318, 444}, {58, 211, 104, 255} }},
+	{{ {0, 223, 1622}, 0, {246, 498}, {0, 208, 118, 255} }},
+	{{ {365, 886, 2131}, 0, {318, 354}, {65, 62, 90, 255} }},
+	{{ {738, 826, 1307}, 0, {496, 294}, {95, 45, 71, 255} }},
+	{{ {449, 983, 1352}, 0, {408, 244}, {85, 76, 56, 255} }},
+	{{ {-357, 887, 2132}, 0, {174, 354}, {192, 62, 90, 255} }},
+	{{ {-370, 496, 2240}, 0, {174, 444}, {198, 211, 104, 255} }},
+	{{ {-738, 280, 1438}, 0, {4, 476}, {164, 15, 86, 255} }},
+	{{ {-738, 826, 1307}, 0, {-6, 294}, {161, 42, 73, 255} }},
+	{{ {-447, 983, 1351}, 0, {82, 244}, {171, 76, 56, 255} }},
+};
+
+Gfx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_tri_1[] = {
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_vtx_1 + 0, 11, 0),
+	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
+	gsSP2Triangles(3, 0, 4, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 1, 3, 0, 6, 7, 1, 0),
+	gsSP2Triangles(6, 8, 7, 0, 9, 8, 6, 0),
+	gsSP2Triangles(10, 9, 6, 0, 2, 7, 8, 0),
+	gsSP1Triangle(2, 1, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_0[58] = {
+	{{ {458, -108, -1251}, 0, {1496, 429}, {68, 18, 150, 255} }},
+	{{ {-458, -108, -1251}, 0, {1889, 429}, {190, 26, 151, 255} }},
+	{{ {0, 945, -1170}, 0, {1816, 212}, {0, 43, 137, 255} }},
+	{{ {-458, -108, -1251}, 0, {1889, 434}, {190, 26, 151, 255} }},
+	{{ {458, -108, -1251}, 0, {1496, 434}, {68, 18, 150, 255} }},
+	{{ {458, -108, -1251}, 0, {1517, 432}, {68, 18, 150, 255} }},
+	{{ {-458, -108, -1251}, 0, {-1196, 434}, {190, 26, 151, 255} }},
+	{{ {-1213, -53, -607}, 0, {-846, 428}, {139, 16, 208, 255} }},
+	{{ {-458, -108, -1251}, 0, {-1187, 436}, {190, 26, 151, 255} }},
+	{{ {-458, -108, -1251}, 0, {1892, 434}, {190, 26, 151, 255} }},
+	{{ {458, -108, -1251}, 0, {1520, 434}, {68, 18, 150, 255} }},
+	{{ {1039, 986, -688}, 0, {1236, 212}, {91, 27, 171, 255} }},
+	{{ {0, 1591, -864}, 0, {1816, 84}, {0, 87, 163, 255} }},
+	{{ {680, 1659, -164}, 0, {1136, 84}, {29, 124, 0, 255} }},
+	{{ {0, 1975, -216}, 0, {1842, 16}, {0, 126, 244, 255} }},
+	{{ {1087, 707, -169}, 0, {1092, 280}, {126, 243, 253, 255} }},
+	{{ {1213, -53, -607}, 0, {1208, 428}, {113, 18, 200, 255} }},
+	{{ {458, -108, -1251}, 0, {1522, 430}, {68, 18, 150, 255} }},
+	{{ {0, 945, -1170}, 0, {-1256, 212}, {0, 43, 137, 255} }},
+	{{ {-458, -108, -1251}, 0, {-1187, 438}, {190, 26, 151, 255} }},
+	{{ {-1039, 986, -688}, 0, {-874, 212}, {165, 27, 171, 255} }},
+	{{ {0, 1591, -864}, 0, {-1256, 84}, {0, 87, 163, 255} }},
+	{{ {-680, 1659, -164}, 0, {-774, 84}, {227, 124, 0, 255} }},
+	{{ {0, 1975, -216}, 0, {-1256, 16}, {0, 126, 244, 255} }},
+	{{ {-179, 794, 1002}, 0, {70, 284}, {248, 49, 117, 255} }},
+	{{ {178, 794, 1003}, 0, {292, 284}, {11, 56, 114, 255} }},
+	{{ {-431, 1124, 901}, 0, {-90, 212}, {224, 66, 104, 255} }},
+	{{ {574, -176, -1275}, 0, {1468, 644}, {48, 18, 140, 255} }},
+	{{ {1386, -65, -470}, 0, {1180, 644}, {113, 30, 207, 255} }},
+	{{ {-1386, -65, -470}, 0, {-818, 644}, {143, 29, 206, 255} }},
+	{{ {-574, -176, -1275}, 0, {-1108, 644}, {208, 18, 140, 255} }},
+	{{ {-574, -176, -1275}, 0, {1964, 644}, {208, 18, 140, 255} }},
+	{{ {738, 826, 1307}, 0, {492, 512}, {95, 45, 71, 255} }},
+	{{ {1386, 92, 667}, 0, {844, 644}, {116, 41, 33, 255} }},
+	{{ {1386, -65, -470}, 0, {1180, 644}, {113, 30, 207, 255} }},
+	{{ {-1386, -65, -470}, 0, {-818, 644}, {143, 29, 206, 255} }},
+	{{ {-1386, 92, 667}, 0, {-482, 644}, {141, 39, 36, 255} }},
+	{{ {-738, 826, 1307}, 0, {-134, 512}, {161, 42, 73, 255} }},
+	{{ {178, 794, 1003}, 0, {292, 284}, {11, 56, 114, 255} }},
+	{{ {431, 1124, 901}, 0, {448, 212}, {44, 64, 100, 255} }},
+	{{ {-431, 1124, 901}, 0, {-90, 212}, {224, 66, 104, 255} }},
+	{{ {0, 1708, 490}, 0, {182, 84}, {0, 106, 70, 255} }},
+	{{ {680, 1659, -164}, 0, {592, -208}, {29, 124, 0, 255} }},
+	{{ {1039, 1071, 295}, 0, {656, 176}, {91, 40, 79, 255} }},
+	{{ {0, 1975, -216}, 0, {180, -4}, {0, 126, 244, 255} }},
+	{{ {-680, 1659, -164}, 0, {-208, -208}, {227, 124, 0, 255} }},
+	{{ {-1039, 1071, 295}, 0, {-304, 176}, {164, 37, 79, 255} }},
+	{{ {-1039, 986, -688}, 0, {-874, 212}, {165, 27, 171, 255} }},
+	{{ {-458, -108, -1251}, 0, {-1196, 434}, {190, 26, 151, 255} }},
+	{{ {-1213, -53, -607}, 0, {-846, 428}, {139, 16, 208, 255} }},
+	{{ {-1087, 707, -169}, 0, {-730, 280}, {130, 243, 253, 255} }},
+	{{ {1087, 707, -169}, 0, {1092, 280}, {126, 243, 253, 255} }},
+	{{ {1213, 40, 456}, 0, {884, 430}, {120, 25, 35, 255} }},
+	{{ {1213, -53, -607}, 0, {1214, 429}, {113, 18, 200, 255} }},
+	{{ {1039, 1071, 295}, 0, {888, 212}, {91, 40, 79, 255} }},
+	{{ {-1213, -53, -607}, 0, {-852, 429}, {139, 16, 208, 255} }},
+	{{ {-1213, 40, 456}, 0, {-496, 432}, {136, 25, 35, 255} }},
+	{{ {-1039, 1071, 295}, 0, {-526, 212}, {164, 37, 79, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_0 + 0, 27, 0),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_0 + 27, 5, 27),
+	gsSP2Triangles(0, 1, 2, 0, 27, 3, 4, 0),
+	gsSP2Triangles(28, 27, 5, 0, 6, 29, 7, 0),
+	gsSP2Triangles(8, 30, 29, 0, 27, 31, 9, 0),
+	gsSP2Triangles(10, 2, 11, 0, 12, 11, 2, 0),
+	gsSP2Triangles(12, 13, 11, 0, 13, 12, 14, 0),
+	gsSP2Triangles(15, 16, 11, 0, 11, 16, 17, 0),
+	gsSP2Triangles(28, 17, 16, 0, 18, 19, 20, 0),
+	gsSP2Triangles(21, 18, 20, 0, 21, 20, 22, 0),
+	gsSP2Triangles(22, 23, 21, 0, 24, 25, 26, 0),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_0 + 32, 6, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_0 + 38, 20, 6),
+	gsSP2Triangles(6, 7, 8, 0, 8, 7, 9, 0),
+	gsSP2Triangles(10, 9, 7, 0, 10, 7, 11, 0),
+	gsSP2Triangles(9, 10, 12, 0, 9, 12, 13, 0),
+	gsSP2Triangles(13, 8, 9, 0, 13, 14, 8, 0),
+	gsSP2Triangles(15, 16, 17, 0, 18, 15, 17, 0),
+	gsSP2Triangles(19, 20, 21, 0, 19, 22, 20, 0),
+	gsSP2Triangles(0, 20, 22, 0, 0, 1, 20, 0),
+	gsSP2Triangles(20, 1, 2, 0, 20, 2, 21, 0),
+	gsSP2Triangles(18, 23, 24, 0, 3, 24, 23, 0),
+	gsSP2Triangles(3, 4, 24, 0, 5, 24, 4, 0),
+	gsSP2Triangles(5, 25, 24, 0, 24, 25, 18, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_1[10] = {
+	{{ {-431, 1124, 901}, 0, {176, -48}, {224, 66, 104, 255} }},
+	{{ {-1039, 1071, 295}, 0, {528, -48}, {164, 37, 79, 255} }},
+	{{ {-179, 794, 1002}, 0, {-16, 144}, {248, 49, 117, 255} }},
+	{{ {178, 794, 1003}, 0, {-16, 144}, {11, 56, 114, 255} }},
+	{{ {431, 1124, 901}, 0, {176, -48}, {44, 64, 100, 255} }},
+	{{ {1039, 1071, 295}, 0, {528, -48}, {91, 40, 79, 255} }},
+	{{ {-738, 826, 1307}, 0, {432, 784}, {161, 42, 73, 255} }},
+	{{ {-447, 983, 1351}, 0, {80, 720}, {171, 76, 56, 255} }},
+	{{ {449, 983, 1352}, 0, {80, 720}, {85, 76, 56, 255} }},
+	{{ {738, 826, 1307}, 0, {432, 784}, {95, 45, 71, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_1 + 0, 6, 0),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_1 + 6, 4, 6),
+	gsSP2Triangles(6, 0, 1, 0, 2, 0, 6, 0),
+	gsSP2Triangles(6, 7, 2, 0, 3, 8, 9, 0),
+	gsSP2Triangles(3, 9, 4, 0, 9, 5, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_2[6] = {
+	{{ {365, 886, 2131}, 0, {318, 354}, {65, 62, 90, 255} }},
+	{{ {449, 983, 1352}, 0, {408, 244}, {85, 76, 56, 255} }},
+	{{ {-357, 887, 2132}, 0, {174, 354}, {192, 62, 90, 255} }},
+	{{ {-447, 983, 1351}, 0, {82, 244}, {171, 76, 56, 255} }},
+	{{ {178, 794, 1003}, 0, {308, 76}, {11, 56, 114, 255} }},
+	{{ {-179, 794, 1002}, 0, {184, 76}, {248, 49, 117, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_2 + 0, 4, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_2 + 4, 2, 4),
+	gsSP2Triangles(4, 0, 1, 0, 2, 0, 4, 0),
+	gsSP2Triangles(2, 4, 5, 0, 3, 2, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_3[9] = {
+	{{ {0, -376, -12}, 0, {240, 176}, {0, 130, 12, 255} }},
+	{{ {-1430, 40, -591}, 0, {464, 240}, {1, 171, 162, 255} }},
+	{{ {-592, 97, -1427}, 0, {464, 80}, {168, 164, 251, 255} }},
+	{{ {592, 97, -1427}, 0, {464, 240}, {222, 161, 77, 255} }},
+	{{ {1430, 40, -591}, 0, {464, 80}, {81, 162, 28, 255} }},
+	{{ {1430, -40, 591}, 0, {464, 240}, {173, 169, 216, 255} }},
+	{{ {592, -97, 1427}, 0, {464, 80}, {222, 159, 74, 255} }},
+	{{ {-592, -97, 1427}, 0, {464, 240}, {34, 172, 167, 255} }},
+	{{ {-1430, -40, 591}, 0, {464, 80}, {175, 167, 216, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_3[] = {
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_3 + 0, 1, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_3 + 1, 8, 1),
+	gsSP2Triangles(1, 2, 0, 0, 2, 3, 0, 0),
+	gsSP2Triangles(3, 4, 0, 0, 4, 5, 0, 0),
+	gsSP2Triangles(5, 6, 0, 0, 6, 7, 0, 0),
+	gsSP2Triangles(7, 8, 0, 0, 8, 1, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_4[8] = {
+	{{ {1982, -591, 581}, 0, {-16, 1264}, {215, 48, 146, 255} }},
+	{{ {653, 1007, 1780}, 0, {688, -208}, {218, 50, 145, 255} }},
+	{{ {2438, 1008, 1196}, 0, {-464, 304}, {218, 51, 146, 255} }},
+	{{ {-653, 1007, 1780}, 0, {688, -208}, {44, 46, 146, 255} }},
+	{{ {-2438, 1008, 1196}, 0, {-464, 304}, {34, 53, 146, 255} }},
+	{{ {344, 677, 1359}, 0, {944, 816}, {215, 47, 145, 255} }},
+	{{ {-1982, 490, 610}, 0, {-16, 1264}, {41, 43, 144, 255} }},
+	{{ {-344, 677, 1359}, 0, {944, 816}, {52, 32, 144, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_4[] = {
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_4 + 0, 5, 0),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_4 + 5, 3, 5),
+	gsSP2Triangles(0, 5, 1, 0, 0, 1, 2, 0),
+	gsSP2Triangles(6, 3, 7, 0, 6, 4, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_0[14] = {
+	{{ {650, 1330, -498}, 0, {922, 172}, {96, 33, 179, 255} }},
+	{{ {-191, 1087, 600}, 0, {988, -48}, {205, 6, 116, 255} }},
+	{{ {108, 977, 453}, 0, {932, 12}, {96, 221, 75, 255} }},
+	{{ {156, 2309, 92}, 0, {932, -68}, {12, 126, 10, 255} }},
+	{{ {-323, 1034, -177}, 0, {304, 420}, {153, 22, 184, 255} }},
+	{{ {650, 1330, -498}, 0, {194, 724}, {96, 33, 179, 255} }},
+	{{ {156, 2309, 92}, 0, {10, 544}, {12, 126, 10, 255} }},
+	{{ {-191, 1087, 600}, 0, {320, 216}, {205, 6, 116, 255} }},
+	{{ {1087, 707, -169}, 0, {1092, 280}, {126, 243, 253, 255} }},
+	{{ {1039, 1071, 295}, 0, {888, 212}, {91, 40, 79, 255} }},
+	{{ {680, 1659, -164}, 0, {1136, 84}, {29, 124, 0, 255} }},
+	{{ {1087, 707, -169}, 0, {494, 556}, {126, 243, 253, 255} }},
+	{{ {1039, 986, -688}, 0, {482, 460}, {91, 27, 171, 255} }},
+	{{ {680, 1659, -164}, 0, {516, 208}, {29, 124, 0, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_0 + 0, 8, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_0 + 8, 6, 8),
+	gsSP2Triangles(8, 0, 9, 0, 1, 2, 3, 0),
+	gsSP2Triangles(10, 2, 1, 0, 4, 11, 12, 0),
+	gsSP2Triangles(11, 4, 5, 0, 6, 5, 4, 0),
+	gsSP2Triangles(7, 6, 4, 0, 13, 7, 4, 0),
+	gsSP1Triangle(13, 4, 12, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_1[6] = {
+	{{ {680, 1659, -164}, 0, {466, 38}, {29, 124, 0, 255} }},
+	{{ {1039, 1071, 295}, 0, {464, 496}, {91, 40, 79, 255} }},
+	{{ {93, 852, 40}, 0, {304, 252}, {89, 9, 90, 255} }},
+	{{ {108, 977, 453}, 0, {320, 22}, {96, 221, 75, 255} }},
+	{{ {156, 2309, 92}, 0, {42, 24}, {12, 126, 10, 255} }},
+	{{ {650, 1330, -498}, 0, {16, 496}, {96, 33, 179, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_1 + 0, 2, 0),
+	gsSPMatrix(0x0d0000c0, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_1 + 2, 4, 2),
+	gsSP2Triangles(2, 3, 0, 0, 4, 3, 2, 0),
+	gsSP2Triangles(4, 2, 5, 0, 5, 2, 1, 0),
+	gsSP1Triangle(2, 0, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_0[14] = {
+	{{ {-650, 1330, -498}, 0, {-560, 172}, {160, 33, 179, 255} }},
+	{{ {191, 1087, 600}, 0, {-630, -48}, {51, 6, 116, 255} }},
+	{{ {-108, 977, 453}, 0, {-570, 12}, {160, 221, 75, 255} }},
+	{{ {-156, 2309, 92}, 0, {-570, -68}, {244, 126, 10, 255} }},
+	{{ {-156, 2309, 92}, 0, {10, 544}, {244, 126, 10, 255} }},
+	{{ {323, 1034, -177}, 0, {304, 420}, {103, 22, 184, 255} }},
+	{{ {-650, 1330, -498}, 0, {194, 724}, {160, 33, 179, 255} }},
+	{{ {191, 1087, 600}, 0, {320, 216}, {51, 6, 116, 255} }},
+	{{ {-1087, 707, -169}, 0, {-730, 280}, {130, 243, 253, 255} }},
+	{{ {-1039, 1071, 295}, 0, {-526, 212}, {164, 37, 79, 255} }},
+	{{ {-680, 1659, -164}, 0, {-774, 84}, {227, 124, 0, 255} }},
+	{{ {-680, 1659, -164}, 0, {516, 208}, {227, 124, 0, 255} }},
+	{{ {-1039, 986, -688}, 0, {482, 460}, {165, 27, 171, 255} }},
+	{{ {-1087, 707, -169}, 0, {494, 556}, {130, 243, 253, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_0 + 0, 8, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_0 + 8, 6, 8),
+	gsSP2Triangles(8, 9, 0, 0, 10, 1, 2, 0),
+	gsSP2Triangles(1, 3, 2, 0, 4, 5, 6, 0),
+	gsSP2Triangles(7, 5, 4, 0, 11, 5, 7, 0),
+	gsSP2Triangles(11, 12, 5, 0, 5, 12, 13, 0),
+	gsSP1Triangle(13, 6, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_1[6] = {
+	{{ {-1039, 1071, 295}, 0, {464, 496}, {164, 37, 79, 255} }},
+	{{ {-680, 1659, -164}, 0, {470, 38}, {227, 124, 0, 255} }},
+	{{ {-156, 2309, 92}, 0, {42, 24}, {244, 126, 10, 255} }},
+	{{ {-93, 852, 40}, 0, {304, 252}, {167, 9, 90, 255} }},
+	{{ {-108, 977, 453}, 0, {320, 22}, {160, 221, 75, 255} }},
+	{{ {-650, 1330, -498}, 0, {16, 496}, {160, 33, 179, 255} }},
+};
+
+Gfx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_1 + 0, 2, 0),
+	gsSPMatrix(0x0d000100, G_MTX_LOAD),
+	gsSPVertex(gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_1 + 2, 4, 2),
+	gsSP2Triangles(2, 3, 4, 0, 2, 5, 3, 0),
+	gsSP2Triangles(5, 0, 3, 0, 3, 0, 1, 0),
+	gsSP1Triangle(3, 1, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPolsVoiceSkel_Fur_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPolsVoiceSkel_PolsVoice_Fur_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 125),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPolsVoiceSkel_PolsVoice_Fur_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 255, 1024),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPolsVoiceSkel_Teeth_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPolsVoiceSkel_PolsVoice_Tooth_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 67),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPolsVoiceSkel_PolsVoice_Tooth_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 127, 1024),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_CLAMP | G_TX_MIRROR, 4, 0, G_TX_CLAMP | G_TX_MIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPolsVoiceSkel_Nose_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPolsVoiceSkel_PolsVoice_Nose_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 130),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPolsVoiceSkel_PolsVoice_Nose_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 127, 1024),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPolsVoiceSkel_Eyes_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPolsVoiceSkel_PolsVoice_Eye_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 175),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPolsVoiceSkel_PolsVoice_Eye_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 127, 1024),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPolsVoiceSkel_Ear_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPolsVoiceSkel_PolsVoice_Ear_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 149),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPolsVoiceSkel_PolsVoice_Ear_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 127, 1024),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPolsVoiceSkel_Whiskers_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 116, 52, 11, 255),
+	gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPolsVoiceSkel_PolsVoice_Whisker_00_ia8),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gPolsVoiceSkel_Fur_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Teeth_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gPolsVoiceSkel_Fur_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Nose_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gPolsVoiceSkel_Fur_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Eyes_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Nose_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_2),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Ear_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_3),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Whiskers_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_4),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gPolsVoiceSkel_Fur_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Ear_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gPolsVoiceSkel_Fur_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPolsVoiceSkel_Ear_layerOpaque),
+	gsSPDisplayList(gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+StandardLimb gPolsVoiceSkelLimb_000 = { { 0, 0, 0 }, 1, 255, NULL };
+StandardLimb gPolsVoiceSkelLimb_001 = { { 0, 0, 0 }, 2, 255, gPolsVoiceSkel_LowerBody_mesh_layer_Opaque };
+StandardLimb gPolsVoiceSkelLimb_002 = { { 0, 1460, 0 }, 3, 255, gPolsVoiceSkel_UpperBody_mesh_layer_Opaque };
+StandardLimb gPolsVoiceSkelLimb_003 = { { 0, 1051, 0 }, 4, 255, gPolsVoiceSkel_Head_mesh_layer_Opaque };
+StandardLimb gPolsVoiceSkelLimb_004 = { { 716, 1210, -149 }, 255, 5, gPolsVoiceSkel_Ear_L_mesh_layer_Opaque };
+StandardLimb gPolsVoiceSkelLimb_005 = { { -716, 1210, -149 }, 255, 255, gPolsVoiceSkel_Ear_R_mesh_layer_Opaque };
+
+void* gPolsVoiceSkelLimbs[6] = {
+	&gPolsVoiceSkelLimb_000,
+	&gPolsVoiceSkelLimb_001,
+	&gPolsVoiceSkelLimb_002,
+	&gPolsVoiceSkelLimb_003,
+	&gPolsVoiceSkelLimb_004,
+	&gPolsVoiceSkelLimb_005,
+};
+
+FlexSkeletonHeader gPolsVoiceSkel = { gPolsVoiceSkelLimbs, 6, 5 };
+
diff --git a/assets_hm_pack/objects/object_pols_voice/pols_voice_skel.h b/assets_hm_pack/objects/object_pols_voice/pols_voice_skel.h
new file mode 100644
index 000000000..b948d191f
--- /dev/null
+++ b/assets_hm_pack/objects/object_pols_voice/pols_voice_skel.h
@@ -0,0 +1,57 @@
+extern u64 gPolsVoiceSkel_PolsVoice_Fur_00_ci8[];
+extern u64 gPolsVoiceSkel_PolsVoice_Fur_00_pal_rgba16[];
+extern u64 gPolsVoiceSkel_PolsVoice_Tooth_00_ci8[];
+extern u64 gPolsVoiceSkel_PolsVoice_Tooth_00_pal_rgba16[];
+extern u64 gPolsVoiceSkel_PolsVoice_Nose_00_ci8[];
+extern u64 gPolsVoiceSkel_PolsVoice_Nose_00_pal_rgba16[];
+extern u64 gPolsVoiceSkel_PolsVoice_Eye_00_ci8[];
+extern u64 gPolsVoiceSkel_PolsVoice_Eye_00_pal_rgba16[];
+extern u64 gPolsVoiceSkel_PolsVoice_Ear_00_ci8[];
+extern u64 gPolsVoiceSkel_PolsVoice_Ear_00_pal_rgba16[];
+extern u64 gPolsVoiceSkel_PolsVoice_Whisker_00_ia8[];
+extern Vtx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_0[18];
+extern Gfx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_tri_0[];
+extern Vtx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_vtx_1[96];
+extern Gfx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque_tri_1[];
+extern Vtx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_vtx_0[21];
+extern Gfx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_tri_0[];
+extern Vtx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_vtx_1[11];
+extern Gfx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque_tri_1[];
+extern Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_0[58];
+extern Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_0[];
+extern Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_1[10];
+extern Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_1[];
+extern Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_2[6];
+extern Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_2[];
+extern Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_3[9];
+extern Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_3[];
+extern Vtx gPolsVoiceSkel_Head_mesh_layer_Opaque_vtx_4[8];
+extern Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque_tri_4[];
+extern Vtx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_0[14];
+extern Gfx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_tri_0[];
+extern Vtx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_vtx_1[6];
+extern Gfx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque_tri_1[];
+extern Vtx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_0[14];
+extern Gfx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_tri_0[];
+extern Vtx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_vtx_1[6];
+extern Gfx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gPolsVoiceSkel_Fur_layerOpaque[];
+extern Gfx mat_gPolsVoiceSkel_Teeth_layerOpaque[];
+extern Gfx mat_gPolsVoiceSkel_Nose_layerOpaque[];
+extern Gfx mat_gPolsVoiceSkel_Eyes_layerOpaque[];
+extern Gfx mat_gPolsVoiceSkel_Ear_layerOpaque[];
+extern Gfx mat_gPolsVoiceSkel_Whiskers_layerOpaque[];
+extern Gfx gPolsVoiceSkel_LowerBody_mesh_layer_Opaque[];
+extern Gfx gPolsVoiceSkel_UpperBody_mesh_layer_Opaque[];
+extern Gfx gPolsVoiceSkel_Head_mesh_layer_Opaque[];
+extern Gfx gPolsVoiceSkel_Ear_L_mesh_layer_Opaque[];
+extern Gfx gPolsVoiceSkel_Ear_R_mesh_layer_Opaque[];
+extern FlexSkeletonHeader gPolsVoiceSkel;
+#define GPOLSVOICESKEL_ROOT_POS_LIMB 0
+#define GPOLSVOICESKEL_ROOT_ROT_LIMB 1
+#define GPOLSVOICESKEL_LOWERBODY_LIMB 2
+#define GPOLSVOICESKEL_UPPERBODY_LIMB 3
+#define GPOLSVOICESKEL_HEAD_LIMB 4
+#define GPOLSVOICESKEL_EAR_L_LIMB 5
+#define GPOLSVOICESKEL_EAR_R_LIMB 6
+#define GPOLSVOICESKEL_NUM_LIMBS 7
diff --git a/assets_hm_pack/objects/object_rat/object_rat.h b/assets_hm_pack/objects/object_rat/object_rat.h
new file mode 100644
index 000000000..9d1d9823a
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/object_rat.h
@@ -0,0 +1,9 @@
+#include "rat_skel.h"
+#include "rat_anim_attack.h"
+#include "rat_anim_damaged.h"
+#include "rat_anim_death.h"
+#include "rat_anim_endrun.h"
+#include "rat_anim_idle.h"
+#include "rat_anim_notice.h"
+#include "rat_anim_run.h"
+#include "rat_anim_startrun.h"
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_attack.c b/assets_hm_pack/objects/object_rat/rat_anim_attack.c
new file mode 100644
index 000000000..7ad11e8fe
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_attack.c
@@ -0,0 +1,45 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelAttackAnimFrameData[372] = {
+	0x0000, 0x3fe3, 0x7fff, 0xffff, 0x03e4, 0x041b, 0x04ae, 0x0608, 0x0978, 0x0ba5, 0x0b0c, 0x098c, 0x0799, 0x05a5, 0x0423, 0x0363, 
+	0x0333, 0x035e, 0x03b5, 0x03e4, 0xffe5, 0xff66, 0xfe8f, 0xfe2e, 0xfe3e, 0xfe5c, 0xfe6a, 0xfe8c, 0xfeb9, 0xfee8, 0xff0e, 0xff28, 
+	0xff49, 0xff86, 0xffc7, 0xffe5, 0x0854, 0x00d6, 0xf0e7, 0xe6b4, 0xe969, 0xeeff, 0xf449, 0xf8a2, 0xfc05, 0xfe67, 0xffba, 0x0037, 
+	0x0140, 0x03eb, 0x06e9, 0x0854, 0x7fca, 0x7fa1, 0x7e84, 0x7b81, 0x4b7e, 0x177b, 0x1fa4, 0x366a, 0x5477, 0x6e4f, 0x7fca, 0x8a88, 
+	0x8ebf, 0x8ae0, 0x83a9, 0x7fca, 0xffff, 0xffff, 0xffff, 0xffff, 0x0ef2, 0x1223, 0x128a, 0x1121, 0x0a42, 0x02b5, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfd8d, 0xed62, 0xf058, 0xf846, 0xff7a, 0x00be, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0xffff, 0x991e, 0xb12e, 0xeca7, 0x0902, 0xfa8c, 0xe8d3, 0xe4e1, 0xe2f6, 0xe12f, 0xdd3f, 0xd34c, 0xa640, 
+	0x8e0b, 0x90e9, 0x9640, 0x991e, 0x0000, 0x038b, 0x12f7, 0x15e0, 0x11c0, 0x0e43, 0x0be6, 0x09c4, 0x07fd, 0x0688, 0x04f1, 0x01e0, 
+	0xffff, 0xffff, 0xffff, 0x0000, 0x0000, 0xfa39, 0xfb14, 0x0462, 0x0b14, 0x1100, 0x107f, 0x0ebd, 0x0c03, 0x088f, 0x049b, 0x004a, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x7fca, 0x7fa1, 0x7e84, 0x7b81, 0x4bb8, 0x174b, 0x1f82, 0x3682, 0x54b3, 0x6e68, 0x7fca, 0x8a85, 
+	0x8ebf, 0x8ae0, 0x83a9, 0x7fca, 0xffff, 0xffff, 0xffff, 0xffff, 0xf02e, 0xed54, 0xeccb, 0xee03, 0xf519, 0xfd17, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x0320, 0x1496, 0x116f, 0x08de, 0x00e9, 0xff4e, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0xffff, 0x991e, 0xb058, 0xeab8, 0x07e6, 0xf905, 0xe851, 0xe5f6, 0xe424, 0xe241, 0xdf1c, 0xd827, 0xa95f, 
+	0x8e0b, 0x90e9, 0x9640, 0x991e, 0x0000, 0xfc74, 0xe8f7, 0xe40d, 0xed15, 0xf2db, 0xf380, 0xf564, 0xf7ce, 0xfa19, 0xfb8b, 0x0084, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e1, 0x0add, 0x022c, 0xfa7b, 0xf0a0, 0xf325, 0xf871, 0xfedb, 0x04e0, 0x08b8, 0x04a3, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0xe951, 0xe1fb, 0xdc3b, 0xff1d, 0xfc4f, 0xf510, 0xebd7, 0xe43e, 0xe13a, 0xe50c, 0xe951, 0xe495, 
+	0xddf3, 0xe1ac, 0xe70e, 0xe951, 0x2065, 0x24a5, 0x3079, 0x4063, 0x5c9c, 0x8d34, 0x8b57, 0x82db, 0x6ef1, 0x45d8, 0x2065, 0x1317, 
+	0x109c, 0x14b2, 0x1c51, 0x2065, 0xf8e3, 0xf863, 0xfba2, 0x0737, 0x165a, 0x132e, 0x119f, 0x104a, 0x0bb1, 0x007b, 0xf8e3, 0xf85d, 
+	0xf890, 0xf88b, 0xf8b3, 0xf8e3, 0xfdbd, 0xf7fd, 0xec2f, 0xe64f, 0xf0de, 0x0cff, 0x0d89, 0x09d4, 0x01b8, 0xfae7, 0xfdbd, 0xfff7, 
+	0x0094, 0xffd5, 0xfe74, 0xfdbd, 0x2065, 0x24a1, 0x30b0, 0x4218, 0x5ec3, 0x8c5d, 0x8aae, 0x8297, 0x6f53, 0x4656, 0x2065, 0x1314, 
+	0x109c, 0x14b2, 0x1c51, 0x2065, 0x071c, 0x077c, 0x04dd, 0xfb73, 0xef0e, 0xef20, 0xf050, 0xf144, 0xf59d, 0x004d, 0x071c, 0x078a, 
+	0x076f, 0x0774, 0x074c, 0x071c, 0x0242, 0x06c1, 0x0ffa, 0x1465, 0x0c88, 0xf77f, 0xf6e7, 0xfa09, 0x00d3, 0x05f0, 0x0242, 0xfff0, 
+	0xff6b, 0x002a, 0x018b, 0x0242, 0xad1e, 0xb6cb, 0xd998, 0xebcd, 0xe86c, 0xdf27, 0xd299, 0xc738, 0xbf81, 0xbb4a, 0xb9fe, 0xba23, 
+	0xba39, 0xb698, 0xb041, 0xad1e, };
+
+JointIndex gRatSkelAttackAnimJointIndices[11] = {
+	{ 0x0000, 0x0004, 0x0014, },
+	{ 0x0024, 0x0000, 0x0000, },
+	{ 0x0001, 0x0000, 0x0000, },
+	{ 0x0034, 0x0044, 0x0054, },
+	{ 0x0064, 0x0074, 0x0084, },
+	{ 0x0094, 0x00a4, 0x00b4, },
+	{ 0x00c4, 0x00d4, 0x00e4, },
+	{ 0x00f4, 0x0002, 0x0003, },
+	{ 0x0104, 0x0114, 0x0124, },
+	{ 0x0134, 0x0144, 0x0154, },
+	{ 0x0164, 0x0000, 0x0003, },
+};
+
+AnimationHeader gRatSkelAttackAnim = { { 16 }, gRatSkelAttackAnimFrameData, gRatSkelAttackAnimJointIndices, 4 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_attack.h b/assets_hm_pack/objects/object_rat/rat_anim_attack.h
new file mode 100644
index 000000000..5d9f17835
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_attack.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelAttackAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_damaged.c b/assets_hm_pack/objects/object_rat/rat_anim_damaged.c
new file mode 100644
index 000000000..6cdbf1c9e
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_damaged.c
@@ -0,0 +1,45 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelDamagedAnimFrameData[372] = {
+	0x0000, 0x3fe3, 0x7fff, 0xffff, 0x03e4, 0x05a9, 0x0608, 0x05fd, 0x05db, 0x05a8, 0x056b, 0x052a, 0x04ea, 0x04ae, 0x0477, 0x0446, 
+	0x041d, 0x03ff, 0x03eb, 0x03e4, 0xffe5, 0xfe94, 0xfe2e, 0xfdfd, 0xfda1, 0xfd38, 0xfcdf, 0xfcb6, 0xfcd3, 0xfd2c, 0xfdae, 0xfe45, 
+	0xfede, 0xff63, 0xffc1, 0xffe5, 0x0854, 0xf0e7, 0xe6b4, 0xe52a, 0xe408, 0xe341, 0xe2ce, 0xe2a9, 0xe443, 0xe886, 0xeea3, 0xf5b0, 
+	0xfcae, 0x02aa, 0x06ca, 0x0854, 0x7fca, 0x42d9, 0xfbe4, 0xf932, 0xf94c, 0x04d1, 0x13dc, 0x2154, 0x2f12, 0x3e7e, 0x4ed3, 0x5e83, 
+	0x6c14, 0x7691, 0x7d5a, 0x7fca, 0xffff, 0x1525, 0x114e, 0x0e8d, 0x0a83, 0x0bb5, 0x0e0b, 0x0fe5, 0x115b, 0x114f, 0x0f4a, 0x0b8c, 
+	0x072d, 0x0362, 0x00e3, 0xffff, 0xffff, 0xfd36, 0xe5a8, 0xe34e, 0xe0f9, 0xe3c9, 0xe8eb, 0xed18, 0xf0f1, 0xf5ca, 0xfaad, 0xfe55, 
+	0x0029, 0x0082, 0x0035, 0xffff, 0x991e, 0xcdb0, 0x0902, 0x0837, 0x06c2, 0x044f, 0x0040, 0xf9c3, 0xf035, 0xe353, 0xd369, 0xc1f1, 
+	0xb17c, 0xa46d, 0x9c14, 0x991e, 0x0000, 0x0c65, 0x15e0, 0x1348, 0x0df0, 0x07a1, 0x0247, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf89e, 0x0462, 0x03a5, 0x025a, 0x010b, 0x0032, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x7fca, 0x430c, 0xfb62, 0xf8c1, 0xf90d, 0x059d, 0x15fc, 0x23be, 0x3118, 0x3f7e, 0x4eba, 0x5dd6, 
+	0x6b6f, 0x7639, 0x7d42, 0x7fca, 0xffff, 0xea02, 0xee19, 0xf137, 0xf51c, 0xf425, 0xf49b, 0xf606, 0xf72d, 0xf88c, 0xfa31, 0xfc00, 
+	0xfdae, 0xfef7, 0xffbd, 0xffff, 0xffff, 0x02d9, 0x1b8e, 0x1e96, 0x2052, 0x196f, 0x10c2, 0x0b37, 0x07c4, 0x04f1, 0x02b7, 0x0131, 
+	0x0060, 0x0011, 0x0001, 0xffff, 0x991e, 0xcc34, 0x07e6, 0x0758, 0x066e, 0x0457, 0x0058, 0xf9c3, 0xf022, 0xe337, 0xd34c, 0xc1db, 
+	0xb170, 0xa468, 0x9c13, 0x991e, 0x0000, 0xf350, 0xe40d, 0xe79b, 0xee74, 0xf674, 0xfd2e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0d3d, 0x022c, 0x020d, 0x01a8, 0x0124, 0x007a, 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0xe951, 0xdc3b, 0xff1d, 0x1ed2, 0x1db7, 0x1a87, 0x1560, 0x0e87, 0x06a9, 0xfece, 0xf7e6, 0xf264, 
+	0xee51, 0xeb87, 0xe9e1, 0xe951, 0x2065, 0x316b, 0x4063, 0x3fef, 0x3ea8, 0x3ca7, 0x3a04, 0x36da, 0x334b, 0x2f83, 0x2bb8, 0x2825, 
+	0x2506, 0x2292, 0x20f8, 0x2065, 0xf8e3, 0xfdb3, 0x0737, 0x06da, 0x05da, 0x045b, 0x0288, 0x008e, 0xfe9b, 0xfcdb, 0xfb6a, 0xfa56, 
+	0xf99c, 0xf92c, 0xf8f4, 0xf8e3, 0xfdbd, 0xf09b, 0xe64f, 0xe697, 0xe765, 0xe8b1, 0xea76, 0xeca9, 0xef39, 0xf207, 0xf4e7, 0xf7a9, 
+	0xfa18, 0xfc06, 0xfd49, 0xfdbd, 0x2065, 0x31e9, 0x4218, 0x4197, 0x402a, 0x3df4, 0x3b13, 0x37aa, 0x33e2, 0x2feb, 0x2bfc, 0x284f, 
+	0x251e, 0x229c, 0x20fb, 0x2065, 0x071c, 0x0332, 0xfb73, 0xfbbf, 0xfc91, 0xfdc9, 0xff46, 0x00e2, 0x0276, 0x03e1, 0x050c, 0x05ec, 
+	0x0684, 0x06df, 0x070e, 0x071c, 0x0242, 0x0c8f, 0x1465, 0x1430, 0x1398, 0x12a0, 0x114a, 0x0f9b, 0x0da1, 0x0b74, 0x0935, 0x070c, 
+	0x0522, 0x039d, 0x029e, 0x0242, 0xad1e, 0xd998, 0xebcd, 0xedd3, 0xf186, 0xf590, 0xf8b5, 0xf9f7, 0xf730, 0xeee2, 0xe114, 0xd097, 
+	0xc23b, 0xb784, 0xb001, 0xad1e, };
+
+JointIndex gRatSkelDamagedAnimJointIndices[11] = {
+	{ 0x0000, 0x0004, 0x0014, },
+	{ 0x0024, 0x0000, 0x0000, },
+	{ 0x0001, 0x0000, 0x0000, },
+	{ 0x0034, 0x0044, 0x0054, },
+	{ 0x0064, 0x0074, 0x0084, },
+	{ 0x0094, 0x00a4, 0x00b4, },
+	{ 0x00c4, 0x00d4, 0x00e4, },
+	{ 0x00f4, 0x0002, 0x0003, },
+	{ 0x0104, 0x0114, 0x0124, },
+	{ 0x0134, 0x0144, 0x0154, },
+	{ 0x0164, 0x0000, 0x0003, },
+};
+
+AnimationHeader gRatSkelDamagedAnim = { { 16 }, gRatSkelDamagedAnimFrameData, gRatSkelDamagedAnimJointIndices, 4 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_damaged.h b/assets_hm_pack/objects/object_rat/rat_anim_damaged.h
new file mode 100644
index 000000000..fa37666a9
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_damaged.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelDamagedAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_death.c b/assets_hm_pack/objects/object_rat/rat_anim_death.c
new file mode 100644
index 000000000..de9eb2bbd
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_death.c
@@ -0,0 +1,48 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelDeathAnimFrameData[418] = {
+	0x0000, 0x3fe3, 0x7fff, 0xffff, 0x03e4, 0x04cb, 0x0608, 0x0698, 0x06f7, 0x0730, 0x074d, 0x0759, 0x075f, 0x06be, 0x04fd, 0x02a4, 
+	0x016a, 0x0210, 0x02b6, 0x0252, 0x0197, 0x0133, 0xffe5, 0xff3a, 0xfe2e, 0xfd91, 0xfd30, 0xfcfa, 0xfcde, 0xfcc9, 0xfcab, 0xfc5b, 
+	0xfbb3, 0xfaca, 0xfa4e, 0xfa8a, 0xfac6, 0xfa9d, 0xfa52, 0xfa29, 0x0854, 0xfc71, 0xe6b4, 0xd702, 0xcca3, 0xc56d, 0xbfdd, 0xbad8, 
+	0xb57f, 0xaeb6, 0xa31d, 0x9192, 0x87f1, 0x8c8e, 0x912a, 0x8e34, 0x88b1, 0x85bb, 0x7fca, 0x42d9, 0xfbe4, 0xfbca, 0xfb85, 0xfb1c, 
+	0xfa97, 0xf9fc, 0xf94c, 0xf860, 0xf74c, 0xf669, 0xf60b, 0x0ed5, 0x2685, 0x1aa1, 0x02be, 0xf60b, 0xffff, 0x1525, 0x114e, 0x10e7, 
+	0x0fd8, 0x0e57, 0x0caa, 0x0b35, 0x0a83, 0x0a87, 0x0ab6, 0x0aea, 0x0b03, 0x07ff, 0x01df, 0x053f, 0x09fa, 0x0b03, 0xffff, 0xfd36, 
+	0xe5a8, 0xe56a, 0xe4c5, 0xe3d8, 0xe2c4, 0xe1bb, 0xe0f9, 0xe068, 0xdfdc, 0xdf72, 0xdf48, 0xe5f0, 0xe9a3, 0xe838, 0xe2e9, 0xdf48, 
+	0x991e, 0xce1b, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 0x0902, 
+	0x0902, 0x0902, 0x0000, 0x0c55, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x15e0, 
+	0x15e0, 0x15e0, 0x15e0, 0x15e0, 0x0000, 0xf8be, 0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 
+	0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 0x0462, 0x7fca, 0x430c, 0xfb62, 0xfb42, 0xfaef, 0xfa7c, 0xf9fb, 0xf97d, 0xf90d, 0xf859, 
+	0xf74e, 0xf65d, 0xf5f4, 0x0a1b, 0x1bd2, 0x1308, 0x008e, 0xf5f4, 0xffff, 0xea02, 0xee19, 0xee83, 0xef9c, 0xf12c, 0xf2ec, 0xf46d, 
+	0xf51c, 0xf497, 0xf35b, 0xf21a, 0xf189, 0xf773, 0x015d, 0xfbf1, 0xf3ea, 0xf189, 0xffff, 0x02d9, 0x1b8e, 0x1bd4, 0x1c8d, 0x1d91, 
+	0x1eb3, 0x1fb8, 0x2052, 0x206b, 0x2043, 0x2010, 0x1ff8, 0x1534, 0x0e95, 0x1166, 0x1a08, 0x1ff8, 0x991e, 0xccd8, 0x07e6, 0x07e6, 
+	0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x07e6, 0x0000, 0xf35d, 
+	0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 0xe40d, 
+	0x0000, 0x0cfb, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 0x022c, 
+	0x022c, 0x022c, 0xe951, 0xf803, 0x0af5, 0x0e87, 0x11b4, 0x149d, 0x1753, 0x19db, 0x1c30, 0x1e3e, 0x1fe7, 0x2103, 0x2169, 0x1130, 
+	0x0071, 0x13ff, 0x0e90, 0x08a6, 0x2065, 0x2c72, 0x4063, 0x53c2, 0x7611, 0x8cff, 0x9074, 0x1333, 0x157d, 0x17c2, 0x1b73, 0x37bf, 
+	0x0aee, 0x3733, 0x3e59, 0x3d63, 0x31bb, 0x0aee, 0xf8e3, 0xf97c, 0x0737, 0x1cab, 0x29de, 0x29cc, 0x2b33, 0x52eb, 0x504c, 0x4cb2, 
+	0x47de, 0x41f5, 0x389b, 0x2517, 0x0f93, 0x1b53, 0x3166, 0x389b, 0xfdbd, 0xf241, 0xe64f, 0xedb5, 0x0af9, 0x20c9, 0x243e, 0xa64b, 
+	0xa784, 0xa89a, 0xab41, 0xc6e9, 0x9a23, 0xca76, 0xd617, 0xd29d, 0xc2df, 0x9a23, 0x2065, 0x2d16, 0x4218, 0x51f6, 0x65c7, 0x0347, 
+	0x1ed0, 0x33d8, 0x439a, 0x51cb, 0xdfcd, 0xed46, 0xf9a7, 0x1749, 0x2ad5, 0x217c, 0x089e, 0xf9a7, 0x071c, 0x069e, 0xfb73, 0xea2f, 
+	0xd9b3, 0xaf2d, 0xb0ed, 0xaf61, 0xad1c, 0xaa7b, 0xd92e, 0xde8a, 0xe57b, 0xeacc, 0xf5be, 0xee0b, 0xe532, 0xe57b, 0x0242, 0x0b3f, 
+	0x1465, 0x1006, 0x011d, 0x65ec, 0x4b46, 0x35e9, 0x2553, 0x1681, 0x88d3, 0x7d77, 0x75cc, 0x5e2e, 0x4de8, 0x54a2, 0x690a, 0x75cc, 
+	0xad1e, 0xb87b, 0xeead, 0xfc2a, 0x029f, 0x05b7, 0x071c, 0x0798, 0x07a9, 0xfe1a, 0xd968, 0xbd35, 0xb46a, 0xb1be, 0xb193, 0xb5ba, 
+	0xbc21, 0xbf32, };
+
+JointIndex gRatSkelDeathAnimJointIndices[11] = {
+	{ 0x0000, 0x0004, 0x0016, },
+	{ 0x0028, 0x0000, 0x0000, },
+	{ 0x0001, 0x0000, 0x0000, },
+	{ 0x003a, 0x004c, 0x005e, },
+	{ 0x0070, 0x0082, 0x0094, },
+	{ 0x00a6, 0x00b8, 0x00ca, },
+	{ 0x00dc, 0x00ee, 0x0100, },
+	{ 0x0112, 0x0002, 0x0003, },
+	{ 0x0124, 0x0136, 0x0148, },
+	{ 0x015a, 0x016c, 0x017e, },
+	{ 0x0190, 0x0000, 0x0003, },
+};
+
+AnimationHeader gRatSkelDeathAnim = { { 18 }, gRatSkelDeathAnimFrameData, gRatSkelDeathAnimJointIndices, 4 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_death.h b/assets_hm_pack/objects/object_rat/rat_anim_death.h
new file mode 100644
index 000000000..9ebd8698d
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_death.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelDeathAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_endrun.c b/assets_hm_pack/objects/object_rat/rat_anim_endrun.c
new file mode 100644
index 000000000..cf2fb3302
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_endrun.c
@@ -0,0 +1,95 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelEndrunAnimFrameData[1179] = {
+	0x0000, 0x3fe3, 0xffff, 0x03e4, 0x03ef, 0x040e, 0x043d, 0x0476, 0x04b6, 0x04f8, 0x0538, 0x0571, 0x05a0, 0x05bf, 0x05d3, 0x05e0, 
+	0x05e9, 0x05ed, 0x05ee, 0x05ee, 0x05ee, 0x05ee, 0x05ee, 0x05ee, 0x05ed, 0x05ed, 0x05ec, 0x05eb, 0x05ea, 0x05e9, 0x05e7, 0x05e6, 
+	0x05e4, 0x05e1, 0x05de, 0x05db, 0x05d7, 0x05d3, 0x05cf, 0x05ca, 0x05c5, 0x05bf, 0x05b8, 0x05b1, 0x05a7, 0x0599, 0x0587, 0x0571, 
+	0x055a, 0x0541, 0x0528, 0x050e, 0x04f6, 0x04df, 0x04ca, 0x04b9, 0x04ac, 0x04a3, 0x04a0, 0xffe5, 0xffdd, 0xffc5, 0xff9f, 0xff6f, 
+	0xff36, 0xfef7, 0xfeb4, 0xfe6f, 0xfe2b, 0xfdea, 0xfdaf, 0xfd7d, 0xfd57, 0xfd3e, 0xfd35, 0xfd35, 0xfd36, 0xfd36, 0xfd36, 0xfd36, 
+	0xfd36, 0xfd37, 0xfd37, 0xfd38, 0xfd39, 0xfd3b, 0xfd3c, 0xfd3e, 0xfd40, 0xfd42, 0xfd45, 0xfd48, 0xfd4c, 0xfd50, 0xfd54, 0xfd59, 
+	0xfd5e, 0xfd64, 0xfd6a, 0xfd71, 0xfd7f, 0xfd9b, 0xfdc1, 0xfdf1, 0xfe27, 0xfe61, 0xfe9f, 0xfedd, 0xff1a, 0xff52, 0xff86, 0xffb1, 
+	0xffd3, 0xffe9, 0xfff0, 0x0854, 0x07dd, 0x068b, 0x0479, 0x01c3, 0xfe84, 0xfae0, 0xf6f6, 0xf2eb, 0xeee7, 0xeb0f, 0xe788, 0xe481, 
+	0xe224, 0xe09a, 0xe00e, 0xe00e, 0xe00f, 0xe010, 0xe012, 0xe017, 0xe01d, 0xe026, 0xe032, 0xe041, 0xe053, 0xe06a, 0xe086, 0xe0a7, 
+	0xe0cd, 0xe0f9, 0xe12b, 0xe164, 0xe1a4, 0xe1eb, 0xe23b, 0xe293, 0xe2f4, 0xe35e, 0xe3d2, 0xe450, 0xe522, 0xe682, 0xe85b, 0xea97, 
+	0xed20, 0xefdd, 0xf2b7, 0xf594, 0xf85a, 0xfaf1, 0xfd41, 0xff32, 0x00b1, 0x01a6, 0x01fd, 0x7fca, 0x7d1d, 0x7631, 0x6d3f, 0x6640, 
+	0x6266, 0x5f74, 0x5d3d, 0x5b97, 0x5a61, 0x597b, 0x58cc, 0x583c, 0x57b2, 0x571a, 0x565c, 0x5569, 0x5440, 0x52e5, 0x515d, 0x4fae, 
+	0x4dda, 0x4be9, 0x49de, 0x47c1, 0x4595, 0x4362, 0x412e, 0x3f00, 0x3cdd, 0x3acc, 0x38d3, 0x36f8, 0x3541, 0x33b4, 0x3256, 0x312c, 
+	0x303b, 0x2f88, 0x2f19, 0x2ef3, 0x2f70, 0x30d8, 0x3315, 0x3611, 0x39b9, 0x3df0, 0x429a, 0x478f, 0x4ca6, 0x51b4, 0x568d, 0x5afa, 
+	0x5e9a, 0x610a, 0x61ef, 0x991e, 0x9ac0, 0x9f1a, 0xa548, 0xabb1, 0xb132, 0xb620, 0xba6d, 0xbe1b, 0xc139, 0xc3dc, 0xc61c, 0xc812, 
+	0xc9d7, 0xcb84, 0xcd2f, 0xceed, 0xd0c5, 0xd2b2, 0xd4b4, 0xd6c6, 0xd8e8, 0xdb17, 0xdd50, 0xdf91, 0xe1d7, 0xe41e, 0xe664, 0xe8a3, 
+	0xead8, 0xecfd, 0xef0e, 0xf103, 0xf2d7, 0xf484, 0xf601, 0xf749, 0xf854, 0xf91c, 0xf998, 0xf9c3, 0xf953, 0xf80b, 0xf5f5, 0xf318, 
+	0xef7a, 0xeb23, 0xe621, 0xe085, 0xda6a, 0xd3f2, 0xcd44, 0xc6b2, 0xc10c, 0xbd25, 0xbbaf, 0x0000, 0x0026, 0x009b, 0x0164, 0x027c, 
+	0x03f5, 0x05de, 0x0814, 0x0a6f, 0x0cc7, 0x0ef9, 0x10e5, 0x1274, 0x138f, 0x1422, 0x1419, 0x13aa, 0x131b, 0x126f, 0x11a8, 0x10c9, 
+	0x0fd5, 0x0ece, 0x0db8, 0x0c96, 0x0b6c, 0x0a3e, 0x0911, 0x07e8, 0x06c9, 0x05b6, 0x04b4, 0x03c5, 0x02ed, 0x022e, 0x0189, 0x00ff, 
+	0x0092, 0x0042, 0x0011, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0x0000, 0x0015, 0x0059, 0x00d8, 0x0198, 0x024e, 0x02d3, 0x033c, 0x0397, 0x03ec, 0x043c, 0x048a, 0x04d8, 
+	0x0526, 0x0578, 0x05cf, 0x0624, 0x0671, 0x06b4, 0x06e9, 0x0710, 0x0725, 0x0728, 0x0717, 0x06f2, 0x06b8, 0x0669, 0x0607, 0x0593, 
+	0x050f, 0x047f, 0x03e6, 0x0348, 0x02aa, 0x0211, 0x0182, 0x0103, 0x0098, 0x0046, 0x0012, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7fca, 0x7d1d, 0x7631, 0x6d3f, 0x6640, 
+	0x6266, 0x5f74, 0x5d3d, 0x5b97, 0x5a61, 0x597b, 0x58cc, 0x583c, 0x57b2, 0x571a, 0x565c, 0x5569, 0x5440, 0x52e5, 0x515d, 0x4fae, 
+	0x4dda, 0x4be9, 0x49de, 0x47c1, 0x4595, 0x4362, 0x412e, 0x3f00, 0x3cdd, 0x3acc, 0x38d3, 0x36f8, 0x3541, 0x33b4, 0x3256, 0x312c, 
+	0x303b, 0x2f88, 0x2f19, 0x2ef3, 0x2f70, 0x30d8, 0x3315, 0x3611, 0x39b9, 0x3df0, 0x429a, 0x478f, 0x4ca6, 0x51b4, 0x568d, 0x5afa, 
+	0x5e9a, 0x610a, 0x61ef, 0x991e, 0x9af0, 0x9fcc, 0xa69f, 0xad3b, 0xb264, 0xb6fc, 0xbafd, 0xbe6b, 0xc157, 0xc3d5, 0xc5fc, 0xc7e2, 
+	0xc99d, 0xcb43, 0xcce9, 0xcea2, 0xd075, 0xd261, 0xd461, 0xd674, 0xd898, 0xdaca, 0xdd08, 0xdf4e, 0xe199, 0xe3e7, 0xe633, 0xe87a, 
+	0xeab5, 0xece1, 0xeef7, 0xf0f2, 0xf2ca, 0xf47a, 0xf5fb, 0xf745, 0xf852, 0xf91b, 0xf998, 0xf9c3, 0xf953, 0xf80b, 0xf5f5, 0xf318, 
+	0xef7a, 0xeb23, 0xe621, 0xe085, 0xda6a, 0xd3f2, 0xcd44, 0xc6b2, 0xc10c, 0xbd25, 0xbbaf, 0x0000, 0xffdd, 0xff70, 0xfeb4, 0xfdb1, 
+	0xfc58, 0xfa99, 0xf896, 0xf673, 0xf454, 0xf258, 0xf09a, 0xef32, 0xee31, 0xedab, 0xedb3, 0xee17, 0xee98, 0xef34, 0xefe9, 0xf0b3, 
+	0xf191, 0xf281, 0xf37e, 0xf486, 0xf596, 0xf6a9, 0xf7bb, 0xf8ca, 0xf9d0, 0xfaca, 0xfbb6, 0xfc8f, 0xfd54, 0xfe02, 0xfe99, 0xff17, 
+	0xff7a, 0xffc3, 0xfff0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0xffff, 0xffff, 0xffff, 0x0000, 0xffeb, 0xffac, 0xff2f, 0xfe75, 0xfdcc, 0xfd54, 0xfcf9, 0xfcac, 0xfc67, 0xfc25, 0xfbe5, 0xfba4, 
+	0xfb61, 0xfb19, 0xfacb, 0xfa7e, 0xfa38, 0xf9fb, 0xf9ca, 0xf9a5, 0xf990, 0xf98b, 0xf998, 0xf9b8, 0xf9eb, 0xfa31, 0xfa88, 0xfaf0, 
+	0xfb67, 0xfbe9, 0xfc74, 0xfd03, 0xfd92, 0xfe1d, 0xfe9f, 0xff13, 0xff75, 0xffbf, 0xffee, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xe951, 0xe94f, 0xe949, 0xe940, 0xe933, 
+	0xe924, 0xe913, 0xe903, 0xe8f2, 0xe8e0, 0xe8cc, 0xe8b4, 0xe894, 0xe869, 0xe82e, 0xe7df, 0xe774, 0xe6e8, 0xe631, 0xe545, 0xe41a, 
+	0xe234, 0xdf8c, 0xdcb1, 0xda36, 0xd815, 0xd6df, 0xd7f0, 0xdb24, 0xdee6, 0xe1c1, 0xe3e6, 0xe5eb, 0xe79c, 0xe8c5, 0xe933, 0xe898, 
+	0xe715, 0xe51c, 0xe31f, 0xe18a, 0xe05e, 0xdf59, 0xde7f, 0xddd3, 0xdd57, 0xdd0a, 0xdcea, 0xdcf2, 0xdd1a, 0xdd57, 0xdda0, 0xddea, 
+	0xde29, 0xde56, 0xde66, 0x7fff, 0x8013, 0x804b, 0x80a4, 0x811b, 0x81ab, 0x8250, 0x8308, 0x83cd, 0x849c, 0x8571, 0x8648, 0x8720, 
+	0x87f5, 0x88c6, 0x8992, 0x8a59, 0x8b1b, 0x8bd8, 0x8c8f, 0x8d41, 0x8df1, 0x8e5d, 0x8e13, 0x8c94, 0x892c, 0x83b0, 0x7d58, 0x783d, 
+	0x757a, 0x74ea, 0x7563, 0x75e2, 0x7654, 0x76a6, 0x76c4, 0x76aa, 0x7672, 0x7646, 0x7649, 0x7695, 0x772a, 0x77f4, 0x78ec, 0x7a09, 
+	0x7b40, 0x7c85, 0x7dcb, 0x7f06, 0x802c, 0x8134, 0x8216, 0x82cd, 0x8355, 0x83a9, 0x83c7, 0xffff, 0xffd4, 0xff5a, 0xfe99, 0xfd9a, 
+	0xfc64, 0xfb02, 0xf97c, 0xf7da, 0xf628, 0xf46d, 0xf2b3, 0xf101, 0xef61, 0xedd8, 0xec6c, 0xeb26, 0xea09, 0xe91d, 0xe869, 0xe7f7, 
+	0xe809, 0xe903, 0xeb0f, 0xee63, 0xf3c9, 0xfb39, 0x0388, 0x0b2e, 0x10ac, 0x12f2, 0x1344, 0x137d, 0x139d, 0x13aa, 0x13ad, 0x1387, 
+	0x1313, 0x1251, 0x114b, 0x100d, 0x0e9a, 0x0cf3, 0x0b25, 0x093b, 0x0743, 0x0549, 0x0357, 0x0179, 0xffba, 0xfe26, 0xfcc6, 0xfba4, 
+	0xfac8, 0xfa3d, 0xfa0c, 0x2065, 0x20d4, 0x220d, 0x23f3, 0x2669, 0x294c, 0x2c77, 0x2fc4, 0x330c, 0x362a, 0x3903, 0x3b7e, 0x3d89, 
+	0x3f12, 0x400b, 0x4063, 0x4063, 0x4064, 0x4064, 0x4064, 0x4063, 0x4061, 0x405d, 0x4056, 0x404e, 0x4042, 0x4033, 0x401f, 0x4007, 
+	0x3fea, 0x3fc7, 0x3f9e, 0x3f6d, 0x3f36, 0x3ef6, 0x3ead, 0x3e5a, 0x3dfe, 0x3d97, 0x3d24, 0x3ca6, 0x3c00, 0x3b1e, 0x3a0b, 0x38d1, 
+	0x377a, 0x3611, 0x34a1, 0x3334, 0x31d6, 0x3091, 0x2f70, 0x2e7e, 0x2dc4, 0x2d4d, 0x2d23, 0xf8e3, 0xf8f0, 0xf919, 0xf967, 0xf9e8, 
+	0xfaa8, 0xfbad, 0xfcf7, 0xfe7b, 0x0028, 0x01e1, 0x0389, 0x0500, 0x062c, 0x06f0, 0x0737, 0x0735, 0x0730, 0x0727, 0x0719, 0x0707, 
+	0x06f0, 0x06d4, 0x06b2, 0x068a, 0x065c, 0x0628, 0x05ec, 0x05aa, 0x0560, 0x050f, 0x04b7, 0x0456, 0x03ee, 0x037e, 0x0306, 0x0286, 
+	0x01ff, 0x016f, 0x00d9, 0x003b, 0xff93, 0xfee5, 0xfe35, 0xfd87, 0xfce0, 0xfc43, 0xfbb2, 0xfb30, 0xfabe, 0xfa5e, 0xfa0e, 0xf9d0, 
+	0xf9a4, 0xf988, 0xf97f, 0xfdbd, 0xfd65, 0xfc6e, 0xfaf0, 0xf903, 0xf6c4, 0xf455, 0xf1d6, 0xef68, 0xed26, 0xeb26, 0xe976, 0xe81d, 
+	0xe721, 0xe685, 0xe64f, 0xe655, 0xe666, 0xe683, 0xe6aa, 0xe6dd, 0xe71a, 0xe761, 0xe7b1, 0xe80c, 0xe870, 0xe8dd, 0xe953, 0xe9d1, 
+	0xea58, 0xeae8, 0xeb7f, 0xec1e, 0xecc5, 0xed73, 0xee28, 0xeee5, 0xefa8, 0xf073, 0xf145, 0xf21d, 0xf2fa, 0xf3d7, 0xf4b5, 0xf593, 
+	0xf66f, 0xf746, 0xf816, 0xf8dc, 0xf994, 0xfa3a, 0xfaca, 0xfb41, 0xfb9b, 0xfbd3, 0xfbe6, 0x2065, 0x20d6, 0x2215, 0x2405, 0x2688, 
+	0x297e, 0x2cc2, 0x302f, 0x339f, 0x36ef, 0x39fd, 0x3caf, 0x3eed, 0x40a1, 0x41b7, 0x4218, 0x4218, 0x4218, 0x4217, 0x4214, 0x420f, 
+	0x4209, 0x4200, 0x41f3, 0x41e3, 0x41ce, 0x41b5, 0x4197, 0x4172, 0x4148, 0x4116, 0x40dd, 0x409c, 0x4052, 0x3fff, 0x3fa2, 0x3f3a, 
+	0x3ec8, 0x3e49, 0x3dbe, 0x3d26, 0x3c68, 0x3b71, 0x3a4c, 0x3902, 0x379e, 0x362b, 0x34b2, 0x3340, 0x31dd, 0x3095, 0x2f72, 0x2e7f, 
+	0x2dc4, 0x2d4d, 0x2d23, 0x071c, 0x0711, 0x06ef, 0x06af, 0x0645, 0x05aa, 0x04d6, 0x03cb, 0x0290, 0x0135, 0xffce, 0xfe75, 0xfd42, 
+	0xfc4d, 0xfbac, 0xfb73, 0xfb74, 0xfb77, 0xfb7e, 0xfb88, 0xfb95, 0xfba6, 0xfbbb, 0xfbd5, 0xfbf3, 0xfc16, 0xfc3f, 0xfc6d, 0xfca0, 
+	0xfcda, 0xfd1a, 0xfd60, 0xfdad, 0xfe00, 0xfe59, 0xfeba, 0xff20, 0xff8e, 0x0003, 0x007d, 0x00fe, 0x0186, 0x0213, 0x02a3, 0x0330, 
+	0x03b9, 0x043a, 0x04b0, 0x051b, 0x0578, 0x05c8, 0x0609, 0x063d, 0x0662, 0x0678, 0x0680, 0x0242, 0x0288, 0x034b, 0x0478, 0x05fc, 
+	0x07bf, 0x09a7, 0x0b9a, 0x0d7d, 0x0f3b, 0x10c4, 0x120c, 0x130f, 0x13ca, 0x143d, 0x1465, 0x1461, 0x1455, 0x1441, 0x1425, 0x1402, 
+	0x13d7, 0x13a5, 0x136c, 0x132c, 0x12e6, 0x1298, 0x1245, 0x11ea, 0x118a, 0x1123, 0x10b6, 0x1043, 0x0fca, 0x0f4b, 0x0ec6, 0x0e3b, 
+	0x0da9, 0x0d12, 0x0c74, 0x0bcf, 0x0b26, 0x0a7c, 0x09cf, 0x0922, 0x0876, 0x07cc, 0x0727, 0x0689, 0x05f6, 0x0571, 0x04fd, 0x049e, 
+	0x0456, 0x0428, 0x0419, 0xad1e, 0xad96, 0xaef6, 0xb148, 0xb4ac, 0xb951, 0xbf5a, 0xc6b0, 0xcec9, 0xd6b1, 0xdd6e, 0xe285, 0xe631, 
+	0xe8cc, 0xea99, 0xebcd, 0xecb0, 0xed6c, 0xee03, 0xee77, 0xeece, 0xef0a, 0xef30, 0xef44, 0xef4a, 0xef48, 0xef3e, 0xef2b, 0xef0a, 
+	0xeed8, 0xee93, 0xee37, 0xedc0, 0xed2d, 0xec79, 0xeba3, 0xeaa8, 0xe986, 0xe83e, 0xe6ce, 0xe53a, 0xe30b, 0xe00b, 0xdc92, 0xd8e4, 
+	0xd528, 0xd169, 0xcd9e, 0xc9af, 0xc591, 0xc194, 0xbe17, 0xbb60, 0xb975, 0xb84f, 0xb7ed, };
+
+JointIndex gRatSkelEndrunAnimJointIndices[11] = {
+	{ 0x0000, 0x0003, 0x003b, },
+	{ 0x0073, 0x0000, 0x0000, },
+	{ 0x0001, 0x0000, 0x0000, },
+	{ 0x00ab, 0x0002, 0x0002, },
+	{ 0x00e3, 0x011b, 0x0153, },
+	{ 0x018b, 0x0002, 0x0002, },
+	{ 0x01c3, 0x01fb, 0x0233, },
+	{ 0x026b, 0x02a3, 0x02db, },
+	{ 0x0313, 0x034b, 0x0383, },
+	{ 0x03bb, 0x03f3, 0x042b, },
+	{ 0x0463, 0x0000, 0x0002, },
+};
+
+AnimationHeader gRatSkelEndrunAnim = { { 56 }, gRatSkelEndrunAnimFrameData, gRatSkelEndrunAnimJointIndices, 3 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_endrun.h b/assets_hm_pack/objects/object_rat/rat_anim_endrun.h
new file mode 100644
index 000000000..e83764b2e
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_endrun.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelEndrunAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_idle.c b/assets_hm_pack/objects/object_rat/rat_anim_idle.c
new file mode 100644
index 000000000..35d29e958
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_idle.c
@@ -0,0 +1,102 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelIdleAnimFrameData[1280] = {
+	0x0000, 0xfff0, 0x3fe3, 0x61ef, 0xffff, 0xbbaf, 0x04a0, 0x04a0, 0x04a0, 0x049f, 0x049e, 0x049e, 0x049c, 0x049b, 0x049a, 0x0499, 
+	0x0497, 0x0496, 0x0495, 0x0493, 0x0492, 0x0491, 0x0490, 0x048f, 0x048f, 0x048e, 0x048e, 0x048f, 0x048f, 0x0490, 0x0491, 0x0492, 
+	0x0493, 0x0495, 0x0496, 0x0498, 0x049a, 0x049b, 0x049d, 0x049f, 0x04a0, 0x04a2, 0x04a3, 0x04a4, 0x04a5, 0x04a5, 0x04a5, 0x04a5, 
+	0x04a4, 0x04a3, 0x04a2, 0x04a0, 0x049e, 0x049c, 0x049a, 0x0498, 0x0495, 0x0493, 0x0490, 0x048e, 0x048c, 0x048a, 0x0488, 0x0487, 
+	0x0486, 0x0485, 0x0485, 0x0486, 0x0487, 0x048a, 0x048d, 0x0490, 0x0492, 0x0494, 0x0495, 0x0496, 0x0497, 0x0498, 0x0499, 0x049a, 
+	0x049a, 0x049b, 0x049c, 0x049c, 0x049c, 0x049d, 0x049d, 0x049d, 0x049d, 0x049d, 0x049e, 0x049e, 0x049e, 0x049e, 0x049e, 0x049e, 
+	0x049e, 0x01fd, 0x01fc, 0x01fa, 0x01f7, 0x01f2, 0x01ed, 0x01e6, 0x01e0, 0x01d8, 0x01d1, 0x01c9, 0x01c1, 0x01ba, 0x01b2, 0x01ab, 
+	0x01a5, 0x01a0, 0x019b, 0x0198, 0x0196, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 
+	0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 
+	0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0195, 0x0196, 
+	0x0198, 0x019a, 0x019d, 0x01a0, 0x01a3, 0x01a7, 0x01ab, 0x01b0, 0x01b5, 0x01ba, 0x01bf, 0x01c4, 0x01c9, 0x01ce, 0x01d3, 0x01d8, 
+	0x01dd, 0x01e2, 0x01e6, 0x01eb, 0x01ef, 0x01f2, 0x01f5, 0x01f8, 0x01fa, 0x01fc, 0x01fd, 0x01fd, 0xde66, 0xdd53, 0xdacb, 0xd7ea, 
+	0xd5f9, 0xd600, 0xd795, 0xd9c3, 0xdaf0, 0xd965, 0xd708, 0xd5f9, 0xd64e, 0xd72d, 0xd865, 0xd9b5, 0xdaba, 0xdaf0, 0xda94, 0xda3a, 
+	0xd9de, 0xd97f, 0xd919, 0xd8a9, 0xd82e, 0xd79e, 0xd6f6, 0xd63f, 0xd581, 0xd4c5, 0xd411, 0xd36c, 0xd2db, 0xd25f, 0xd1fa, 0xd1ac, 
+	0xd173, 0xd14e, 0xd13b, 0xd137, 0xd140, 0xd20a, 0xd39f, 0xd51b, 0xd5c1, 0xd54b, 0xd42e, 0xd2d2, 0xd1ab, 0xd140, 0xd1b2, 0xd2ad, 
+	0xd410, 0xd5a8, 0xd724, 0xd818, 0xd8a0, 0xd922, 0xd99e, 0xda14, 0xda82, 0xdaea, 0xdb4b, 0xdba5, 0xdbf8, 0xdc45, 0xdc8b, 0xdccb, 
+	0xdcff, 0xdd24, 0xdd3c, 0xdd4b, 0xdd53, 0xdd58, 0xdd5b, 0xdd5e, 0xdd64, 0xdd6c, 0xdd79, 0xdd89, 0xdd9d, 0xddb4, 0xddcd, 0xdde8, 
+	0xde03, 0xde1d, 0xde35, 0xde49, 0xde59, 0xde63, 0xde66, 0x83c7, 0x83ca, 0x83cc, 0x83c0, 0x83ac, 0x83ac, 0x83c8, 0x83e6, 0x83f2, 
+	0x83e1, 0x83bf, 0x83ac, 0x83b1, 0x83be, 0x83cf, 0x83df, 0x83eb, 0x83f2, 0x83f8, 0x83fd, 0x83fe, 0x83f3, 0x83d7, 0x83a5, 0x8354, 
+	0x82de, 0x8244, 0x8188, 0x80ae, 0x7fbb, 0x7eb4, 0x7da2, 0x7c89, 0x7b72, 0x7a63, 0x7961, 0x7870, 0x7795, 0x76d2, 0x7628, 0x759a, 
+	0x7564, 0x7593, 0x75df, 0x7606, 0x75ee, 0x75b9, 0x7585, 0x7570, 0x759a, 0x75e6, 0x7628, 0x7666, 0x76a4, 0x76e1, 0x7717, 0x7744, 
+	0x7772, 0x779e, 0x77ca, 0x77f5, 0x7820, 0x784a, 0x7873, 0x789b, 0x78c3, 0x78eb, 0x7911, 0x7946, 0x7994, 0x79f9, 0x7a6f, 0x7af6, 
+	0x7b8a, 0x7c29, 0x7ccf, 0x7d7b, 0x7e28, 0x7ed5, 0x7f7f, 0x8023, 0x80c0, 0x8152, 0x81da, 0x8254, 0x82bf, 0x8319, 0x8363, 0x8399, 
+	0x83bb, 0x83c7, 0xfa0c, 0xfa32, 0xfa8f, 0xfb02, 0xfb59, 0xfb58, 0xfb03, 0xfa90, 0xfa53, 0xfaa3, 0xfb21, 0xfb59, 0xfb49, 0xfb1d, 
+	0xfadf, 0xfa9b, 0xfa65, 0xfa53, 0xfa59, 0xfa5e, 0xfa6b, 0xfa87, 0xfabb, 0xfb0f, 0xfb8b, 0xfc36, 0xfd0e, 0xfe0b, 0xff25, 0x0054, 
+	0x018f, 0x02cf, 0x040d, 0x0543, 0x066d, 0x0785, 0x088a, 0x0979, 0x0a4f, 0x0b0c, 0x0bae, 0x0c25, 0x0c69, 0x0c82, 0x0c85, 0x0c7e, 
+	0x0c67, 0x0c3b, 0x0bfc, 0x0bae, 0x0b78, 0x0b73, 0x0b8f, 0x0bb8, 0x0bda, 0x0bdd, 0x0bc9, 0x0bb3, 0x0b9b, 0x0b80, 0x0b64, 0x0b46, 
+	0x0b27, 0x0b05, 0x0ae2, 0x0abd, 0x0a97, 0x0a6e, 0x0a2e, 0x09c1, 0x0930, 0x087f, 0x07b3, 0x06d2, 0x05e0, 0x04e3, 0x03dd, 0x02d4, 
+	0x01cb, 0x00c6, 0xffc8, 0xfed6, 0xfdf1, 0xfd1e, 0xfc5d, 0xfbb4, 0xfb23, 0xfaad, 0xfa55, 0xfa1f, 0xfa0c, 0x2d23, 0x2d21, 0x2d19, 
+	0x2d0d, 0x2cfd, 0x2cea, 0x2cd4, 0x2cbc, 0x2ca2, 0x2c88, 0x2c6c, 0x2c51, 0x2c36, 0x2c1c, 0x2c04, 0x2bef, 0x2bdb, 0x2bcc, 0x2bc0, 
+	0x2bb8, 0x2bb5, 0x2bba, 0x2bc7, 0x2bdb, 0x2bf6, 0x2c17, 0x2c3c, 0x2c65, 0x2c90, 0x2cbe, 0x2cec, 0x2d1b, 0x2d48, 0x2d74, 0x2d9d, 
+	0x2dc2, 0x2de3, 0x2dfe, 0x2e12, 0x2e1f, 0x2e23, 0x2e1f, 0x2e12, 0x2dfd, 0x2de2, 0x2dc2, 0x2d9c, 0x2d73, 0x2d47, 0x2d1a, 0x2ceb, 
+	0x2cbc, 0x2c8e, 0x2c62, 0x2c39, 0x2c14, 0x2bf3, 0x2bd8, 0x2bc4, 0x2bb7, 0x2bb3, 0x2bb4, 0x2bb7, 0x2bbd, 0x2bc4, 0x2bce, 0x2bd9, 
+	0x2be5, 0x2bf3, 0x2c02, 0x2c12, 0x2c23, 0x2c34, 0x2c46, 0x2c58, 0x2c6b, 0x2c7d, 0x2c90, 0x2ca1, 0x2cb3, 0x2cc4, 0x2cd4, 0x2ce3, 
+	0x2cf0, 0x2cfd, 0x2d08, 0x2d11, 0x2d19, 0x2d1f, 0x2d22, 0x2d23, 0xf97f, 0xf980, 0xf982, 0xf986, 0xf98b, 0xf991, 0xf998, 0xf9a0, 
+	0xf9a8, 0xf9b1, 0xf9b9, 0xf9c2, 0xf9ca, 0xf9d3, 0xf9da, 0xf9e1, 0xf9e7, 0xf9ec, 0xf9f0, 0xf9f2, 0xf9f3, 0xf9f2, 0xf9f0, 0xf9eb, 
+	0xf9e6, 0xf9df, 0xf9d7, 0xf9cf, 0xf9c6, 0xf9bc, 0xf9b2, 0xf9a9, 0xf99f, 0xf996, 0xf98e, 0xf986, 0xf97f, 0xf979, 0xf975, 0xf973, 
+	0xf972, 0xf973, 0xf975, 0xf979, 0xf97f, 0xf986, 0xf98d, 0xf996, 0xf99f, 0xf9a9, 0xf9b2, 0xf9bc, 0xf9c5, 0xf9ce, 0xf9d7, 0xf9df, 
+	0xf9e5, 0xf9eb, 0xf9ef, 0xf9f2, 0xf9f3, 0xf9f3, 0xf9f1, 0xf9f0, 0xf9ed, 0xf9ea, 0xf9e7, 0xf9e3, 0xf9df, 0xf9da, 0xf9d5, 0xf9d0, 
+	0xf9ca, 0xf9c5, 0xf9bf, 0xf9b9, 0xf9b3, 0xf9ae, 0xf9a8, 0xf9a2, 0xf99d, 0xf998, 0xf993, 0xf98f, 0xf98b, 0xf988, 0xf985, 0xf982, 
+	0xf981, 0xf97f, 0xf97f, 0xfbe6, 0xfbe6, 0xfbe6, 0xfbe6, 0xfbe5, 0xfbe5, 0xfbe4, 0xfbe4, 0xfbe3, 0xfbe2, 0xfbe1, 0xfbe0, 0xfbe0, 
+	0xfbdf, 0xfbde, 0xfbdd, 0xfbdd, 0xfbdc, 0xfbdc, 0xfbdb, 0xfbdb, 0xfbdb, 0xfbdb, 0xfbdb, 0xfbda, 0xfbda, 0xfbd9, 0xfbd9, 0xfbd8, 
+	0xfbd7, 0xfbd7, 0xfbd6, 0xfbd5, 0xfbd4, 0xfbd3, 0xfbd2, 0xfbd2, 0xfbd1, 0xfbd1, 0xfbd0, 0xfbd0, 0xfbd0, 0xfbd1, 0xfbd1, 0xfbd2, 
+	0xfbd3, 0xfbd3, 0xfbd4, 0xfbd5, 0xfbd6, 0xfbd7, 0xfbd8, 0xfbd9, 0xfbd9, 0xfbda, 0xfbda, 0xfbdb, 0xfbdb, 0xfbdb, 0xfbdc, 0xfbdc, 
+	0xfbdc, 0xfbdc, 0xfbdc, 0xfbdc, 0xfbdd, 0xfbdd, 0xfbdd, 0xfbde, 0xfbde, 0xfbdf, 0xfbdf, 0xfbe0, 0xfbe0, 0xfbe1, 0xfbe2, 0xfbe2, 
+	0xfbe3, 0xfbe3, 0xfbe4, 0xfbe4, 0xfbe4, 0xfbe5, 0xfbe5, 0xfbe5, 0xfbe6, 0xfbe6, 0xfbe6, 0xfbe6, 0xfbe6, 0xfbe6, 0x2d23, 0x2d21, 
+	0x2d19, 0x2d0d, 0x2cfd, 0x2cea, 0x2cd4, 0x2cbc, 0x2ca2, 0x2c88, 0x2c6c, 0x2c51, 0x2c36, 0x2c1c, 0x2c04, 0x2bef, 0x2bdb, 0x2bcc, 
+	0x2bc0, 0x2bb8, 0x2bb5, 0x2bba, 0x2bc7, 0x2bdb, 0x2bf6, 0x2c17, 0x2c3c, 0x2c65, 0x2c90, 0x2cbe, 0x2cec, 0x2d1b, 0x2d48, 0x2d74, 
+	0x2d9d, 0x2dc2, 0x2de3, 0x2dfe, 0x2e12, 0x2e1f, 0x2e23, 0x2e1f, 0x2e12, 0x2dfd, 0x2de2, 0x2dc2, 0x2d9c, 0x2d73, 0x2d47, 0x2d1a, 
+	0x2ceb, 0x2cbc, 0x2c8e, 0x2c62, 0x2c39, 0x2c14, 0x2bf3, 0x2bd8, 0x2bc4, 0x2bb7, 0x2bb3, 0x2bb4, 0x2bb7, 0x2bbd, 0x2bc4, 0x2bce, 
+	0x2bd9, 0x2be5, 0x2bf3, 0x2c02, 0x2c12, 0x2c23, 0x2c34, 0x2c46, 0x2c58, 0x2c6b, 0x2c7d, 0x2c90, 0x2ca1, 0x2cb3, 0x2cc4, 0x2cd4, 
+	0x2ce3, 0x2cf0, 0x2cfd, 0x2d08, 0x2d11, 0x2d19, 0x2d1f, 0x2d22, 0x2d23, 0x0680, 0x067f, 0x067d, 0x0679, 0x0674, 0x066e, 0x0667, 
+	0x065f, 0x0657, 0x064e, 0x0646, 0x063d, 0x0635, 0x062c, 0x0625, 0x061e, 0x0618, 0x0613, 0x060f, 0x060d, 0x060c, 0x060d, 0x060f, 
+	0x0614, 0x0619, 0x0620, 0x0628, 0x0630, 0x0639, 0x0643, 0x064d, 0x0656, 0x0660, 0x0669, 0x0671, 0x0679, 0x0680, 0x0686, 0x068a, 
+	0x068c, 0x068d, 0x068c, 0x068a, 0x0686, 0x0680, 0x0679, 0x0672, 0x0669, 0x0660, 0x0656, 0x064d, 0x0643, 0x063a, 0x0631, 0x0628, 
+	0x0620, 0x061a, 0x0614, 0x0610, 0x060d, 0x060c, 0x060c, 0x060e, 0x060f, 0x0612, 0x0615, 0x0618, 0x061c, 0x0620, 0x0625, 0x062a, 
+	0x062f, 0x0635, 0x063a, 0x0640, 0x0646, 0x064c, 0x0651, 0x0657, 0x065d, 0x0662, 0x0667, 0x066c, 0x0670, 0x0674, 0x0677, 0x067a, 
+	0x067d, 0x067e, 0x067f, 0x0680, 0x0419, 0x0419, 0x0419, 0x0419, 0x041a, 0x041a, 0x041b, 0x041b, 0x041c, 0x041d, 0x041e, 0x041f, 
+	0x041f, 0x0420, 0x0421, 0x0422, 0x0422, 0x0423, 0x0423, 0x0424, 0x0424, 0x0424, 0x0424, 0x0424, 0x0425, 0x0425, 0x0426, 0x0426, 
+	0x0427, 0x0428, 0x0428, 0x0429, 0x042a, 0x042b, 0x042c, 0x042d, 0x042d, 0x042e, 0x042e, 0x042f, 0x042f, 0x042f, 0x042e, 0x042e, 
+	0x042d, 0x042c, 0x042c, 0x042b, 0x042a, 0x0429, 0x0428, 0x0427, 0x0426, 0x0426, 0x0425, 0x0425, 0x0424, 0x0424, 0x0424, 0x0423, 
+	0x0423, 0x0423, 0x0423, 0x0423, 0x0423, 0x0422, 0x0422, 0x0422, 0x0421, 0x0421, 0x0420, 0x0420, 0x041f, 0x041f, 0x041e, 0x041d, 
+	0x041d, 0x041c, 0x041c, 0x041b, 0x041b, 0x041b, 0x041a, 0x041a, 0x041a, 0x0419, 0x0419, 0x0419, 0x0419, 0x0419, 0x0419, 0xb7ed, 
+	0xb822, 0xb8a7, 0xb954, 0xba01, 0xba86, 0xbabb, 0xbaa7, 0xba71, 0xba1e, 0xb9b4, 0xb939, 0xb8b4, 0xb829, 0xb79e, 0xb71a, 0xb6a2, 
+	0xb63b, 0xb5eb, 0xb5b7, 0xb5a4, 0xb5a4, 0xb5a5, 0xb5a5, 0xb5a6, 0xb5a8, 0xb5a9, 0xb5ac, 0xb5af, 0xb5b3, 0xb5b7, 0xb5bd, 0xb5c3, 
+	0xb5ca, 0xb5d2, 0xb5dc, 0xb5e6, 0xb5f2, 0xb5ff, 0xb60d, 0xb61d, 0xb651, 0xb6bd, 0xb74a, 0xb7e0, 0xb86a, 0xb8cf, 0xb8f6, 0xb8e8, 
+	0xb8c1, 0xb889, 0xb84a, 0xb80b, 0xb7d5, 0xb7b0, 0xb7a4, 0xb7ae, 0xb7c3, 0xb7e2, 0xb807, 0xb831, 0xb85d, 0xb889, 0xb8b2, 0xb8d6, 
+	0xb8f2, 0xb905, 0xb90c, 0xb90b, 0xb906, 0xb900, 0xb8f7, 0xb8ec, 0xb8df, 0xb8d0, 0xb8c0, 0xb8af, 0xb89e, 0xb88b, 0xb878, 0xb866, 
+	0xb853, 0xb841, 0xb830, 0xb821, 0xb812, 0xb806, 0xb7fc, 0xb7f4, 0xb7ef, 0xb7ed, 0x0000, 0xffcd, 0xff4c, 0xfe9e, 0xfde5, 0xfd44, 
+	0xfcdf, 0xfca7, 0xfc78, 0xfc51, 0xfc31, 0xfc18, 0xfc04, 0xfbf6, 0xfbec, 0xfbe6, 0xfbe3, 0xfbe2, 0xfbe2, 0xfbe3, 0xfbe3, 0xfbe7, 
+	0xfbf4, 0xfc07, 0xfc22, 0xfc44, 0xfc6c, 0xfc99, 0xfccb, 0xfd02, 0xfd3d, 0xfd7c, 0xfdbe, 0xfe02, 0xfe48, 0xfe90, 0xfeda, 0xff23, 
+	0xff6d, 0xffb7, 0x0000, 0x0047, 0x008d, 0x00d1, 0x0114, 0x0154, 0x0191, 0x01cb, 0x0200, 0x0233, 0x0264, 0x0295, 0x02c6, 0x02f9, 
+	0x032f, 0x0369, 0x03a9, 0x03ec, 0x0432, 0x0477, 0x04bb, 0x04fb, 0x0536, 0x056a, 0x0596, 0x05b7, 0x05cd, 0x05d4, 0x05cc, 0x05b5, 
+	0x0591, 0x0560, 0x0524, 0x04df, 0x0491, 0x043d, 0x03e3, 0x0385, 0x0325, 0x02c4, 0x0263, 0x0204, 0x01a8, 0x0151, 0x0101, 0x00b9, 
+	0x007a, 0x0047, 0x0021, 0x0008, 0x0000, 0xffff, 0x0008, 0x001d, 0x0036, 0x004d, 0x0060, 0x006c, 0x0074, 0x007d, 0x0086, 0x0090, 
+	0x009a, 0x00a3, 0x00ad, 0x00b5, 0x00bd, 0x00c4, 0x00ca, 0x00ce, 0x00d1, 0x00d1, 0x00d1, 0x00ce, 0x00ca, 0x00c5, 0x00be, 0x00b6, 
+	0x00ad, 0x00a3, 0x0098, 0x008c, 0x007f, 0x0072, 0x0064, 0x0056, 0x0048, 0x0039, 0x002b, 0x001c, 0x000e, 0xffff, 0xfff1, 0xffe5, 
+	0xffda, 0xffd0, 0xffc7, 0xffbf, 0xffb7, 0xffae, 0xffa5, 0xff9c, 0xff92, 0xff87, 0xff7d, 0xff72, 0xff67, 0xff5d, 0xff52, 0xff48, 
+	0xff3e, 0xff35, 0xff2d, 0xff26, 0xff20, 0xff1c, 0xff19, 0xff17, 0xff16, 0xff17, 0xff1a, 0xff20, 0xff27, 0xff2f, 0xff3a, 0xff45, 
+	0xff52, 0xff5f, 0xff6d, 0xff7c, 0xff8c, 0xff9b, 0xffaa, 0xffb9, 0xffc7, 0xffd4, 0xffe0, 0xffea, 0xfff3, 0xfff9, 0xfffe, 0xffff, 
+};
+
+JointIndex gRatSkelIdleAnimJointIndices[11] = {
+	{ 0x0000, 0x0006, 0x0001, },
+	{ 0x0061, 0x0000, 0x0000, },
+	{ 0x0002, 0x0000, 0x0000, },
+	{ 0x0003, 0x0004, 0x0004, },
+	{ 0x0005, 0x0004, 0x0004, },
+	{ 0x0003, 0x0004, 0x0004, },
+	{ 0x0005, 0x0004, 0x0004, },
+	{ 0x00bc, 0x0117, 0x0172, },
+	{ 0x01cd, 0x0228, 0x0283, },
+	{ 0x02de, 0x0339, 0x0394, },
+	{ 0x03ef, 0x044a, 0x04a5, },
+};
+
+AnimationHeader gRatSkelIdleAnim = { { 91 }, gRatSkelIdleAnimFrameData, gRatSkelIdleAnimJointIndices, 6 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_idle.h b/assets_hm_pack/objects/object_rat/rat_anim_idle.h
new file mode 100644
index 000000000..f89138176
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_idle.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelIdleAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_notice.c b/assets_hm_pack/objects/object_rat/rat_anim_notice.c
new file mode 100644
index 000000000..d694b6dc7
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_notice.c
@@ -0,0 +1,30 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelNoticeAnimFrameData[129] = {
+	0x0000, 0x3fe3, 0xffff, 0x04a0, 0x04c3, 0x0516, 0x0579, 0x05cc, 0x05ee, 0xfff0, 0xffa8, 0xfefa, 0xfe2b, 0xfd7e, 0xfd35, 0x01fd, 
+	0xfe87, 0xf61c, 0xebef, 0xe383, 0xe00e, 0x61ef, 0x60bc, 0x5ddd, 0x5a6f, 0x5790, 0x565c, 0xbbaf, 0xbd4e, 0xc14c, 0xc668, 0xcb16, 
+	0xcd2f, 0xffff, 0x0227, 0x074f, 0x0d5a, 0x122d, 0x1419, 0xffff, 0x002d, 0x00f6, 0x02a2, 0x04ba, 0x05cf, 0x61ef, 0x60bc, 0x5ddd, 
+	0x5a6f, 0x5790, 0x565c, 0xbbaf, 0xbd50, 0xc14e, 0xc659, 0xcae6, 0xcce9, 0xffff, 0xfe09, 0xf958, 0xf3d9, 0xef74, 0xedb3, 0xffff, 
+	0xffd6, 0xff1f, 0xfd9d, 0xfbc0, 0xfacb, 0xde66, 0xddad, 0xdca6, 0xdc3b, 0xdcc0, 0xdd8d, 0x83c7, 0x82b7, 0x80e5, 0x7fff, 0x7fff, 
+	0x7fff, 0xfa0c, 0xfbcc, 0xfea6, 0xffff, 0xffff, 0xffff, 0x2d23, 0x2f5f, 0x3494, 0x3a5e, 0x3eb8, 0x4063, 0xf97f, 0xfa5c, 0xfd04, 
+	0x012f, 0x0557, 0x0737, 0xfbe6, 0xf976, 0xf3bd, 0xed43, 0xe845, 0xe64f, 0x2d23, 0x2f6f, 0x34df, 0x3b25, 0x401c, 0x4218, 0x0680, 
+	0x05cd, 0x03ad, 0x0056, 0xfcfa, 0xfb73, 0x0419, 0x05f9, 0x0a5b, 0x0f42, 0x12f7, 0x1465, 0xb7ed, 0xbb21, 0xc620, 0xd998, 0xe7d1, 
+	0xebcd, };
+
+JointIndex gRatSkelNoticeAnimJointIndices[11] = {
+	{ 0x0000, 0x0003, 0x0009, },
+	{ 0x000f, 0x0000, 0x0000, },
+	{ 0x0001, 0x0000, 0x0000, },
+	{ 0x0015, 0x0002, 0x0002, },
+	{ 0x001b, 0x0021, 0x0027, },
+	{ 0x002d, 0x0002, 0x0002, },
+	{ 0x0033, 0x0039, 0x003f, },
+	{ 0x0045, 0x004b, 0x0051, },
+	{ 0x0057, 0x005d, 0x0063, },
+	{ 0x0069, 0x006f, 0x0075, },
+	{ 0x007b, 0x0000, 0x0002, },
+};
+
+AnimationHeader gRatSkelNoticeAnim = { { 6 }, gRatSkelNoticeAnimFrameData, gRatSkelNoticeAnimJointIndices, 3 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_notice.h b/assets_hm_pack/objects/object_rat/rat_anim_notice.h
new file mode 100644
index 000000000..15de9db6c
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_notice.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelNoticeAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_run.c b/assets_hm_pack/objects/object_rat/rat_anim_run.c
new file mode 100644
index 000000000..b18723ba6
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_run.c
@@ -0,0 +1,31 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelRunAnimFrameData[156] = {
+	0x0000, 0x3fe3, 0xffff, 0x03e4, 0x0515, 0x0645, 0x0634, 0x05e8, 0x054d, 0x0491, 0x03f3, 0x03b0, 0xffe5, 0xfff7, 0x0009, 0x0014, 
+	0x001f, 0x0015, 0x0002, 0xfff0, 0xffe8, 0x0854, 0x06d3, 0x044b, 0x02be, 0x0042, 0xfcfd, 0xfe66, 0x0105, 0x026e, 0x7fca, 0x6f45, 
+	0x48cf, 0x1999, 0x03d0, 0x1275, 0x4123, 0x701c, 0x7eef, 0x991e, 0xf9c3, 0x13f1, 0x0c5b, 0xf9c3, 0xe04d, 0xc1a8, 0xa7f9, 0x9ddd, 
+	0x7fca, 0x6f45, 0x48cf, 0x1999, 0x03d0, 0x1275, 0x4123, 0x701c, 0x7eef, 0x991e, 0xf9c3, 0x13f1, 0x0c5b, 0xf9c3, 0xe04d, 0xc1a8, 
+	0xa7f9, 0x9ddd, 0xe951, 0xee4d, 0xf830, 0x0021, 0x031a, 0x0021, 0xf830, 0xee4d, 0xe951, 0x7fff, 0x7ffe, 0x7ffc, 0x7ffc, 0x7ffd, 
+	0x7ffc, 0x7ffc, 0x7ffe, 0x7fff, 0xffff, 0x0005, 0x000e, 0x0016, 0x0019, 0x0016, 0x000e, 0x0005, 0xffff, 0x2065, 0x3893, 0x53e5, 
+	0x675b, 0x6fab, 0x3275, 0x2097, 0x1aa2, 0x1ab2, 0xf8e3, 0xfc32, 0xfc6e, 0xfcaa, 0xfafd, 0xf453, 0xf61f, 0xf6f5, 0xf84f, 0xfdbd, 
+	0xfa2c, 0xf8eb, 0xf784, 0xf60e, 0x039f, 0x03dd, 0x0269, 0xff34, 0x2065, 0x3893, 0x53e5, 0x675b, 0x6fab, 0x3275, 0x2097, 0x1aa2, 
+	0x1ab2, 0x071c, 0x03cd, 0x0391, 0x0355, 0x0502, 0x0bab, 0x09e0, 0x090a, 0x07b0, 0x0242, 0x05d3, 0x0714, 0x087b, 0x09f1, 0xfc60, 
+	0xfc22, 0xfd96, 0x00cb, 0xad1e, 0xaec6, 0xb3cf, 0xbc13, 0xc195, 0xbec0, 0xba88, 0xb7e0, 0xb6f9, };
+
+JointIndex gRatSkelRunAnimJointIndices[11] = {
+	{ 0x0000, 0x0003, 0x000c, },
+	{ 0x0015, 0x0000, 0x0000, },
+	{ 0x0001, 0x0000, 0x0000, },
+	{ 0x001e, 0x0002, 0x0002, },
+	{ 0x0027, 0x0000, 0x0000, },
+	{ 0x0030, 0x0002, 0x0002, },
+	{ 0x0039, 0x0000, 0x0000, },
+	{ 0x0042, 0x004b, 0x0054, },
+	{ 0x005d, 0x0066, 0x006f, },
+	{ 0x0078, 0x0081, 0x008a, },
+	{ 0x0093, 0x0000, 0x0002, },
+};
+
+AnimationHeader gRatSkelRunAnim = { { 9 }, gRatSkelRunAnimFrameData, gRatSkelRunAnimJointIndices, 3 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_run.h b/assets_hm_pack/objects/object_rat/rat_anim_run.h
new file mode 100644
index 000000000..7bf956607
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_run.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelRunAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_startrun.c b/assets_hm_pack/objects/object_rat/rat_anim_startrun.c
new file mode 100644
index 000000000..106587b2b
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_startrun.c
@@ -0,0 +1,39 @@
+#include "ultra64.h"
+#include "global.h"
+
+s16 gRatSkelStartrunAnimFrameData[276] = {
+	0x0000, 0x3fe3, 0xffff, 0x05ee, 0x05ab, 0x0516, 0x047c, 0x042a, 0x0534, 0x0645, 0x0632, 0x05e8, 0x054d, 0x0491, 0x03f3, 0x03b0, 
+	0xfd35, 0xfd30, 0xfd35, 0xfd61, 0xfdd2, 0xff09, 0x0009, 0x0022, 0x001f, 0x0015, 0x0003, 0xfff0, 0xffe8, 0xe00e, 0xe12f, 0xe4aa, 
+	0xeab8, 0xf3b9, 0xfead, 0x044b, 0x0357, 0x0042, 0xfcfd, 0xfe66, 0x0105, 0x026e, 0x565c, 0x5ca8, 0x6b0c, 0x7977, 0x7fca, 0x6f45, 
+	0x48cf, 0x1999, 0x03d0, 0x1275, 0x4123, 0x701c, 0x7eef, 0xcd2f, 0xccce, 0xcc8f, 0xcd5f, 0xcf7c, 0xf9c3, 0x13f1, 0x0c5b, 0xf9c3, 
+	0xe04d, 0xc1a8, 0xa7f9, 0x9ddd, 0x1419, 0x1111, 0x0a2f, 0x0328, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x05cf, 0x04d2, 0x02d1, 0x00e7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x565c, 0x5ca8, 
+	0x6b0c, 0x7977, 0x7fca, 0x6f45, 0x48cf, 0x1999, 0x03d0, 0x1275, 0x4123, 0x701c, 0x7eef, 0xcce9, 0xcc9e, 0xcc7e, 0xcd5d, 0xcf7c, 
+	0xf9c3, 0x13f1, 0x0c5b, 0xf9c3, 0xe04d, 0xc1a8, 0xa7f9, 0x9ddd, 0xedb3, 0xf079, 0xf6c0, 0xfd20, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xfacb, 0xfbaa, 0xfd73, 0xff2d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
+	0x0000, 0x0000, 0xdd8d, 0xde4c, 0xe096, 0xe455, 0xe951, 0xf0e5, 0xf9ca, 0x0083, 0x031a, 0x0021, 0xf830, 0xee4d, 0xe951, 0x7fff, 
+	0x7fff, 0x7fff, 0x7fff, 0x7fff, 0x7ffe, 0x7ffc, 0x7ffc, 0x7ffd, 0x7ffc, 0x7ffc, 0x7ffe, 0x7fff, 0xffff, 0xffff, 0xffff, 0xffff, 
+	0xffff, 0x0005, 0x000e, 0x0016, 0x0019, 0x0016, 0x000e, 0x0005, 0xffff, 0x4063, 0x3c21, 0x3178, 0x2591, 0x2065, 0x3893, 0x53ee, 
+	0x675f, 0x6fab, 0x3275, 0x20ea, 0x1b4c, 0x1ab2, 0x0737, 0x0405, 0xfdca, 0xf9c3, 0xf8e3, 0xfc32, 0xfc70, 0xfcb3, 0xfafd, 0xf453, 
+	0xf6ab, 0xf7e8, 0xf84f, 0xe64f, 0xe8f8, 0xf063, 0xf97a, 0xfdbd, 0xfa2c, 0xf8a3, 0xf761, 0xf60e, 0x039f, 0x02e8, 0x0080, 0xff34, 
+	0x4218, 0x3d62, 0x31fa, 0x25af, 0x2065, 0x3893, 0x53ee, 0x675f, 0x6fab, 0x3275, 0x20ea, 0x1b4c, 0x1ab2, 0xfb73, 0xfe11, 0x0320, 
+	0x0664, 0x071c, 0x03cd, 0x038f, 0x034b, 0x0502, 0x0bab, 0x0954, 0x0817, 0x07b0, 0x1465, 0x1269, 0x0cb7, 0x059c, 0x0242, 0x05d3, 
+	0x075c, 0x089e, 0x09f1, 0xfc60, 0xfd17, 0xff7f, 0x00cb, 0xebcd, 0xe7bc, 0xdf97, 0xd837, 0xd36c, 0xd043, 0xccca, 0xc809, 0xc195, 
+	0xbb50, 0xb831, 0xb72a, 0xb6f9, };
+
+JointIndex gRatSkelStartrunAnimJointIndices[11] = {
+	{ 0x0000, 0x0003, 0x0010, },
+	{ 0x001d, 0x0000, 0x0000, },
+	{ 0x0001, 0x0000, 0x0000, },
+	{ 0x002a, 0x0002, 0x0002, },
+	{ 0x0037, 0x0044, 0x0051, },
+	{ 0x005e, 0x0002, 0x0002, },
+	{ 0x006b, 0x0078, 0x0085, },
+	{ 0x0092, 0x009f, 0x00ac, },
+	{ 0x00b9, 0x00c6, 0x00d3, },
+	{ 0x00e0, 0x00ed, 0x00fa, },
+	{ 0x0107, 0x0000, 0x0000, },
+};
+
+AnimationHeader gRatSkelStartrunAnim = { { 13 }, gRatSkelStartrunAnimFrameData, gRatSkelStartrunAnimJointIndices, 3 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_anim_startrun.h b/assets_hm_pack/objects/object_rat/rat_anim_startrun.h
new file mode 100644
index 000000000..83cc2aad7
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_anim_startrun.h
@@ -0,0 +1 @@
+extern AnimationHeader gRatSkelStartrunAnim;
diff --git a/assets_hm_pack/objects/object_rat/rat_skel.c b/assets_hm_pack/objects/object_rat/rat_skel.c
new file mode 100644
index 000000000..fe6e78813
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_skel.c
@@ -0,0 +1,660 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gRatSkel_Rat_Fur_01_ci8[] = {
+	0x0000000000000001, 0x0202010302040303, 0x0500060708090a0b, 0x0b0b0b000c03030d, 0x00000000000e040f, 0x0010010b11120b13, 0x1415160417181904, 0x0e1a0003030d030d, 
+	0x041b001b0b001c04, 0x1d1e111f1a202122, 0x230a1f240421000a, 0x15140225250d0d0d, 0x07002605121e0426, 0x271a2829241d2a23, 0x2b2c242d121f0818, 0x08042e2f2525250d, 
+	0x05011011041a0804, 0x1f242b301f221a23, 0x30312914262e1100, 0x080b040b2f25320d, 0x03330b000a140012, 0x1434351322360437, 0x35382e390b140c03, 0x0b15393903030303, 
+	0x031b030010261737, 0x0a37020435161a2e, 0x3a120e0b0418063b, 0x0b0f063c03000203, 0x030003090e043d3e, 0x3b3b020000123e18, 0x3b172e13041c0416, 0x0f3f3c06003b0700, 
+	0x000b034008271f04, 0x1202252f0b132f39, 0x2e08042e2e11070d, 0x320d030007410032, 0x1c00020b1a244242, 0x2e2f251b07250007, 0x1b002137371a0025, 0x0d0c0300022f4325, 
+	0x000000000b391a44, 0x1e3c001b45462603, 0x000021282447063c, 0x0c39320343432503, 0x0000000000030a42, 0x1e03000048334803, 0x2507041a1f184325, 0x1e0c252503031b0c, 
+	0x000000000b002525, 0x4325031b43030303, 0x030d1e421703491b, 0x1e00030c00000000, 0x00000c0012022525, 0x2525031b00000033, 0x1b334a080e4b4b0c, 0x000b0b1e01010100, 
+	0x1b030d2511032525, 0x25321b000000001b, 0x0301013325482503, 0x010b0b0b1e1e0101, 0x033225070146253c, 0x0300330000000000, 0x030303434b460d0c, 0x011e0b0b1e011e01, 
+	
+};
+
+u64 gRatSkel_Rat_Fur_01_pal_rgba16[] = {
+	0x398d398f418f314b, 0x4a1149cf314941d1, 0x5213398b4a5341cf, 0x318d294b418d394b, 0x4a13525552534a51, 0x5a9749d1420f5251, 0x39cd4a555a95314d, 0x4a0f5ad739cf62d7, 
+	0x73195a93735b6b1b, 0x6b19290942116b5b, 0x6ad77b9d6b177bdf, 0x62957b9b5a55310b, 0x6ad9731b290b394d, 0x735d62d962996297, 0x739d318b529341cd, 0x294973595a533109, 
+	0x419149d352952109, 0x631928c7210762d5, 0x18c718c9521120c7, 
+};
+
+u64 gRatSkel_Rat_Eye_00_ci8[] = {
+	0x0001020202020300, 0x0404050606070801, 0x04090a0b0c0c0d02, 0x020e0f100c0c1112, 0x0113141516111712, 0x1811191a111b121c, 0x02121d1d1e121212, 0x02021f121f1f1212, 
+	
+};
+
+u64 gRatSkel_Rat_Eye_00_pal_rgba16[] = {
+	0x41cf398f398d39cf, 0x418f41d152532909, 0x294b4a1162d95a95, 0x000110854a13418b, 0x41410843314b2109, 0x9b01ec8128c118c7, 0x418d1041084118c5, 0x290b188520c7394d, 
+	
+};
+
+u64 gRatSkel_Rat_Nose_00_ci8[] = {
+	0x0000000101010101, 0x0202000103040506, 0x0202010307080908, 0x0200030a0b080808, 0x0c000d0e0f100f11, 0x0201121313041415, 0x020103161718191a, 0x021b1b1c161d1e1f, 
+	0x02011b200d211f22, 0x02011b1b20232425, 0x02021b2626270102, 0x022828291b270028, 0x022a282b2b252c2d, 0x02020228282e2f2f, 0x28020202011b3030, 0x0202020202020202, 
+	
+};
+
+u64 gRatSkel_Rat_Nose_00_pal_rgba16[] = {
+	0x418f41cf398d49cf, 0x621172957ad56a93, 0x83178b576a5382d7, 0x418d520f7a937253, 0x72936a515211518d, 0x59cf598f39091045, 0x51d1494b490b4a11, 0x414d51cf494d38cb, 
+	0x41cd5a113089394b, 0x30c928c9521349d1, 0x314b41d1314d2909, 0x20c72087310b390b, 0x5253000000000000
+};
+
+u64 gRatSkel_Rat_Ear_00_ci8[] = {
+	0x0000010203040500, 0x0600020708090a0b, 0x060c0d0e0f041011, 0x121314150f161718, 0x0b06191a0f1b1c18, 0x1d0c111e0a1f2012, 0x1200002122231212, 0x121d0c1212121212, 
+	
+};
+
+u64 gRatSkel_Rat_Ear_00_pal_rgba16[] = {
+	0x41cf4a135a95518d, 0x4909314d418f494b, 0x48c749075109398f, 0x4a11414d40c540c7, 0x698b394d398d5211, 0x288538455949720f, 0x314b30872843618b, 0x8251418d30436a0d, 
+	0x498d4109598b3909, 
+};
+
+u64 gRatSkel_Rat_Tooth_00_ci8[] = {
+	0x0001020304050607, 0x08090a0b060c0c0d, 0x020a0b070d0e0f10, 0x0311121310141516, 0x05120e1015161718, 0x1213191a1b1c1d1e, 0x0d131f1a171d1e1e, 0x0d0e1f20181e2122, 
+	
+};
+
+u64 gRatSkel_Rat_Tooth_00_pal_rgba16[] = {
+	0xe6f3ce27b51d9c55, 0x94138bd1834f7b4f, 0xce29b55f9c578bd3, 0x730d6acd624b5a4b, 0x52098b93730f628b, 0x49874187310520c5, 0x108351c9394728c5, 0x18831043084149c9, 
+	0x2905080100010000
+};
+
+u64 gRatSkel_Rat_Whisker_00_ia8[] = {
+	0x7070707070707070, 0x7070707070707070, 0x70707070ff707070, 0x7070707070707070, 0x7070707070efef70, 0x7070707070707070, 0x70707070707070ef, 0x7070707070707070, 
+	0x7070707070707070, 0xef70707070707070, 0x707070ff70707070, 0x70df707070707070, 0x70707070efef7070, 0x7070df7070706060, 0x707070707070efef, 0x707070cf60606060, 
+	0x7070707070707070, 0xdf707060cf606060, 0x7070707070707070, 0x70df706060bf6060, 0x70efefefef707070, 0x7070cf6060bf6060, 0x7070707070efefdf, 0xdf7060bfbf60af60, 
+	0x7070707070707070, 0x70cfcf6060afaf60, 0x7070707070707070, 0x706060bfbf60af50, 0x7070707070707070, 0x7060606060afaf50, 0x7070707070707070, 0x7060606060605050, 
+	
+};
+
+Vtx gRatSkel_Body_mesh_layer_Opaque_vtx_0[15] = {
+	{{ {0, -580, -322}, 0, {784, 48}, {0, 123, 223, 255} }},
+	{{ {-585, -408, 115}, 0, {752, 176}, {148, 200, 218, 255} }},
+	{{ {-468, 411, -139}, 0, {528, 80}, {153, 5, 182, 255} }},
+	{{ {0, 351, -492}, 0, {528, -16}, {0, 255, 129, 255} }},
+	{{ {0, 1233, -338}, 0, {304, 32}, {0, 18, 130, 255} }},
+	{{ {-261, 1662, -108}, 0, {176, 80}, {170, 91, 233, 255} }},
+	{{ {-513, 1228, 467}, 0, {304, 272}, {135, 38, 2, 255} }},
+	{{ {-661, 484, 614}, 0, {496, 304}, {151, 221, 62, 255} }},
+	{{ {-585, -408, 115}, 0, {752, 176}, {148, 200, 218, 255} }},
+	{{ {261, 1662, -108}, 0, {176, 80}, {69, 106, 246, 255} }},
+	{{ {468, 411, -139}, 0, {528, 80}, {103, 5, 182, 255} }},
+	{{ {513, 1228, 467}, 0, {304, 272}, {121, 38, 2, 255} }},
+	{{ {661, 484, 614}, 0, {496, 304}, {105, 221, 62, 255} }},
+	{{ {585, -408, 115}, 0, {752, 176}, {108, 200, 218, 255} }},
+	{{ {585, -408, 115}, 0, {752, 176}, {108, 200, 218, 255} }},
+};
+
+Gfx gRatSkel_Body_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Body_mesh_layer_Opaque_vtx_0 + 0, 15, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 3, 2, 0, 4, 2, 5, 0),
+	gsSP2Triangles(2, 6, 5, 0, 2, 7, 6, 0),
+	gsSP2Triangles(8, 7, 2, 0, 5, 9, 4, 0),
+	gsSP2Triangles(4, 9, 10, 0, 9, 11, 10, 0),
+	gsSP2Triangles(11, 12, 10, 0, 12, 13, 10, 0),
+	gsSP2Triangles(4, 10, 3, 0, 10, 0, 3, 0),
+	gsSP1Triangle(10, 14, 0, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Arm_L_mesh_layer_Opaque_vtx_0[9] = {
+	{{ {-46, 69, 160}, 0, {240, 368}, {39, 30, 117, 255} }},
+	{{ {209, 241, -205}, 0, {144, 336}, {112, 13, 198, 255} }},
+	{{ {-29, 342, 114}, 0, {176, 432}, {235, 234, 123, 255} }},
+	{{ {-130, 256, -176}, 0, {144, 368}, {194, 39, 104, 255} }},
+	{{ {661, 484, 614}, 0, {496, 304}, {105, 221, 62, 255} }},
+	{{ {513, 1228, 467}, 0, {304, 272}, {121, 38, 2, 255} }},
+	{{ {27, 1238, 617}, 0, {144, 368}, {233, 115, 49, 255} }},
+	{{ {10, 1069, 814}, 0, {240, 368}, {246, 15, 126, 255} }},
+	{{ {0, 379, 756}, 0, {528, 336}, {0, 193, 110, 255} }},
+};
+
+Gfx gRatSkel_Arm_L_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Arm_L_mesh_layer_Opaque_vtx_0 + 0, 4, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Arm_L_mesh_layer_Opaque_vtx_0 + 4, 5, 4),
+	gsSP2Triangles(4, 5, 0, 0, 1, 0, 5, 0),
+	gsSP2Triangles(2, 0, 1, 0, 3, 0, 2, 0),
+	gsSP2Triangles(6, 0, 3, 0, 6, 7, 0, 0),
+	gsSP2Triangles(8, 0, 7, 0, 4, 0, 8, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Hand_L_mesh_layer_Opaque_vtx_0[7] = {
+	{{ {-111, 293, 100}, 0, {144, 496}, {161, 49, 68, 255} }},
+	{{ {84, 268, 123}, 0, {144, 496}, {79, 37, 93, 255} }},
+	{{ {18, 306, -150}, 0, {80, 432}, {6, 46, 138, 255} }},
+	{{ {55, 577, -168}, 0, {16, 496}, {20, 109, 194, 255} }},
+	{{ {-130, 256, -176}, 0, {144, 368}, {194, 39, 104, 255} }},
+	{{ {-29, 342, 114}, 0, {176, 432}, {235, 234, 123, 255} }},
+	{{ {209, 241, -205}, 0, {144, 336}, {112, 13, 198, 255} }},
+};
+
+Gfx gRatSkel_Hand_L_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Hand_L_mesh_layer_Opaque_vtx_0 + 0, 4, 0),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Hand_L_mesh_layer_Opaque_vtx_0 + 4, 3, 4),
+	gsSP2Triangles(4, 5, 0, 0, 1, 0, 5, 0),
+	gsSP2Triangles(5, 6, 1, 0, 2, 1, 6, 0),
+	gsSP2Triangles(4, 2, 6, 0, 4, 0, 2, 0),
+	gsSP2Triangles(3, 2, 0, 0, 1, 3, 0, 0),
+	gsSP1Triangle(2, 3, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Arm_R_mesh_layer_Opaque_vtx_0[9] = {
+	{{ {46, 69, 160}, 0, {240, 368}, {226, 34, 119, 255} }},
+	{{ {130, 256, -176}, 0, {144, 368}, {55, 28, 111, 255} }},
+	{{ {29, 342, 114}, 0, {176, 432}, {21, 234, 123, 255} }},
+	{{ {-209, 241, -205}, 0, {144, 336}, {144, 13, 198, 255} }},
+	{{ {0, 379, 756}, 0, {528, 336}, {0, 193, 110, 255} }},
+	{{ {10, 1069, 814}, 0, {240, 368}, {246, 15, 126, 255} }},
+	{{ {27, 1238, 617}, 0, {144, 368}, {233, 115, 49, 255} }},
+	{{ {-513, 1228, 467}, 0, {304, 272}, {135, 38, 2, 255} }},
+	{{ {-661, 484, 614}, 0, {496, 304}, {151, 221, 62, 255} }},
+};
+
+Gfx gRatSkel_Arm_R_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Arm_R_mesh_layer_Opaque_vtx_0 + 0, 4, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Arm_R_mesh_layer_Opaque_vtx_0 + 4, 5, 4),
+	gsSP2Triangles(4, 5, 0, 0, 6, 0, 5, 0),
+	gsSP2Triangles(6, 1, 0, 0, 2, 0, 1, 0),
+	gsSP2Triangles(3, 0, 2, 0, 3, 7, 0, 0),
+	gsSP2Triangles(8, 0, 7, 0, 4, 0, 8, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Hand_R_mesh_layer_Opaque_vtx_0[7] = {
+	{{ {111, 293, 100}, 0, {144, 496}, {95, 49, 68, 255} }},
+	{{ {-18, 306, -150}, 0, {80, 432}, {250, 46, 138, 255} }},
+	{{ {-84, 268, 123}, 0, {144, 496}, {177, 37, 93, 255} }},
+	{{ {-55, 577, -168}, 0, {16, 496}, {236, 109, 194, 255} }},
+	{{ {29, 342, 114}, 0, {176, 432}, {21, 234, 123, 255} }},
+	{{ {130, 256, -176}, 0, {144, 368}, {55, 28, 111, 255} }},
+	{{ {-209, 241, -205}, 0, {144, 336}, {144, 13, 198, 255} }},
+};
+
+Gfx gRatSkel_Hand_R_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Hand_R_mesh_layer_Opaque_vtx_0 + 0, 4, 0),
+	gsSPMatrix(0x0d0000c0, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Hand_R_mesh_layer_Opaque_vtx_0 + 4, 3, 4),
+	gsSP2Triangles(4, 5, 0, 0, 5, 1, 0, 0),
+	gsSP2Triangles(5, 6, 1, 0, 1, 6, 2, 0),
+	gsSP2Triangles(6, 4, 2, 0, 2, 4, 0, 0),
+	gsSP2Triangles(2, 0, 3, 0, 3, 0, 1, 0),
+	gsSP1Triangle(1, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_0[14] = {
+	{{ {-293, 471, -114}, 0, {240, 176}, {147, 222, 201, 255} }},
+	{{ {-280, 292, 76}, 0, {303, 18}, {150, 11, 187, 255} }},
+	{{ {-213, 335, 284}, 0, {240, -112}, {248, 24, 124, 255} }},
+	{{ {293, 471, -114}, 0, {240, 176}, {109, 222, 201, 255} }},
+	{{ {213, 335, 284}, 0, {240, -112}, {44, 39, 113, 255} }},
+	{{ {280, 292, 76}, 0, {303, 18}, {106, 11, 187, 255} }},
+	{{ {-293, 471, -114}, 0, {240, 208}, {147, 222, 201, 255} }},
+	{{ {-130, 1023, -167}, 0, {-48, 336}, {186, 79, 185, 255} }},
+	{{ {0, 407, -434}, 0, {336, 400}, {0, 189, 148, 255} }},
+	{{ {-202, 916, 175}, 0, {-48, 48}, {166, 48, 76, 255} }},
+	{{ {-213, 335, 284}, 0, {145, -214}, {248, 24, 124, 255} }},
+	{{ {202, 916, 175}, 0, {-48, 48}, {90, 48, 76, 255} }},
+	{{ {293, 471, -114}, 0, {240, 208}, {109, 222, 201, 255} }},
+	{{ {130, 1023, -167}, 0, {-48, 336}, {70, 79, 185, 255} }},
+};
+
+Gfx gRatSkel_Head_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_0 + 0, 14, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 7, 6, 0),
+	gsSP2Triangles(9, 6, 2, 0, 10, 11, 9, 0),
+	gsSP2Triangles(10, 4, 11, 0, 12, 11, 4, 0),
+	gsSP2Triangles(12, 13, 11, 0, 12, 8, 13, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_1[6] = {
+	{{ {-130, 1023, -167}, 0, {464, 368}, {186, 79, 185, 255} }},
+	{{ {130, 1023, -167}, 0, {16, 368}, {70, 79, 185, 255} }},
+	{{ {0, 407, -434}, 0, {240, 1008}, {0, 189, 148, 255} }},
+	{{ {0, 1172, 140}, 0, {240, 112}, {0, 115, 55, 255} }},
+	{{ {-202, 916, 175}, 0, {528, -80}, {166, 48, 76, 255} }},
+	{{ {202, 916, 175}, 0, {-48, -80}, {90, 48, 76, 255} }},
+};
+
+Gfx gRatSkel_Head_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_1 + 0, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(4, 3, 0, 0, 3, 4, 5, 0),
+	gsSP1Triangle(5, 1, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_2[22] = {
+	{{ {-213, 335, 284}, 0, {80, 80}, {248, 24, 124, 255} }},
+	{{ {-293, 471, -114}, 0, {80, 208}, {147, 222, 201, 255} }},
+	{{ {-280, 292, 76}, 0, {80, 144}, {150, 11, 187, 255} }},
+	{{ {-527, 176, 123}, 0, {112, 112}, {136, 240, 218, 255} }},
+	{{ {-402, 232, 389}, 0, {80, 48}, {191, 11, 108, 255} }},
+	{{ {0, 407, -434}, 0, {80, 272}, {0, 189, 148, 255} }},
+	{{ {293, 471, -114}, 0, {80, 208}, {109, 222, 201, 255} }},
+	{{ {213, 335, 284}, 0, {80, 80}, {44, 39, 113, 255} }},
+	{{ {402, 232, 389}, 0, {80, 48}, {65, 11, 108, 255} }},
+	{{ {527, 176, 123}, 0, {112, 112}, {120, 240, 218, 255} }},
+	{{ {280, 292, 76}, 0, {80, 144}, {106, 11, 187, 255} }},
+	{{ {-261, 1662, -108}, 0, {176, 80}, {170, 91, 233, 255} }},
+	{{ {261, 1662, -108}, 0, {176, 80}, {69, 106, 246, 255} }},
+	{{ {261, 1662, -108}, 0, {176, 80}, {69, 106, 246, 255} }},
+	{{ {513, 1228, 467}, 0, {304, 272}, {121, 38, 2, 255} }},
+	{{ {27, 1238, 617}, 0, {144, 368}, {233, 115, 49, 255} }},
+	{{ {-513, 1228, 467}, 0, {304, 272}, {135, 38, 2, 255} }},
+	{{ {-261, 1662, -108}, 0, {176, 80}, {170, 91, 233, 255} }},
+	{{ {209, 241, -205}, 0, {144, 336}, {112, 13, 198, 255} }},
+	{{ {-130, 256, -176}, 0, {144, 368}, {194, 39, 104, 255} }},
+	{{ {130, 256, -176}, 0, {144, 368}, {55, 28, 111, 255} }},
+	{{ {-209, 241, -205}, 0, {144, 336}, {144, 13, 198, 255} }},
+};
+
+Gfx gRatSkel_Head_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_2 + 0, 11, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_2 + 11, 7, 11),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_2 + 18, 2, 18),
+	gsSPMatrix(0x0d0000c0, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_2 + 20, 2, 20),
+	gsSP2Triangles(11, 0, 12, 0, 1, 13, 2, 0),
+	gsSP2Triangles(3, 2, 13, 0, 4, 3, 13, 0),
+	gsSP2Triangles(13, 0, 4, 0, 1, 14, 12, 0),
+	gsSP2Triangles(1, 18, 14, 0, 5, 18, 1, 0),
+	gsSP2Triangles(5, 19, 18, 0, 15, 19, 5, 0),
+	gsSP2Triangles(15, 5, 20, 0, 21, 20, 5, 0),
+	gsSP2Triangles(21, 5, 6, 0, 16, 21, 6, 0),
+	gsSP2Triangles(16, 6, 11, 0, 0, 17, 7, 0),
+	gsSP2Triangles(17, 8, 7, 0, 8, 17, 9, 0),
+	gsSP2Triangles(9, 17, 10, 0, 6, 10, 17, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_3[8] = {
+	{{ {-280, 292, 76}, 0, {-16, 240}, {150, 11, 187, 255} }},
+	{{ {-402, 232, 389}, 0, {240, -16}, {191, 11, 108, 255} }},
+	{{ {-213, 335, 284}, 0, {-16, -16}, {248, 24, 124, 255} }},
+	{{ {-527, 176, 123}, 0, {176, 176}, {136, 240, 218, 255} }},
+	{{ {402, 232, 389}, 0, {240, -16}, {65, 11, 108, 255} }},
+	{{ {280, 292, 76}, 0, {-16, 240}, {106, 11, 187, 255} }},
+	{{ {213, 335, 284}, 0, {-16, -16}, {44, 39, 113, 255} }},
+	{{ {527, 176, 123}, 0, {176, 176}, {120, 240, 218, 255} }},
+};
+
+Gfx gRatSkel_Head_mesh_layer_Opaque_tri_3[] = {
+	gsSPMatrix(0x0d000140, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_3 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_4[18] = {
+	{{ {-98, 1066, -289}, 0, {82, 80}, {203, 115, 247, 255} }},
+	{{ {-44, 1040, -299}, 0, {120, 60}, {121, 22, 225, 255} }},
+	{{ {-122, 962, -565}, 0, {-6, -44}, {240, 224, 134, 255} }},
+	{{ {-3, 1018, -109}, 0, {245, 164}, {103, 74, 248, 255} }},
+	{{ {-78, 1026, -71}, 0, {169, 204}, {194, 107, 28, 255} }},
+	{{ {-114, 992, -269}, 0, {88, 120}, {174, 159, 250, 255} }},
+	{{ {-44, 1040, -299}, 0, {128, 98}, {121, 22, 225, 255} }},
+	{{ {-3, 1018, -109}, 0, {263, 241}, {103, 74, 248, 255} }},
+	{{ {-100, 944, -142}, 0, {182, 284}, {172, 164, 231, 255} }},
+	{{ {98, 1066, -289}, 0, {82, 80}, {53, 115, 247, 255} }},
+	{{ {122, 962, -565}, 0, {-6, -44}, {16, 224, 134, 255} }},
+	{{ {44, 1040, -299}, 0, {120, 60}, {135, 22, 225, 255} }},
+	{{ {114, 992, -269}, 0, {88, 120}, {82, 159, 250, 255} }},
+	{{ {78, 1026, -71}, 0, {169, 204}, {62, 107, 28, 255} }},
+	{{ {3, 1018, -109}, 0, {245, 164}, {153, 74, 248, 255} }},
+	{{ {100, 944, -142}, 0, {182, 284}, {84, 164, 231, 255} }},
+	{{ {3, 1018, -109}, 0, {263, 241}, {153, 74, 248, 255} }},
+	{{ {44, 1040, -299}, 0, {128, 98}, {135, 22, 225, 255} }},
+};
+
+Gfx gRatSkel_Head_mesh_layer_Opaque_tri_4[] = {
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_4 + 0, 18, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(0, 4, 3, 0, 4, 0, 5, 0),
+	gsSP2Triangles(0, 2, 5, 0, 2, 6, 5, 0),
+	gsSP2Triangles(5, 6, 7, 0, 5, 7, 8, 0),
+	gsSP2Triangles(4, 5, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(9, 12, 10, 0, 13, 12, 9, 0),
+	gsSP2Triangles(14, 13, 9, 0, 14, 9, 11, 0),
+	gsSP2Triangles(13, 15, 12, 0, 16, 12, 15, 0),
+	gsSP2Triangles(16, 17, 12, 0, 10, 12, 17, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_5[8] = {
+	{{ {-545, 1162, 66}, 0, {1008, -16}, {33, 98, 183, 255} }},
+	{{ {-98, 1169, 278}, 0, {496, -16}, {33, 98, 183, 255} }},
+	{{ {-122, 921, -61}, 0, {496, 496}, {33, 98, 183, 255} }},
+	{{ {-569, 914, -272}, 0, {1008, 496}, {33, 98, 183, 255} }},
+	{{ {545, 1162, 66}, 0, {1008, -16}, {223, 98, 183, 255} }},
+	{{ {569, 914, -272}, 0, {1008, 496}, {223, 98, 183, 255} }},
+	{{ {122, 921, -61}, 0, {496, 496}, {223, 98, 183, 255} }},
+	{{ {98, 1169, 278}, 0, {496, -16}, {223, 98, 183, 255} }},
+};
+
+Gfx gRatSkel_Head_mesh_layer_Opaque_tri_5[] = {
+	gsSPVertex(gRatSkel_Head_mesh_layer_Opaque_vtx_5 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Leg_L_mesh_layer_Opaque_vtx_0[10] = {
+	{{ {-270, 356, 100}, 0, {624, 368}, {228, 194, 107, 255} }},
+	{{ {-7, 627, -88}, 0, {528, 432}, {26, 203, 143, 255} }},
+	{{ {-117, 790, 19}, 0, {528, 496}, {164, 85, 24, 255} }},
+	{{ {71, 705, 124}, 0, {592, 496}, {77, 57, 84, 255} }},
+	{{ {157, 279, 99}, 0, {656, 368}, {109, 0, 65, 255} }},
+	{{ {38, 898, -271}, 0, {496, 496}, {23, 71, 153, 255} }},
+	{{ {661, 484, 614}, 0, {496, 304}, {105, 221, 62, 255} }},
+	{{ {0, 379, 756}, 0, {528, 336}, {0, 193, 110, 255} }},
+	{{ {378, -644, 684}, 0, {784, 336}, {248, 159, 82, 255} }},
+	{{ {585, -408, 115}, 0, {752, 176}, {108, 200, 218, 255} }},
+};
+
+Gfx gRatSkel_Leg_L_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Leg_L_mesh_layer_Opaque_vtx_0 + 0, 6, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Leg_L_mesh_layer_Opaque_vtx_0 + 6, 4, 6),
+	gsSP2Triangles(6, 7, 0, 0, 0, 1, 6, 0),
+	gsSP2Triangles(0, 2, 1, 0, 0, 3, 2, 0),
+	gsSP2Triangles(0, 8, 3, 0, 3, 8, 4, 0),
+	gsSP2Triangles(4, 8, 9, 0, 6, 4, 9, 0),
+	gsSP2Triangles(1, 4, 6, 0, 1, 3, 4, 0),
+	gsSP2Triangles(1, 5, 3, 0, 5, 1, 2, 0),
+	gsSP1Triangle(3, 5, 2, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Leg_R_mesh_layer_Opaque_vtx_0[10] = {
+	{{ {270, 356, 100}, 0, {624, 368}, {28, 194, 107, 255} }},
+	{{ {7, 627, -88}, 0, {528, 432}, {230, 203, 143, 255} }},
+	{{ {-157, 279, 99}, 0, {656, 368}, {147, 0, 65, 255} }},
+	{{ {-71, 705, 124}, 0, {592, 496}, {179, 57, 84, 255} }},
+	{{ {117, 790, 19}, 0, {528, 496}, {92, 85, 24, 255} }},
+	{{ {-38, 898, -271}, 0, {496, 496}, {233, 71, 153, 255} }},
+	{{ {0, 379, 756}, 0, {528, 336}, {0, 193, 110, 255} }},
+	{{ {-661, 484, 614}, 0, {496, 304}, {151, 221, 62, 255} }},
+	{{ {-585, -408, 115}, 0, {752, 176}, {148, 200, 218, 255} }},
+	{{ {-378, -644, 684}, 0, {784, 336}, {8, 159, 82, 255} }},
+};
+
+Gfx gRatSkel_Leg_R_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Leg_R_mesh_layer_Opaque_vtx_0 + 0, 6, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Leg_R_mesh_layer_Opaque_vtx_0 + 6, 4, 6),
+	gsSP2Triangles(0, 6, 7, 0, 0, 7, 1, 0),
+	gsSP2Triangles(1, 7, 2, 0, 8, 2, 7, 0),
+	gsSP2Triangles(2, 8, 9, 0, 3, 2, 9, 0),
+	gsSP2Triangles(0, 3, 9, 0, 0, 4, 3, 0),
+	gsSP2Triangles(0, 1, 4, 0, 5, 4, 1, 0),
+	gsSP2Triangles(1, 3, 5, 0, 1, 2, 3, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Tail_mesh_layer_Opaque_vtx_0[14] = {
+	{{ {0, -24, 170}, 0, {912, 208}, {0, 255, 127, 255} }},
+	{{ {-131, -2, 14}, 0, {912, 240}, {131, 21, 8, 255} }},
+	{{ {131, -2, 14}, 0, {912, 240}, {125, 21, 8, 255} }},
+	{{ {0, -56, -181}, 0, {880, 304}, {0, 24, 131, 255} }},
+	{{ {-585, -408, 115}, 0, {752, 176}, {148, 200, 218, 255} }},
+	{{ {0, -580, -322}, 0, {784, 48}, {0, 123, 223, 255} }},
+	{{ {585, -408, 115}, 0, {752, 176}, {108, 200, 218, 255} }},
+	{{ {378, -644, 684}, 0, {784, 336}, {248, 159, 82, 255} }},
+	{{ {585, -408, 115}, 0, {752, 176}, {108, 200, 218, 255} }},
+	{{ {0, 379, 756}, 0, {528, 336}, {0, 193, 110, 255} }},
+	{{ {-378, -644, 684}, 0, {784, 336}, {8, 159, 82, 255} }},
+	{{ {-585, -408, 115}, 0, {752, 176}, {148, 200, 218, 255} }},
+	{{ {-270, 356, 100}, 0, {624, 368}, {228, 194, 107, 255} }},
+	{{ {270, 356, 100}, 0, {624, 368}, {28, 194, 107, 255} }},
+};
+
+Gfx gRatSkel_Tail_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gRatSkel_Tail_mesh_layer_Opaque_vtx_0 + 0, 4, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Tail_mesh_layer_Opaque_vtx_0 + 4, 8, 4),
+	gsSPMatrix(0x0d000180, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Tail_mesh_layer_Opaque_vtx_0 + 12, 1, 12),
+	gsSPMatrix(0x0d0001c0, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Tail_mesh_layer_Opaque_vtx_0 + 13, 1, 13),
+	gsSP2Triangles(0, 1, 4, 0, 0, 4, 5, 0),
+	gsSP2Triangles(6, 0, 5, 0, 6, 2, 0, 0),
+	gsSP2Triangles(7, 2, 8, 0, 7, 3, 2, 0),
+	gsSP2Triangles(7, 12, 3, 0, 3, 12, 9, 0),
+	gsSP2Triangles(3, 9, 13, 0, 10, 3, 13, 0),
+	gsSP2Triangles(10, 1, 3, 0, 10, 11, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gRatSkel_Tail_mesh_layer_Opaque_vtx_1[5] = {
+	{{ {131, -2, 14}, 0, {304, 304}, {125, 21, 8, 255} }},
+	{{ {0, 3494, 0}, 0, {304, -16}, {0, 127, 1, 255} }},
+	{{ {0, -24, 170}, 0, {304, 304}, {0, 255, 127, 255} }},
+	{{ {0, -56, -181}, 0, {304, 304}, {0, 24, 131, 255} }},
+	{{ {-131, -2, 14}, 0, {208, 304}, {131, 21, 8, 255} }},
+};
+
+Gfx gRatSkel_Tail_mesh_layer_Opaque_tri_1[] = {
+	gsSPMatrix(0x0d000200, G_MTX_LOAD),
+	gsSPVertex(gRatSkel_Tail_mesh_layer_Opaque_vtx_1 + 0, 5, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 1, 3, 0, 4, 2, 1, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gRatSkel_Fur2_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gRatSkel_Rat_Fur_01_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 75),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gRatSkel_Rat_Fur_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gRatSkel_Eye_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gRatSkel_Rat_Eye_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 31),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gRatSkel_Rat_Eye_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 31, 2048),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 1, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 3, 0, G_TX_CLAMP | G_TX_NOMIRROR, 3, 0),
+	gsDPSetTileSize(0, 0, 0, 28, 28),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gRatSkel_Nose_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gRatSkel_Rat_Nose_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 48),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gRatSkel_Rat_Nose_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 63, 2048),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 1, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_CLAMP | G_TX_MIRROR, 3, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gRatSkel_Ear_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gRatSkel_Rat_Ear_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 35),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gRatSkel_Rat_Ear_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 31, 2048),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 1, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 3, 0, G_TX_CLAMP | G_TX_NOMIRROR, 3, 0),
+	gsDPSetTileSize(0, 0, 0, 28, 28),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gRatSkel_Tooth_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gRatSkel_Rat_Tooth_00_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 34),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gRatSkel_Rat_Tooth_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 31, 2048),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 1, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 3, 0, G_TX_CLAMP | G_TX_NOMIRROR, 3, 0),
+	gsDPSetTileSize(0, 0, 0, 28, 28),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gRatSkel_Whiskers_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 209, 197, 183, 255),
+	gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 1, gRatSkel_Rat_Whisker_00_ia8),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 127, 1024),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_CLAMP | G_TX_MIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Body_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Body_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Arm_L_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Arm_L_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Hand_L_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Hand_L_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Arm_R_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Arm_R_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Hand_R_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Hand_R_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Head_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Eye_layerOpaque),
+	gsSPDisplayList(gRatSkel_Head_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gRatSkel_Nose_layerOpaque),
+	gsSPDisplayList(gRatSkel_Head_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Head_mesh_layer_Opaque_tri_2),
+	gsSPDisplayList(mat_gRatSkel_Ear_layerOpaque),
+	gsSPDisplayList(gRatSkel_Head_mesh_layer_Opaque_tri_3),
+	gsSPDisplayList(mat_gRatSkel_Tooth_layerOpaque),
+	gsSPDisplayList(gRatSkel_Head_mesh_layer_Opaque_tri_4),
+	gsSPDisplayList(mat_gRatSkel_Whiskers_layerOpaque),
+	gsSPDisplayList(gRatSkel_Head_mesh_layer_Opaque_tri_5),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Leg_L_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Leg_L_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Leg_R_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Leg_R_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx gRatSkel_Tail_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_gRatSkel_Fur2_layerOpaque),
+	gsSPDisplayList(gRatSkel_Tail_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gRatSkel_Nose_layerOpaque),
+	gsSPDisplayList(gRatSkel_Tail_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+StandardLimb gRatSkelLimb_000 = { { 0, 17, 1135 }, 1, 255, NULL };
+StandardLimb gRatSkelLimb_001 = { { 0, 0, -724 }, 2, 9, gRatSkel_Body_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_002 = { { 317, 1207, 688 }, 3, 4, gRatSkel_Arm_L_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_003 = { { 0, 338, 0 }, 255, 255, gRatSkel_Hand_L_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_004 = { { -317, 1207, 688 }, 5, 6, gRatSkel_Arm_R_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_005 = { { 0, 338, 0 }, 255, 255, gRatSkel_Hand_R_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_006 = { { 0, 1661, 0 }, 255, 7, gRatSkel_Head_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_007 = { { 528, -78, 530 }, 255, 8, gRatSkel_Leg_L_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_008 = { { -528, -78, 530 }, 255, 255, gRatSkel_Leg_R_mesh_layer_Opaque };
+StandardLimb gRatSkelLimb_009 = { { 0, -387, -1779 }, 255, 255, gRatSkel_Tail_mesh_layer_Opaque };
+
+void* gRatSkelLimbs[10] = {
+	&gRatSkelLimb_000,
+	&gRatSkelLimb_001,
+	&gRatSkelLimb_002,
+	&gRatSkelLimb_003,
+	&gRatSkelLimb_004,
+	&gRatSkelLimb_005,
+	&gRatSkelLimb_006,
+	&gRatSkelLimb_007,
+	&gRatSkelLimb_008,
+	&gRatSkelLimb_009,
+};
+
+FlexSkeletonHeader gRatSkel = { gRatSkelLimbs, 10, 9 };
+
diff --git a/assets_hm_pack/objects/object_rat/rat_skel.h b/assets_hm_pack/objects/object_rat/rat_skel.h
new file mode 100644
index 000000000..1c8dea36a
--- /dev/null
+++ b/assets_hm_pack/objects/object_rat/rat_skel.h
@@ -0,0 +1,69 @@
+extern u64 gRatSkel_Rat_Fur_01_ci8[];
+extern u64 gRatSkel_Rat_Fur_01_pal_rgba16[];
+extern u64 gRatSkel_Rat_Eye_00_ci8[];
+extern u64 gRatSkel_Rat_Eye_00_pal_rgba16[];
+extern u64 gRatSkel_Rat_Nose_00_ci8[];
+extern u64 gRatSkel_Rat_Nose_00_pal_rgba16[];
+extern u64 gRatSkel_Rat_Ear_00_ci8[];
+extern u64 gRatSkel_Rat_Ear_00_pal_rgba16[];
+extern u64 gRatSkel_Rat_Tooth_00_ci8[];
+extern u64 gRatSkel_Rat_Tooth_00_pal_rgba16[];
+extern u64 gRatSkel_Rat_Whisker_00_ia8[];
+extern Vtx gRatSkel_Body_mesh_layer_Opaque_vtx_0[15];
+extern Gfx gRatSkel_Body_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Arm_L_mesh_layer_Opaque_vtx_0[9];
+extern Gfx gRatSkel_Arm_L_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Hand_L_mesh_layer_Opaque_vtx_0[7];
+extern Gfx gRatSkel_Hand_L_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Arm_R_mesh_layer_Opaque_vtx_0[9];
+extern Gfx gRatSkel_Arm_R_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Hand_R_mesh_layer_Opaque_vtx_0[7];
+extern Gfx gRatSkel_Hand_R_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_0[14];
+extern Gfx gRatSkel_Head_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_1[6];
+extern Gfx gRatSkel_Head_mesh_layer_Opaque_tri_1[];
+extern Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_2[22];
+extern Gfx gRatSkel_Head_mesh_layer_Opaque_tri_2[];
+extern Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_3[8];
+extern Gfx gRatSkel_Head_mesh_layer_Opaque_tri_3[];
+extern Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_4[18];
+extern Gfx gRatSkel_Head_mesh_layer_Opaque_tri_4[];
+extern Vtx gRatSkel_Head_mesh_layer_Opaque_vtx_5[8];
+extern Gfx gRatSkel_Head_mesh_layer_Opaque_tri_5[];
+extern Vtx gRatSkel_Leg_L_mesh_layer_Opaque_vtx_0[10];
+extern Gfx gRatSkel_Leg_L_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Leg_R_mesh_layer_Opaque_vtx_0[10];
+extern Gfx gRatSkel_Leg_R_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Tail_mesh_layer_Opaque_vtx_0[14];
+extern Gfx gRatSkel_Tail_mesh_layer_Opaque_tri_0[];
+extern Vtx gRatSkel_Tail_mesh_layer_Opaque_vtx_1[5];
+extern Gfx gRatSkel_Tail_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_gRatSkel_Fur2_layerOpaque[];
+extern Gfx mat_gRatSkel_Eye_layerOpaque[];
+extern Gfx mat_gRatSkel_Nose_layerOpaque[];
+extern Gfx mat_gRatSkel_Ear_layerOpaque[];
+extern Gfx mat_gRatSkel_Tooth_layerOpaque[];
+extern Gfx mat_gRatSkel_Whiskers_layerOpaque[];
+extern Gfx gRatSkel_Body_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Arm_L_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Hand_L_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Arm_R_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Hand_R_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Head_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Leg_L_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Leg_R_mesh_layer_Opaque[];
+extern Gfx gRatSkel_Tail_mesh_layer_Opaque[];
+extern FlexSkeletonHeader gRatSkel;
+#define GRATSKEL_ROOT_POS_LIMB 0
+#define GRATSKEL_ROOT_ROT_LIMB 1
+#define GRATSKEL_BODY_LIMB 2
+#define GRATSKEL_ARM_L_LIMB 3
+#define GRATSKEL_HAND_L_LIMB 4
+#define GRATSKEL_ARM_R_LIMB 5
+#define GRATSKEL_HAND_R_LIMB 6
+#define GRATSKEL_HEAD_LIMB 7
+#define GRATSKEL_LEG_L_LIMB 8
+#define GRATSKEL_LEG_R_LIMB 9
+#define GRATSKEL_TAIL_LIMB 10
+#define GRATSKEL_NUM_LIMBS 11
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchCol.c b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchCol.c
new file mode 100644
index 000000000..2dedc7210
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchCol.c
@@ -0,0 +1,48 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPullSwitchCol_polygonTypes[] = {
+	{ 0x00200000, 0x00000002 },
+	{ 0x00e00000, 0x00000002 },
+};
+
+CollisionPoly gPullSwitchCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), 0xfb14 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), 0xfb14 },
+	{ 0x0000, 0x2004, 0x0001, 0x0000, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+	{ 0x0000, 0x2004, 0x0005, 0x0001, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+	{ 0x0000, 0x2006, 0x0003, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+	{ 0x0000, 0x2006, 0x0007, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+	{ 0x0001, 0x2004, 0x0000, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.4425821243976316e-08), COLPOLY_SNORMAL(1.0), 0xff9d },
+	{ 0x0001, 0x2004, 0x0003, 0x0007, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(4.4425821243976316e-08), COLPOLY_SNORMAL(1.0), 0xff9d },
+};
+
+Vec3s gPullSwitchCol_vertices[8] = {
+	{ 135, 1260, 99 },
+	{ 135, 1260, -699 },
+	{ -135, 1260, -699 },
+	{ -135, 1260, 99 },
+	{ 135, -350, 99 },
+	{ 135, -350, -699 },
+	{ -135, -350, -699 },
+	{ -135, -350, 99 },
+};
+
+CollisionHeader gPullSwitchCol_collisionHeader = {
+	-135,
+	-350,
+	-699,
+	135,
+	1260,
+	99,
+	8,
+	gPullSwitchCol_vertices,
+	8,
+	gPullSwitchCol_polygons,
+	gPullSwitchCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchCol.h b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchCol.h
new file mode 100644
index 000000000..859666eff
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchCol.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPullSwitchCol_polygonTypes[];
+extern CollisionPoly gPullSwitchCol_polygons[];
+extern Vec3s gPullSwitchCol_vertices[8];
+extern CollisionHeader gPullSwitchCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchFrameDL.c b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchFrameDL.c
new file mode 100644
index 000000000..ce67dd41d
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchFrameDL.c
@@ -0,0 +1,90 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPullSwitchFrameDL_PullSwitch_Metal_02_ci8[] = {
+	0x0001020304050607, 0x08080608090a0b09, 0x0c0d0e0f02080e10, 0x0d08081111120f13, 0x141516161718191a, 0x1b161c1d1e1f1f20, 0x1821201a20222324, 0x251a262728202727, 
+	0x292a2b2a2b2a2c2a, 0x2d2a0a2e2e0c0c2f, 0x3029312a2a2c090c, 0x020c322a2b310c33, 0x322a34313536320a, 0x2e2c2a3709023839, 0x0a0a3a3b3c2e023d, 0x0a2c312e2e09013e, 
+	0x352a2c3f4041403d, 0x4235402a4037090c, 0x400c432a0a022c40, 0x440c092a0a413538, 0x45464748494a4a4b, 0x4c4b4b4d454e4e4e, 0x454f4e47504e4e51, 0x514e4e4a5152534e, 
+	0x50524e4e464e5147, 0x5046505448504855, 0x5045464645455647, 0x5151515257504548, 0x4a585150514a3859, 0x474545464e38584e, 0x4b4b58535a3c4838, 0x51525a3b38474e5a, 
+	0x01584b4b38474d5b, 0x4b4c4d3b0101585c, 0x5d02015e4b454f38, 0x5f012e3b3b4c5830, 0x473b3a3b5b3b3b4d, 0x5b2e3b3b3a374e48, 0x4b084b3b3b3b3a3b, 0x3737024b2e3a3860, 
+	0x2c2e5f093a614c5b, 0x383a3a4c2a0a0a62, 0x0a3a2e3c634d3c5b, 0x2e2e5f3b2e622a3d, 0x0c0a310909434c2e, 0x642e0a010a020202, 0x09024402093f3d2a, 0x2e65092e2e2a2a2a, 
+	0x293d37090c0a3b3a, 0x312a094409010266, 0x050c4044350c3d2a, 0x3d092c0c0c4d4b5c, 0x300505294440400c, 0x40410a2905300d3a, 0x050535084467400c, 0x40080829680a3a47, 
+	0x0505350c0c293029, 0x41680c0529293002, 0x2967444429440c44, 0x410c440530403229, 0x696a1b1b6b6a5c5c, 0x1b15666c6a1b665c, 0x5c6c675c6d26696a, 0x6d6e6d6f6e6a6a6c, 
+	
+};
+
+u64 gPullSwitchFrameDL_PullSwitch_Metal_02_ci8_pal_rgba16[] = {
+	0x49c9314739893145, 0x318541c9418749c7, 0x4189398b3189420b, 0x41cb398749893947, 0x3905414731054987, 0x83516b117b958b97, 0x8b959c19731162d1, 0x6b53839783958393, 
+	0x7b537b0f94178355, 0x83139395624d7b51, 0xa49b4a0b318b39cd, 0x39cb294b29497351, 0x4a0941cd524f6b0f, 0x4a11418b39493149, 0x21054a4d29472107, 0x20c7420d6b134a4f, 
+	0x4a0d520d520f31cb, 0x49cb18c5188518c3, 0x1083208528c52907, 0x290918c720c51905, 0x188320c328c33107, 0x0843088310811881, 0x2905088128c72109, 0x5a8d29452903314b, 
+	0x0841214929891085, 0x2147298b62cf524d, 0x520b5a4d628f7313, 0x5a8f628d6ad15a4b, 
+};
+
+Vtx gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{{-150, -150, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-150, -150, 100}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-150, 150, 100}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-150, 150, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{150, -150, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{150, -150, 100}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{150, 150, 100}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{150, 150, 0}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+};
+
+Vtx gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_vtx_0[12] = {
+	{{{0, 0, 100}, 0, {484, 1010}, {0xDB, 0x0, 0x7A, 0xFF}}},
+	{{{-150, 150, 0}, 0, {-28, -18}, {0xC9, 0x13, 0x71, 0xFF}}},
+	{{{-150, -150, 0}, 0, {996, -18}, {0xC9, 0xED, 0x71, 0xFF}}},
+	{{{150, -150, 0}, 0, {-28, -18}, {0x37, 0xED, 0x71, 0xFF}}},
+	{{{150, 150, 0}, 0, {996, -18}, {0x37, 0x13, 0x71, 0xFF}}},
+	{{{0, 0, 100}, 0, {484, 1010}, {0x25, 0x0, 0x7A, 0xFF}}},
+	{{{-150, -150, 0}, 0, {996, -18}, {0xED, 0xC9, 0x71, 0xFF}}},
+	{{{150, -150, 0}, 0, {-28, -18}, {0x13, 0xC9, 0x71, 0xFF}}},
+	{{{0, 0, 100}, 0, {484, 1010}, {0x0, 0xDB, 0x7A, 0xFF}}},
+	{{{150, 150, 0}, 0, {996, -18}, {0x13, 0x37, 0x71, 0xFF}}},
+	{{{-150, 150, 0}, 0, {-28, -18}, {0xED, 0x37, 0x71, 0xFF}}},
+	{{{0, 0, 100}, 0, {484, 1010}, {0x0, 0x25, 0x7A, 0xFF}}},
+};
+
+Gfx gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_vtx_0 + 0, 12, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPullSwitchFrameDL_Base_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPullSwitchFrameDL_PullSwitch_Metal_02_ci8_pal_rgba16),
+	gsDPTileSync(),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadSync(),
+	gsDPLoadTLUTCmd(7, 111),
+	gsDPPipeSync(),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPullSwitchFrameDL_PullSwitch_Metal_02_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPullSwitchFrameDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gPullSwitchFrameDL_Base_layerOpaque),
+	gsSPDisplayList(gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchFrameDL.h b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchFrameDL.h
new file mode 100644
index 000000000..763bcd967
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchFrameDL.h
@@ -0,0 +1,7 @@
+extern u64 gPullSwitchFrameDL_PullSwitch_Metal_02_ci8[];
+extern u64 gPullSwitchFrameDL_PullSwitch_Metal_02_ci8_pal_rgba16[];
+extern Vtx gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_vtx_0[12];
+extern Gfx gPullSwitchFrameDL_gPullSwitchFrameDL_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gPullSwitchFrameDL_Base_layerOpaque[];
+extern Gfx gPullSwitchFrameDL[];
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchNoGrabCol.c b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchNoGrabCol.c
new file mode 100644
index 000000000..b12f32192
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchNoGrabCol.c
@@ -0,0 +1,47 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+
+SurfaceType gPullSwitchNoGrabCol_polygonTypes[] = {
+	{ 0x00200000, 0x00000002 },
+};
+
+CollisionPoly gPullSwitchNoGrabCol_polygons[] = {
+	{ 0x0000, 0x2000, 0x0001, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.4785920749745856e-08), 0xffa2 },
+	{ 0x0000, 0x2000, 0x0002, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-4.4785920749745856e-08), 0xffa2 },
+	{ 0x0000, 0x2004, 0x0000, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(5.372814371185086e-08), COLPOLY_SNORMAL(1.0), 0xff9d },
+	{ 0x0000, 0x2004, 0x0003, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(5.372814371185086e-08), COLPOLY_SNORMAL(1.0), 0xff9d },
+	{ 0x0000, 0x2004, 0x0001, 0x0000, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+	{ 0x0000, 0x2004, 0x0006, 0x0001, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+	{ 0x0000, 0x2007, 0x0003, 0x0002, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+	{ 0x0000, 0x2007, 0x0005, 0x0003, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xff79 },
+};
+
+Vec3s gPullSwitchNoGrabCol_vertices[8] = {
+	{ 135, 94, 99 },
+	{ 135, 94, -699 },
+	{ -135, 94, -699 },
+	{ -135, 94, 99 },
+	{ 135, -350, 99 },
+	{ -135, -350, 99 },
+	{ 135, -350, -699 },
+	{ -135, -350, -699 },
+};
+
+CollisionHeader gPullSwitchNoGrabCol_collisionHeader = {
+	-135,
+	-350,
+	-699,
+	135,
+	94,
+	99,
+	8,
+	gPullSwitchNoGrabCol_vertices,
+	8,
+	gPullSwitchNoGrabCol_polygons,
+	gPullSwitchNoGrabCol_polygonTypes,
+	0,
+	0,
+	0
+};
+
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchNoGrabCol.h b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchNoGrabCol.h
new file mode 100644
index 000000000..cf110e804
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchNoGrabCol.h
@@ -0,0 +1,4 @@
+extern SurfaceType gPullSwitchNoGrabCol_polygonTypes[];
+extern CollisionPoly gPullSwitchNoGrabCol_polygons[];
+extern Vec3s gPullSwitchNoGrabCol_vertices[8];
+extern CollisionHeader gPullSwitchNoGrabCol_collisionHeader;
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchRodDL.c b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchRodDL.c
new file mode 100644
index 000000000..922debb76
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchRodDL.c
@@ -0,0 +1,297 @@
+#include "ultra64.h"
+#include "global.h"
+
+u64 gPullSwitchRodDL_PullSwitch_Metal_01_ci8[] = {
+	0x0001020304050606, 0x07060608090a0b0c, 0x0d0e0f1011121314, 0x0715161717181719, 0x1a1b1c1d1d1e1e1e, 0x1f1f1f1e20202020, 0x2020212020202121, 0x2121202020202020, 
+	0x0e22232425262728, 0x29262a27252b2c1f, 0x20202d2e252f3008, 0x312b0e2424323334, 0x3532362f352b3737, 0x2e382e2d2d39391f, 0x3838242436322c2c, 0x3825362e2a262c01, 
+	0x3a2b3b023c03143d, 0x143e3f4041424343, 0x41444540403d4446, 0x144745464849144a, 0x2c313c034b06124c, 0x4d4e034f033b3c50, 0x504c02023b035152, 0x535455124c074c0f, 
+	0x003c111107515651, 0x0b57584f031b0505, 0x593f5456055a5952, 0x135252595a4a4a5b, 0x315c5d382727395e, 0x5f5e5f5e2e603161, 0x010211622837624f, 0x11114d635f646566, 
+	0x01115d5d24242629, 0x3726262631672b68, 0x2b2b372d2727272e, 0x2d2b252e2e322b69, 0x6a6b080e6c310e6d, 0x370807370d0d3730, 0x0d0d02086e0d4e4e, 0x0d0d024e504d024e, 
+	0x6a6f311103135254, 0x705a7155075a5a72, 0x53135a540b055454, 0x50555413510b4a51, 0x006f037207060605, 0x735a3e3e3f3f743f, 0x75764814773e7844, 0x48793e143e143e77, 
+	0x315f262f2f383827, 0x32242e395e600d7a, 0x1b3b0d3737276e6e, 0x08080d6e37326734, 0x617b5d310d2b0d6e, 0x30312c4b2b4b4f7c, 0x7c3b080d113b6211, 0x670208084e303138, 
+	0x611c2b1d1d017d20, 0x202020203b1c3b2c, 0x20202c207e2c2c31, 0x7f313101682c1d1d, 0x3b3c4c3b6a1b8056, 0x808113055981535a, 0x3e595a8166825613, 0x528283488459595a, 
+	
+};
+
+u64 gPullSwitchRodDL_PullSwitch_Metal_01_ci8_pal_rgba16[] = {
+	0x3945314549cb524d, 0x528d62d15a4d5a4f, 0x41cb52515a9362d3, 0x4a51398931055a0d, 0x83994a0d520b6ad1, 0x7b5762936a91624f, 0x5a5172d34141524b, 0x4a091881208118c1, 
+	0x20c128c1298b1085, 0x18c5210529492947, 0x420f318d19052905, 0x20c32907210720c5, 0x398b314729093949, 0x398328c520c73149, 0x18c33189310341c9, 0x4a0b83d97b978bd9, 
+	0x7b997b9b83dd7bdb, 0x8bdb941d941b83db, 0x8397839b73153987, 0x49c949cd4189524f, 0x520d628f73137b55, 0x6ad362915a8f6b15, 0x5ad373556b137353, 0x4a0f1883318b39cd, 
+	0x39473985420d41cd, 0x398d418b62cf3107, 0x31432101418739c9, 0x2103290339cb3187, 0x528f631373576b57, 0x83d78bd783957b95, 0x945d8c1b41c5420b, 0x4209290128c34147, 
+	0x5a8d6b116acf7311, 0x8355000000000000
+};
+
+u64 gPullSwitchRodDL_PullSwitch_Metal_02_ci8[] = {
+	0x0001020304050607, 0x08080608090a0b09, 0x0c0d0e0f02080e10, 0x0d08081111120f13, 0x141516161718191a, 0x1b161c1d1e1f1f20, 0x1821201a20222324, 0x251a262728202727, 
+	0x292a2b2a2b2a2c2a, 0x2d2a0a2e2e0c0c2f, 0x3029312a2a2c090c, 0x020c322a2b310c33, 0x322a34313536320a, 0x2e2c2a3709023839, 0x0a0a3a3b3c2e023d, 0x0a2c312e2e09013e, 
+	0x352a2c3f4041403d, 0x4235402a4037090c, 0x400c432a0a022c40, 0x440c092a0a413538, 0x45464748494a4a4b, 0x4c4b4b4d454e4e4e, 0x454f4e47504e4e51, 0x514e4e4a5152534e, 
+	0x50524e4e464e5147, 0x5046505448504855, 0x5045464645455647, 0x5151515257504548, 0x4a585150514a3859, 0x474545464e38584e, 0x4b4b58535a3c4838, 0x51525a3b38474e5a, 
+	0x01584b4b38474d5b, 0x4b4c4d3b0101585c, 0x5d02015e4b454f38, 0x5f012e3b3b4c5830, 0x473b3a3b5b3b3b4d, 0x5b2e3b3b3a374e48, 0x4b084b3b3b3b3a3b, 0x3737024b2e3a3860, 
+	0x2c2e5f093a614c5b, 0x383a3a4c2a0a0a62, 0x0a3a2e3c634d3c5b, 0x2e2e5f3b2e622a3d, 0x0c0a310909434c2e, 0x642e0a010a020202, 0x09024402093f3d2a, 0x2e65092e2e2a2a2a, 
+	0x293d37090c0a3b3a, 0x312a094409010266, 0x050c4044350c3d2a, 0x3d092c0c0c4d4b5c, 0x300505294440400c, 0x40410a2905300d3a, 0x050535084467400c, 0x40080829680a3a47, 
+	0x0505350c0c293029, 0x41680c0529293002, 0x2967444429440c44, 0x410c440530403229, 0x696a1b1b6b6a5c5c, 0x1b15666c6a1b665c, 0x5c6c675c6d26696a, 0x6d6e6d6f6e6a6a6c, 
+	
+};
+
+u64 gPullSwitchRodDL_PullSwitch_Metal_02_ci8_pal_rgba16[] = {
+	0x49c9314739893145, 0x318541c9418749c7, 0x4189398b3189420b, 0x41cb398749893947, 0x3905414731054987, 0x83516b117b958b97, 0x8b959c19731162d1, 0x6b53839783958393, 
+	0x7b537b0f94178355, 0x83139395624d7b51, 0xa49b4a0b318b39cd, 0x39cb294b29497351, 0x4a0941cd524f6b0f, 0x4a11418b39493149, 0x21054a4d29472107, 0x20c7420d6b134a4f, 
+	0x4a0d520d520f31cb, 0x49cb18c5188518c3, 0x1083208528c52907, 0x290918c720c51905, 0x188320c328c33107, 0x0843088310811881, 0x2905088128c72109, 0x5a8d29452903314b, 
+	0x0841214929891085, 0x2147298b62cf524d, 0x520b5a4d628f7313, 0x5a8f628d6ad15a4b, 
+};
+
+u64 gPullSwitchRodDL_PullSwitch_Metal_00_ci8[] = {
+	0x0001020203040506, 0x070809080a060a0b, 0x0b040c0d0e0f1011, 0x120c131415051617, 0x1817191a1b150605, 0x1a1c1d1e1f20191a, 0x190707062105170b, 0x2200231624180525, 
+	0x2426142728291727, 0x2a2b2c2d262d2626, 0x2e2c0f2c262a1427, 0x2a142f3030312611, 0x1630320f11120e15, 0x130e0e3334343410, 0x333535350d103627, 0x37100f2c26322e0d, 
+	0x232f2e0d38343425, 0x1010383910341034, 0x343434343925380e, 0x343438340d26260d, 0x0014123334383a34, 0x343434380e3a383a, 0x3a11343434343434, 0x39343a393b2e2b10, 
+	0x222a0d3538343c3c, 0x11123d3e263f3d3d, 0x3d2612121212123d, 0x1212343a330e2c33, 0x0b27404134111111, 0x113f3f12123d3f3d, 0x0c263f3f3f113f26, 0x323f113a42401235, 
+	0x17143b43110e3d3d, 0x124412263e45453f, 0x26263f26263f4545, 0x2b322612400d0f43, 0x052a0d3534112c11, 0x3e3f3f3212262b45, 0x452b45462b2b4532, 0x453f123d3b0e2e43, 
+	0x21260e3534113d12, 0x122b453f32464526, 0x47312b3146464645, 0x3f12113a330f2c43, 0x062c28353838343d, 0x3f473f4546474545, 0x462a46462b2b4626, 0x3f12113410280f43, 
+	0x070f2e3348383a11, 0x3f3247453f454646, 0x2b462b3145452b45, 0x263d113410260f43, 0x072c0f3525343e12, 0x264745454646462b, 0x45463f4545454645, 0x3f4911343b2c2c33, 
+	0x192e0d43344a1244, 0x454b474726454547, 0x450c124545454545, 0x2c2c1234400d262c, 0x1a2610350e2c2c3f, 0x264c4c32452b323f, 0x32324645462a2b45, 0x3f3f3f11103b320f, 
+	0x19260e33342c123f, 0x32474b4b314b3146, 0x2a314646452b4b2b, 0x45121211100f280d, 0x202d0f350e3d2626, 0x324d4b4b4b47472b, 0x462a313131463146, 0x263f1212332c2812, 
+	0x1f260d33390e2c3f, 0x4e4b314b464f4b4b, 0x4646464646454526, 0x3e4412113b0d280f, 0x1e2d1234380e122c, 0x452b4646464b4646, 0x454546464545453f, 0x122612100d122b12, 
+	0x1d2c120f380e2c3f, 0x46462b3f4b324546, 0x4545452645472b26, 0x11122c342c2e3212, 0x1c2b2b26340e123d, 0x4444452b47472b47, 0x452b312b4b473226, 0x3f113a38282b322c, 
+	0x1a2a131210113d11, 0x3245453232474732, 0x2b472b4731473232, 0x3f113a3426132b12, 0x05271243103d0e3a, 0x4447263f323d3f44, 0x474432324545453f, 0x3f3d0e3a432e2e0f, 
+	0x06172e42340e3a3d, 0x4447122c3f3d113f, 0x493e3f3d12122c3d, 0x3e12110e432e2e0e, 0x15292a0e1010113a, 0x2c3d3a3d11113a11, 0x1111261212121212, 0x3e1111110f2a260d, 
+	0x1b282b3338343411, 0x113a3a3a38343910, 0x0e3a0e120e111112, 0x3e113a340d2b0c0d, 0x1a27311040251038, 0x34343d2525383838, 0x3a3811344038383c, 0x3c1034340d270c0d, 
+	0x19140c122c120d00, 0x2f0f0d0e3533333b, 0x0d0d0d0d10110f21, 0x15112e11112b2811, 0x17262a30302f142a, 0x27142a262c0f2c2e, 0x26262d262d2c2b2a, 0x2717292827292b12, 
+	0x2c1150260c26262c, 0x0d0f2c0e51515150, 0x505028522f0c2a50, 0x2c2c365150260f41, 0x2c112c363b0e3540, 0x4353434343350e0d, 0x0d2e512e2d2a5251, 0x2c2c0e2c2a2a542e, 
+	
+};
+
+u64 gPullSwitchRodDL_PullSwitch_Metal_00_ci8_pal_rgba16[] = {
+	0xa4e5fffde6f38c5f, 0x7bdb946194a19ca3, 0xd66fdeb39ce37359, 0x5293398d39cd41cf, 0x318b41cd4a0f739b, 0x6b5983ddc5eb841d, 0xb5a9ad67b56994a3, 0xdeb1ce2dfffbce6f, 
+	0xbda97b9b8c1fa525, 0xad2729494a5162d7, 0x52536b195ad55a93, 0x420f5a954a116317, 0x6b1762d55251314b, 0x398b294b39cf9ce5, 0x3149318939cb318d, 0x41cb420d4a0d4a4f, 
+	0x290918c720c72109, 0x524f52915ad35a91, 0x2907520f49cb62d3, 0x5a515a4f62916b15, 0x4a53421152952107, 0x6319000000000000
+};
+
+Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_cull[8] = {
+	{{{-126, -94, -411}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-126, -94, 214}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-126, 94, 214}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{-126, 94, -411}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{126, -94, -411}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{126, -94, 214}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{126, 94, 214}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+	{{{126, 94, -411}, 0, {-16, -16}, {0x0, 0x0, 0x0, 0x0}}},
+};
+
+Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_0[24] = {
+	{{{94, 94, 108}, 0, {-16, -16}, {0x49, 0x46, 0x4D, 0xFF}}},
+	{{{94, -94, -411}, 0, {1008, 496}, {0x5A, 0xA6, 0xFA, 0xFF}}},
+	{{{94, 94, -411}, 0, {1008, -16}, {0x5A, 0x5A, 0x0, 0xFF}}},
+	{{{94, -94, 108}, 0, {-16, -16}, {0x46, 0xB7, 0x4D, 0xFF}}},
+	{{{-94, -94, -411}, 0, {1008, 496}, {0xA6, 0xA6, 0xFA, 0xFF}}},
+	{{{94, -94, -411}, 0, {1008, -16}, {0x5A, 0xA6, 0x0, 0xFF}}},
+	{{{-94, -94, 108}, 0, {-16, -16}, {0xB7, 0xBA, 0x4D, 0xFF}}},
+	{{{-94, 94, -411}, 0, {1008, 496}, {0xA6, 0x5A, 0xFA, 0xFF}}},
+	{{{-94, -94, -411}, 0, {1008, -16}, {0xA6, 0xA6, 0x0, 0xFF}}},
+	{{{-94, 94, 108}, 0, {-16, -16}, {0xBA, 0x49, 0x4D, 0xFF}}},
+	{{{94, 94, -411}, 0, {1008, 496}, {0x5A, 0x5A, 0xFA, 0xFF}}},
+	{{{-94, 94, -411}, 0, {1008, -16}, {0xA6, 0x5A, 0x0, 0xFF}}},
+	{{{94, 94, 108}, 0, {-16, -16}, {0x49, 0x45, 0x4D, 0xFF}}},
+	{{{94, -94, 108}, 0, {-16, 496}, {0x49, 0xB7, 0x49, 0xFF}}},
+	{{{94, -94, -411}, 0, {1008, 496}, {0x5A, 0xA6, 0xFE, 0xFF}}},
+	{{{94, -94, 108}, 0, {-16, -16}, {0x45, 0xB7, 0x4D, 0xFF}}},
+	{{{-94, -94, 108}, 0, {-16, 496}, {0xB7, 0xB7, 0x49, 0xFF}}},
+	{{{-94, -94, -411}, 0, {1008, 496}, {0xA6, 0xA6, 0xFE, 0xFF}}},
+	{{{-94, -94, 108}, 0, {-16, -16}, {0xB7, 0xBB, 0x4D, 0xFF}}},
+	{{{-94, 94, 108}, 0, {-16, 496}, {0xB7, 0x49, 0x49, 0xFF}}},
+	{{{-94, 94, -411}, 0, {1008, 496}, {0xA6, 0x5A, 0xFE, 0xFF}}},
+	{{{-94, 94, 108}, 0, {-16, -16}, {0xBB, 0x49, 0x4D, 0xFF}}},
+	{{{94, 94, 108}, 0, {-16, 496}, {0x49, 0x49, 0x49, 0xFF}}},
+	{{{94, 94, -411}, 0, {1008, 496}, {0x5A, 0x5A, 0xFE, 0xFF}}},
+};
+
+Gfx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_0 + 0, 24, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
+	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_1[45] = {
+	{{{84, -23, 167}, 0, {276, 452}, {0xC8, 0x8F, 0xEE, 0xFF}}},
+	{{{84, 23, 167}, 0, {276, 104}, {0xC8, 0x71, 0xEE, 0xFF}}},
+	{{{0, 0, -41}, 0, {392, 452}, {0xC7, 0x0, 0x8E, 0xFF}}},
+	{{{-84, -23, 167}, 0, {208, 104}, {0x38, 0x8F, 0xEE, 0xFF}}},
+	{{{-84, 23, 167}, 0, {316, 104}, {0x38, 0x71, 0xEE, 0xFF}}},
+	{{{-29, 0, 191}, 0, {260, 186}, {0x7F, 0x0, 0x0, 0xFF}}},
+	{{{84, -23, 167}, 0, {208, 104}, {0xC8, 0x8F, 0xEE, 0xFF}}},
+	{{{29, 0, 191}, 0, {260, 186}, {0x81, 0x0, 0x0, 0xFF}}},
+	{{{84, 23, 167}, 0, {316, 104}, {0xC8, 0x71, 0xEE, 0xFF}}},
+	{{{-84, -23, 167}, 0, {276, 452}, {0x38, 0x8F, 0xEE, 0xFF}}},
+	{{{0, 0, -41}, 0, {392, 104}, {0x39, 0x0, 0x8E, 0xFF}}},
+	{{{-84, 23, 167}, 0, {276, 104}, {0x38, 0x71, 0xEE, 0xFF}}},
+	{{{-126, 23, 164}, 0, {168, 20}, {0x9C, 0x4E, 0x4, 0xFF}}},
+	{{{0, 0, -41}, 0, {392, 20}, {0x39, 0x0, 0x8E, 0xFF}}},
+	{{{-84, 23, 214}, 0, {168, 104}, {0xF4, 0x52, 0x60, 0xFF}}},
+	{{{-29, 0, 191}, 0, {220, 186}, {0x7F, 0x0, 0x0, 0xFF}}},
+	{{{0, 0, -41}, 0, {264, -10}, {0xC7, 0x0, 0x8E, 0xFF}}},
+	{{{126, 23, 164}, 0, {316, 20}, {0x64, 0x4E, 0x4, 0xFF}}},
+	{{{126, -23, 164}, 0, {208, 20}, {0x64, 0xB2, 0x4, 0xFF}}},
+	{{{84, 23, 214}, 0, {316, 104}, {0xC, 0x52, 0x60, 0xFF}}},
+	{{{84, -23, 214}, 0, {208, 104}, {0xC, 0xAE, 0x60, 0xFF}}},
+	{{{-84, 23, 214}, 0, {316, 104}, {0xF4, 0x52, 0x60, 0xFF}}},
+	{{{-84, -23, 214}, 0, {208, 104}, {0xF4, 0xAE, 0x60, 0xFF}}},
+	{{{-126, -23, 164}, 0, {208, 20}, {0x9C, 0xB2, 0x4, 0xFF}}},
+	{{{-126, 23, 164}, 0, {316, 20}, {0x9C, 0x4E, 0x4, 0xFF}}},
+	{{{0, 0, -41}, 0, {264, -10}, {0x39, 0x0, 0x8E, 0xFF}}},
+	{{{-84, -23, 214}, 0, {168, 104}, {0xF4, 0xAE, 0x60, 0xFF}}},
+	{{{-84, -23, 167}, 0, {276, 104}, {0x38, 0x8F, 0xEE, 0xFF}}},
+	{{{-126, -23, 164}, 0, {168, 20}, {0x9C, 0xB2, 0x4, 0xFF}}},
+	{{{126, -23, 164}, 0, {168, 20}, {0x64, 0xB2, 0x4, 0xFF}}},
+	{{{84, -23, 167}, 0, {276, 104}, {0xC8, 0x8F, 0xEE, 0xFF}}},
+	{{{0, 0, -41}, 0, {392, 20}, {0xC7, 0x0, 0x8E, 0xFF}}},
+	{{{84, -23, 214}, 0, {168, 104}, {0xC, 0xAE, 0x60, 0xFF}}},
+	{{{84, -23, 167}, 0, {276, 104}, {0xC8, 0x8F, 0xEE, 0xFF}}},
+	{{{126, -23, 164}, 0, {168, 20}, {0x64, 0xB2, 0x4, 0xFF}}},
+	{{{29, 0, 191}, 0, {220, 186}, {0x81, 0x0, 0x0, 0xFF}}},
+	{{{84, 23, 167}, 0, {276, 104}, {0xC8, 0x71, 0xEE, 0xFF}}},
+	{{{84, 23, 214}, 0, {168, 104}, {0xC, 0x52, 0x60, 0xFF}}},
+	{{{126, 23, 164}, 0, {168, 20}, {0x64, 0x4E, 0x4, 0xFF}}},
+	{{{0, 0, -41}, 0, {392, 20}, {0xC7, 0x0, 0x8E, 0xFF}}},
+	{{{-94, 94, 108}, 0, {-16, -16}, {0xB7, 0x49, 0x49, 0xFF}}},
+	{{{-94, -94, 108}, 0, {1008, -16}, {0xB7, 0xB7, 0x49, 0xFF}}},
+	{{{0, 0, 108}, 0, {496, 528}, {0x0, 0x0, 0x7F, 0xFF}}},
+	{{{94, -94, 108}, 0, {-16, -16}, {0x49, 0xB7, 0x49, 0xFF}}},
+	{{{94, 94, 108}, 0, {1008, -16}, {0x49, 0x49, 0x49, 0xFF}}},
+};
+
+Gfx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_1 + 0, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
+	gsSP2Triangles(12, 11, 13, 0, 14, 11, 12, 0),
+	gsSP2Triangles(11, 14, 15, 0, 16, 17, 18, 0),
+	gsSP2Triangles(19, 18, 17, 0, 19, 20, 18, 0),
+	gsSP2Triangles(19, 7, 20, 0, 21, 22, 5, 0),
+	gsSP2Triangles(21, 23, 22, 0, 21, 24, 23, 0),
+	gsSP2Triangles(25, 23, 24, 0, 26, 27, 15, 0),
+	gsSP2Triangles(26, 28, 27, 0, 28, 13, 27, 0),
+	gsSP1Triangle(29, 30, 31, 0),
+	gsSPVertex(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_1 + 32, 13, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 5, 0, 5, 6, 4, 0),
+	gsSP2Triangles(6, 7, 4, 0, 8, 9, 10, 0),
+	gsSP2Triangles(9, 11, 10, 0, 11, 12, 10, 0),
+	gsSP1Triangle(12, 8, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_2[10] = {
+	{{{-62, 13, 203}, 0, {312, -44}, {0x0, 0x5A, 0x5A, 0xFF}}},
+	{{{62, 13, 178}, 0, {480, 68}, {0x0, 0x5A, 0xA6, 0xFF}}},
+	{{{-62, 13, 178}, 0, {312, 68}, {0x0, 0x5A, 0xA6, 0xFF}}},
+	{{{62, 13, 203}, 0, {480, -44}, {0x0, 0x5A, 0x5A, 0xFF}}},
+	{{{-62, -13, 203}, 0, {312, 12}, {0x0, 0xA6, 0x5A, 0xFF}}},
+	{{{62, -13, 203}, 0, {480, 12}, {0x0, 0xA6, 0x5A, 0xFF}}},
+	{{{-62, -13, 178}, 0, {312, 68}, {0x0, 0xA6, 0xA6, 0xFF}}},
+	{{{62, -13, 178}, 0, {480, 68}, {0x0, 0xA6, 0xA6, 0xFF}}},
+	{{{62, 13, 178}, 0, {480, 124}, {0x0, 0x5A, 0xA6, 0xFF}}},
+	{{{-62, 13, 178}, 0, {312, 124}, {0x0, 0x5A, 0xA6, 0xFF}}},
+};
+
+Gfx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_2 + 0, 10, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(3, 0, 4, 0, 3, 4, 5, 0),
+	gsSP2Triangles(5, 4, 6, 0, 5, 6, 7, 0),
+	gsSP2Triangles(6, 8, 7, 0, 6, 9, 8, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPullSwitchRodDL_PullSwitchExtending_001_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPullSwitchRodDL_PullSwitch_Metal_01_ci8_pal_rgba16),
+	gsDPTileSync(),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadSync(),
+	gsDPLoadTLUTCmd(7, 132),
+	gsDPPipeSync(),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPullSwitchRodDL_PullSwitch_Metal_01_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPullSwitchRodDL_Base_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPullSwitchRodDL_PullSwitch_Metal_02_ci8_pal_rgba16),
+	gsDPTileSync(),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadSync(),
+	gsDPLoadTLUTCmd(7, 111),
+	gsDPPipeSync(),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPullSwitchRodDL_PullSwitch_Metal_02_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadBlock(7, 0, 0, 255, 512),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 4, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 60),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gPullSwitchRodDL_PullSwitchHandle_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gPullSwitchRodDL_PullSwitch_Metal_00_ci8_pal_rgba16),
+	gsDPTileSync(),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadSync(),
+	gsDPLoadTLUTCmd(7, 84),
+	gsDPPipeSync(),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, gPullSwitchRodDL_PullSwitch_Metal_00_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadSync(),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsDPSetPrimColor(0, 0, 130, 72, 64, 255),
+	gsSPEndDisplayList(),
+};
+
+Gfx gPullSwitchRodDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gPullSwitchRodDL_PullSwitchExtending_001_layerOpaque),
+	gsSPDisplayList(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_gPullSwitchRodDL_Base_layerOpaque),
+	gsSPDisplayList(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_gPullSwitchRodDL_PullSwitchHandle_layerOpaque),
+	gsSPDisplayList(gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_2),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchRodDL.h b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchRodDL.h
new file mode 100644
index 000000000..89422a06f
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/gPullSwitchRodDL.h
@@ -0,0 +1,17 @@
+extern u64 gPullSwitchRodDL_PullSwitch_Metal_01_ci8[];
+extern u64 gPullSwitchRodDL_PullSwitch_Metal_01_ci8_pal_rgba16[];
+extern u64 gPullSwitchRodDL_PullSwitch_Metal_02_ci8[];
+extern u64 gPullSwitchRodDL_PullSwitch_Metal_02_ci8_pal_rgba16[];
+extern u64 gPullSwitchRodDL_PullSwitch_Metal_00_ci8[];
+extern u64 gPullSwitchRodDL_PullSwitch_Metal_00_ci8_pal_rgba16[];
+extern Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_0[24];
+extern Gfx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_0[];
+extern Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_1[45];
+extern Gfx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_1[];
+extern Vtx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_vtx_2[10];
+extern Gfx gPullSwitchRodDL_gPullSwitchRodDL_mesh_layer_Opaque_tri_2[];
+extern Gfx mat_gPullSwitchRodDL_PullSwitchExtending_001_layerOpaque[];
+extern Gfx mat_gPullSwitchRodDL_Base_layerOpaque[];
+extern Gfx mat_gPullSwitchRodDL_PullSwitchHandle_layerOpaque[];
+extern Gfx gPullSwitchRodDL[];
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.c b/assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.c
new file mode 100644
index 000000000..5e4564456
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.c
@@ -0,0 +1,7 @@
+#include "ultra64.h"
+#include "global.h"
+
+#include "gPullSwitchFrameDL.c"
+#include "gPullSwitchRodDL.c"
+#include "gPullSwitchCol.c"
+#include "gPullSwitchNoGrabCol.c"
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.h b/assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.h
new file mode 100644
index 000000000..6efe56235
--- /dev/null
+++ b/assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.h
@@ -0,0 +1,9 @@
+#ifndef OBJECT_WALL_PULL_SWITCH_H
+#define OBJECT_WALL_PULL_SWITCH_H 1
+
+#include "gPullSwitchFrameDL.h"
+#include "gPullSwitchRodDL.h"
+#include "gPullSwitchCol.h"
+#include "gPullSwitchNoGrabCol.h"
+
+#endif
\ No newline at end of file
diff --git a/assets_hm_pack/objects/object_wiz/object_wiz.c b/assets_hm_pack/objects/object_wiz/object_wiz.c
new file mode 100644
index 000000000..26a3019cc
--- /dev/null
+++ b/assets_hm_pack/objects/object_wiz/object_wiz.c
@@ -0,0 +1,1800 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+#include "object_wiz.h"
+#include "assets/misc/link_animetion/link_animetion.h"
+#include "assets/objects/gameplay_keep/gameplay_keep.h"
+
+u64 gWizrobeEffectTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_ice_smoke.i4.inc.c"
+};
+
+u64 gWizrobeIceSmokeMaskTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_ice_smoke_mask.i4.inc.c"
+};
+
+Vtx object_wizVtx_000E40[] = {
+	VTX(-3000, -1600, 0, -512, 1126, 255, 255, 255, 255),
+	VTX(3000, -1500, 0, 1536, 1092, 255, 255, 255, 255),
+	VTX(0, 3500, 0, 512, -614, 255, 255, 255, 255),
+};
+
+Gfx gWizrobeIceSmokeMaterialDL[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPLoadTextureBlock_4b(gWizrobeEffectTex, G_IM_FMT_I, 32, 64, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR |
+                            G_TX_WRAP, 5, 6, G_TX_NOLOD, 15),
+    gsDPLoadMultiBlock_4b(gWizrobeIceSmokeMaskTex, 0x0100, 1, G_IM_FMT_I, 32, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP,
+                          G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
+    gsDPSetCombineLERP(TEXEL0, 0, ENV_ALPHA, TEXEL1, TEXEL0, 1, ENVIRONMENT, TEXEL1, PRIMITIVE, ENVIRONMENT, COMBINED,
+                       ENVIRONMENT, COMBINED, 0, PRIMITIVE, 0),
+    gsDPSetRenderMode(G_RM_PASS, G_RM_ZB_CLD_SURF2),
+    gsSPClearGeometryMode(G_FOG | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+    gsSPSetGeometryMode(G_CULL_BACK),
+    gsDPSetEnvColor(255, 255, 255, 128),
+    gsSPEndDisplayList(),
+};
+
+Gfx gWizrobeIceSmokeModelDL[] = {
+    gsSPDisplayList(0x08000000),
+    gsSPVertex(object_wizVtx_000E40, 3, 0),
+    gsSP1Triangle(0, 1, 2, 0),
+    gsSPEndDisplayList(),
+};
+
+u8 object_wiz_possiblePadding_000FF8[] = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+Vtx object_wizVtx_002600[] = {
+	VTX(-3500, -3000, 0, -384, 1152, 184, 184, 184, 184),
+	VTX(3500, -3000, 0, 1408, 1152, 184, 184, 184, 184),
+	VTX(0, 10200, 0, 512, -538, 184, 184, 184, 184),
+};
+
+Gfx gWizrobeSmallFlameDL[] = {
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(TEXEL1, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, TEXEL0, TEXEL1, PRIM_LOD_FRAC, TEXEL0, PRIMITIVE,
+                       ENVIRONMENT, COMBINED, ENVIRONMENT, COMBINED, 0, PRIMITIVE, 0),
+    gsDPSetRenderMode(G_RM_PASS, G_RM_ZB_XLU_SURF2),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsDPLoadTextureBlock_4b(gWizrobeSmallFlameTex, G_IM_FMT_I, 32, 32, 15, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR |
+                            G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
+    gsDPLoadMultiBlock_4b(gWizrobeSmallFlameMaskTex, 0x0040, 1, G_IM_FMT_I, 32, 32, 15, G_TX_NOMIRROR | G_TX_WRAP,
+                          G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, 15),
+    gsSPDisplayList(0x08000000),
+    gsDPSetAlphaCompare(G_AC_THRESHOLD),
+    gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_SHADING_SMOOTH),
+    gsSPVertex(object_wizVtx_002600, 3, 0),
+    gsSP1Triangle(0, 1, 2, 0),
+    gsDPSetAlphaCompare(G_AC_NONE),
+    gsSPEndDisplayList(),
+};
+
+u64 gWizrobeSmallFlameTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_small_flame.i4.inc.c"
+};
+
+u64 gWizrobeSmallFlameMaskTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_small_flame_mask.i4.inc.c"
+};
+
+Vtx object_wizVtx_002B10[] = {
+	VTX(-3000, -2000, 0, -256, 1024, 160, 160, 160, 160),
+	VTX(3000, -2000, 0, 1280, 1024, 160, 160, 160, 160),
+	VTX(0, 4100, 0, 512, -538, 160, 160, 160, 160),
+};
+
+Gfx gWizrobeMagicProjectileDL[] = {
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, TEXEL0, 0, PRIMITIVE, 0, COMBINED, 0, COMBINED, 0,
+                       0, 0, 0, COMBINED),
+    gsDPSetRenderMode(G_RM_PASS, G_RM_ZB_XLU_SURF2),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsDPLoadTextureBlock_4b(gWizrobeMagicProjectileTex, G_IM_FMT_I, 32, 32, 15, G_TX_NOMIRROR | G_TX_CLAMP,
+                            G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
+    gsDPSetAlphaCompare(G_AC_THRESHOLD),
+    gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_SHADING_SMOOTH),
+    gsSPVertex(object_wizVtx_002B10, 3, 0),
+    gsSP1Triangle(0, 1, 2, 0),
+    gsDPSetAlphaCompare(G_AC_NONE),
+    gsSPEndDisplayList(),
+};
+
+u64 gWizrobeMagicProjectileTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_magic_projectile.i4.inc.c"
+};
+
+u8 object_wiz_possiblePadding_002DFC[] = {
+    0x00, 0x00, 0x00, 0x00, 
+};
+
+u64 gWizrobeFirePoolTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_fire_pool.i4.inc.c"
+};
+
+Vtx object_wizVtx_003000[] = {
+	VTX(0, 0, -8250, 0, 1024, 255, 255, 255, 255),
+	VTX(-5834, 0, -5834, 1026, 1024, 255, 255, 255, 255),
+	VTX(0, 0, 0, 513, -215, 255, 255, 255, 255),
+	VTX(5834, 0, 5834, 0, 1024, 255, 255, 255, 255),
+	VTX(8250, 0, 0, 1026, 1024, 255, 255, 255, 255),
+	VTX(0, 0, 0, 513, -215, 255, 255, 255, 255),
+	VTX(-8250, 0, 0, 0, 1024, 255, 255, 255, 255),
+	VTX(-5834, 0, 5834, 1026, 1024, 255, 255, 255, 255),
+	VTX(0, 0, 0, 513, -215, 255, 255, 255, 255),
+	VTX(5834, 0, -5834, 0, 1024, 255, 255, 255, 255),
+	VTX(0, 0, -8250, 1026, 1024, 255, 255, 255, 255),
+	VTX(0, 0, 0, 513, -215, 255, 255, 255, 255),
+	VTX(0, 0, 0, 513, -215, 255, 255, 255, 255),
+	VTX(0, 0, 8250, 0, 1024, 255, 255, 255, 255),
+	VTX(5834, 0, -5834, 0, 1024, 255, 255, 255, 255),
+	VTX(-8250, 0, 0, 0, 1024, 255, 255, 255, 255),
+	VTX(0, 0, 8250, 1026, 1024, 255, 255, 255, 255),
+	VTX(5834, 0, 5834, 0, 1024, 255, 255, 255, 255),
+};
+
+Gfx gWizrobeFirePoolDL[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPLoadTextureBlock_4b(gWizrobeFirePoolTex, G_IM_FMT_I, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR |
+                            G_TX_CLAMP, 5, 5, 1, G_TX_NOLOD),
+    gsDPTileSync(),
+    gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_4b, 2, 0x0000, 1, 0, G_TX_NOMIRROR | G_TX_CLAMP, 5, G_TX_NOLOD, G_TX_NOMIRROR |
+                G_TX_WRAP, 5, G_TX_NOLOD),
+    gsDPSetTileSize(1, 0, 0, 0x007C, 0x007C),
+    gsDPSetCombineLERP(TEXEL1, 0, ENV_ALPHA, TEXEL0, TEXEL0, 1, ENVIRONMENT, TEXEL0, PRIMITIVE, ENVIRONMENT, COMBINED,
+                       ENVIRONMENT, COMBINED, 0, PRIMITIVE, 0),
+    gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_XLU_DECAL2),
+    gsSPClearGeometryMode(G_FOG | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+    gsSPSetGeometryMode(G_CULL_BACK),
+    gsSPDisplayList(0x08000000),
+    gsSPVertex(object_wizVtx_003000, 18, 0),
+    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
+    gsSP2Triangles(12, 7, 13, 0, 11, 4, 14, 0),
+    gsSP2Triangles(8, 1, 15, 0, 5, 16, 17, 0),
+    gsSPEndDisplayList(),
+};
+
+Vtx object_wizVtx_0035E0[] = {
+	VTX(5250, 0, -750, 1024, 1792, 255, 255, 255, 0),
+	VTX(6750, 6750, -750, 1152, 768, 255, 255, 255, 0),
+	VTX(0, 4500, -750, 512, 1024, 255, 255, 255, 255),
+	VTX(-4500, 0, -750, 0, 1792, 255, 255, 255, 0),
+	VTX(-6750, 6750, -750, -128, 768, 255, 255, 255, 0),
+	VTX(0, 13500, -750, 512, -512, 255, 255, 255, 0),
+};
+
+Gfx gWizrobeFireSmokeDL[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPLoadTextureBlock_4b(gWizrobeEffectTex, G_IM_FMT_I, 32, 64, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR |
+                            G_TX_WRAP, 5, 6, G_TX_NOLOD, G_TX_NOLOD),
+    gsDPTileSync(),
+    gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_4b, 2, 0x0000, 1, 0, G_TX_NOMIRROR | G_TX_WRAP, 6, 15, G_TX_NOMIRROR | G_TX_WRAP,
+                5, 15),
+    gsDPSetTileSize(1, 0, 0, 0x007C, 0x00FC),
+    gsDPSetCombineLERP(TEXEL1, 0, ENV_ALPHA, TEXEL0, TEXEL1, 0, PRIMITIVE, 0, PRIMITIVE, ENVIRONMENT, COMBINED,
+                       ENVIRONMENT, COMBINED, 0, SHADE, 0),
+    gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_XLU_SURF2),
+    gsSPClearGeometryMode(G_FOG | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+    gsSPSetGeometryMode(G_CULL_BACK),
+    gsSPDisplayList(0x08000000),
+    gsSPVertex(object_wizVtx_0035E0, 6, 0),
+    gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
+    gsSP2Triangles(2, 5, 4, 0, 2, 1, 5, 0),
+    gsSP1Triangle(3, 0, 2, 0),
+    gsSPEndDisplayList(),
+};
+
+u8 object_wiz_possiblePadding_0036F8[] = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+u64 gWizrobeBigFlameTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_big_flame.i8.inc.c"
+};
+
+Vtx object_wizVtx_003F00[] = {
+	VTX(0, 375, 0, 0, 1024, 255, 255, 255, 255),
+	VTX(5625, 750, 0, 1024, 0, 255, 255, 255, 255),
+	VTX(3375, 4500, 0, 585, -16, 255, 255, 255, 255),
+	VTX(0, 375, 0, 1024, 1024, 255, 255, 255, 255),
+	VTX(0, 6750, 0, 1024, 0, 255, 255, 255, 255),
+	VTX(-3375, 4500, 0, 439, -16, 255, 255, 255, 255),
+	VTX(-5625, 750, 0, 0, 0, 255, 255, 255, 255),
+	VTX(0, -3000, 0, 439, -16, 255, 255, 255, 255),
+	VTX(0, -3000, 0, 585, -16, 255, 255, 255, 255),
+
+	VTX(0, 6750, 0, 0, 0, 255, 255, 255, 255),
+	VTX(0, 375, 0, 0, 1024, 255, 255, 255, 255),
+	VTX(3375, 4500, 0, 585, -33, 255, 255, 255, 255),
+};
+
+Gfx gWizrobeBigFlameDL[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPLoadTextureBlock(gWizrobeBigFlameTex, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP,
+                         G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
+    gsDPLoadMultiBlock_4b(gWizrobeEffectTex, 0x0100, 1, G_IM_FMT_I, 32, 64, 0, G_TX_NOMIRROR | G_TX_WRAP,
+                          G_TX_NOMIRROR | G_TX_WRAP, 5, 6, 15, 15),
+    gsDPSetCombineLERP(TEXEL1, 0, ENV_ALPHA, TEXEL0, TEXEL0, 1, ENVIRONMENT, TEXEL0, PRIMITIVE, ENVIRONMENT, COMBINED,
+                       ENVIRONMENT, COMBINED, 0, PRIMITIVE, 0),
+    gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_XLU_SURF2),
+    gsSPClearGeometryMode(G_FOG | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+    gsSPSetGeometryMode(G_CULL_BACK),
+    gsSPDisplayList(0x08000000),
+    gsSPVertex(object_wizVtx_003F00, 9, 0),
+    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+    gsSP2Triangles(6, 3, 5, 0, 7, 3, 6, 0),
+    gsSP1Triangle(8, 1, 0, 0),
+    gsSPVertex(&object_wizVtx_003F00[9], 3, 0),
+    gsSP1Triangle(0, 1, 2, 0),
+    gsSPEndDisplayList(),
+};
+
+u8 object_wiz_possiblePadding_0040A8[] = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+u64 gWizrobeIcePoolTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_ice_pool.i8.inc.c"
+};
+
+Vtx object_wizVtx_0050F0[] = {
+	VTX(1545, 0, -4755, 1340, 50, 255, 255, 255, 255),
+	VTX(5000, 0, 0, 2048, 1024, 255, 255, 255, 255),
+	VTX(4045, 0, -2939, 1852, 422, 255, 255, 255, 255),
+	VTX(4045, 0, 2939, 1852, 1626, 255, 255, 255, 255),
+	VTX(-1545, 0, -4755, 708, 50, 255, 255, 255, 255),
+	VTX(1545, 0, 4755, 1340, 1998, 255, 255, 255, 255),
+	VTX(-4045, 0, -2939, 196, 422, 255, 255, 255, 255),
+	VTX(-1545, 0, 4755, 708, 1998, 255, 255, 255, 255),
+	VTX(-5000, 0, 0, 0, 1024, 255, 255, 255, 255),
+	VTX(-4045, 0, 2939, 196, 1626, 255, 255, 255, 255),
+};
+
+Gfx gWizrobeIcePoolDL[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPLoadTextureBlock(gWizrobeIcePoolTex, G_IM_FMT_I, G_IM_SIZ_8b, 64, 64, 0, G_TX_NOMIRROR | G_TX_WRAP,
+                         G_TX_NOMIRROR | G_TX_WRAP, 6, 6, G_TX_NOLOD, G_TX_NOLOD),
+    gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0,
+                       0, COMBINED, COMBINED, 0, PRIMITIVE, 0),
+    gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_XLU_DECAL2),
+    gsSPClearGeometryMode(G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+    gsSPSetGeometryMode(G_CULL_BACK | G_FOG),
+    gsSPVertex(object_wizVtx_0050F0, 10, 0),
+    gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+    gsSP2Triangles(4, 3, 0, 0, 4, 5, 3, 0),
+    gsSP2Triangles(6, 5, 4, 0, 6, 7, 5, 0),
+    gsSP2Triangles(8, 7, 6, 0, 8, 9, 7, 0),
+    gsSPEndDisplayList(),
+};
+
+u64 gWizrobeIcePoolShineMaskTex[] = {
+#include "assets_hm_pack/objects/object_wiz/wizrobe_ice_pool_shine_mask.i4.inc.c"
+};
+
+Vtx object_wizVtx_0056B0[] = {
+	VTX(1545, 0, -4755, 485, 64, 255, 255, 255, 255),
+	VTX(4045, 0, 2939, 465, 364, 255, 255, 255, 255),
+	VTX(5000, 0, 0, 674, 384, 255, 255, 255, 255),
+	VTX(-1545, 0, -4755, 339, 144, 255, 255, 255, 255),
+	VTX(1545, 0, 4755, 309, 368, 255, 255, 255, 255),
+	VTX(-4045, 0, -2939, 208, 132, 255, 255, 255, 255),
+	VTX(-1545, 0, 4755, 180, 448, 255, 255, 255, 255),
+	VTX(-5000, 0, 0, -26, 128, 255, 255, 255, 255),
+	VTX(-4045, 0, 2939, -31, 572, 255, 255, 255, 255),
+	VTX(4045, 0, -2939, 680, -60, 255, 255, 255, 255),
+};
+
+Gfx gWizrobeIcePoolShineDL[] = {
+    gsDPPipeSync(),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
+    gsDPLoadTextureBlock_4b(gWizrobeEffectTex, G_IM_FMT_I, 32, 64, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR |
+                            G_TX_WRAP, 5, 6, 2, 3),
+    gsDPLoadMultiBlock_4b(gWizrobeIcePoolShineMaskTex, 0x0100, 1, G_IM_FMT_I, 16, 16, 0, G_TX_NOMIRROR | G_TX_WRAP,
+                          G_TX_NOMIRROR | G_TX_WRAP, 4, 4, 2, G_TX_NOLOD),
+    gsDPSetCombineLERP(TEXEL1, TEXEL0, ENV_ALPHA, TEXEL1, TEXEL1, TEXEL0, ENVIRONMENT, TEXEL1, PRIMITIVE, ENVIRONMENT,
+                       COMBINED, ENVIRONMENT, COMBINED, 0, PRIMITIVE, 0),
+    gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_XLU_DECAL2),
+    gsSPClearGeometryMode(G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+    gsSPSetGeometryMode(G_CULL_BACK | G_FOG),
+    gsSPDisplayList(0x08000000),
+    gsSPVertex(object_wizVtx_0056B0, 10, 0),
+    gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+    gsSP2Triangles(3, 4, 1, 0, 5, 4, 3, 0),
+    gsSP2Triangles(5, 6, 4, 0, 7, 6, 5, 0),
+    gsSP2Triangles(7, 8, 6, 0, 0, 2, 9, 0),
+    gsSPEndDisplayList(),
+};
+
+u8 object_wiz_possiblePadding_005C74[] = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+u64 Armature_cloth3_i8[] = {
+	0x1619161b1a1f1e1f, 0x141c1511161b191d, 0x1d13161d1b14171c, 0x121214180f101116, 0x1117111d1c1c201a, 0x03050b0a121d1217, 0x0f141a180b05070b, 0x0f15171714161c13, 
+	0x121a1a201c1a140f, 0x030505000107080c, 0x0e10050108000003, 0x191c191915191212, 0x1c18131b1e191511, 0x0402060001000401, 0x000703000002020d, 0x171e161c1b1e171c, 
+	0x1b1118171719181b, 0x1c15100701050805, 0x0000010001041517, 0x1813191b1f1c1a14, 0x131b1a1b1f1a1822, 0x2832361e11030802, 0x0101050b1d342b24, 0x271913141b121214, 
+	0x18191d1b1e170e23, 0x35313a3836372329, 0x2422283a3f3b3230, 0x1f18181f1918181f, 0x101a1b10191a1415, 0x152a393d41473b44, 0x4745424444443322, 0x0b1b17141314151a, 
+	0x1a1515121d16201b, 0x121423363d484c4d, 0x424b43453a291411, 0x0e0d211510141412, 0x16172927161b130f, 0x0d0c0a1a2d3c3c38, 0x413d352f13090c0d, 0x0e0f141223211810, 
+	0x11112b2a2e190f0d, 0x0a0b11140e0c0c15, 0x1b120e0b08121710, 0x0d17192937341b13, 0x1712232d3b352a17, 0x14101015160e0910, 0x130b181c0f0f160c, 0x14293543351e2019, 
+	0x1811171f23393b34, 0x220c100f160f0a10, 0x0d171b1917110819, 0x323c402a251c1d14, 0x1114121417143138, 0x3e2c090409060b0c, 0x0c0d1a20190e2334, 0x39381f0f11101a11, 
+	0x1c1808190e121229, 0x38413d1f0a010103, 0x03050d16192d3a3b, 0x2b1c090f170d0e16, 0x1b0f0c1712110d18, 0x2638443936120701, 0x04040e2b3f454027, 0x13131e12120d081c, 
+	0x1b07140e0f141b0f, 0x12283e42443d3420, 0x1c2e3c494b332214, 0x0c1d1b2013060412, 0x13070a0a1d1b1f1b, 0x0f17293a4542443f, 0x3c433e3a2e181213, 0x1c191e201405101d, 
+	0x1e14020b101b1719, 0x19201a263541434f, 0x4d3c3222190b101a, 0x140e1c111b0b1714, 0x151e05090d110f18, 0x1c18151113243437, 0x2e28140d170b1518, 0x1110120f1611101e, 
+	0x12040503120b1512, 0x181119180b0f1119, 0x151a1215160e1417, 0x0e10101710120b11, 0x15090808100d122b, 0x1f0a120a150f0d14, 0x15130d14170e0d19, 0x28180f1609050311, 
+	0x13050e100f0f0b33, 0x3b2c0a0e080e0f1c, 0x21121c19100d2139, 0x380c0f100f060610, 0x140c13150e140b1f, 0x31322309020b0e15, 0x1a110b1514213336, 0x21101a0c0b04031c, 
+	0x191d09110c0c0d0f, 0x264537350a02040b, 0x07060d0e31353e27, 0x0816121716061c15, 0x1e04010612131514, 0x0c2a383732230902, 0x060b232f36373114, 0x141b211511050316, 
+	0x111b0300030c1a19, 0x100c3245433b3f2d, 0x2e373c443a220c0d, 0x171a18130c05131b, 0x1d120506010a120b, 0x15120d2f403a3b3f, 0x3f40463b29140d17, 0x17150e1303071815, 
+	0x1319130304081118, 0x0d1a11082329333e, 0x3d473e2415170e19, 0x110d060b0e1d151e, 0x151914190202050e, 0x0b1409080d1a1e2c, 0x332c1d0b10150d0b, 0x05020109121a1a1f, 
+	0x1c181313120b0001, 0x02020602090b0703, 0x0504090d0a0a0801, 0x0000061d16181012, 0x181c1f1018180207, 0x0000040003040407, 0x0103040503020800, 0x000c191f19131712, 
+	
+};
+
+u64 Armature_cloth_white_ia8[] = {
+	0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0e0e0f0f0, 0xf0f2fcfffffffff9, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0e0e0f0f0, 0xfaffffffffffffff, 0xfef1f0f0f0f0f0f0, 0xf0f0f0f0f0f0f1f2, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0e0f0f0fb, 0xffffffffffffffff, 0xfffbf0f0f0f0f0f0, 0xf0f0f0f0f4ffffff, 0xfffcf0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0fbffffff, 0xf3f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0faff, 0xffffffffffffffff, 0xfffff8f0f0f0f0f0, 0xf0f0f0f6ffffffff, 0xfffffef1f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0fbffffffff, 0xfff6f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f5ffff, 0xfffffffaf0f0fcff, 0xfffffcf0f0f0f0f0, 0xf0f0f3fffffff9f0, 0xfafffffbf0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f5ffffffffff, 0xfffff3f0f0f0f0f0, 
+	0xf0f0f0f0f0fcffff, 0xfffff4f0f0f0f0fb, 0xfffffff2f0f0f0f0, 0xf0f0fbfffffbf0f0, 0xf0f8fffff5f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0faffffffffff, 0xfffffaf0f0f0f0f0, 
+	0xf0f0f0f0f3ffffff, 0xfff6f0f0f0f0f0f3, 0xfffffff8f0f0f0f0, 0xf0f2fffffff4f0f0, 0xf0f1fdfffaf0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0fcffffffffff, 0xfffffef1f0f0f0f0, 
+	0xf0f0f0f0f7ffffff, 0xfdf0f0f4fff7f0f0, 0xfcfffff9f0f0f0f0, 0xf0f7fffffcf0f0f0, 0xf0f0fcfffdf0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f1fefffffcf0f8, 0xfffffff7f0f0f0f0, 
+	0xf0f0f0f0faffffff, 0xf6f0f4fffffff3f0, 0xf9fffff9f0f0f0f0, 0xf0f7fffffbf0f0f0, 0xf0f0f5fffff6f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0fcfffff4f0f0, 0xfcfffff7f0f0f0f0, 
+	0xf0f0f0f0feffffff, 0xf3f0fbfffaf0f0f0, 0xf9fffff9f0f0f0f0, 0xf0f7fffffcf0f0f0, 0xf0f0f5fffff6f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0fafffef1f0f0, 0xf9fffffcf0f0f0f0, 
+	0xf0f0f0f0fefffffd, 0xf0f1fffff3f0f0f0, 0xfcfffff9f0f2f2f0, 0xf0f7fffffff2f0f3, 0xf6f0f5fffffdf0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f5fffef1f0f0, 0xf5fffffef0f0f0f0, 
+	0xf0f0f0f0fefffffb, 0xf0f1fffff2f0f0f2, 0xfffffff9f0f6f3f0, 0xf0f7fffffff8f0fc, 0xfdf0f4fffffff4f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f9fff1f0f0, 0xf4fffffef0f0f0f0, 
+	0xf0f0f0f0fefffffb, 0xf0f1fffff4f0f0f5, 0xfffffff8f0fdf7f0, 0xf0f1feffffffffff, 0xfaf0f4fffffff9f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf4fffffef0f0f0f0, 
+	0xf0f0f0f0fefffffc, 0xf0f1fffffcf0f1fe, 0xfffffff2f0fdf7f0, 0xf0f0fbffffffffff, 0xf8f0f5fffffffff2, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf6fffffef0f0f0f0, 
+	0xf0f0f0f0fefffffe, 0xf0f0feffffffffff, 0xfffffcf0f2fffdf0, 0xf0f0f3ffffffffff, 0xf3f0f6fffff9fff9, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf9fffffef0f0f0f0, 
+	0xf0f0f0f0feffffff, 0xf4f0f8ffffffffff, 0xfffff7f0f6fffef2, 0xf0f0f0f2fefffff6, 0xf0f0fbfffdf2fcff, 0xf3f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xfbfffffef0f0f0f0, 
+	0xf0f0f0f0faffffff, 0xf5f0f4ffffffffff, 0xfffef0f0fdfffff8, 0xf0f0f0f0f0f0f0f0, 0xf0f0fdfffdf0f7ff, 0xfcf0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f2, 0xfefffffbf0f0f0f0, 
+	0xf0f0f0f0f7ffffff, 0xfbf0f0faffffffff, 0xfff3f0f6fffcf6fe, 0xf2f0f0f0f0f0f0f0, 0xf0f6fffff8f0f0fe, 0xfffaf0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f6, 0xfffffff7f0f0f0f0, 
+	0xf0f0f0f0f4ffffff, 0xfef2f0f0fbffffff, 0xf3f0f1fefff9f1ff, 0xfdf0f0f0f0f0f0f0, 0xf0fdfffff4f0f0f6, 0xfffff8f0f0f0f0f0, 0xf0f0f0f0f0f0f3ff, 0xfffffff2f0f0f0f0, 
+	0xf0f0f0f0f0fdffff, 0xfffbf0f0f0f0f0f0, 0xf0f0fafffff3f0f9, 0xfffbf0f0f0f0f0f0, 0xfbfffffbf0f0f0f0, 0xfbfffffbf0f0f0f0, 0xf0f0f0f0f0f4ffff, 0xfffffbf0f0f0f0f0, 
+	0xf0f0f0f0f0f6ffff, 0xfffff9f0f0f0f0f0, 0xf0fafffff5f0f0f2, 0xfffffff6f0f0f6fe, 0xfffffff4f0f0f0f0, 0xf1fdfffffffcf3f0, 0xf0f1f4f7feffffff, 0xfffff3f0f0f0f0f0, 
+	0xf0f0f0f0f0f0fdff, 0xfffffffef6f0f0f6, 0xfefffff9f0f0f0f0, 0xf5ffffffffffffff, 0xfffff9f0f0f0f0f0, 0xf0f2ffffffffffff, 0xffffffffffffffff, 0xfff7f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f3ff, 0xffffffffffffffff, 0xfffffbf0f0f0f0f0, 0xf0f6ffffffffffff, 0xfffaf0f0f0f0f0f0, 0xf0f0f2feffffffff, 0xffffffffffffffff, 0xf7f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f3, 0xffffffffffffffff, 0xfff9f0f0f0f0f0f0, 0xf0f0f2feffffffff, 0xf5f0f0f0f0f0f0f0, 0xf0f0f0f0fcffffff, 0xfffffffffffffff4, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f0, 0xf0f6fffffffffffd, 0xf2f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f2fcff, 0xfffffffffef5f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 0xf0f0f0f0f0f0f0f0, 
+	
+};
+
+u64 Armature_jewel2_ci8[] = {
+	0x0000010102030002, 0x0100010002000103, 0x0204050501000605, 0x0600020504050005, 0x010708090a08090b, 0x09070c030d0e0b0c, 0x090c0d0d0c0c0f0c, 0x0c090707090c0a05, 
+	0x1011101011101213, 0x1410150f16171818, 0x181819181a1a1a11, 0x1b07090a0a0a0a00, 0x1c191010101d1e1c, 0x1c19111f20211922, 0x2222222222221a11, 0x140b030909080c00, 
+	0x010f0a090d0d0d0d, 0x2324252627242829, 0x0d0c030e010c0c0c, 0x2a2b2c060d080805, 0x020c080a160f0c16, 0x2d2e182f3031252f, 0x3233080c03343536, 0x101b0a0f09080a00, 
+	0x12101a1a10151037, 0x2c381a393a3b193c, 0x3d3e3f4041421c43, 0x4413160d090c0f02, 0x4518251825251846, 0x1607101309351147, 0x481018251818494a, 0x4b124c0e0d080a01, 
+	0x4d4e21214f174515, 0x08081d18030a1146, 0x1612224f4f50131d, 0x0f1421510d090a0d, 0x523a203553081d1d, 0x092c472509204617, 0x53471e533a16541a, 0x0c1c17510d080a05, 
+	0x5556575838595a19, 0x5b2c5c185d3a5e22, 0x065c190b0d0d0f1a, 0x5f5c1809090a0a06, 0x601a2515060d6145, 0x6253212550326349, 0x5450183310190c11, 0x505b256465080a02, 
+	0x611319250d076628, 0x4f53622547204f18, 0x573311621b25351b, 0x100318392c080f05, 0x061667255b516849, 0x633a69251b486a11, 0x290a112b5c184c50, 0x180d101c200a0a01, 
+	0x0d206a252b6b4425, 0x1553082215205425, 0x6c09186d24492f6e, 0x254363250c090800, 0x02532b256f705628, 0x100d0a10180d351a, 0x7165144a5c496309, 0x224e6e1872160a05, 
+	0x7374351875320219, 0x1a76481b490f0a77, 0x1c781a6159792009, 0x105e0f227a320900, 0x05567b1a617c0022, 0x190d202f495f4817, 0x1a357d610a4f1749, 0x49191f7e100a0a02, 
+	0x494949493f030610, 0x197f204f25722047, 0x193d212849494949, 0x255e808119340900, 0x2519474f06518212, 0x45833a33254e6521, 0x1a358449491a4785, 0x0c53655b25866504, 
+	0x0387533553348817, 0x45892035183c358a, 0x496e6a4f0a168b8c, 0x65066342495e4805, 0x206b0c8a8d181849, 0x228e35081a1b8f6a, 0x185c8c8c327c727d, 0x11904949257d0805, 
+	0x5e11494949492522, 0x3f6d650d13140d0c, 0x194a2b9114254949, 0x49929368790c0900, 0x4949492594470209, 0x2c65488b6311090d, 0x1e49494918955e96, 0x0b02742c080d0805, 
+	0x924250765297042c, 0x2c0b298e11197920, 0x98115e560c0d5365, 0x3a0506050d070802, 0x0616203d8201886f, 0x4122494949456253, 0x03012c2c06010101, 0x01020b02070c0a06, 
+	0x3a0d0a2699904949, 0x494911479a03030d, 0x03060f590d030d0d, 0x570a4c0107080802, 0x9b11254949259c3f, 0x9d9e02043a050205, 0x0505000005010606, 0x0d00050507090802, 
+	0x4949491a2f6a0d2c, 0x740d0f0d0c0c0907, 0x09090d0d01020d0d, 0x0d0d090c080f080d, 0x3e62094835350d0d, 0x030b0b0d0b0d0d0d, 0x060d0d0603060b0b, 0x0d0d030a0c0a0805, 
+	0x827453030d0d0d03, 0x0206020000050505, 0x0001020202050202, 0x030d0b0d0d0d0d00, 0x0000050102060200, 0x00000203039f0606, 0x0206060202000000, 0x0000020202010400, 
+	
+};
+
+u64 Armature_jewel2_ci8_pal_rgba16[] = {
+	0x9ccf9c4d9c8d9bcd, 0x9d0f9ccd9c0d8b0d, 0x6a8b934d5a499b4d, 0x7b0b9b8d938d72cb, 0x2083104130c338c3, 0x308318838b4d28c3, 0x10011843184120c3, 0x4905288348c582cb, 
+	0x938f49852043934f, 0x6207080149878b8f, 0x1801624759059acb, 0xa44f8b4f72894145, 0x7b0d49c5628b6249, 0x7acb6acb62cb9b09, 0x830d5185a40f8b0b, 0x3905730d92c79207, 
+	0x81c7594551459bcb, 0x6a07284341033103, 0x834d000161c79b8b, 0x5207930982494185, 0x39459b8fa50fa3cf, 0x4a079c4b9b0b6a89, 0x5a89628969859b4b, 0x59c78acb49457a89, 
+	0x58c5614572492903, 0x51c7a38f71c73143, 0x8a4952095a079c0f, 0x29059a8b49c79289, 0x9bcf59877a49a511, 0xa4cf82479b0d1881, 0x6acd7ac961876a49, 0x5249390341058289, 
+	0x72cd8a89a48f7a09, 0x520539878ac9a451, 0x9c0b820939858b8d, 0x6b0b618541435a4b, 0x3043394351055985, 0x798738836a479c4f, 0x79c7924782c98207, 0x710793899c8b9c8f, 
+	
+};
+
+u64 Armature_hemd3_ci8[] = {
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0102020100000000, 0x0000000001020201, 0x0000000000000000, 
+	0x0000000000000000, 0x0203030304020202, 0x0202020403030302, 0x0000000000000000, 0x0000000000000000, 0x0204050607080808, 0x0808080706050402, 0x0000000000000000, 
+	0x0000000000000000, 0x00000905060a0a0a, 0x0a0a0a0605090000, 0x0000000000000000, 0x0000000000000b0c, 0x0c0d0d0e02050607, 0x070605020e0d0d0c, 0x0c0b000000000000, 
+	0x000000000101020d, 0x0f0f100f0f0d0c11, 0x110c0d0f0f100f0f, 0x0d02010100000000, 0x0000000904031202, 0x130f141515151515, 0x1515151515140f13, 0x0212030409000000, 
+	0x0000000204160a0a, 0x120e0d1415171717, 0x17171715140d0e12, 0x0a0a160402000000, 0x00000c181912070a, 0x0a071a0e1b1c1515, 0x15151c1b0e1a070a, 0x0a071219180c0000, 
+	0x00000d1d0d0c091e, 0x0a0a0a07051f1911, 0x11191f05070a0a0a, 0x1e090c0d1d0d0000, 0x0000200f1c0f0d0e, 0x1a072122220a0a07, 0x070a0a222221071a, 0x0e0d0f1c0f200000, 
+	0x0000180d130f0f0f, 0x1804072122222222, 0x2222222221070418, 0x0f0f0f130d180000, 0x0000020e040e0f0f, 0x0f0d090623222222, 0x2222222306090d0f, 0x0f0f0e040e020000, 
+	0x0001040806050e0d, 0x10140f0e050a2222, 0x22220a050e0f1410, 0x0d0e050608040100, 0x000205070a07080e, 0x0d1415140d090807, 0x0708090d1415140d, 0x0e08070a07050200, 
+	0x0001080a0a0a0707, 0x1f0d151715140d00, 0x000d141517150d1f, 0x07070a0a0a080100, 0x000112070a0a0a0a, 0x071f0f1517171715, 0x15171717150f1f07, 0x0a0a0a0a07120100, 
+	0x000004060a07070a, 0x22071f0f15171717, 0x171717150f1f0722, 0x0a07070a06040000, 0x000003070a06051e, 0x0a230a05190d1415, 0x15140d19050a230a, 0x1e05060a07030000, 
+	0x0002080a22071f02, 0x080a222107051f19, 0x191f050721220a08, 0x021f07220a080200, 0x00030a2222060e0f, 0x0c040a2222230a0a, 0x0a0a2322220a040c, 0x0f0e0622220a0300, 
+	0x00040722220a050f, 0x0f13040722222222, 0x222222220704130f, 0x0f050a2222070400, 0x0002082222220718, 0x0f0f0c1f07222222, 0x222222071f0c0f0f, 0x1807222222080200, 
+	0x0000122322220a04, 0x18140f13091e0a22, 0x220a1e09130f1418, 0x040a222223120000, 0x0001030a22242207, 0x090d0f0f0d0c1f06, 0x061f0c0d0f0f0d09, 0x072224220a030100, 
+	0x0000020622242422, 0x07040d1c140f0f13, 0x130f0f141c0d0407, 0x2224242206020000, 0x0000010407222424, 0x2207120d15151514, 0x141515150d120722, 0x2424220704010000, 
+	0x00000001030a2222, 0x22220a0413141515, 0x15151413040a2222, 0x22220a0301000000, 0x0000000002050a22, 0x2222222305190c13, 0x130c190523222222, 0x220a050200000000, 
+	0x000000000002080a, 0x22242424220a0608, 0x08060a2224242422, 0x0a08020000000000, 0x0000000000000208, 0x2222242424222222, 0x2222222424242222, 0x0802000000000000, 
+	
+};
+
+u64 Armature_hemd3_ci8_pal_rgba16[] = {
+	0xbe75b673b633a5f1, 0xadf1a5af9d6d956d, 0x9dafb631952bbeb5, 0xc6b5ceb7be73d6f7, 0xd6f9c673a5efceb5, 0xdef9df399d6fe739, 0xc675be33adefd6b7, 0xdef7cef79dadb5f1, 
+	0xc6b78ceb8ce994eb, 0x84e9000000000000
+};
+
+u64 Armature_skin2_ci8[] = {
+	0x0000000000000000, 0x0000000001020304, 0x05060708090a0a0b, 0x0b0b0b0b0b0b0b0b, 0x0000000000000000, 0x000000000c010304, 0x0d060e08090a0a0b, 0x0b0b0b0b0b0f0f0f, 
+	0x0000000000000000, 0x000000000c010310, 0x0d060e07080a0a0b, 0x0b0b0b0b0f0f0f0f, 0x0000000000000000, 0x0000000000010210, 0x0d050e07080a0a0a, 0x0b0b0b0b0f0f0f0f, 
+	0x0000000000000000, 0x0000000000010203, 0x04050607080a0a0a, 0x0b0b0b0b0f0f0f0f, 0x0000000000000000, 0x00000000000c0103, 0x04050e07080a0a0a, 0x0b0b0b0b0f0f1111, 
+	0x0000000000000000, 0x00000000000c0103, 0x04050e07080a0a0a, 0x0b0b0b0b0f0f0f11, 0x0000000000000000, 0x00000000000c0103, 0x04050e07080a0a0a, 0x0a0b0b0b0f0f0f0f, 
+	0x0000000000000000, 0x00000000000c0103, 0x04050e0708090a0a, 0x0b0b0b0b0b0f0f0f, 0x0000000000000000, 0x0000000000000103, 0x04050e0708090a0a, 0x0b0b0b0b0b0b0f0f, 
+	0x0000000000000000, 0x0000000000000103, 0x04050e07080a0a0a, 0x0b0b0b0b0b0b0f0f, 0x0000000000000000, 0x0000000000000103, 0x04050e07080a0a0a, 0x0b0b0b0b0b0b0b0b, 
+	0x0000000000000000, 0x00000000000c0103, 0x04050e12090a0a0b, 0x0b0b0b0b0b0b0b0b, 0x0000000000000000, 0x00000000000c0103, 0x04050e12090a0a0b, 0x0b0b0b0b0b0b0b0b, 
+	0x0000000000000013, 0x13000000000c0103, 0x04050e12090a0b0b, 0x0b0b0b0b0b0b0b0b, 0x0000000000001313, 0x1313000000010210, 0x0d050e12090a0b0b, 0x0b0b0b0b0b0b0b0b, 
+	0x0000000000001313, 0x1313000000010310, 0x0d060e12090a0b0b, 0x0b0b0b0b0b0b0f0f, 0x0000000000001313, 0x000000000c010304, 0x05060e08090a0b0b, 0x0b0b0b0b0b0f0f0f, 
+	0x0000000000000000, 0x000000000102100d, 0x050e0708090a0b0b, 0x0b0b0b0b0b0f0f0f, 0x0000000000000000, 0x0000000c01030405, 0x060e0708090a0b0b, 0x0b0b0b0b0b0f0f0f, 
+	0x0000000000000000, 0x00000c0102030405, 0x0e0e0809090a0b0b, 0x0b0b0b0b0b0f0f0f, 0x0000000000000000, 0x0000010103041406, 0x0e0708090a0a0b0b, 0x0b0b0b0b0b0f0f0f, 
+	0x0000000000000000, 0x000c011503040506, 0x0e0708090a0a0b0b, 0x0b0b0b0b0b0f0f0f, 0x0000000000000000, 0x000101030405060e, 0x1208090a0a0b0b0b, 0x0b0b0b0b0b0f0f0f, 
+	0x0000000000000000, 0x0101031004050e07, 0x0808090a0b0b0b0b, 0x0b0b0b0b0b0b0f0f, 0x0000000013000000, 0x0103030405060e12, 0x08090a0a0b0b0b0b, 0x0b0b0b0b0b0b0f0f, 
+	0x0000000000000001, 0x16030405060e0809, 0x0a0a0b0b0b0b0b0b, 0x0b0b0b0b0b0b0b0f, 0x0000000000000116, 0x030405060e08080a, 0x0a0b0b0b0b0b0b0b, 0x0b0b0b0b0b0b0b0f, 
+	0x0000000000011603, 0x0414050e12080a0a, 0x0b0b0b0b0b0b0b0b, 0x0b0b0b0b0b0b0b0f, 0x0000000c01160310, 0x0d050e0708090a0a, 0x0b0b0b0b0b0b0b0b, 0x0b0b0b0b0b0b0f0f, 
+	0x00000c0115031004, 0x050e0e08090a0a0b, 0x0b0b0b0b0b0f0b0b, 0x0b0b0b0b0b0b0f0f, 0x0c01010303040405, 0x060e0808090a0a0b, 0x0b0b0b0b0f0f0f0f, 0x0f0f0f0b0f0f0f0f, 
+	
+};
+
+u64 Armature_skin2_ci8_pal_rgba16[] = {
+	0x1a511a0f19cf11cd, 0x118b0949090908c7, 0x00c5008500830043, 0x1a11114b09070041, 0x118d000108c51a53, 0x094b11cf120f0000
+};
+
+u64 Armature_transition_ci8[] = {
+	0x0001020304050505, 0x0506070809080808, 0x08080a0b0c0d0d0d, 0x0d0d0d0d0d0d0d0d, 0x0e0e000102040505, 0x0505060f08080808, 0x0808101112130d0d, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0000020405, 0x0505051415160808, 0x080808171118130d, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e00001904, 0x05050506051a1608, 0x080808081b1c0b13, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0e0e001d05, 0x05050505140f1608, 0x0808080808101e1f, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e0e000105, 0x0505050506070808, 0x080808080808201f, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0e0e000105, 0x0505050506070808, 0x0808080808082113, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e0e000105, 0x05050505140f1608, 0x080808080822230d, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0e0e001d05, 0x0505050506241608, 0x0808080808211f0d, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e0e000204, 0x0505050625260908, 0x0808080827120d0d, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0e000e2805, 0x0505051429090808, 0x0808082a230c0d0d, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e001d0405, 0x050506052b090808, 0x080808211f0d0d0d, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0001030505, 0x0506141516080808, 0x0808222c130d0d0d, 0x0d0d0d0d0d0d0d0d, 0x0e0e000128040505, 0x0605150908080808, 0x0808172c130d0d0d, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0204050506, 0x2524160908080808, 0x08081b2d1f0d0d0d, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e1d050505, 0x052e0f2616080808, 0x0808082f300d0d0d, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e00001d0505, 0x0506142e1a160808, 0x0808080820310d0d, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e0e001d04, 0x050505142e260908, 0x080808081b1e1f0d, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0e0e000e19, 0x04050505140f1608, 0x0808080808223213, 0x0d0d0d0d0d0d0d0d, 0x0e0e0e0e0e0e0002, 0x0405050506331008, 0x0808080808082a34, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e0e0e0e0e001d, 0x04050505062e1008, 0x0808080808080835, 0x360d0d0d0d0d0d0d, 0x0e0e0e0e0e0e0002, 0x0405050506330808, 0x0808080808080822, 0x340d0d0d0d0d0d0d, 
+	0x0e0e0e0e0e0e0e19, 0x04050505140f1608, 0x0808080808080810, 0x370d0d0d0d0d0d0d, 0x0e0e0e0e0e000105, 0x0505050506381608, 0x080808080808081b, 0x2c0d0d0d0d0d0d0d, 
+	0x0e0e0e0e0e000204, 0x0505051407080808, 0x0808080808080839, 0x300d0d0d0d0d0d0d, 0x0e0e0e0e00010305, 0x050506051a160808, 0x080808080808083a, 0x3b0d0d0d0d0d0d0d, 
+	0x0e0e0e0e00020405, 0x0505141516080808, 0x0808080808080a34, 0x1f0d0d0d0d0d0d0d, 0x0e0e0e001d050505, 0x0514290808080808, 0x08080808080a2c1f, 0x0d0d0d0d0d0d0d0d, 
+	0x0e0e000103050506, 0x140f080908080808, 0x080808082723130d, 0x0d0d0d0d0d0d0d0d, 0x0e00012804050605, 0x1509090808080808, 0x0808223c18130d0d, 0x0d0d0d0d0d0d0d0d, 
+	0x0001280405053338, 0x1608080808080808, 0x0822113d0d0d0d0d, 0x0d0d0d0d0d0d0d0d, 0x0e03040506252408, 0x0808080808080808, 0x0820120c0d0d0d0d, 0x0d0d0d0d0d0d0d0d, 
+	
+};
+
+u64 Armature_transition_ci8_pal_rgba16[] = {
+	0xf205f2c5f445f585, 0xf605f5c5f5c3e613, 0xa67da67f95f7335b, 0x1a531a51f245d61d, 0xa67b6ceb2ad72253, 0xf5c1c621967f9e39, 0x3319f505b6719e7b, 0x8573f3856cab2293, 
+	0x7d7174ed9e3b439f, 0xc629f5c9a6778db5, 0xf545d6199639b673, 0x4be164a9f5cb8df7, 0x3b5b2a955c25e5cf, 0x439d85b322955423, 0xb66d95f9752f22d5, 0x7d2f2ad500000000
+};
+
+u64 Armature_tongue_ci8[] = {
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0e0e0e030f101107, 0x1212131214151515, 0x1515151515141213, 0x1216060606060606, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 
+	0x0000010203040506, 0x07070708090a0a0a, 0x0a0a0a0a0a090807, 0x070b0c0d0d0d0d0d, 0x0000000203041706, 0x07070b07090a0a0a, 0x0a0a0a0a0a091807, 0x07060d0d0d0d0d0d, 
+	
+};
+
+u64 Armature_tongue_ci8_pal_rgba16[] = {
+	0x10850883188720c9, 0x3951495759db621d, 0x625f626162a3621b, 0x519b519918c7310b, 0x419351976a5f6a5d, 0x6aa36ae5625d4955, 0x621f000000000000
+};
+
+u64 Armature_beak_ci8[] = {
+	0x0000000001020304, 0x0506070808080808, 0x0808080808080808, 0x08090a0b0c0c0c0c, 0x0000000d030e0f10, 0x0708080808080808, 0x0808080808080808, 0x080811120c0c0c0c, 
+	0x0000130305141508, 0x0808080808080808, 0x0808080808080808, 0x08080816170c0c0c, 0x0018191a07080808, 0x0808080808080808, 0x0808080808080808, 0x08080811151b0c0c, 
+	0x000d041008080808, 0x0808080808080808, 0x0808080808080808, 0x08080811151c1d0c, 0x001e1f0708080808, 0x0808080808081608, 0x1120201108080808, 0x0808080811071b0c, 
+	0x0121221508080808, 0x0808080808080923, 0x242526271b282908, 0x08080808112a2b0c, 0x01030f1508080808, 0x080808162c2d2e2f, 0x0c0c0c0c0c0c3031, 0x080808081115320c, 
+	0x0d33100808080808, 0x0808162c342f0c0c, 0x0c0c0c0c0c0c0c35, 0x360808080815370b, 0x0d04100808080808, 0x080829342f0c0c1d, 0x3839393a3b0c0c0c, 0x2d0808080808320c, 
+	0x3c3d140808080808, 0x08083e3f0c0c251c, 0x2a080816401d0c0c, 0x1d20080808162b0c, 0x3c0e140808080808, 0x08413b0c0c424315, 0x1108080816440c0c, 0x0b2c08080808380c, 
+	0x0245140808080808, 0x08463f0c0c472a08, 0x0808080808481d0c, 0x0b2c08080829420c, 0x1e1f070808080808, 0x49343f0c0b370808, 0x08080808084a0b0c, 0x2d08080816280c0c, 
+	0x1e1f070808080816, 0x4b302f0c0b4c0808, 0x08080808084b4d2d, 0x290808082c1d0c0c, 0x021f070808080816, 0x4b302f0c0c4e1608, 0x0808080808082008, 0x0808084f500c0c0c, 
+	0x3c45070808080808, 0x51302f0c0c522008, 0x0808080808080811, 0x080853250c0c0c0c, 0x540e140808080808, 0x08342f0c0c0c2d20, 0x160808081111082a, 0x4a1b0b0c0c0c0c0c, 
+	0x540e140808080808, 0x08553f0c0c0c0b0a, 0x4b20080815564c38, 0x1d0c0c0c0c3b250b, 0x3c45070808080808, 0x0857500c0c0c0c0c, 0x0b302d1b58250b0c, 0x0c0c0b3b592c4a0b, 
+	0x1e1a150808080808, 0x0808495a0c0c0c0c, 0x0c0c0c0c0c0c0c0b, 0x3530554908164c0b, 0x2122150808080808, 0x080808115b420c0c, 0x0c0c0c0c0c355c0a, 0x5d20080808084c0b, 
+	0x030f080808080808, 0x08080808084f395e, 0x5050500a5f5d6008, 0x160808080808610c, 0x3310080808080808, 0x0808080808080808, 0x0811110808160808, 0x080808080808620c, 
+	0x3310080808080808, 0x0808080808080808, 0x0808080808080808, 0x080808080816170c, 0x3310080808080808, 0x0808080808080808, 0x0808080808080808, 0x0808080808081b0c, 
+	0x6310080808080808, 0x0808080808080808, 0x0808080808080808, 0x080808080820420c, 0x0410080808080808, 0x0808081111080808, 0x0808080808080808, 0x0808080808360b0c, 
+	0x0414080808080808, 0x0808080808080808, 0x0808080808080808, 0x08080808165b0c0c, 0x0e14080808080808, 0x0808080808080808, 0x0808080808080808, 0x0808080808500c0c, 
+	0x1f07080808080808, 0x0808080808080808, 0x0808080808080808, 0x08080808640b0c0c, 0x1a07080808080808, 0x0808080808080808, 0x0808111556561108, 0x0808086566676868, 
+	
+};
+
+u64 Armature_beak_ci8_pal_rgba16[] = {
+	0x84217bdf635b5295, 0x4211294b19091085, 0x084340c3c183f205, 0xf245739d39cf2109, 0x18c70883914573df, 0x10c7088500438145, 0x7c215b19298da185, 0x3107e2056319318d, 
+	0x10835ad7214b8143, 0xa985c1c5c9c5b9c5, 0x5905188300856147, 0x2883a183da05ea45, 0xd1c3490351474a53, 0xc9c3f20338c34107, 0x918749058945e203, 0x6b5b3a11a143ea05, 
+	0x38c550c3d20520c5, 0x610731cfa9837147, 0x18c5208328c548c3, 0x4105e1c371451885, 0xc1c33083d1c53905, 0x6b9d790308c51043, 0xa1c58943b9836905, 0xf1c3690391859943, 
+	0x30c3510561054253, 0x6103190789c7e245, 0xda45000000000000
+};
+
+u64 Armature_eye4_ci8[] = {
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000010203040501, 0x060708090a0a0a0a, 0x0a0a0a0a0a0a0a0a, 0x0a0a0a0a0a0a0000, 0x00000b010c0d0e0f, 0x10110a1212121212, 0x12121212120a0a0a, 0x0a0a0a0a0a0a0000, 
+	0x00000b0c05131014, 0x0a12121212121212, 0x121212121212120a, 0x0a0a0a0a0a0a0000, 0x0000150513160912, 0x1212121718191919, 0x1a1b181c17121212, 0x120a0a0a0a0a0000, 
+	0x00000d1d1e1f1212, 0x1220211922221a1a, 0x231a1b1924181712, 0x12120a0a0a0a0000, 0x0000252627121212, 0x1c192328292a2b2c, 0x2c2b2a2d1a1a2420, 0x1212120a0a0a0000, 
+	0x00002e2f0a12121c, 0x1a3031322c2c2c2c, 0x2c2c2c2c3233191b, 0x2012120a0a0a0000, 0x000034351212201a, 0x2336372c38393a3b, 0x3b3a39382c373c22, 0x241712120a0a0000, 
+	0x00003d0a12122428, 0x3e372c3f40414141, 0x414141403f2c3742, 0x241812120a0a0000, 0x0000431212202844, 0x452c3f4641474849, 0x49484741463f2c4a, 0x4b242012120a0000, 
+	0x00000a121224304c, 0x2c3840414d121212, 0x1212124d4140382c, 0x4e302112120a0000, 0x00000a1212284f50, 0x2c39414712121212, 0x121212124741392c, 0x51522312120a0000, 
+	0x0000121212305354, 0x2c3a414812121212, 0x1212121248413a2c, 0x55564f1212120000, 0x0000121212304457, 0x2c3b414912121212, 0x1212121249413b2c, 0x58594f1212120000, 
+	0x000012121228445a, 0x2c3b414912121212, 0x1212121249413b2c, 0x5b5c5d1212120000, 0x000012121223445e, 0x2c3a414812121212, 0x1212121248413a2c, 0x5f594b1212120000, 
+	0x00000a1212224b50, 0x2c39414712121212, 0x121212124741392c, 0x601a2412120a0000, 0x00000a1212196136, 0x5a3840414d121212, 0x1212124d41403862, 0x292218120a0a0000, 
+	0x0000630a12204b64, 0x652c3f4641474849, 0x49484741463f2c66, 0x1a19170a0a0a0000, 0x0000670a0a0a4468, 0x696a2c3f40414141, 0x414141403f2c6b6c, 0x236d0a0a0a0a0000, 
+	0x00006e6f0a0a6d70, 0x6471722c38393a3b, 0x3b3a39382c733674, 0x75760a0a0a0a0000, 0x000077780a0a0a79, 0x7a7b7c7d7e2c2c2c, 0x2c2c2c5a7f808175, 0x820a0a0a0a0a0000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	
+};
+
+u64 Armature_eye4_ci8_pal_rgba16[] = {
+	0xfffedef2deb0de6e, 0xe6f4f7b88ce0430e, 0x120222060000deb2, 0xef36f778be2a5392, 0x12422a060001a5a4, 0x11c2e73409c00841, 0x210142014a4139c1, 0x18c1b5e812001984, 
+	0x1081294152815ac1, 0x3181ceae2a8a0940, 0x63015201fb01f981, 0xf80141816c180080, 0x6b415a41fa8149c1, 0x018011446a81f901, 0xe90dcb23bcf3ae7b, 0x4a0100c06ac1da99, 
+	0xadf79eff73011942, 0x7bc171c1ae7f646b, 0x32151085c3018401, 0x72c1431ddd418c41, 0x7201f441c6019481, 0x8981f2c1dec17001, 0xd801ad4168018801, 0xce41b58171418181, 
+	0x69c17381480121c6, 0xbdc1aa8161811a04, 0xffc1d541810160c1, 0x628131802ac421c8, 0xbdc09bc199417901, 0x63005280108074d8, 0x220439c07bc09cc0, 0x93c08a41780171c0, 
+	0x83406b4018c00000
+};
+
+u64 Armature_GTG_0x4D900_32x32_CI8_ci8[] = {
+	0x0001020203040503, 0x0200060708000604, 0x03090a0b02070c0b, 0x0d00080b0e0a010a, 0x0f10111213111214, 0x1210150416171412, 0x1812161912121012, 0x1512101012151a1b, 
+	0x121310121310161c, 0x141215101013131d, 0x1313151311111e12, 0x1110121d13131a07, 0x0c1512101218040c, 0x0c141f2012122112, 0x1012101212101115, 0x14141f1212111501, 
+	0x021e1d1204191818, 0x1212151110041412, 0x19121c1503121512, 0x03190c0d18111122, 0x0f15111316231311, 0x1d23131323231d23, 0x231d111315131d13, 0x1313231e12111307, 
+	0x1610111112111b07, 0x0f18200b0302201e, 0x1e2208030c021822, 0x0b0b1e1412151e0f, 0x04121e12151d2418, 0x1010101212151210, 0x1510101510151014, 0x25021d2214111302, 
+	0x0b04121215130c15, 0x11111e131f131318, 0x101012101011121e, 0x1016130b18121316, 0x0004121114262518, 0x270c101118121818, 0x1810191818101e11, 0x1214110b1811130a, 
+	0x0b141526101d2214, 0x200c181218181212, 0x1f18141416181011, 0x12181d121213130c, 0x08181115031d0519, 0x1814261113131d1d, 0x1d13101e131d1513, 0x1e04131914111303, 
+	0x04121513141d0f18, 0x1514101511121115, 0x1512121011131511, 0x1304130d1c111e0b, 0x0c1011110c1d0c10, 0x1318131e13151112, 0x12111219181f151d, 0x1316110c12131302, 
+	0x1912101e0c1d1411, 0x1d1911121d121d11, 0x131215191215101d, 0x1325230212121101, 0x03191413021d2818, 0x121813131d182611, 0x1814141410111529, 0x101913081410130b, 
+	0x0e03151203130114, 0x1e2a151123101d26, 0x1426112a1e121212, 0x10161d0b14131207, 0x0119151804230010, 0x140412151d12151e, 0x111112191311151d, 0x1314230710131308, 
+	0x0c141315001d0d10, 0x1414121111141211, 0x151e121913101013, 0x1514130b14121207, 0x1414101102230810, 0x2a14181e11192a10, 0x18151f1815111013, 0x15191e08111c140e, 
+	0x0c2b14111423011f, 0x2a191215101e1113, 0x1d13111511101011, 0x14081d031514150b, 0x121f12260c130114, 0x0d1811111e111d11, 0x1510111113131412, 0x120811121412110a, 
+	0x1410121e031a061c, 0x2c2a2a1812141812, 0x1414141214142a11, 0x120b1d1412151205, 0x042a12140b1d0712, 0x0c14151015121814, 0x191014141c2d141f, 0x1902150c1118110b, 
+	0x0b1c11140b230a0c, 0x0c1412181f141212, 0x031220031216142a, 0x0c0b260b19101103, 0x1c10121e02230b02, 0x030204040c0c1012, 0x0c0f0c0c0c030303, 0x020f1d031015130c, 
+	0x1918111e0b1d1113, 0x1313111d1313111d, 0x131311131e1d2323, 0x2313230210111103, 0x0312181311030002, 0x22070d03040a0b01, 0x070a072e01060d0c, 0x14070b0b10121103, 
+	0x020412111511160c, 0x08141e1415151210, 0x1212161602031914, 0x18161215111e1116, 0x2218181511111914, 0x282a2a192a141414, 0x0d18180c040d2a2a, 0x14141f131513111b, 
+	0x0203190419191928, 0x080d082f070a0a22, 0x07020308080b0808, 0x28192a1419141401, 0x01070b02031c0800, 0x072c030404301c1c, 0x030c0c030f070701, 0x0131080308020e01, 
+	
+};
+
+u64 Armature_GTG_0x4D900_32x32_CI8_ci8_pal_rgba16[] = {
+	0x9389abc9828582c7, 0x72058b099285a389, 0x92c7a3cba3059307, 0x72458245b44b72c5, 0x394720c541871085, 0x5985314759c55205, 0x51c771c508838347, 0x6247084329074a05, 
+	0x5a0759898b850001, 0x5a456a85210751c9, 0x820541897145824b, 0xa3098145b3c993c9, 0x82c9930900000000
+};
+
+u64 Armature_wand_ci8[] = {
+	0x0001010100010101, 0x0001000000010101, 0x0100010001000001, 0x0101010101010001, 0x0202020202020202, 0x0202020202020202, 0x0302020202020202, 0x0202020202020202, 
+	0x0405050505050505, 0x0505050505050505, 0x0505050505050505, 0x0505050505050505, 0x0606060606060606, 0x0606060606060606, 0x0606060606060606, 0x0606060606060606, 
+	0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0808080808080808, 0x0808080808080808, 0x0808080808080808, 0x0808080808080808, 
+	0x0909090909090909, 0x09090909090a0909, 0x0909090a09090909, 0x09090a0909090909, 0x0202020302020202, 0x0202020202020202, 0x0202020202020302, 0x0302020203020202, 
+	0x09090b090b090909, 0x0b09090b0b090b0b, 0x0b090b0b0b09090b, 0x0b0b090b0b0b090b, 0x0c0c0c0d0d0c0c0d, 0x0c0c0c0c0d0d0c0c, 0x0d0c0d0d0c0d0c0c, 0x0c0c0c0d0c0d0d0c, 
+	0x0e0e0e0e0e0e0e0e, 0x0e070e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 
+	0x0f0f0f0f100f0f0f, 0x0f0f0f0f100f100f, 0x0f0f0f0f0f0f0f0f, 0x0f0f0f0f0f0f0f0f, 0x1111121111111111, 0x1111121111111112, 0x1211111111111111, 0x1111111111111111, 
+	0x0303030303030303, 0x0303030303030303, 0x0303030303030303, 0x0303030303030303, 0x0404040404130404, 0x0404040404040404, 0x0404040404040404, 0x0404040404040404, 
+	0x0614061406141414, 0x0606140606141414, 0x0614141414140614, 0x1414141406060614, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 
+	0x0808080608080808, 0x0806080808080808, 0x0808060808080608, 0x0808080808080808, 0x0a0a0a0a0a0a0a0a, 0x0a0a0a0a0a0a0a0a, 0x0a0a0a0a0a0a0a0a, 0x0a0a0a0a0a0a0a0a, 
+	0x0202020202030202, 0x0203020303020303, 0x0202020202020202, 0x0203020202030203, 0x0b0b0b0b0b0b0b0b, 0x0b0b0b0b0b0b0b0b, 0x0b0b0b0b0b0b0b0b, 0x0b0b0b0b0b0b0b0b, 
+	0x1515151515151515, 0x1515151515151515, 0x1515151515151515, 0x1515151515151515, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 
+	0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x0e0e0e0e0e0e0e0e, 0x1515151515151515, 0x1515151515151515, 0x1515151515151515, 0x1515151515151515, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0202020202020202, 0x0202020202020202, 0x0202020202020202, 0x0202020202020202, 
+	0x0a0a0a0a0a0a0a0a, 0x0a0a0a0a0a0a0a0a, 0x0a0a0a0a0a0a0a0a, 0x0a0a0a0a0a0a0a0a, 0x0808080808080808, 0x0808080808080808, 0x0808080808080808, 0x0808080608080808, 
+	0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 0x0707070707070707, 
+	
+};
+
+u64 Armature_wand_ci8_pal_rgba16[] = {
+	0x1327132502a30aa3, 0x1beb1bab4e3b56ff, 0x4e3913691ba91367, 0x45f745f956bd34f3, 0x35330ae50b2523eb, 0x4e7b3db700000000
+};
+
+Vtx Armature_Bone_mesh_layer_Opaque_vtx_0[16] = {
+	{{ {2488, 430, -256}, 0, {121, -151}, {104, 184, 244, 255} }},
+	{{ {13, -183, 1350}, 0, {127, -154}, {0, 147, 65, 255} }},
+	{{ {13, -247, -1240}, 0, {121, -161}, {0, 152, 183, 255} }},
+	{{ {-2462, 430, -256}, 0, {121, -151}, {152, 184, 244, 255} }},
+	{{ {13, 1613, -1201}, 0, {50, 690}, {0, 227, 132, 255} }},
+	{{ {2488, 430, -256}, 0, {258, 530}, {104, 184, 244, 255} }},
+	{{ {13, -247, -1240}, 0, {18, 524}, {0, 152, 183, 255} }},
+	{{ {2133, 2289, -311}, 0, {268, 712}, {125, 250, 237, 255} }},
+	{{ {13, 3482, -1175}, 0, {83, 856}, {0, 243, 130, 255} }},
+	{{ {-2106, 2288, -310}, 0, {268, 712}, {131, 250, 237, 255} }},
+	{{ {-2462, 430, -256}, 0, {258, 530}, {152, 184, 244, 255} }},
+	{{ {13, 1679, 1480}, 0, {522, 655}, {0, 218, 121, 255} }},
+	{{ {13, -183, 1350}, 0, {514, 484}, {0, 147, 65, 255} }},
+	{{ {13, 3524, 1589}, 0, {530, 826}, {0, 250, 127, 255} }},
+	{{ {1778, 4154, -373}, 0, {278, 893}, {125, 248, 233, 255} }},
+	{{ {-1751, 4154, -373}, 0, {278, 893}, {132, 244, 233, 255} }},
+};
+
+Gfx Armature_Bone_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_Bone_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 2, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSP2Triangles(8, 7, 4, 0, 8, 4, 9, 0),
+	gsSP2Triangles(4, 10, 9, 0, 4, 6, 10, 0),
+	gsSP2Triangles(10, 11, 9, 0, 10, 12, 11, 0),
+	gsSP2Triangles(11, 12, 5, 0, 11, 5, 7, 0),
+	gsSP2Triangles(13, 11, 7, 0, 13, 7, 14, 0),
+	gsSP2Triangles(8, 14, 7, 0, 9, 11, 13, 0),
+	gsSP2Triangles(9, 13, 15, 0, 8, 9, 15, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_mesh_layer_Opaque_vtx_1[12] = {
+	{{ {13, 1548, 1561}, 0, {43, -292}, {0, 19, 126, 255} }},
+	{{ {2556, 414, -265}, 0, {2071, 1012}, {124, 23, 239, 255} }},
+	{{ {2191, 2091, -306}, 0, {2018, -305}, {123, 25, 239, 255} }},
+	{{ {13, -133, 1419}, 0, {4, 989}, {0, 4, 127, 255} }},
+	{{ {-2529, 414, -265}, 0, {2071, 1012}, {132, 23, 239, 255} }},
+	{{ {-2164, 2091, -306}, 0, {2018, -305}, {133, 25, 239, 255} }},
+	{{ {13, 1479, -1251}, 0, {4081, -285}, {0, 20, 131, 255} }},
+	{{ {2191, 2091, -306}, 0, {1978, -345}, {123, 25, 239, 255} }},
+	{{ {2556, 414, -265}, 0, {2030, 972}, {124, 23, 239, 255} }},
+	{{ {13, -200, -1299}, 0, {4506, 979}, {0, 13, 130, 255} }},
+	{{ {-2529, 414, -265}, 0, {2030, 972}, {132, 23, 239, 255} }},
+	{{ {-2164, 2091, -306}, 0, {1978, -345}, {133, 25, 239, 255} }},
+};
+
+Gfx Armature_Bone_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(Armature_Bone_mesh_layer_Opaque_vtx_1 + 0, 12, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 0, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 6, 8, 9, 0),
+	gsSP2Triangles(6, 9, 10, 0, 6, 10, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_001_mesh_layer_Opaque_vtx_0[6] = {
+	{{ {13, 1876, 2601}, 0, {-1, -7}, {0, 4, 127, 255} }},
+	{{ {1382, 1724, 2242}, 0, {965, 732}, {18, 2, 126, 255} }},
+	{{ {1382, 2304, 2277}, 0, {805, -6}, {25, 28, 121, 255} }},
+	{{ {13, 1070, 2550}, 0, {8, 1003}, {0, 254, 127, 255} }},
+	{{ {-1355, 1726, 2243}, 0, {965, 732}, {238, 2, 126, 255} }},
+	{{ {-1355, 2306, 2279}, 0, {805, -6}, {221, 30, 118, 255} }},
+};
+
+Gfx Armature_Bone_001_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_Bone_001_mesh_layer_Opaque_vtx_0 + 0, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 0, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_001_mesh_layer_Opaque_vtx_1[48] = {
+	{{ {1716, 89, -370}, 0, {-22, -55}, {84, 33, 167, 255} }},
+	{{ {2008, 3474, 1253}, 0, {123, 317}, {121, 36, 12, 255} }},
+	{{ {1144, 27, 627}, 0, {108, -67}, {93, 253, 87, 255} }},
+	{{ {1716, 89, -370}, 0, {292, 1016}, {77, 36, 161, 255} }},
+	{{ {1144, 27, 627}, 0, {404, 997}, {93, 250, 87, 255} }},
+	{{ {2008, 3474, 1253}, 0, {500, 1314}, {200, 12, 143, 255} }},
+	{{ {1144, 27, 627}, 0, {404, 997}, {93, 253, 87, 255} }},
+	{{ {2008, 3474, 1253}, 0, {364, 1322}, {121, 36, 12, 255} }},
+	{{ {13, 3455, 1969}, 0, {555, 1308}, {0, 37, 122, 255} }},
+	{{ {13, -55, 1849}, 0, {555, 986}, {0, 251, 127, 255} }},
+	{{ {-1144, 77, 630}, 0, {404, 997}, {166, 250, 90, 255} }},
+	{{ {-1982, 3474, 1253}, 0, {364, 1322}, {139, 43, 23, 255} }},
+	{{ {-1806, 389, -355}, 0, {292, 1016}, {135, 4, 219, 255} }},
+	{{ {-1203, 302, -1144}, 0, {195, 1027}, {183, 0, 152, 255} }},
+	{{ {-1792, 4284, -1058}, 0, {212, 1372}, {154, 75, 244, 255} }},
+	{{ {13, 3697, -2155}, 0, {23, 1352}, {250, 40, 136, 255} }},
+	{{ {13, -28, -1568}, 0, {79, 1008}, {0, 244, 130, 255} }},
+	{{ {1143, 140, -1153}, 0, {195, 1027}, {69, 250, 149, 255} }},
+	{{ {2008, 3668, -1465}, 0, {212, 1372}, {110, 59, 233, 255} }},
+	{{ {1716, 89, -370}, 0, {292, 1016}, {124, 7, 229, 255} }},
+	{{ {-1982, 3474, 1253}, 0, {500, 1314}, {40, 14, 136, 255} }},
+	{{ {-1144, 77, 630}, 0, {404, 997}, {165, 249, 88, 255} }},
+	{{ {-1806, 389, -355}, 0, {292, 1016}, {165, 41, 177, 255} }},
+	{{ {-1806, 389, -355}, 0, {-22, -55}, {160, 38, 182, 255} }},
+	{{ {-1144, 77, 630}, 0, {108, -67}, {166, 250, 90, 255} }},
+	{{ {-1982, 3474, 1253}, 0, {123, 317}, {139, 43, 23, 255} }},
+	{{ {13, 3524, 1589}, 0, {530, 826}, {0, 250, 127, 255} }},
+	{{ {-1751, 4154, -373}, 0, {278, 893}, {132, 244, 233, 255} }},
+	{{ {1778, 4154, -373}, 0, {278, 893}, {125, 248, 233, 255} }},
+	{{ {13, 3482, -1175}, 0, {83, 856}, {0, 243, 130, 255} }},
+	{{ {13, 3697, -2155}, 0, {12, -159}, {250, 40, 136, 255} }},
+	{{ {1353, 4616, -613}, 0, {-12, -121}, {42, 78, 165, 255} }},
+	{{ {2008, 3668, -1465}, 0, {14, -119}, {110, 59, 233, 255} }},
+	{{ {13, 4648, -1034}, 0, {-16, -149}, {253, 83, 160, 255} }},
+	{{ {-912, 5196, -203}, 0, {-12, -121}, {219, 83, 167, 255} }},
+	{{ {-1792, 4284, -1058}, 0, {14, -119}, {154, 75, 244, 255} }},
+	{{ {-1982, 4573, -34}, 0, {-12, -101}, {101, 78, 0, 255} }},
+	{{ {2008, 4573, -34}, 0, {-12, -101}, {137, 222, 28, 255} }},
+	{{ {1353, 4530, 545}, 0, {174, 472}, {43, 87, 83, 255} }},
+	{{ {13, 3455, 1969}, 0, {338, 261}, {0, 37, 122, 255} }},
+	{{ {2008, 3474, 1253}, 0, {123, 317}, {121, 36, 12, 255} }},
+	{{ {13, 4498, 966}, 0, {338, 435}, {0, 75, 103, 255} }},
+	{{ {-1327, 4530, 545}, 0, {174, 472}, {213, 87, 83, 255} }},
+	{{ {-1982, 3474, 1253}, 0, {123, 317}, {139, 43, 23, 255} }},
+	{{ {-1982, 4573, -34}, 0, {59, 491}, {249, 81, 98, 255} }},
+	{{ {-1982, 3474, 1253}, 0, {209, 660}, {40, 14, 136, 255} }},
+	{{ {2008, 4573, -34}, 0, {59, 491}, {252, 9, 129, 255} }},
+	{{ {2008, 3474, 1253}, 0, {209, 660}, {200, 12, 143, 255} }},
+};
+
+Gfx Armature_Bone_001_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(Armature_Bone_001_mesh_layer_Opaque_vtx_1 + 0, 26, 0),
+	gsSPMatrix(0x0d000000, G_MTX_LOAD),
+	gsSPVertex(Armature_Bone_001_mesh_layer_Opaque_vtx_1 + 26, 4, 26),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 8, 0, 6, 8, 9, 0),
+	gsSP2Triangles(10, 9, 8, 0, 10, 8, 11, 0),
+	gsSP2Triangles(10, 26, 9, 0, 10, 27, 26, 0),
+	gsSP2Triangles(12, 27, 10, 0, 13, 27, 12, 0),
+	gsSP2Triangles(12, 14, 13, 0, 13, 14, 15, 0),
+	gsSP2Triangles(13, 15, 16, 0, 17, 16, 15, 0),
+	gsSP2Triangles(17, 15, 18, 0, 18, 19, 17, 0),
+	gsSP2Triangles(17, 19, 28, 0, 19, 6, 28, 0),
+	gsSP2Triangles(6, 26, 28, 0, 6, 9, 26, 0),
+	gsSP2Triangles(17, 28, 29, 0, 17, 29, 16, 0),
+	gsSP2Triangles(13, 16, 29, 0, 13, 29, 27, 0),
+	gsSP2Triangles(20, 21, 22, 0, 23, 24, 25, 0),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(Armature_Bone_001_mesh_layer_Opaque_vtx_1 + 30, 18, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 0, 5, 0),
+	gsSP2Triangles(5, 6, 4, 0, 2, 1, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 11, 9, 0),
+	gsSP2Triangles(9, 11, 12, 0, 9, 12, 13, 0),
+	gsSP2Triangles(13, 12, 14, 0, 15, 14, 12, 0),
+	gsSP2Triangles(16, 8, 10, 0, 17, 8, 16, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_0[50] = {
+	{{ {2398, 694, 607}, 0, {837, 898}, {69, 149, 248, 255} }},
+	{{ {1486, 1302, 800}, 0, {836, 784}, {74, 5, 103, 255} }},
+	{{ {1517, 408, 1465}, 0, {735, 817}, {87, 164, 15, 255} }},
+	{{ {1464, 2412, 1485}, 0, {931, 742}, {72, 32, 100, 255} }},
+	{{ {1464, 2412, 1485}, 0, {937, 693}, {72, 32, 100, 255} }},
+	{{ {863, 2436, 961}, 0, {889, 678}, {51, 227, 113, 255} }},
+	{{ {13, 2666, 1752}, 0, {945, 591}, {0, 235, 125, 255} }},
+	{{ {13, 2838, 1970}, 0, {980, 587}, {0, 38, 121, 255} }},
+	{{ {-1437, 2412, 1485}, 0, {937, 693}, {179, 28, 97, 255} }},
+	{{ {-837, 2436, 961}, 0, {889, 678}, {205, 227, 113, 255} }},
+	{{ {-1459, 1302, 800}, 0, {836, 784}, {175, 249, 98, 255} }},
+	{{ {-2099, 801, 548}, 0, {837, 898}, {179, 155, 7, 255} }},
+	{{ {-1305, 531, 1371}, 0, {735, 817}, {161, 172, 9, 255} }},
+	{{ {-1437, 2412, 1485}, 0, {931, 742}, {179, 28, 97, 255} }},
+	{{ {13, -135, 1881}, 0, {-366, 1595}, {0, 3, 127, 255} }},
+	{{ {1138, 119, 1695}, 0, {-159, 1518}, {94, 31, 80, 255} }},
+	{{ {-1112, 119, 1695}, 0, {-159, 1518}, {156, 31, 72, 255} }},
+	{{ {13, -43, -2238}, 0, {322, 344}, {0, 13, 130, 255} }},
+	{{ {1838, 310, -1410}, 0, {296, 645}, {119, 14, 213, 255} }},
+	{{ {13, 1199, -2455}, 0, {104, 325}, {0, 23, 131, 255} }},
+	{{ {-1806, 315, -1401}, 0, {296, 645}, {135, 231, 227, 255} }},
+	{{ {-2254, 1108, -1141}, 0, {137, 746}, {130, 246, 245, 255} }},
+	{{ {-1409, 2015, -1373}, 0, {-123, 561}, {155, 38, 190, 255} }},
+	{{ {-2099, 801, 548}, 0, {95, 1085}, {179, 155, 7, 255} }},
+	{{ {-1437, 2412, 1485}, 0, {-176, 950}, {179, 28, 97, 255} }},
+	{{ {-1482, 2771, -1596}, 0, {-296, 581}, {162, 64, 199, 255} }},
+	{{ {1382, 2304, 2277}, 0, {-154, 1858}, {25, 28, 121, 255} }},
+	{{ {13, 1876, 2601}, 0, {-372, 1932}, {0, 4, 127, 255} }},
+	{{ {-1355, 2306, 2279}, 0, {-154, 1858}, {221, 30, 118, 255} }},
+	{{ {1847, 2163, -1942}, 0, {762, 508}, {49, 42, 147, 255} }},
+	{{ {13, 2034, -2461}, 0, {535, 276}, {0, 16, 130, 255} }},
+	{{ {-1815, 2250, -1906}, 0, {762, 508}, {228, 33, 137, 255} }},
+	{{ {-1409, 2015, -1373}, 0, {-123, 561}, {155, 38, 190, 255} }},
+	{{ {-1482, 2771, -1596}, 0, {-296, 581}, {162, 64, 199, 255} }},
+	{{ {13, 2369, -1925}, 0, {-182, 333}, {0, 15, 130, 255} }},
+	{{ {-803, 3218, -2458}, 0, {-372, 413}, {192, 53, 160, 255} }},
+	{{ {13, 3422, -1412}, 0, {-526, 439}, {0, 117, 207, 255} }},
+	{{ {13, 3660, -152}, 0, {-584, 639}, {0, 121, 39, 255} }},
+	{{ {-1437, 2412, 1485}, 0, {-391, 861}, {179, 28, 97, 255} }},
+	{{ {13, 2838, 1970}, 0, {-642, 883}, {0, 38, 121, 255} }},
+	{{ {1464, 2412, 1485}, 0, {-391, 861}, {72, 32, 100, 255} }},
+	{{ {1508, 2771, -1596}, 0, {-296, 581}, {94, 64, 199, 255} }},
+	{{ {830, 3218, -2458}, 0, {-372, 413}, {64, 53, 160, 255} }},
+	{{ {1435, 2015, -1373}, 0, {-123, 561}, {100, 39, 188, 255} }},
+	{{ {1464, 2412, 1485}, 0, {-176, 950}, {72, 32, 100, 255} }},
+	{{ {2398, 694, 607}, 0, {95, 1085}, {69, 149, 248, 255} }},
+	{{ {2281, 1108, -1142}, 0, {137, 746}, {126, 4, 244, 255} }},
+	{{ {13, 1199, -2455}, 0, {104, 325}, {0, 23, 131, 255} }},
+	{{ {1838, 310, -1410}, 0, {296, 645}, {119, 14, 213, 255} }},
+	{{ {13, 3817, -2957}, 0, {-472, 276}, {0, 71, 150, 255} }},
+};
+
+Gfx Armature_Bone_002_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_0 + 0, 26, 0),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_0 + 26, 6, 26),
+	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
+	gsSP2Triangles(1, 4, 5, 0, 6, 5, 4, 0),
+	gsSP2Triangles(6, 4, 7, 0, 6, 7, 8, 0),
+	gsSP2Triangles(6, 8, 9, 0, 10, 9, 8, 0),
+	gsSP2Triangles(11, 12, 10, 0, 10, 13, 11, 0),
+	gsSP2Triangles(14, 26, 15, 0, 14, 27, 26, 0),
+	gsSP2Triangles(28, 27, 14, 0, 28, 14, 16, 0),
+	gsSP2Triangles(17, 29, 30, 0, 17, 18, 29, 0),
+	gsSP2Triangles(18, 17, 19, 0, 20, 19, 17, 0),
+	gsSP2Triangles(17, 31, 20, 0, 17, 30, 31, 0),
+	gsSP2Triangles(20, 21, 19, 0, 22, 19, 21, 0),
+	gsSP2Triangles(23, 22, 21, 0, 23, 24, 22, 0),
+	gsSP1Triangle(24, 25, 22, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_0 + 32, 18, 0),
+	gsSP2Triangles(0, 1, 2, 0, 2, 1, 3, 0),
+	gsSP2Triangles(4, 3, 1, 0, 5, 4, 1, 0),
+	gsSP2Triangles(5, 1, 6, 0, 5, 6, 7, 0),
+	gsSP2Triangles(8, 5, 7, 0, 8, 9, 5, 0),
+	gsSP2Triangles(5, 9, 4, 0, 4, 9, 10, 0),
+	gsSP2Triangles(2, 10, 9, 0, 11, 2, 9, 0),
+	gsSP2Triangles(12, 11, 9, 0, 13, 11, 12, 0),
+	gsSP2Triangles(13, 14, 11, 0, 15, 11, 14, 0),
+	gsSP2Triangles(16, 15, 14, 0, 15, 2, 11, 0),
+	gsSP2Triangles(0, 2, 15, 0, 10, 2, 17, 0),
+	gsSP2Triangles(3, 17, 2, 0, 4, 17, 3, 0),
+	gsSP1Triangle(4, 10, 17, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_1[9] = {
+	{{ {1528, 802, 1834}, 0, {241, 518}, {82, 213, 87, 255} }},
+	{{ {863, 2436, 961}, 0, {1004, 12}, {51, 227, 113, 255} }},
+	{{ {13, 2666, 1752}, 0, {421, -3}, {0, 235, 125, 255} }},
+	{{ {1486, 1302, 800}, 0, {1020, 343}, {74, 5, 103, 255} }},
+	{{ {1517, 408, 1465}, 0, {990, 623}, {87, 164, 15, 255} }},
+	{{ {-1501, 802, 1835}, 0, {241, 518}, {174, 183, 64, 255} }},
+	{{ {-837, 2436, 961}, 0, {1004, 12}, {205, 227, 113, 255} }},
+	{{ {-1459, 1302, 800}, 0, {1020, 343}, {175, 249, 98, 255} }},
+	{{ {-1305, 531, 1371}, 0, {990, 623}, {161, 172, 9, 255} }},
+};
+
+Gfx Armature_Bone_002_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_1 + 0, 9, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(3, 0, 4, 0, 5, 2, 6, 0),
+	gsSP2Triangles(5, 6, 7, 0, 7, 8, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_2[6] = {
+	{{ {13, 2666, 1752}, 0, {1270, -48}, {0, 235, 125, 255} }},
+	{{ {1386, 909, 3137}, 0, {-133, 614}, {94, 213, 74, 255} }},
+	{{ {1528, 802, 1834}, 0, {675, 994}, {82, 213, 87, 255} }},
+	{{ {13, 2840, 3138}, 0, {-28, -39}, {0, 95, 85, 255} }},
+	{{ {-1360, 905, 3138}, 0, {-133, 614}, {162, 213, 74, 255} }},
+	{{ {-1501, 802, 1835}, 0, {675, 994}, {174, 183, 64, 255} }},
+};
+
+Gfx Armature_Bone_002_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_2 + 0, 6, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(0, 4, 3, 0, 0, 5, 4, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_3[9] = {
+	{{ {1528, 802, 1834}, 0, {-16, 78}, {82, 213, 87, 255} }},
+	{{ {1386, 909, 3137}, 0, {50, 433}, {94, 213, 74, 255} }},
+	{{ {13, 788, 2826}, 0, {362, 335}, {0, 143, 58, 255} }},
+	{{ {1105, 1128, 3557}, 0, {29, 699}, {104, 208, 55, 255} }},
+	{{ {13, 914, 3261}, 0, {367, 692}, {0, 131, 24, 255} }},
+	{{ {13, 489, 4612}, 0, {380, 1008}, {0, 131, 20, 255} }},
+	{{ {-1078, 1128, 3557}, 0, {29, 699}, {152, 208, 56, 255} }},
+	{{ {-1360, 905, 3138}, 0, {50, 433}, {162, 213, 74, 255} }},
+	{{ {-1501, 802, 1835}, 0, {-16, 78}, {174, 183, 64, 255} }},
+};
+
+Gfx Armature_Bone_002_mesh_layer_Opaque_tri_3[] = {
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_3 + 0, 9, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 2, 1, 0),
+	gsSP2Triangles(2, 3, 4, 0, 5, 4, 3, 0),
+	gsSP2Triangles(5, 6, 4, 0, 2, 4, 6, 0),
+	gsSP2Triangles(6, 7, 2, 0, 2, 7, 8, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_4[16] = {
+	{{ {13, 2840, 3138}, 0, {362, 336}, {0, 95, 85, 255} }},
+	{{ {1105, 1128, 3557}, 0, {335, 449}, {104, 208, 55, 255} }},
+	{{ {1386, 909, 3137}, 0, {357, 453}, {94, 213, 74, 255} }},
+	{{ {13, 2834, 3557}, 0, {341, 326}, {0, 115, 54, 255} }},
+	{{ {-1078, 1128, 3557}, 0, {335, 449}, {152, 208, 56, 255} }},
+	{{ {-1360, 905, 3138}, 0, {357, 453}, {162, 213, 74, 255} }},
+	{{ {13, 2834, 3557}, 0, {1024, -16}, {0, 115, 54, 255} }},
+	{{ {666, 1508, 5021}, 0, {350, 424}, {101, 2, 78, 255} }},
+	{{ {1105, 1128, 3557}, 0, {1024, 533}, {104, 208, 55, 255} }},
+	{{ {13, 2760, 5022}, 0, {321, -9}, {0, 111, 62, 255} }},
+	{{ {-639, 1502, 5023}, 0, {350, 424}, {155, 2, 78, 255} }},
+	{{ {-1078, 1128, 3557}, 0, {1024, 533}, {152, 208, 56, 255} }},
+	{{ {13, 489, 4612}, 0, {259, 948}, {0, 131, 20, 255} }},
+	{{ {13, 73, 5037}, 0, {20, 973}, {0, 152, 73, 255} }},
+	{{ {13, 2545, 5906}, 0, {-16, 231}, {0, 47, 118, 255} }},
+	{{ {13, 2545, 5906}, 0, {63, 67}, {0, 47, 118, 255} }},
+};
+
+Gfx Armature_Bone_002_mesh_layer_Opaque_tri_4[] = {
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_4 + 0, 16, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(0, 4, 3, 0, 0, 5, 4, 0),
+	gsSP2Triangles(6, 7, 8, 0, 6, 9, 7, 0),
+	gsSP2Triangles(6, 10, 9, 0, 6, 11, 10, 0),
+	gsSP2Triangles(12, 10, 11, 0, 13, 10, 12, 0),
+	gsSP2Triangles(13, 12, 7, 0, 12, 8, 7, 0),
+	gsSP2Triangles(13, 7, 14, 0, 13, 14, 10, 0),
+	gsSP2Triangles(15, 7, 9, 0, 15, 9, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_5[8] = {
+	{{ {887, 2774, 979}, 0, {1007, -4}, {107, 50, 48, 255} }},
+	{{ {1318, 1132, 1727}, 0, {-31, 989}, {107, 50, 48, 255} }},
+	{{ {1541, 1758, 393}, 0, {996, 1004}, {108, 49, 45, 255} }},
+	{{ {483, 2211, 2246}, 0, {-17, -7}, {105, 51, 51, 255} }},
+	{{ {-861, 2774, 979}, 0, {1007, -4}, {149, 50, 48, 255} }},
+	{{ {-1514, 1758, 393}, 0, {996, 1004}, {148, 49, 45, 255} }},
+	{{ {-1291, 1132, 1727}, 0, {-31, 989}, {149, 50, 48, 255} }},
+	{{ {-457, 2211, 2246}, 0, {-17, -7}, {151, 51, 51, 255} }},
+};
+
+Gfx Armature_Bone_002_mesh_layer_Opaque_tri_5[] = {
+	gsSPVertex(Armature_Bone_002_mesh_layer_Opaque_vtx_5 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_lowerjaw_mesh_layer_Opaque_vtx_0[8] = {
+	{{ {13, 304, 201}, 0, {29, 923}, {255, 38, 121, 255} }},
+	{{ {1517, 408, 1465}, 0, {990, 623}, {87, 164, 15, 255} }},
+	{{ {1528, 802, 1834}, 0, {241, 518}, {82, 213, 87, 255} }},
+	{{ {1138, 119, 1695}, 0, {973, 817}, {94, 31, 80, 255} }},
+	{{ {13, -135, 1881}, 0, {916, 994}, {0, 3, 127, 255} }},
+	{{ {-1112, 119, 1695}, 0, {973, 817}, {156, 31, 72, 255} }},
+	{{ {-1305, 531, 1371}, 0, {990, 623}, {161, 172, 9, 255} }},
+	{{ {-1501, 802, 1835}, 0, {241, 518}, {174, 183, 64, 255} }},
+};
+
+Gfx Armature_lowerjaw_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_lowerjaw_mesh_layer_Opaque_vtx_0 + 0, 1, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(Armature_lowerjaw_mesh_layer_Opaque_vtx_0 + 1, 7, 1),
+	gsSP2Triangles(1, 2, 0, 0, 3, 1, 0, 0),
+	gsSP2Triangles(3, 0, 4, 0, 0, 5, 4, 0),
+	gsSP2Triangles(0, 6, 5, 0, 6, 0, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_lowerjaw_mesh_layer_Opaque_vtx_1[14] = {
+	{{ {1528, 802, 1834}, 0, {-16, 78}, {82, 213, 87, 255} }},
+	{{ {13, 788, 2826}, 0, {362, 335}, {0, 143, 58, 255} }},
+	{{ {-1501, 802, 1835}, 0, {-16, 78}, {174, 183, 64, 255} }},
+	{{ {1528, 802, 1834}, 0, {-16, 1008}, {206, 9, 116, 255} }},
+	{{ {-1501, 802, 1835}, 0, {-16, 1008}, {50, 9, 116, 255} }},
+	{{ {13, 304, 201}, 0, {380, -16}, {0, 204, 116, 255} }},
+	{{ {13, 304, 201}, 0, {242, 1000}, {0, 125, 232, 255} }},
+	{{ {475, 2051, -278}, 0, {78, 408}, {114, 45, 221, 255} }},
+	{{ {13, 2056, -337}, 0, {242, 403}, {4, 58, 143, 255} }},
+	{{ {-448, 2051, -278}, 0, {78, 408}, {131, 20, 6, 255} }},
+	{{ {13, 2825, -2}, 0, {230, 122}, {22, 71, 153, 255} }},
+	{{ {-620, 2929, -12}, 0, {12, 130}, {171, 94, 10, 255} }},
+	{{ {13, 3166, 125}, 0, {210, -16}, {47, 117, 242, 255} }},
+	{{ {647, 2927, -10}, 0, {12, 130}, {102, 76, 255, 255} }},
+};
+
+Gfx Armature_lowerjaw_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(Armature_lowerjaw_mesh_layer_Opaque_vtx_1 + 0, 5, 0),
+	gsSPMatrix(0x0d0000c0, G_MTX_LOAD),
+	gsSPVertex(Armature_lowerjaw_mesh_layer_Opaque_vtx_1 + 5, 9, 5),
+	gsSP2Triangles(0, 1, 5, 0, 1, 2, 5, 0),
+	gsSP2Triangles(6, 7, 3, 0, 6, 8, 7, 0),
+	gsSP2Triangles(9, 8, 6, 0, 9, 6, 4, 0),
+	gsSP2Triangles(9, 10, 8, 0, 9, 11, 10, 0),
+	gsSP2Triangles(11, 12, 10, 0, 13, 10, 12, 0),
+	gsSP2Triangles(7, 10, 13, 0, 7, 8, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_lowerjaw_mesh_layer_Opaque_vtx_2[10] = {
+	{{ {475, 2051, -278}, 0, {76, 600}, {114, 45, 221, 255} }},
+	{{ {13, 2058, -8}, 0, {46, 594}, {9, 59, 112, 255} }},
+	{{ {647, 2927, -10}, 0, {79, 566}, {102, 76, 255, 255} }},
+	{{ {13, 2906, 382}, 0, {57, 541}, {34, 77, 95, 255} }},
+	{{ {13, 3166, 125}, 0, {89, 537}, {47, 117, 242, 255} }},
+	{{ {-620, 2929, -12}, 0, {79, 566}, {171, 94, 10, 255} }},
+	{{ {-448, 2051, -278}, 0, {76, 600}, {131, 20, 6, 255} }},
+	{{ {13, -135, 1881}, 0, {11, 691}, {0, 123, 31, 255} }},
+	{{ {1528, 802, 1834}, 0, {65, 703}, {206, 9, 116, 255} }},
+	{{ {-1501, 802, 1835}, 0, {65, 703}, {50, 9, 116, 255} }},
+};
+
+Gfx Armature_lowerjaw_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(Armature_lowerjaw_mesh_layer_Opaque_vtx_2 + 0, 7, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(Armature_lowerjaw_mesh_layer_Opaque_vtx_2 + 7, 3, 7),
+	gsSP2Triangles(7, 8, 0, 0, 7, 0, 1, 0),
+	gsSP2Triangles(1, 0, 2, 0, 1, 2, 3, 0),
+	gsSP2Triangles(3, 2, 4, 0, 3, 4, 5, 0),
+	gsSP2Triangles(1, 3, 5, 0, 1, 5, 6, 0),
+	gsSP2Triangles(7, 1, 6, 0, 7, 6, 9, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_upperarm_l_mesh_layer_Opaque_vtx_0[9] = {
+	{{ {-442, 1076, 99}, 0, {381, 1232}, {18, 125, 11, 255} }},
+	{{ {-554, 2041, 70}, 0, {698, 1403}, {170, 31, 168, 255} }},
+	{{ {2281, 1108, -1142}, 0, {137, 746}, {126, 4, 244, 255} }},
+	{{ {2398, 694, 607}, 0, {95, 1085}, {69, 149, 248, 255} }},
+	{{ {1838, 310, -1410}, 0, {296, 645}, {119, 14, 213, 255} }},
+	{{ {1138, 119, 1695}, 0, {-159, 1518}, {94, 31, 80, 255} }},
+	{{ {1517, 408, 1465}, 0, {-166, 1426}, {87, 164, 15, 255} }},
+	{{ {1847, 2163, -1942}, 0, {762, 508}, {49, 42, 147, 255} }},
+	{{ {1382, 2304, 2277}, 0, {-154, 1858}, {25, 28, 121, 255} }},
+};
+
+Gfx Armature_upperarm_l_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_upperarm_l_mesh_layer_Opaque_vtx_0 + 0, 2, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(Armature_upperarm_l_mesh_layer_Opaque_vtx_0 + 2, 5, 2),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(Armature_upperarm_l_mesh_layer_Opaque_vtx_0 + 7, 2, 7),
+	gsSP2Triangles(0, 2, 3, 0, 0, 4, 2, 0),
+	gsSP2Triangles(0, 7, 4, 0, 0, 1, 7, 0),
+	gsSP2Triangles(0, 8, 1, 0, 0, 5, 8, 0),
+	gsSP2Triangles(0, 6, 5, 0, 0, 3, 6, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_upperarm_l_mesh_layer_Opaque_vtx_1[18] = {
+	{{ {2008, 3668, -1465}, 0, {14, -119}, {110, 59, 233, 255} }},
+	{{ {2008, 4573, -34}, 0, {-12, -101}, {137, 222, 28, 255} }},
+	{{ {2008, 3668, -1465}, 0, {212, 1372}, {110, 59, 233, 255} }},
+	{{ {1716, 89, -370}, 0, {292, 1016}, {124, 7, 229, 255} }},
+	{{ {1716, 89, -370}, 0, {292, 1016}, {77, 36, 161, 255} }},
+	{{ {2008, 3474, 1253}, 0, {500, 1314}, {200, 12, 143, 255} }},
+	{{ {2008, 3474, 1253}, 0, {209, 660}, {200, 12, 143, 255} }},
+	{{ {2008, 4573, -34}, 0, {59, 491}, {252, 9, 129, 255} }},
+	{{ {2008, 3474, 1253}, 0, {123, 317}, {121, 36, 12, 255} }},
+	{{ {1716, 89, -370}, 0, {-22, -55}, {84, 33, 167, 255} }},
+	{{ {641, 614, -30}, 0, {14, -86}, {182, 21, 101, 255} }},
+	{{ {641, 614, -30}, 0, {363, 1373}, {182, 21, 101, 255} }},
+	{{ {641, 614, -30}, 0, {363, 1373}, {54, 222, 146, 255} }},
+	{{ {641, 614, -30}, 0, {-24, 670}, {54, 222, 146, 255} }},
+	{{ {917, 40, 18}, 0, {607, 771}, {13, 171, 93, 255} }},
+	{{ {2231, -265, 18}, 0, {691, 818}, {34, 209, 113, 255} }},
+	{{ {2853, 2190, 18}, 0, {732, 647}, {85, 188, 66, 255} }},
+	{{ {641, 614, -30}, 0, {-60, 360}, {49, 210, 148, 255} }},
+};
+
+Gfx Armature_upperarm_l_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(Armature_upperarm_l_mesh_layer_Opaque_vtx_1 + 0, 10, 0),
+	gsSPMatrix(0x0d000100, G_MTX_LOAD),
+	gsSPVertex(Armature_upperarm_l_mesh_layer_Opaque_vtx_1 + 10, 8, 10),
+	gsSP2Triangles(0, 1, 10, 0, 2, 11, 3, 0),
+	gsSP2Triangles(4, 5, 12, 0, 6, 7, 13, 0),
+	gsSP2Triangles(14, 15, 16, 0, 7, 8, 17, 0),
+	gsSP1Triangle(9, 17, 8, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_forearm_l_mesh_layer_Opaque_vtx_0[24] = {
+	{{ {1147, 3346, -1017}, 0, {174, 763}, {15, 105, 186, 255} }},
+	{{ {-313, 3649, -1017}, 0, {137, 698}, {198, 63, 162, 255} }},
+	{{ {-996, 3598, -4}, 0, {76, 696}, {163, 84, 237, 255} }},
+	{{ {-313, 3649, 1052}, 0, {47, 752}, {201, 75, 87, 255} }},
+	{{ {1147, 3346, 1052}, 0, {86, 816}, {45, 82, 86, 255} }},
+	{{ {5776, 1879, 18}, 0, {255, 997}, {125, 21, 13, 255} }},
+	{{ {-198, -31, -500}, 0, {405, 661}, {178, 219, 163, 255} }},
+	{{ {1032, 364, -500}, 0, {364, 623}, {42, 244, 137, 255} }},
+	{{ {-313, 3649, -1017}, 0, {462, 481}, {198, 63, 162, 255} }},
+	{{ {-550, -31, 18}, 0, {462, 661}, {129, 4, 1, 255} }},
+	{{ {-198, -31, 535}, 0, {519, 661}, {194, 228, 107, 255} }},
+	{{ {1032, 364, 535}, 0, {560, 623}, {27, 246, 124, 255} }},
+	{{ {5776, 1879, 18}, 0, {772, 475}, {125, 21, 13, 255} }},
+	{{ {1147, 3346, 1052}, 0, {513, 475}, {45, 82, 86, 255} }},
+	{{ {-313, 3649, 1052}, 0, {462, 481}, {201, 75, 87, 255} }},
+	{{ {-996, 3598, -4}, 0, {186, 475}, {163, 84, 237, 255} }},
+	{{ {1147, 3346, -1017}, 0, {411, 475}, {15, 105, 186, 255} }},
+	{{ {5776, 1879, 18}, 0, {152, 475}, {125, 21, 13, 255} }},
+	{{ {917, 40, 18}, 0, {317, 771}, {13, 171, 93, 255} }},
+	{{ {-83, 28, 18}, 0, {348, 840}, {170, 165, 23, 255} }},
+	{{ {-83, 28, 18}, 0, {576, 840}, {170, 165, 23, 255} }},
+	{{ {917, 40, 18}, 0, {607, 771}, {13, 171, 93, 255} }},
+	{{ {2853, 2190, 18}, 0, {732, 647}, {85, 188, 66, 255} }},
+	{{ {2853, 2190, 18}, 0, {192, 647}, {85, 188, 66, 255} }},
+};
+
+Gfx Armature_forearm_l_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_forearm_l_mesh_layer_Opaque_vtx_0 + 0, 18, 0),
+	gsSPMatrix(0x0d000100, G_MTX_LOAD),
+	gsSPVertex(Armature_forearm_l_mesh_layer_Opaque_vtx_0 + 18, 6, 18),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(0, 3, 4, 0, 5, 0, 4, 0),
+	gsSP2Triangles(6, 18, 19, 0, 6, 7, 18, 0),
+	gsSP2Triangles(8, 7, 6, 0, 6, 9, 8, 0),
+	gsSP2Triangles(20, 9, 6, 0, 20, 10, 9, 0),
+	gsSP2Triangles(21, 10, 20, 0, 21, 11, 10, 0),
+	gsSP2Triangles(21, 22, 11, 0, 11, 22, 12, 0),
+	gsSP2Triangles(11, 12, 13, 0, 11, 13, 14, 0),
+	gsSP2Triangles(11, 14, 10, 0, 10, 14, 9, 0),
+	gsSP2Triangles(14, 15, 9, 0, 15, 8, 9, 0),
+	gsSP2Triangles(8, 16, 7, 0, 7, 16, 17, 0),
+	gsSP2Triangles(7, 17, 23, 0, 18, 7, 23, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_upperarm_r_mesh_layer_Opaque_vtx_0[9] = {
+	{{ {-426, 949, -111}, 0, {381, 1232}, {190, 58, 92, 255} }},
+	{{ {-524, 1944, -84}, 0, {698, 1403}, {101, 241, 181, 255} }},
+	{{ {-2254, 1108, -1141}, 0, {137, 746}, {130, 246, 245, 255} }},
+	{{ {-1806, 315, -1401}, 0, {296, 645}, {135, 231, 227, 255} }},
+	{{ {-2099, 801, 548}, 0, {95, 1085}, {179, 155, 7, 255} }},
+	{{ {-1305, 531, 1371}, 0, {-166, 1426}, {161, 172, 9, 255} }},
+	{{ {-1112, 119, 1695}, 0, {-159, 1518}, {156, 31, 72, 255} }},
+	{{ {-1355, 2306, 2279}, 0, {-154, 1858}, {221, 30, 118, 255} }},
+	{{ {-1815, 2250, -1906}, 0, {762, 508}, {228, 33, 137, 255} }},
+};
+
+Gfx Armature_upperarm_r_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_upperarm_r_mesh_layer_Opaque_vtx_0 + 0, 2, 0),
+	gsSPMatrix(0x0d000080, G_MTX_LOAD),
+	gsSPVertex(Armature_upperarm_r_mesh_layer_Opaque_vtx_0 + 2, 5, 2),
+	gsSPMatrix(0x0d000040, G_MTX_LOAD),
+	gsSPVertex(Armature_upperarm_r_mesh_layer_Opaque_vtx_0 + 7, 2, 7),
+	gsSP2Triangles(0, 2, 3, 0, 0, 4, 2, 0),
+	gsSP2Triangles(5, 4, 0, 0, 5, 0, 6, 0),
+	gsSP2Triangles(0, 7, 6, 0, 0, 1, 7, 0),
+	gsSP2Triangles(8, 1, 0, 0, 8, 0, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_upperarm_r_mesh_layer_Opaque_vtx_1[24] = {
+	{{ {-1982, 3474, 1253}, 0, {209, 660}, {40, 14, 136, 255} }},
+	{{ {-1982, 4573, -34}, 0, {59, 491}, {249, 81, 98, 255} }},
+	{{ {-1806, 389, -355}, 0, {292, 1016}, {135, 4, 219, 255} }},
+	{{ {-1792, 4284, -1058}, 0, {212, 1372}, {154, 75, 244, 255} }},
+	{{ {-1792, 4284, -1058}, 0, {14, -119}, {154, 75, 244, 255} }},
+	{{ {-1982, 4573, -34}, 0, {-12, -101}, {101, 78, 0, 255} }},
+	{{ {-1982, 3474, 1253}, 0, {500, 1314}, {40, 14, 136, 255} }},
+	{{ {-1806, 389, -355}, 0, {292, 1016}, {165, 41, 177, 255} }},
+	{{ {-1982, 3474, 1253}, 0, {123, 317}, {139, 43, 23, 255} }},
+	{{ {-1806, 389, -355}, 0, {-22, -55}, {160, 38, 182, 255} }},
+	{{ {564, 525, 126}, 0, {-24, 670}, {94, 49, 186, 255} }},
+	{{ {564, 525, 126}, 0, {363, 1373}, {195, 182, 83, 255} }},
+	{{ {564, 525, 126}, 0, {14, -86}, {195, 182, 83, 255} }},
+	{{ {564, 525, 126}, 0, {363, 1373}, {94, 49, 186, 255} }},
+	{{ {917, 14, -18}, 0, {317, 771}, {12, 170, 164, 255} }},
+	{{ {-198, 3681, 500}, 0, {405, 661}, {178, 219, 93, 255} }},
+	{{ {-83, 1, -18}, 0, {348, 840}, {171, 165, 232, 255} }},
+	{{ {917, 14, -18}, 0, {607, 771}, {12, 170, 164, 255} }},
+	{{ {2853, 2163, -18}, 0, {732, 647}, {86, 189, 191, 255} }},
+	{{ {2231, -291, -18}, 0, {691, 818}, {34, 209, 143, 255} }},
+	{{ {564, 525, 126}, 0, {-60, 360}, {99, 38, 187, 255} }},
+	{{ {-198, 3681, -535}, 0, {519, 661}, {195, 227, 148, 255} }},
+	{{ {-83, 1, -18}, 0, {576, 840}, {171, 165, 232, 255} }},
+	{{ {-550, 3681, -18}, 0, {462, 661}, {129, 3, 255, 255} }},
+};
+
+Gfx Armature_upperarm_r_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(Armature_upperarm_r_mesh_layer_Opaque_vtx_1 + 0, 10, 0),
+	gsSPMatrix(0x0d000180, G_MTX_LOAD),
+	gsSPVertex(Armature_upperarm_r_mesh_layer_Opaque_vtx_1 + 10, 14, 10),
+	gsSP2Triangles(0, 10, 1, 0, 2, 11, 3, 0),
+	gsSP2Triangles(4, 12, 5, 0, 6, 7, 13, 0),
+	gsSP2Triangles(14, 15, 16, 0, 17, 18, 19, 0),
+	gsSP2Triangles(8, 1, 20, 0, 9, 8, 20, 0),
+	gsSP2Triangles(21, 17, 22, 0, 22, 23, 21, 0),
+	gsSP1Triangle(22, 15, 23, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_forearm_r_mesh_layer_Opaque_vtx_0[22] = {
+	{{ {1147, 3319, 1017}, 0, {174, 763}, {16, 105, 69, 255} }},
+	{{ {-996, 3571, 4}, 0, {76, 696}, {162, 83, 19, 255} }},
+	{{ {-313, 3622, 1017}, 0, {137, 698}, {199, 63, 95, 255} }},
+	{{ {-313, 3622, -1052}, 0, {47, 752}, {201, 75, 170, 255} }},
+	{{ {1147, 3319, -1052}, 0, {86, 816}, {44, 82, 169, 255} }},
+	{{ {5776, 1853, -18}, 0, {255, 997}, {125, 20, 242, 255} }},
+	{{ {-313, 3622, 1017}, 0, {462, 481}, {199, 63, 95, 255} }},
+	{{ {1032, 338, 500}, 0, {364, 623}, {41, 244, 120, 255} }},
+	{{ {5776, 1853, -18}, 0, {152, 475}, {125, 20, 242, 255} }},
+	{{ {1147, 3319, 1017}, 0, {411, 475}, {16, 105, 69, 255} }},
+	{{ {-996, 3571, 4}, 0, {186, 475}, {162, 83, 19, 255} }},
+	{{ {-313, 3622, -1052}, 0, {462, 481}, {201, 75, 170, 255} }},
+	{{ {1032, 338, -535}, 0, {560, 623}, {27, 247, 132, 255} }},
+	{{ {1147, 3319, -1052}, 0, {513, 475}, {44, 82, 169, 255} }},
+	{{ {5776, 1853, -18}, 0, {772, 475}, {125, 20, 242, 255} }},
+	{{ {-198, 3681, 500}, 0, {405, 661}, {178, 219, 93, 255} }},
+	{{ {-550, 3681, -18}, 0, {462, 661}, {129, 3, 255, 255} }},
+	{{ {917, 14, -18}, 0, {317, 771}, {12, 170, 164, 255} }},
+	{{ {2853, 2163, -18}, 0, {192, 647}, {86, 189, 191, 255} }},
+	{{ {-198, 3681, -535}, 0, {519, 661}, {195, 227, 148, 255} }},
+	{{ {2853, 2163, -18}, 0, {732, 647}, {86, 189, 191, 255} }},
+	{{ {917, 14, -18}, 0, {607, 771}, {12, 170, 164, 255} }},
+};
+
+Gfx Armature_forearm_r_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_forearm_r_mesh_layer_Opaque_vtx_0 + 0, 15, 0),
+	gsSPMatrix(0x0d000180, G_MTX_LOAD),
+	gsSPVertex(Armature_forearm_r_mesh_layer_Opaque_vtx_0 + 15, 7, 15),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(0, 4, 3, 0, 5, 4, 0, 0),
+	gsSP2Triangles(15, 6, 16, 0, 7, 6, 15, 0),
+	gsSP2Triangles(17, 7, 15, 0, 17, 18, 7, 0),
+	gsSP2Triangles(7, 18, 8, 0, 7, 8, 9, 0),
+	gsSP2Triangles(7, 9, 6, 0, 10, 16, 6, 0),
+	gsSP2Triangles(11, 16, 10, 0, 19, 16, 11, 0),
+	gsSP2Triangles(11, 12, 19, 0, 11, 13, 12, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 20, 0),
+	gsSP2Triangles(21, 12, 20, 0, 19, 12, 21, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_staff_r_mesh_layer_Opaque_vtx_0[11] = {
+	{{ {-57, 6050, -5}, 0, {13, 1134}, {137, 213, 255, 255} }},
+	{{ {199, -88, 259}, 0, {118, -142}, {253, 139, 49, 255} }},
+	{{ {199, -88, -269}, 0, {-91, -142}, {252, 139, 207, 255} }},
+	{{ {-57, 6050, -5}, 0, {370, 1134}, {137, 213, 255, 255} }},
+	{{ {199, -88, -269}, 0, {493, -141}, {252, 139, 207, 255} }},
+	{{ {-195, -88, -5}, 0, {306, -141}, {181, 153, 0, 255} }},
+	{{ {199, -88, 259}, 0, {118, -141}, {253, 139, 49, 255} }},
+	{{ {-57, 6050, -5}, 0, {241, 1134}, {137, 213, 255, 255} }},
+	{{ {199, -88, -269}, 0, {493, 1018}, {252, 139, 207, 255} }},
+	{{ {199, -88, 259}, 0, {667, 1134}, {253, 139, 49, 255} }},
+	{{ {-195, -88, -5}, 0, {667, 947}, {181, 153, 0, 255} }},
+};
+
+Gfx Armature_staff_r_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(Armature_staff_r_mesh_layer_Opaque_vtx_0 + 0, 11, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
+	gsSP2Triangles(6, 7, 5, 0, 8, 9, 10, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx Armature_staff_r_mesh_layer_Opaque_vtx_1[16] = {
+	{{ {-61, 6032, -240}, 0, {232, 752}, {0, 0, 129, 255} }},
+	{{ {-809, 6032, -6}, 0, {760, 257}, {129, 255, 0, 255} }},
+	{{ {-61, 6781, -6}, 0, {-263, 224}, {0, 127, 0, 255} }},
+	{{ {-61, 5283, -6}, 0, {-263, 224}, {0, 129, 0, 255} }},
+	{{ {687, 6032, -6}, 0, {991, 21}, {127, 1, 0, 255} }},
+	{{ {-61, 6781, -6}, 0, {1, 21}, {0, 127, 0, 255} }},
+	{{ {-61, 6032, 229}, 0, {496, 517}, {0, 0, 127, 255} }},
+	{{ {-61, 5283, -6}, 0, {1, 21}, {0, 129, 0, 255} }},
+	{{ {-809, 6032, -6}, 0, {-246, 444}, {129, 255, 0, 255} }},
+	{{ {-61, 6032, 229}, 0, {254, 934}, {0, 0, 127, 255} }},
+	{{ {-61, 6781, -6}, 0, {745, 435}, {0, 127, 0, 255} }},
+	{{ {-61, 5283, -6}, 0, {745, 435}, {0, 129, 0, 255} }},
+	{{ {-61, 6032, -240}, 0, {492, 346}, {0, 0, 129, 255} }},
+	{{ {-61, 6781, -6}, 0, {-20, 858}, {0, 127, 0, 255} }},
+	{{ {687, 6032, -6}, 0, {1004, 858}, {127, 1, 0, 255} }},
+	{{ {-61, 5283, -6}, 0, {-20, 858}, {0, 129, 0, 255} }},
+};
+
+Gfx Armature_staff_r_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(Armature_staff_r_mesh_layer_Opaque_vtx_1 + 0, 16, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
+	gsSP2Triangles(8, 9, 10, 0, 8, 11, 9, 0),
+	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_021_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_NONE),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_cloth3_i8),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_022_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, ENVIRONMENT, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_NONE),
+	gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_cloth_white_ia8),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b, 8, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 6, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 124),
+	gsSPDisplayList(0x9000000),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_017_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_jewel2_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 159),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_jewel2_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_018_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, ENVIRONMENT, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_hemd3_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 36),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_hemd3_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0x9000000),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_015_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_skin2_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 22),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_skin2_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_014_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_transition_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 61),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_transition_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_MIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_019_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_tongue_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 24),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_tongue_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_013_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_beak_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 104),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_beak_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_CLAMP | G_TX_MIRROR, 5, 0, G_TX_CLAMP | G_TX_MIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_MIRROR, 5, 0, G_TX_CLAMP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 252, 252),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_016_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, TEXEL0, 0, 0, 0, TEXEL0, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_eye4_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 130),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_eye4_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0, G_TX_CLAMP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_024_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_GTG_0x4D900_32x32_CI8_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 49),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_GTG_0x4D900_32x32_CI8_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_Armature_f3dlite_material_025_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(0, 0, 0, TEXEL0, 0, 0, 0, 1, SHADE, 0, COMBINED, 0, COMBINED, 0, ENVIRONMENT, 0),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_RGBA16),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, Armature_wand_ci8_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(7, 21),
+	gsDPLoadSync(),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, Armature_wand_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPDisplayList(0xC000000),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_Bone_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_021_layerOpaque),
+	gsSPDisplayList(Armature_Bone_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_Armature_f3dlite_material_022_layerOpaque),
+	gsSPDisplayList(Armature_Bone_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_Bone_001_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_017_layerOpaque),
+	gsSPDisplayList(Armature_Bone_001_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_Armature_f3dlite_material_021_layerOpaque),
+	gsSPDisplayList(Armature_Bone_001_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_Bone_002_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_018_layerOpaque),
+	gsSPDisplayList(Armature_Bone_002_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_Armature_f3dlite_material_015_layerOpaque),
+	gsSPDisplayList(Armature_Bone_002_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_Armature_f3dlite_material_014_layerOpaque),
+	gsSPDisplayList(Armature_Bone_002_mesh_layer_Opaque_tri_2),
+	gsSPDisplayList(mat_Armature_f3dlite_material_019_layerOpaque),
+	gsSPDisplayList(Armature_Bone_002_mesh_layer_Opaque_tri_3),
+	gsSPDisplayList(mat_Armature_f3dlite_material_013_layerOpaque),
+	gsSPDisplayList(Armature_Bone_002_mesh_layer_Opaque_tri_4),
+	gsSPDisplayList(mat_Armature_f3dlite_material_016_layerOpaque),
+	gsSPDisplayList(Armature_Bone_002_mesh_layer_Opaque_tri_5),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_lowerjaw_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_015_layerOpaque),
+	gsSPDisplayList(Armature_lowerjaw_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_Armature_f3dlite_material_019_layerOpaque),
+	gsSPDisplayList(Armature_lowerjaw_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_Armature_f3dlite_material_014_layerOpaque),
+	gsSPDisplayList(Armature_lowerjaw_mesh_layer_Opaque_tri_2),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_upperarm_l_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_018_layerOpaque),
+	gsSPDisplayList(Armature_upperarm_l_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_Armature_f3dlite_material_021_layerOpaque),
+	gsSPDisplayList(Armature_upperarm_l_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_forearm_l_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_021_layerOpaque),
+	gsSPDisplayList(Armature_forearm_l_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_upperarm_r_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_018_layerOpaque),
+	gsSPDisplayList(Armature_upperarm_r_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_Armature_f3dlite_material_021_layerOpaque),
+	gsSPDisplayList(Armature_upperarm_r_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_forearm_r_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_021_layerOpaque),
+	gsSPDisplayList(Armature_forearm_r_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx Armature_staff_r_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_Armature_f3dlite_material_024_layerOpaque),
+	gsSPDisplayList(Armature_staff_r_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_Armature_f3dlite_material_025_layerOpaque),
+	gsSPDisplayList(Armature_staff_r_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
+StandardLimb ArmatureLimb_000 = { { 0, 871, 0 }, 1, 255, Armature_Bone_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_001 = { { 0, 5264, 0 }, 2, 255, Armature_Bone_001_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_002 = { { 0, 4528, 0 }, 3, 4, Armature_Bone_002_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_003 = { { 0, 430, 1465 }, 255, 255, Armature_lowerjaw_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_004 = { { 0, 4528, 0 }, 5, 7, NULL };
+StandardLimb ArmatureLimb_005 = { { 0, 2696, 0 }, 6, 255, Armature_upperarm_l_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_006 = { { 0, 3739, 0 }, 255, 255, Armature_forearm_l_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_007 = { { 0, 4528, 0 }, 8, 255, NULL };
+StandardLimb ArmatureLimb_008 = { { 0, 2696, 0 }, 9, 255, Armature_upperarm_r_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_009 = { { 0, 3739, 0 }, 10, 255, Armature_forearm_r_mesh_layer_Opaque };
+StandardLimb ArmatureLimb_010 = { { 0, 3410, 0 }, 255, 255, Armature_staff_r_mesh_layer_Opaque };
+
+void* ArmatureLimbs[11] = {
+	&ArmatureLimb_000,
+	&ArmatureLimb_001,
+	&ArmatureLimb_002,
+	&ArmatureLimb_003,
+	&ArmatureLimb_004,
+	&ArmatureLimb_005,
+	&ArmatureLimb_006,
+	&ArmatureLimb_007,
+	&ArmatureLimb_008,
+	&ArmatureLimb_009,
+	&ArmatureLimb_010,
+};
+
+FlexSkeletonHeader Armature = { ArmatureLimbs, 11, 9 };
+
+s16 ArmatureArmatureaction_001AnimFrameData[272] = {
+	0x0000, 0xfc99, 0x0101, 0xffff, 0xffad, 0x0307, 0xbbb6, 0xfcf8, 0x4449, 0x0242, 0xfe83, 0xf778, 0xfc41, 0xfd18, 0xfe56, 0xffd8, 
+	0x017e, 0x0322, 0x04a5, 0x05e2, 0x06b9, 0x0709, 0x06b4, 0x05d3, 0x048d, 0x030e, 0x017e, 0x0003, 0xfeae, 0xfd90, 0xfcb2, 0xfc24, 
+	0xfb12, 0xfc78, 0xfe89, 0x010f, 0x03cf, 0x068e, 0x0913, 0x0b24, 0x0c8a, 0x0d0e, 0x0ced, 0x0c7b, 0x0b9e, 0x0a3e, 0x0840, 0x059c, 
+	0x029e, 0xffa3, 0xfd0e, 0xfb3e, 0x44ef, 0x4aa0, 0x5176, 0x5727, 0x5984, 0x5788, 0x52c3, 0x4d0c, 0x4847, 0x464a, 0x4779, 0x4a4d, 
+	0x4daf, 0x5083, 0x51b2, 0x5095, 0x4dc8, 0x4a22, 0x467c, 0x43b0, 0x002e, 0x0030, 0x0031, 0x0030, 0x0030, 0x0030, 0x0031, 0x0030, 
+	0x002f, 0x002e, 0x002f, 0x002f, 0x0030, 0x0031, 0x0031, 0x0031, 0x0030, 0x002f, 0x002e, 0x002d, 0xffee, 0xfff5, 0xfffd, 0x0005, 
+	0x0007, 0x0005, 0xfffe, 0xfff8, 0xfff2, 0xfff0, 0xfff1, 0xfff4, 0xfff8, 0xfffc, 0xfffd, 0xfffc, 0xfff8, 0xfff4, 0xfff0, 0xffed, 
+	0xff0f, 0xfbd3, 0xf7c2, 0xf3a2, 0xefec, 0xecd9, 0xea79, 0xe8c7, 0xe7bc, 0xe75e, 0xe7c2, 0xe8db, 0xea9b, 0xecfd, 0xefec, 0xf33c, 
+	0xf6be, 0xfa37, 0xfd4d, 0xff87, 0x1395, 0x1050, 0x0b42, 0x04d9, 0xfdb4, 0xf69f, 0xf053, 0xeb5e, 0xe824, 0xe6fb, 0xe838, 0xeb9b, 
+	0xf0b2, 0xf6f7, 0xfdb4, 0x0425, 0x09d0, 0x0e72, 0x11e1, 0x1403, 0x0c01, 0x0ac0, 0x090b, 0x0728, 0x054c, 0x039c, 0x0233, 0x0125, 
+	0x007d, 0x0043, 0x0081, 0x0132, 0x0248, 0x03b0, 0x054c, 0x06f6, 0x0898, 0x0a18, 0x0b56, 0x0c2e, 0x2358, 0x2897, 0x2f5a, 0x368f, 
+	0x3d93, 0x43fe, 0x4980, 0x4dd1, 0x50a6, 0x51ac, 0x5095, 0x4d9c, 0x492e, 0x43b0, 0x3d93, 0x3749, 0x3115, 0x2b3d, 0x2630, 0x2295, 
+	0x0a01, 0x0a2b, 0x0a4a, 0x0a3d, 0x09ed, 0x0955, 0x0882, 0x0798, 0x06d4, 0x0682, 0x06d9, 0x07a5, 0x0890, 0x095e, 0x09ed, 0x0a38, 
+	0x0a4c, 0x0a3b, 0x0a19, 0x09fa, 0x8537, 0x844d, 0x82e3, 0x8121, 0x7f3a, 0x7d6d, 0x7be8, 0x7ac7, 0x7a15, 0x79d7, 0x7a19, 0x7ad4, 
+	0x7bfe, 0x7d83, 0x7f3a, 0x80f0, 0x827d, 0x83c7, 0x84bd, 0x8555, 0x037e, 0x0277, 0x0112, 0xff90, 0xfe2d, 0xfd09, 0xfc31, 0xfba2, 
+	0xfb51, 0xfb36, 0xfb53, 0xfba8, 0xfc3d, 0xfd15, 0xfe2d, 0xff6a, 0x00b5, 0x01ed, 0x02f2, 0x03a2, 0xc370, 0xc4ee, 0xc743, 0xca52, 
+	0xcdf7, 0xd201, 0xd625, 0xd9f4, 0xdcce, 0xddeb, 0xdcbc, 0xd9c2, 0xd5e2, 0xd1cb, 0xcdf7, 0xcaab, 0xc7f1, 0xc5ca, 0xc437, 0xc33e, 
+};
+
+JointIndex ArmatureArmatureaction_001AnimJointIndices[12] = {
+	{ 0x0000, 0x0000, 0x0001, },
+	{ 0x0002, 0x0000, 0x0000, },
+	{ 0x000c, 0x0003, 0x0003, },
+	{ 0x0020, 0x0003, 0x0003, },
+	{ 0x0034, 0x0048, 0x005c, },
+	{ 0x0004, 0x0005, 0x0006, },
+	{ 0x0070, 0x0084, 0x0098, },
+	{ 0x00ac, 0x0000, 0x0000, },
+	{ 0x0004, 0x0007, 0x0008, },
+	{ 0x00c0, 0x00d4, 0x00e8, },
+	{ 0x00fc, 0x0003, 0x0003, },
+	{ 0x0009, 0x000a, 0x000b, },
+};
+
+AnimationHeader IdleAnim = { { 20 }, ArmatureArmatureaction_001AnimFrameData, ArmatureArmatureaction_001AnimJointIndices, 12 };
+
+s16 ArmatureAttackAnimFrameData[422] = {
+	0x0000, 0xfc99, 0xffad, 0x0307, 0xbbb6, 0xfcf8, 0x4449, 0xffff, 0xfb57, 0xfc18, 0xfdf1, 0x0043, 0x028a, 0x046c, 0x05b0, 0x0627, 
+	0x0601, 0x059d, 0x050a, 0x0458, 0x0395, 0x02d2, 0x021f, 0x018b, 0x0126, 0x0101, 0xf01c, 0xf102, 0xf365, 0xf6cb, 0xfaa4, 0xfe42, 
+	0x00ef, 0x01f9, 0x01ea, 0x01c2, 0x0188, 0x0142, 0x00f7, 0x00ad, 0x0069, 0x0033, 0x000e, 0x0000, 0x0916, 0x085b, 0x0691, 0x0456, 
+	0x022a, 0x0061, 0xff30, 0xfec1, 0xfec9, 0xfedf, 0xff00, 0xff2a, 0xff58, 0xff88, 0xffb5, 0xffdb, 0xfff5, 0x0000, 0x06f6, 0x074f, 
+	0x084b, 0x09db, 0x0bdb, 0x0e0c, 0x1015, 0x1197, 0x1259, 0x128c, 0x1196, 0x0f0a, 0x0b6a, 0x073e, 0x0312, 0xff73, 0xfce8, 0xfbf2, 
+	0xf338, 0xf3e5, 0xf59f, 0xf7ef, 0xfa5d, 0xfc79, 0xfdee, 0xfe83, 0xfe8b, 0xfe90, 0xfea8, 0xfed2, 0xff0a, 0xff4b, 0xff8d, 0xffc7, 
+	0xfff0, 0xffff, 0xf0a2, 0xf167, 0xf368, 0xf634, 0xf955, 0xfc4a, 0xfe80, 0xff61, 0xff62, 0xff63, 0xff72, 0xff8e, 0xffaf, 0xffcf, 
+	0xffe6, 0xfff5, 0xfffd, 0xffff, 0x001c, 0xff3f, 0xfd15, 0xfa3b, 0xf737, 0xf47f, 0xf287, 0xf1cb, 0xf24f, 0xf3a1, 0xf590, 0xf7e8, 
+	0xfa75, 0xfd01, 0xff58, 0x0145, 0x0291, 0x030c, 0x13fd, 0x12e4, 0x1004, 0x0c06, 0x07a3, 0x03a2, 0x00bf, 0xffa4, 0xffa1, 0xff9c, 
+	0xff98, 0xff9a, 0xffa3, 0xffb5, 0xffcc, 0xffe5, 0xfff8, 0xffff, 0x0348, 0x0315, 0x02b2, 0x0270, 0x027d, 0x02d1, 0x0338, 0x0367, 
+	0x034d, 0x030a, 0x02a7, 0x022f, 0x01ad, 0x012c, 0x00b7, 0x0057, 0x0017, 0x0000, 0x4599, 0x45e9, 0x46b9, 0x47d6, 0x490b, 0x4a28, 
+	0x4af8, 0x4b48, 0x4b07, 0x4a56, 0x4951, 0x4814, 0x46ba, 0x4560, 0x4423, 0x431e, 0x426d, 0x422b, 0x002e, 0x002f, 0x0032, 0x0037, 
+	0x003d, 0x0043, 0x0045, 0x003f, 0x0035, 0x0029, 0x001e, 0x0012, 0x0008, 0xfffd, 0xfff5, 0xffef, 0xffeb, 0xffea, 0xffef, 0xffdb, 
+	0xffa8, 0xff63, 0xff17, 0xfed1, 0xfe9d, 0xfe88, 0xfe85, 0xfe83, 0xfe82, 0xfe81, 0xfe81, 0xfe81, 0xfe82, 0xfe82, 0xfe83, 0xfe83, 
+	0xf74d, 0xf725, 0xf6da, 0xf6ce, 0xf73d, 0xf7dc, 0xf7a1, 0xf4ed, 0xf13b, 0xef0d, 0xeed4, 0xf07a, 0xf325, 0xf602, 0xf859, 0xf9ce, 
+	0xfa7e, 0xfab1, 0x0702, 0x06e2, 0x066b, 0x0572, 0x03f3, 0x0253, 0x0173, 0x027e, 0x04af, 0x067f, 0x096a, 0x0e63, 0x1490, 0x1ab1, 
+	0x1fde, 0x23a7, 0x25ef, 0x26b6, 0x0085, 0x00ad, 0x0125, 0x01ea, 0x02cc, 0x037e, 0x03b1, 0x0300, 0x0095, 0xfc89, 0xf7a8, 0xf2a9, 
+	0xedee, 0xe977, 0xe51c, 0xe0fb, 0xddc1, 0xdc76, 0x3cc7, 0x3d0e, 0x3d4b, 0x3c61, 0x39c8, 0x3610, 0x32fe, 0x3332, 0x35e0, 0x3858, 
+	0x39ba, 0x391d, 0x363c, 0x3162, 0x2b5d, 0x2548, 0x2077, 0x1e84, 0x1577, 0x18c6, 0x21ab, 0xe810, 0xdf7e, 0xd830, 0xd082, 0xc81c, 
+	0xc39e, 0xbfb4, 0xbef0, 0x3fb1, 0xc3dd, 0xd7a9, 0xe832, 0xf609, 0xff6d, 0x02dd, 0xef86, 0xeb9c, 0xdc2b, 0xa457, 0x8ca0, 0x8e69, 
+	0x9068, 0x8fd9, 0x8df1, 0x8bd0, 0x8819, 0xfe02, 0x79c5, 0x70b0, 0x6826, 0x60f1, 0x5bce, 0x59d0, 0xf5c4, 0xf663, 0xf509, 0x2187, 
+	0x119b, 0x0445, 0xfad5, 0xf797, 0xf874, 0xfaec, 0xfecf, 0x83b4, 0x0928, 0x0efb, 0x1544, 0x1c16, 0x22aa, 0x25e0, 0xb92c, 0xb004, 
+	0x9c69, 0x8ff7, 0xa28a, 0xbde4, 0xdb1c, 0xf1cf, 0xf9d5, 0xffcc, 0xffcc, 0xffcc, 0xffcc, 0xe87d, 0xdfa3, 0xdf3a, 0xe3ee, 0xe75c, 
+	0xfbad, 0xfe0a, 0xfff2, 0x0913, 0x0473, 0x1c0c, 0x1066, 0xff00, 0xf8fb, 0xf4ff, 0xf3c6, 0xf124, 0xec25, 0xf0cb, 0xec17, 0xe553, 
+	0xe0de, 0xdf9f, 0xf919, 0xf534, 0xf0a5, 0xefa8, 0xe74d, 0xeaf0, 0xe9ae, 0xe607, 0xe642, 0xe6d6, 0xe72c, 0xe7eb, 0xe9d5, 0xe8c3, 
+	0xeb2c, 0xf024, 0xf5b2, 0xf850, 0x10c3, 0x110c, 0x1113, 0x1112, 0x21eb, 0x0c82, 0xf8f0, 0x03b1, 0x0a09, 0x0e3b, 0x1071, 0x13bb, 
+	0x196c, 0x19cc, 0x202e, 0x2853, 0x2f82, 0x32cb, };
+
+JointIndex ArmatureAttackAnimJointIndices[12] = {
+	{ 0x0000, 0x0000, 0x0001, },
+	{ 0x0008, 0x001a, 0x002c, },
+	{ 0x003e, 0x0050, 0x0062, },
+	{ 0x0074, 0x0086, 0x0098, },
+	{ 0x00aa, 0x00bc, 0x00ce, },
+	{ 0x0002, 0x0003, 0x0004, },
+	{ 0x00e0, 0x00f2, 0x0104, },
+	{ 0x0116, 0x0000, 0x0000, },
+	{ 0x0002, 0x0005, 0x0006, },
+	{ 0x0128, 0x013a, 0x014c, },
+	{ 0x015e, 0x0007, 0x0007, },
+	{ 0x0170, 0x0182, 0x0194, },
+};
+
+AnimationHeader AttackAnim = { { 18 }, ArmatureAttackAnimFrameData, ArmatureAttackAnimJointIndices, 8 };
+
+s16 ArmatureWindupAnimFrameData[238] = {
+	0x0000, 0xfc99, 0xffad, 0x0307, 0xbbb6, 0xfcf8, 0x4449, 0xffff, 0xfb57, 0xfb05, 0xfa40, 0xf956, 0xf892, 0xf840, 0xf892, 0xf956, 
+	0xfa40, 0xfb05, 0xf01c, 0xf02f, 0xf05c, 0xf091, 0xf0bc, 0xf0ce, 0xf0bc, 0xf091, 0xf05c, 0xf02f, 0x0916, 0x0906, 0x08df, 0x08af, 
+	0x0887, 0x0875, 0x0887, 0x08af, 0x08df, 0x0906, 0x06f6, 0x071d, 0x0783, 0x080e, 0x0890, 0x08ca, 0x0890, 0x080e, 0x0783, 0x071d, 
+	0xf338, 0xf2cd, 0xf1cf, 0xf0a6, 0xefb3, 0xef4e, 0xefb3, 0xf0a6, 0xf1cf, 0xf2cd, 0xf0a2, 0xefe6, 0xee22, 0xebfc, 0xea28, 0xe961, 
+	0xea28, 0xebfc, 0xee22, 0xefe6, 0x001c, 0x0141, 0x0414, 0x0799, 0x0aa5, 0x0bf2, 0x0aa5, 0x0799, 0x0414, 0x0141, 0x13fd, 0x1476, 
+	0x1579, 0x1674, 0x1712, 0x1745, 0x1712, 0x1674, 0x1579, 0x1476, 0x0348, 0x046a, 0x0735, 0x0ab2, 0x0db7, 0x0f01, 0x0db7, 0x0ab2, 
+	0x0735, 0x046a, 0x4599, 0x4599, 0x4599, 0x46de, 0x4939, 0x4a7e, 0x480b, 0x4599, 0x4599, 0x4599, 0x002e, 0x002e, 0x002e, 0x0028, 
+	0x0025, 0x0027, 0x0026, 0x002e, 0x002e, 0x002e, 0xffef, 0xffef, 0xffef, 0xff9f, 0xff0b, 0xfebb, 0xff55, 0xffef, 0xffef, 0xffef, 
+	0xf74d, 0xf6a5, 0xf534, 0xf3b1, 0xf298, 0xf22d, 0xf298, 0xf3b1, 0xf534, 0xf6a5, 0x0702, 0x06ad, 0x05d8, 0x04cf, 0x03ec, 0x038c, 
+	0x03ec, 0x04cf, 0x05d8, 0x06ad, 0x0085, 0x009c, 0x00c6, 0x00e2, 0x00e7, 0x00e3, 0x00e7, 0x00e2, 0x00c6, 0x009c, 0x3cc7, 0x3e3e, 
+	0x4189, 0x4526, 0x47f1, 0x490e, 0x47f1, 0x4526, 0x4189, 0x3e3e, 0x1577, 0x1a1b, 0x1f0a, 0x1d5c, 0x182c, 0x10cf, 0x095e, 0x049a, 
+	0x0a82, 0x17ac, 0xef86, 0xef07, 0xee6f, 0xee0b, 0xeda8, 0xed95, 0xee1c, 0xef04, 0xef86, 0xef32, 0xf5c4, 0xf36c, 0xf04b, 0xf381, 
+	0xf972, 0xfe36, 0x00c5, 0x011d, 0xfd5d, 0xf51e, 0xb92c, 0xb125, 0xa7cb, 0xa87f, 0xb06f, 0xbbcc, 0xc676, 0xcd70, 0xc442, 0xb498, 
+	0xfbad, 0x22d9, 0x345a, 0x250c, 0x0d7a, 0xfbd7, 0xe9f0, 0xdb91, 0xdec9, 0xf13d, 0xf919, 0xf479, 0x0242, 0x1009, 0x1379, 0x0ee9, 
+	0x0363, 0xf67e, 0xf691, 0x0180, 0x10c3, 0xfa15, 0xe3d1, 0xdbc4, 0xcbe6, 0xc535, 0xcc10, 0xe284, 0xf1b6, 0xffcc, };
+
+JointIndex ArmatureWindupAnimJointIndices[12] = {
+	{ 0x0000, 0x0000, 0x0001, },
+	{ 0x0008, 0x0012, 0x001c, },
+	{ 0x0026, 0x0030, 0x003a, },
+	{ 0x0044, 0x004e, 0x0058, },
+	{ 0x0062, 0x006c, 0x0076, },
+	{ 0x0002, 0x0003, 0x0004, },
+	{ 0x0080, 0x008a, 0x0094, },
+	{ 0x009e, 0x0000, 0x0000, },
+	{ 0x0002, 0x0005, 0x0006, },
+	{ 0x00a8, 0x00b2, 0x00bc, },
+	{ 0x00c6, 0x0007, 0x0007, },
+	{ 0x00d0, 0x00da, 0x00e4, },
+};
+
+AnimationHeader WindupAnim = { { 10 }, ArmatureWindupAnimFrameData, ArmatureWindupAnimJointIndices, 8 };
+
+s16 ArmatureDamageAnimFrameData[31] = {
+	0x0000, 0xfc99, 0xf83f, 0xfdec, 0x0921, 0xef44, 0x02f1, 0xe980, 0xee74, 0x018d, 0x063c, 0x65a7, 0x01c3, 0x0414, 0xffad, 0x0307, 
+	0xbbb6, 0xf823, 0x03f4, 0x07f6, 0x5190, 0xffff, 0xfcf8, 0x4449, 0x271f, 0x5fb0, 0x3158, 0xc8a8, 0x6833, 0xde44, 0x0648, };
+
+JointIndex ArmatureDamageAnimJointIndices[12] = {
+	{ 0x0000, 0x0000, 0x0001, },
+	{ 0x0002, 0x0003, 0x0004, },
+	{ 0x0005, 0x0006, 0x0007, },
+	{ 0x0008, 0x0009, 0x000a, },
+	{ 0x000b, 0x000c, 0x000d, },
+	{ 0x000e, 0x000f, 0x0010, },
+	{ 0x0011, 0x0012, 0x0013, },
+	{ 0x0014, 0x0015, 0x0000, },
+	{ 0x000e, 0x0016, 0x0017, },
+	{ 0x0018, 0x0019, 0x001a, },
+	{ 0x001b, 0x0015, 0x0015, },
+	{ 0x001c, 0x001d, 0x001e, },
+};
+
+AnimationHeader DamageAnim = { { 1 }, ArmatureDamageAnimFrameData, ArmatureDamageAnimJointIndices, 31 };
+
+s16 ArmatureSpawnAnimFrameData[303] = {
+	0x0000, 0xfc99, 0x0101, 0xffad, 0x0307, 0xbbb6, 0xfcf8, 0x4449, 0xffff, 0x0855, 0x0765, 0x04f9, 0x01a5, 0xfe03, 0xfab0, 0xf843, 
+	0xf754, 0xf843, 0xfab0, 0xfe03, 0x01a5, 0x04f9, 0x0765, 0x0eed, 0x0cc1, 0x0921, 0x07b9, 0x0914, 0x0b53, 0x0d48, 0x0e15, 0x0d7e, 
+	0x0c1b, 0x0aad, 0x0a05, 0x0b24, 0x0d8c, 0xf099, 0xf359, 0xfa7b, 0x0328, 0x09c6, 0x0dc9, 0x0fc2, 0x104c, 0x0f42, 0x0c32, 0x0727, 
+	0x005a, 0xf8c2, 0xf2dd, 0xf0d2, 0xf406, 0xfad1, 0x01ce, 0x074f, 0x0b47, 0x0db0, 0x0e7c, 0x0d52, 0x0a26, 0x057a, 0xffb0, 0xf929, 
+	0xf361, 0x00ca, 0x006b, 0xffad, 0xff33, 0xff4f, 0xffad, 0x0017, 0x004a, 0xff11, 0xfc66, 0xf9c2, 0xf896, 0xfac1, 0xfeb0, 0x05df, 
+	0x0464, 0x010a, 0xfd76, 0xfaf0, 0xf975, 0xf8bf, 0xf890, 0xf915, 0xfa78, 0xfc77, 0xfef1, 0x01e2, 0x04a1, 0xfa65, 0xfb2b, 0xfd25, 
+	0xffc1, 0x0258, 0x0487, 0x0607, 0x0696, 0x062c, 0x04ec, 0x02da, 0x0021, 0xfd3a, 0xfb22, 0x4ed1, 0x4bd7, 0x4649, 0x4349, 0x454e, 
+	0x49c5, 0x4e3d, 0x5043, 0x4e3d, 0x49c5, 0x454e, 0x4349, 0x4649, 0x4bd7, 0x02e3, 0x0224, 0x00a7, 0xff5f, 0xfe95, 0xfe10, 0xfdc2, 
+	0xfda9, 0xfdc2, 0xfe10, 0xfe95, 0xff5f, 0x00a7, 0x0224, 0xfb5e, 0xfbde, 0xfd3d, 0xfef7, 0x0050, 0x0121, 0x0184, 0x019d, 0x0184, 
+	0x0121, 0x0050, 0xfef7, 0xfd3d, 0xfbde, 0x1cad, 0x1eb1, 0x2445, 0x2a83, 0x2cb6, 0x2b8a, 0x2937, 0x27f9, 0x286c, 0x28f0, 0x2847, 
+	0x25a2, 0x215a, 0x1deb, 0x0dc8, 0x102e, 0x155c, 0x19ca, 0x1b77, 0x1b57, 0x1a91, 0x1a1f, 0x1a5c, 0x1a9c, 0x1a07, 0x17d4, 0x13cd, 
+	0x0fa3, 0xd9f0, 0xdb4f, 0xdf18, 0xe455, 0xe8a7, 0xeb0d, 0xebd4, 0xebe2, 0xeb69, 0xe9bd, 0xe695, 0xe246, 0xdde9, 0xdaf8, 0x39c3, 
+	0x3602, 0x2e7f, 0x2a9b, 0x2e7a, 0x3553, 0x3b54, 0x3ddc, 0x3c3f, 0x3872, 0x3446, 0x3200, 0x33d6, 0x37bc, 0xcdcf, 0xd107, 0xd93f, 
+	0xe2a1, 0xe872, 0xea75, 0xea4a, 0xe9d8, 0xe9c6, 0xe8c9, 0xe5a1, 0xdf93, 0xd76a, 0xd08a, 0x67b3, 0x681c, 0x69b0, 0x6cb2, 0x6fa2, 
+	0x715e, 0x71f9, 0x7205, 0x71ae, 0x7084, 0x6e71, 0x6bc9, 0x6963, 0x6813, 0x1831, 0x197d, 0x1cfe, 0x2179, 0x2509, 0x2763, 0x28c8, 
+	0x2940, 0x2886, 0x269b, 0x23cc, 0x2030, 0x1c3e, 0x1949, 0xd637, 0xd4e5, 0xcfed, 0xc766, 0xbea4, 0xb7e1, 0xb387, 0xb1fa, 0xb38d, 
+	0xb7f1, 0xbe9d, 0xc6e4, 0xcef9, 0xd460, 0x2d72, 0x1fba, 0xee36, 0xe281, 0xf155, 0x0d7d, 0x2121, 0x2789, 0x2162, 0x0d58, 0xef7a, 
+	0xe2eb, 0xf0ef, 0x20d1, 0xe8c7, 0xe27d, 0xecb4, 0xee88, 0xe6f9, 0xe8b0, 0xf1a9, 0xf5b8, 0xf198, 0xe848, 0xe7f1, 0xf0ab, 0xec20, 
+	0xe224, 0xfeba, 0x0d7a, 0x2be7, 0x2017, 0x0bf7, 0xf468, 0xe92d, 0xe71f, 0xe97f, 0xf684, 0x11dc, 0x2684, 0x3062, 0x0e1a, };
+
+JointIndex ArmatureSpawnAnimJointIndices[12] = {
+	{ 0x0000, 0x0000, 0x0001, },
+	{ 0x0002, 0x0000, 0x0009, },
+	{ 0x0017, 0x0025, 0x0033, },
+	{ 0x0041, 0x004f, 0x005d, },
+	{ 0x006b, 0x0079, 0x0087, },
+	{ 0x0003, 0x0004, 0x0005, },
+	{ 0x0095, 0x00a3, 0x00b1, },
+	{ 0x00bf, 0x0000, 0x0000, },
+	{ 0x0003, 0x0006, 0x0007, },
+	{ 0x00cd, 0x00db, 0x00e9, },
+	{ 0x00f7, 0x0008, 0x0000, },
+	{ 0x0105, 0x0113, 0x0121, },
+};
+
+AnimationHeader EnemyAnim = { { 14 }, ArmatureSpawnAnimFrameData, ArmatureSpawnAnimJointIndices, 9 };
diff --git a/assets_hm_pack/objects/object_wiz/object_wiz.h b/assets_hm_pack/objects/object_wiz/object_wiz.h
new file mode 100644
index 000000000..2e0a1760e
--- /dev/null
+++ b/assets_hm_pack/objects/object_wiz/object_wiz.h
@@ -0,0 +1,140 @@
+#ifndef OBJECT_WIZ_H
+#define OBJECT_WIZ_H 1
+
+extern u64 gWizrobeIceSmokeTex[];
+extern u64 gWizrobeIceSmokeMaskTex[];
+extern Vtx object_wizVtx_000E40[];
+extern Gfx gWizrobeIceSmokeMaterialDL[];
+extern Gfx gWizrobeIceSmokeModelDL[];
+extern Vtx object_wizVtx_0016C0[];
+extern Vtx object_wizVtx_002600[];
+extern Gfx gWizrobeSmallFlameDL[];
+extern u64 gWizrobeSmallFlameTex[];
+extern u64 gWizrobeSmallFlameMaskTex[];
+extern Vtx object_wizVtx_002B10[];
+extern Gfx gWizrobeMagicProjectileDL[];
+extern u64 gWizrobeMagicProjectileTex[];
+extern u64 gWizrobeFirePoolTex[];
+extern Vtx object_wizVtx_003000[];
+extern Gfx gWizrobeFirePoolDL[];
+extern u64 gWizrobeFireSmokeTex[];
+extern Vtx object_wizVtx_0035E0[];
+extern Gfx gWizrobeFireSmokeDL[];
+extern u64 gWizrobeBigFlameTex[];
+extern u64 gWizrobeBigFlameMaskTex[];
+extern Vtx object_wizVtx_003F00[];
+extern Gfx gWizrobeBigFlameDL[];
+extern u64 gWizrobeIcePoolTex[];
+extern Vtx gWizrobeUnusedVtx[];
+extern Vtx object_wizVtx_0050F0[];
+extern Gfx gWizrobeIcePoolDL[];
+extern u64 gWizrobeIcePoolShineTex[];
+extern u64 gWizrobeIcePoolShineMaskTex[];
+extern Vtx object_wizVtx_0056B0[];
+extern Gfx gWizrobeIcePoolShineDL[];
+extern Vtx object_wizVtx_005830[];
+
+extern u64 Armature_cloth3_i8[];
+extern u64 Armature_cloth_white_ia8[];
+extern u64 Armature_jewel2_ci8[];
+extern u64 Armature_jewel2_ci8_pal_rgba16[];
+extern u64 Armature_hemd3_ci8[];
+extern u64 Armature_hemd3_ci8_pal_rgba16[];
+extern u64 Armature_skin2_ci8[];
+extern u64 Armature_skin2_ci8_pal_rgba16[];
+extern u64 Armature_transition_ci8[];
+extern u64 Armature_transition_ci8_pal_rgba16[];
+extern u64 Armature_tongue_ci8[];
+extern u64 Armature_tongue_ci8_pal_rgba16[];
+extern u64 Armature_beak_ci8[];
+extern u64 Armature_beak_ci8_pal_rgba16[];
+extern u64 Armature_eye4_ci8[];
+extern u64 Armature_eye4_ci8_pal_rgba16[];
+extern u64 Armature_GTG_0x4D900_32x32_CI8_ci8[];
+extern u64 Armature_GTG_0x4D900_32x32_CI8_ci8_pal_rgba16[];
+extern u64 Armature_wand_ci8[];
+extern u64 Armature_wand_ci8_pal_rgba16[];
+extern Vtx Armature_Bone_mesh_layer_Opaque_vtx_0[16];
+extern Gfx Armature_Bone_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_Bone_mesh_layer_Opaque_vtx_1[12];
+extern Gfx Armature_Bone_mesh_layer_Opaque_tri_1[];
+extern Vtx Armature_Bone_001_mesh_layer_Opaque_vtx_0[6];
+extern Gfx Armature_Bone_001_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_Bone_001_mesh_layer_Opaque_vtx_1[48];
+extern Gfx Armature_Bone_001_mesh_layer_Opaque_tri_1[];
+extern Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_0[50];
+extern Gfx Armature_Bone_002_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_1[9];
+extern Gfx Armature_Bone_002_mesh_layer_Opaque_tri_1[];
+extern Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_2[6];
+extern Gfx Armature_Bone_002_mesh_layer_Opaque_tri_2[];
+extern Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_3[9];
+extern Gfx Armature_Bone_002_mesh_layer_Opaque_tri_3[];
+extern Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_4[16];
+extern Gfx Armature_Bone_002_mesh_layer_Opaque_tri_4[];
+extern Vtx Armature_Bone_002_mesh_layer_Opaque_vtx_5[8];
+extern Gfx Armature_Bone_002_mesh_layer_Opaque_tri_5[];
+extern Vtx Armature_lowerjaw_mesh_layer_Opaque_vtx_0[8];
+extern Gfx Armature_lowerjaw_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_lowerjaw_mesh_layer_Opaque_vtx_1[14];
+extern Gfx Armature_lowerjaw_mesh_layer_Opaque_tri_1[];
+extern Vtx Armature_lowerjaw_mesh_layer_Opaque_vtx_2[10];
+extern Gfx Armature_lowerjaw_mesh_layer_Opaque_tri_2[];
+extern Vtx Armature_upperarm_l_mesh_layer_Opaque_vtx_0[9];
+extern Gfx Armature_upperarm_l_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_upperarm_l_mesh_layer_Opaque_vtx_1[18];
+extern Gfx Armature_upperarm_l_mesh_layer_Opaque_tri_1[];
+extern Vtx Armature_forearm_l_mesh_layer_Opaque_vtx_0[24];
+extern Gfx Armature_forearm_l_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_upperarm_r_mesh_layer_Opaque_vtx_0[9];
+extern Gfx Armature_upperarm_r_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_upperarm_r_mesh_layer_Opaque_vtx_1[24];
+extern Gfx Armature_upperarm_r_mesh_layer_Opaque_tri_1[];
+extern Vtx Armature_forearm_r_mesh_layer_Opaque_vtx_0[22];
+extern Gfx Armature_forearm_r_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_staff_r_mesh_layer_Opaque_vtx_0[11];
+extern Gfx Armature_staff_r_mesh_layer_Opaque_tri_0[];
+extern Vtx Armature_staff_r_mesh_layer_Opaque_vtx_1[16];
+extern Gfx Armature_staff_r_mesh_layer_Opaque_tri_1[];
+extern Gfx mat_Armature_f3dlite_material_021_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_022_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_017_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_018_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_015_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_014_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_019_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_013_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_016_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_024_layerOpaque[];
+extern Gfx mat_Armature_f3dlite_material_025_layerOpaque[];
+extern Gfx Armature_Bone_mesh_layer_Opaque[];
+extern Gfx Armature_Bone_001_mesh_layer_Opaque[];
+extern Gfx Armature_Bone_002_mesh_layer_Opaque[];
+extern Gfx Armature_lowerjaw_mesh_layer_Opaque[];
+extern Gfx Armature_upperarm_l_mesh_layer_Opaque[];
+extern Gfx Armature_forearm_l_mesh_layer_Opaque[];
+extern Gfx Armature_upperarm_r_mesh_layer_Opaque[];
+extern Gfx Armature_forearm_r_mesh_layer_Opaque[];
+extern Gfx Armature_staff_r_mesh_layer_Opaque[];
+extern FlexSkeletonHeader Armature;
+#define ARMATURE_LOWERBODY_POS_LIMB 0
+#define ARMATURE_BONE_ROT_LIMB 1
+#define ARMATURE_UPPERBODY_LIMB 2
+#define ARMATURE_HEAD_LIMB 3
+#define ARMATURE_LOWERJAW_LIMB 4
+#define ARMATURE_COLLAR_L_LIMB 5
+#define ARMATURE_UPPERARM_L_LIMB 6
+#define ARMATURE_FOREARM_L_LIMB 7
+#define ARMATURE_COLLAR_R_LIMB 8
+#define ARMATURE_UPPERARM_R_LIMB 9
+#define ARMATURE_FOREARM_R_LIMB 10
+#define ARMATURE_STAFF_R_LIMB 11
+#define ARMATURE_NUM_LIMBS 12
+
+extern AnimationHeader IdleAnim;
+extern AnimationHeader AttackAnim;
+extern AnimationHeader WindupAnim;
+extern AnimationHeader DamageAnim;
+extern AnimationHeader EnemyAnim;
+
+#endif
diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_big_flame.i8.png b/assets_hm_pack/objects/object_wiz/wizrobe_big_flame.i8.png
new file mode 100644
index 0000000000000000000000000000000000000000..44e2bb3624f4011410a45b19c71641df8c77c026
GIT binary patch
literal 914
zcmV;D18w|?P)<h;3K|Lk000e1NJLTq001BW001Be0ssI2{21+{000A7Nkl<ZNQv!M
z%Z}qX4Ag_PWXVpP<l6uLdkr+wc5J=oP#KQbo!%MDZGqJxNSq>zEIwr2bzN(%wN`7b
zwW?Rg7-NjlT5GKZj4v<oK*EHW83sA$mo|VB5e!;ur4+4oDMcyu60fzk)*551wdB2T
zt>v77MrdEXcU?zBTI*VCDJAC&jzdi1ors9YT1zp;*4nmhN-6P<PeC)YbIyB@3{pz#
zx`G>g2Rs7mx{jG?nx>rd<M9CDvMebj6a#2Lz4svm=Ui)TUDwagPh$*JEv1xFYOTP-
zB!m!Sbk5Q3c3YOkd%ta4*LC24r7^}ihuC9`<2Vk(pp=4lNCeTgZA&RBrI;Df^nHK1
zT&8KFx3{<V_je%rzVEv3<KqKAjWMUwDaPo%_uik+XAm$mQf#deQLS}ZmU*6AYX~TW
zFplHxcDr7$G>#)=Eu}c;Ajq;T%d#k?E|<&cbaKuy^XYUNh5@c~&c+ycthL_ncO=yJ
zJ;WJ?A%xKPJrNPiU}LRy&du|Dzu#-E=ks}*CX@>X7?)BC5h<m-_qA4QEm|>zFbu;m
z3^B$SBQq0p2SF*tS{q}0JRYbDpw2lW^4_D!sK0X#MXI%;B-^$j_F)+Mz6YLQ1AeJn
zO38b_EDKVGL{P7_hDJpCUDuUTFzP8KWFRKbK|{G9D4M5~!p!qL6Om*90~8th><O&3
z2n$WY%wT;IVByHH<eaUwn5+;2WMpQUSPU0ZLDJS*v`OFh2t{kHl%fy<Y=l!Og&svh
zkP>sd-#L&T!;E#(T7!)6{v?Po!T=M9rzs_502^k;^OuXW*2>IC7wYZ7G>)VEU}g+a
z&Y77poTA}(yAxe2t3srH5}@3Y1U6F6Ii-XZE8=|hE}IcY?hFCsoM{|K;Y2f_Rj`xy
zR}d@@G>7fGkNrt-y<U-{Ttf(?{yh6tEKa{(O)ra-bEXgiW<+q}Yk&Fdg*x1qFI|fV
zLU&3TBoB!c)k9jsiu-bJvRCXM1Xw9}YJMJ(8}85^_%5GcGnSZy`xgNa2Lh1-E)G?Z
z=RzRf@fSSkbzS$+eXAW_0QRx(E043Uyd?DeL$dpBT=)Hc5L&zoVDH3QtJ^m(Prp6?
o-bHf$p5PCU`90)+g8w?f5BUeZJXo7;vj6}907*qoM6N<$f=BVI0RR91

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_fire_pool.i4.png b/assets_hm_pack/objects/object_wiz/wizrobe_fire_pool.i4.png
new file mode 100644
index 0000000000000000000000000000000000000000..d8d8a8fe70d4a9c5264a094deec5390e3aad0df7
GIT binary patch
literal 522
zcmV+l0`>igP)<h;3K|Lk000e1NJLTq001BW001Be0ssI2{21+{0005eNkl<ZNQuQ(
zF>(Vj2qcOMmnvQA3HSe3=n0f6DOIM}nCu~)oMhq&g$GNpz=E*f%uHS>>80rZ5n#iZ
zk!)<jN%qrH3Y<$RPo4KRfP#`kcF?c<_u?RM$7gcQV_y0D)l(aWN?e*}@w))*>q-(4
zRh><j!AdCsorw(~fX%APKwcxLM7ta`(1<HD;}kiPs-|U9R}5?nuF6eI^gz+<9Imcn
zmr|05)LNG)-$`?JaT~xUGi$ARK(3D21JQ7X!su-2N^8x`a%eACH#3GSRpszdxX+wc
zo`>2QV-lDOe(<$cAk<pJI3aKj$qFqcMg%QkK*PJ`T>WdlB4m^MQuvC4WzP%M`63K%
zUK6Lec@W2OK+inL4l&2@eunz^gcp8m?L^VjWH|<#*<)LTA{G>R{E+_s^)2W4G^Wdv
zm))Kv%$qMqFY6S5s}4DG-yonkjAkI?vw~%&Ud_A}0yB7P%jtl8O%Wb2B;W=cRrPHl
zG~ZsLnYlr>$FlPPs*01)72k=j$TY+ZA|l6eWZscD4Nc~%!!K7Lq_qZvS}Q70)%W}T
z-g`H*F-GqlVa6C^44Gtq?l@-Fdl!-0?e?udBR`cB<{#p2BE3*P0A@bB+dCI~WB>pF
M07*qoM6N<$g3{9MjQ{`u

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_ice_pool.i8.png b/assets_hm_pack/objects/object_wiz/wizrobe_ice_pool.i8.png
new file mode 100644
index 0000000000000000000000000000000000000000..3d5a19341c603a5f0efee09cc226c4559c8c7afb
GIT binary patch
literal 7779
zcmW+*c|6nqAD4t!EG>!UYOyr4vREuv?huNQJA@n~ckVOfNZD#aCWH_<a;GJ<G#X!N
zj%I1eorGM!cR!EE?4Nx;pZDkedcB_4JJsCG;DCU*02de60V6|QOYp7r@59dx{+|&1
zp321~sbHk5eZ?~_D#FM|g0r!sD%i(@^c`JDH?*icaV_WAsmvxsh&>KNt~bnsb0bo?
zXNpoBzfkzipPY=CDL=nDa3QX~Y(hlZ>&u0K*Qxn(W^HflPF%c)OcOb|u$le%Xkg<m
z%V^{B*wpSZo>bYC$<3(6UwHbaWlj4Zaha!fRU$fA)8mQHDvWnt@@N~%-H+3Xg$Dlm
z)+eFrhk>vOI5~Ow+0}^7$-?~n`H)t}8db@x5$}ff_Ve0MAt52SP>L^;=zc;Z)ko!~
zSh6oOF*^*u5ZG*wK0>R5P(L@0FRleUj08JaSuq=1$I(;_(LDfeVDW%CUy4klAd_9}
z(N{5Ih(rQh-pEodpNL4cwY8N=gz)Yy;MfvNkltJ46lAI8Nn7H{G;yI6VJVFuwfyBU
zdy5B_<=C@l^(=-yeG)Nc+%t3w4JAR}tVBvf&8>zP*P58V3@mfLak((ptZbk5*KkP{
zT)r8Jc7i`%njcL{=Y((3>QE`vxF}}hJOM}WhETss2RStP=CN@kTK8j(C~~P+Ru4N!
z?PMCo>kHPD*%)5H!I?4YuPB^VR!*QQL$2SvnO^FZ?1D@SRLf83dR_P21|=$#a=H9U
ziKPY19S09-b)eOGl0%y96QRj2VFe^aDkr>*(N~9()L~%F4k)#Z`+*gu$;$Akhp6Ra
zO{ox~`|_b0We9t1)Aq4y=3^)~ZE4H~C1+$=#wZ{5?sGeHzwbv&^wit^H6zUVkd=){
ztoZoEL`T@NYl&r_$4iYudZTX|<qhivW5!1%uhBQJv=4LFiyVg2v$(!nj}nYI1G&Io
z<OSZ%=U%B7tq!JFixMoPc!`I`hg!nA>rnI+ABEfs>&jBEsXS+1>&oGuA*~eT&z1=v
z6?u92e6unXjWD{xq4&6+)`otW4=KMAF_kK>YvI!bN<Zj%MIm?0uc>;L?Vofy*#)Xo
zT3VXcE$i5X66BTs^i?qjG1KCRCZ$k|Dk_Fz{`>v=H;W}R!47HNFY{rz@~T1c!47AP
z*z0!Cber263qLrTyBiYzZ2_x4hcA-Q=eK_|TB-%(xo+4vISHpwqdQ};;tp+LwdTm*
zo7<jPH8Dt=qY~<9$`da#*0hHmU}Xhb?&D$7*VTw)LI!1wqZ#@dg_o?XEMON)KGk0D
z;g?Bv`MTe%?B&R;%Nm}Zq9daXeaI<{aU2PLyl3p-jjU&#A@g6HF;BeyUW)n4$dFJ)
zJ9VJ=-`rkoCz+LPNALdnb;gv@<vhS5VDtLTkuV6aBJIsikb}XCsaUb(!Qdzy{0v0-
z+_{sqGcr6X5Z(k9;m2~A50i*E`N$+wzqq`-+(hnpnk!25c%t)tp%f}-MMfi`>j`bz
zb-&E3*;<1-RC=#^_%8$%BPb|1?A>5jwXnE&{6Wm_=A^242ADZpYc%N)kBn&g{Nmz>
z_gPzFcmbHyV-Vi?5Q$n{Mi5rK!MD}2d<kFUWrrqR7fW`xHOe74CcD@W&z?IsIujJB
zA=ML*MtOYhmcGS<sw&0*@6usC?dS3$`!m^ap&nIq;tQ>>>|=MHUQtN;eMSr-p7HKf
zO`AxD{>=uvBJ=ens_=P9`p=)<?T#^jMsFxT`tbg}ajgv)(^{M7<9;<&RpIyo<B}-?
zjxy+3VtEw83)Ax=tH6aowRJ+U;$CE;S(zg3=W2vm8H2M@VtLYGgvugl6bkcjH~MZy
zYUmi^;H6$<PI%3Tx>?@8KJg-ht&+^T;p$46T%>X}G0&eq9WeK~w!6C<j37VHM9l8?
z?X`s{uuGs#ZhU;apEqGUdJ=PYbad1ld8Kj~3|`Gh9+{k`Uo0UZQBjdhbxHiXwH4W5
zmqeA0BbUyEwE8mt!<rJ^o0#*<VM{w6FH<RT#-PDKccW-4D=Wz^uk6u<^tBJlbj1BW
z*V<nD_K09VKeT9iEh_!PYmABPJ%U>POi)B%pe0PtZQDfdg2m8Fx<+ejE7KFZ72Qce
z*4m&7>B77T<Kqq~REx@C^P^^uakY(&VA}DLp*VOQYI8gKo7$@mD(i`toz?Iag>H<A
zG*k@2+xs`VQxhi8CE<X+T5AL0;l5*+$@XDJFEn$$&QFTHc<};sJgWh@UQrPUKa$?<
zS}XP|)tAYk7w-O>sO}?9L*5Nq(p<v(dAQdW#;-XzoDZ4%{OQxDjTH`wNEAqlFZH@w
zZGRfV20yL$l^Ahns+cm8T}(_(gImXg)Q+X<0_@M}d+KhRp?@68FP40epU2$YmZ(Ug
z^|^^;D$;&^`}Xb48}7D3%CqQBx|~R=4J!Fp-%4Z|L;K__0xQ0HRx&FEdIm1!!fVQa
z_cSo)`Gh4OpTDgF6F8`Yc4)!=;Tt;gHkX2wH+$@<lGo*IZe{gNR{9Z@N(FF83&g=S
zf`1M<V{mx<<42FQp(=U(y0Tp>ZFG)=Pzt$pHKP6H4Z5{LF4!kkRaLmqei_NEp7{{v
z&Yjho`+W%GyC|9=i|Eb@Oz4t+E}!Uj=F#j(O*-Y77uns`DRQ}cXlRI<B7C#q%Xn*O
zSy>tDIa>|)u~*f90!5-t2Ogc6UX3_F)oKWA9XC{mQ14JY$sTw~FnC~lwxcx*>BV7>
zO3N!0UQZ4U!601muF<QNPOK?~T!Eed3bGCb7<F$P*Ah{hUsw|VV-3_fCOG(PzS%8!
zN?p8px_<Gn_u<0=yYYMY`1ppsgZ=$4S-_|m^X~wEeVJ&IAoLx!UrSn=|BWYBAcb0o
z+WT`ovO`z42q_@*ZE0zMvy!A!l$4Y-K0dy&5pK%Ziq;h1lE~`uBJ1zdi<f}#t`}BR
zT)TFy**>#$CO0>?rsJ<bs)?0V86$Nv*kKX$4&jvz>Ob$Zg>=C6uC<@HH`fm9c{MR}
zjrZ-hv$A^3kLJ8d63olXGkk)lOTpoge_%{sX`>(wA+LFobmE|vNSG&?_ak+owxitE
zujw`pE}k5hRg1b-Wv!l{$(VV7NOgG_IuR}p6KEdyGs^L9_)>C_^lM}5+c&q$VKSLq
zaYX_27EHhbHaruw6}`)16)|Ss9zxM_+&6~GFURVqQJz(_w6>ly68QvBKr`wu7SsLb
zPY6OpdmmIU;P&m!FAX=tdgqx<M?^(?n~vNba=P8__;M6$dJ8MQjIXJvaJS7jlNU+l
zNzm?`%v!{SE<AP-<DU&u+y2_Mw~$`uMW%Buyuaq;#3!a=sw@T}ml|1I0e2r50o7~Q
z5YKpQRz_v<C+Xa2(JwxI_Ut~ckcF{xPu5CGPNY%3%r{b5xR@RM>nS#GZ=DI__s))n
zH;^l(UhnJf27X_S0Bth%fQ>7pb5<iRmRKT027}wLC=6ofS0nZuP|FwMu4l}cn3zbn
z?!7$IQecP>OFo%v4Ca7QKj=9$69lLiz#d=*J&Tl-6quevM`ZZjrhom+B@-|d-f=F1
z*?3rQW;Fuf8^1UMdsq*UpI_58XrduvDzMqZ!z0K60POXwwy@<XP~JnSJWG1TgI~iZ
z8s{V0KdwYpSp#^dAc2Mf+Rv=)-qGc%?P#e?1TC=0{0Z{?;#vyT1>wiQS|smsEMe|j
zkNqLBS$_Wh#c4;A52k}k{Gkj!qq3GZw;@zr*@KZ>yiYAp&J|l%8s+fJl~j0FSzlPy
zE+`+FEi&hatKBoiHy*|~0~|z&D$=;K&E)QDJ&%`$kDqd#>zv<s$3-qp@0LY|R1Tjp
zz0cWbZa#<igd^BiNSHG<>}c|!kIFu6q-Z*XI=8rZ3x2iAdY`r-LS!aLeE+vjl8YF*
zbhI(!$(!ade8KX<vY=ns*3@SVaf>g_I0wNWkD|TOEu^Q^;NS1flH9#ce1Q^F*xN}$
zc;Vn_6#k{K`q$?hZHRj9Qc4aZSv%(@PK5|7cLeV>5Z)W-X)C&<;Mf_!e)sk*PftL<
zhcc8O4u?Nw%=GxhLhD|>WG{z-7Bl9Pd0U5~V(h9!=_}cqJG+AA_9Lqytr;yrSnqqU
z0uEoV>~Mb_Q{&z6cl1UfKtmv+Ls~7WEYzL|0)eyqdxjBqtJbD1bkPya&+R`bT3t_;
zlqL@M8I1Vkq`_bb@~6D!M&CM1DtevOaC78cO!UqM=Xzi7bYO6+gHG?EOZer7O4BRh
zJbNA8b~zn@rQf}KS9Pr^_K}_i5b?22>gwvCCG+|LR_hmoDje237rJ0yIUG;vs+$8p
z1WMq`7x6Gr88@uBEist&W}iLH8S`w|8(avWBnJ`RKGEFVtY6Gp4znTVKYDbK$K}Qi
z16cR+f<y+d5112!gw0(@*h;_Z_1e!PPBG`LZJ`YC_pAn}V0YVC(PyD((na75n*0mZ
zLqB5sPn&o)F)7F?Kkc8kM9}Krz%0`rpSxUT{c_aj<>=gMMER8p#>@aVpUxqXNT+h&
z&oIiQ&PP0*Z9%5VUn+QRT?uZV2%VGQi@|1`>D-?8pN!s|w@35APtodpnZ<+8CKuUU
zZnlyc`pGU&LhOi1(rjF{WjW{)9~HpTkIm$-Xn&P5RAM9T931k=<d(o`V>F4$WLA#M
zg1G|Jn-mieaB!r6HXT+_V_lhpP*hZ$UfBRLBS2s<c)M11$rLg-KR@0Uen{fWmoEam
z3Ei#%IJk}owIL9G6-_#q3Gjx3<lbeSXA#x`q+Zh4aKpjTB${IlsdUCf?!H->yqp}5
zwzI7YiDspc3mQlu>HYMXyF3S1!tnfMVR*3kv!)kzxT2eHaXzllH8sT`JlZdOTSt9b
z#uo@Uyh<#vZJ@HE=|DX8_4OqrBskV^2sji?AW0|RjPET_Wq{FR)BT!G8CkZD^OgWG
z@AtSB73GlgbkOq~0hgU*%E06CZnoA|Rt&5nO$~?Z<*XpjNUx?*VCmgQ9K&St`W4c0
zOym|P+SOH6`I7VdJqn}$&IJ5?iu4W)6xmERN`zX&x*t7y)Ec_@2|Er}G+ymR&Taxy
za&FECFF83j))uu1#Nc6`BF7qu<iYunV24X`_hEY4m3jI3<4h*N+$X4fvl|{B?`Bt9
z?9qmWujtX8{$!8NNxlZnTi-u?|Ly^_JwgOjCo%hwycrIjxv{Yk*u0e>wZ+9uTDuTe
zJu=H8h_y;Vcu_JuW;uokjlVyRlW6-o_GX+EN#&aQ8`%NY<=13OJPX<TP}t!1>QAeh
z5y2k{w7@FsLwfhvuXKvOE{8o4uSHcN1>PpH2)%XB88ead4I>chtDqSXnQ!Bvljnnf
zUXi``8MMIY=*B{5r#kvW8s&3i#<4>>Up1j#JlaqA61q~PqLKXE^<0_kcLJ}x$Xw@u
zI>FpcP2GRT$+?<Euwm2#ghL9A`ZNL>o(;Bu#hG5QI>5tCP~f4IdO_!_?VGs=_dhWm
zSp_nuKs{6_FM4B|1T2$^z}W+>obYIj*jE)~nhsXEb8~zVFG&ZIyxs9qi6xa~ZUG~g
z7QxmdHL`jR2_$jN*i~60M9Qrzf2bowQiq4FsF<ItYSQW&X8g7`HV+F6Q_K#fcjGdt
z-39n?k&~Y|EB*cbEM4OgONCsDSBqnfl9Cep>Afz5Q9Q3j%}9^h=`fKx*%B|Zix}oK
ziI$;X96A|w)#5=w-4UKWM(x&>z^DLG4GPn~7^MUgh;z|aPIMELHRcZo@|8P|i&h8L
z_nbGOD<dO=MZhU5gBduP#_g&eF!gp9ReD`>kJ#P<b-M#QN*N+L$y6CGo#MgRJ6yR*
z&>XWei@P$*eRXhwq=BfDqUjhglVAZ#om)9BV#zK<A`w8FLT*|Q8$b>lm(_FMxTJ0r
z^q*7)kP{flp$vVOZ@Xh^AA{P)^^5mJ$4kGPZS+<4@7R!gC8*K2vbD_a85tST)|Gb3
zEb-M<=?MVJCM4v)+0`jju*2l&Xlf5TUfPq~SYPi(_CSbuspJ`2|8P=7qrJ(=*-*XO
zVefqj+OIWq?zo7tCwp{FpgayEp`oFygLwLJeuLtB6%{#%D8UaIwE;!upC=~)LEpZ8
zo1ojo?8n^gVaMT<>t8f940~cxG@TRiB(_YgjgN;%>EvR<9pJIFq_r49Rn`e2LKTTO
zd*T(69v+>1J$TU^wy#H14(w;Fj??umzhAy}+?nZ9KMA;qcF6~VX_SErI2=x^K~gAX
zBXWYX0?LyR+5Y>}Met<FEIvh*SAoTYS`r_zra<|wMhvbKaPTb2^Wv@d5k>$xBKNPK
zE8S!8QX%OlA!v5D-%j!xFxy6=M}fr(RXaB1Z%gbs!NB$d<Z;FT@0)F+NUIq3hUo>s
z`A)P?F5V=+!+Zc@;q6;p@R<BP4WO}vQug{@YGOta2(e>n2NH<pKpy*;7MXKhlahLf
zqGj`D>L9JG25$mI)9&bxgWD0^ZLKv5Q~s_EUB0x8pIlrM78br-4okcn-6@<Xm_!5h
zY17>PeYw{W+}ivEiI!`8LZ|ogrStoa194w;B=ZuK2&M%vWxen_m9bX=7Z~-rvT@)2
z5F+>7H$K;12O|m7`~C6VATM`EXQ%KQE@bW@P=|RD7%>7I7;)eqk+3t6;>pDe4>TeQ
zhrL&6N}WN?_Km)45$Cl~7)$70Y#6`Hlji_{#<=Q}gPZLEZTdAy?5zA@`hzTmO9>Y8
z%{ZItSd%g<E)hF#oHH~Za@E>;z{?8eKG&~x$n#NnyW{T%?<(!ld*vKkf@a#+CK3)A
z=kRz}S11g?dII1*8SPxx44loAbX;!Vmhjj6C6j0l%QY@J^XRUNSm%1T(#{q~Q*-0n
zeLpaMAxdbpM#S%D<9>8H{gBSmN^O#*DI=)C&RxvI+xvZ^FDP3O>?TGGu-AbUDqUmK
z2M1&VwaYoyauw`y+=1J8$xQYe7KT>G_S7H;KLm{4ZjU~mR9*o9<zAVJs_I$O+p|?o
zo@9MyJZD2!c2EB~xKNgUF}o-0#!K4|N^pl#ukS12K^0&%DAB!x=kWNuy0XbGb8~Zv
zIx=O9jjWh0HrPg<jHg}^(a{~l-e8U>hMSQc)6?$H5}?()+lw*uj~_F`MPw3<<nDvE
zv(aPJdpAVv?rhJ`&+8X2zmxF)ntrWH^pz3<YXQ55j_-2Diub#nxh@gpkRmLWe6P<9
zrWfZoJiGcYG04x)2S&&{AmDVa@%+MqpP!#&XY{e*CE$T|yM&T-lseX3(WDE>K>b%)
z3noe&`&^v6xwMqM@2Wj836uTPfr-$k=~~hQv#WsDq;}U0i0)3&8}3*mMcUuNtmp@Q
zZbHJsQnzI8%*}@Y*bp@>3T%ed277sx+f_}p1kZlVSAQ)xupG0JHwg?Wuw9;5Yinyv
z!|Rnuwfu?6$(|9J(73Dc?G_-=+y4Fp&~{;DH4NX;*vPBzFZRx9=NAbG$PwUiop%2o
zaU2^P<5`NFDIo#TAOyDWpw2th0UwpMwKd>~vLoZlf3CLlutz_Cer-Adc)3r$@Bv~5
zD2UxrdNhEvh4I#ufRy3k;Yf|nSFawLmECSHKo}vvZA3=n;N;SchizADM#}S4{X14Z
zs!M0!cK$toBXVc9rt{-;Ab3N3sy2UWw<}EV{My*9mg?R09?j?vtHMG;U&nq7N+icc
z9j}kA2kyLh5b6Bsnt%HV+ArX_Z#9pBJ7gM>fX9+^P0VHy?%eloVuJW)I#93J;`c(W
z4WZYrib&_M-gdj*E1j{fOsW&U3sO{!Z?pZ*Iy=iLjFkj9%Ca1m)sx;mHBBP{%m$`E
zLZ#V$VSSkmp*nk9cXgfm-k*nz6vNp#I+~SOR#bpuM@2+Lczb(CMFE;Rs8j9G`k!|L
zX1!=OqKWC?=otO`$KdzxrBoKzHE*oAn3ZfIrl#%JdjqK`kfyvoOeB%^Je6@CZ9JBt
z516<oAQ1}v186*rvM|v;OTek9sCbe)ZgGUNooYsaw_39MeF!w9N?sBngS-TCBorEr
zR#F0SO<;4|ix&jY#X#JH{r6D;R}a)85}h5{peO@>_+|3V46KG-YhSgrq$!@RsL;`*
znh4c*0Kx>~_F+;Bh=^qJ;)`D!iKHf$dg1A_EodVVH;Q#7$n71_B#W&3eQv;TV&~tc
z9*X@>bBiSm0Mu$VL0ALI!vbBX)V9QJcdf*7ziEqnL6|IwrhTL>dRtBAsb%>cidcp|
zFw!+6r$p01%uk}71|pknQGKHz99Rb*UtgET)U6wG`|sPn-UkAw#UM4{RHTGbTB_GJ
zqu{w-WN@uL`a=E@o-S;^PSL=8$i<QzX@1Epc`=BN%Dz_->q|0E(tx1{`A#Po@tK*K
z_V#uVQUJj+@c@}NJ39-Q3FIPpdS2;%*KrVJDgNl|GrEg`>WGSpHa0aiH8#dN5^gT>
z>GZyTFQ8}fWF9zV=fmmg>7J)qL|<k>VWC0gckr5<o13AF6QEqZRs2Ege|w~2Ap1Vm
zJqL@LT?MxSX>0ivH9X$u-?u>cb1+8fdWCd8$Lb1@bzX(-BfcQIyBG=?K@&t#G*=tm
z)}9zu6(GB~zW@sb?>Q@ez?OL0{EVuq0skIlqI<Z9hul5Gu=WWsq-&kK#~$@G&fB1f
zeQtm~@RDmAk*{-|Rf^0#eSPPLuR4L+o66l!%x-8ntHUp62hF~7!u;SBUf%p0ulBs*
zDnI5UE_f)rw<x-ElD!N}uYv4AX}9{zah4!mK^P@;X~DW9HI(>ufDG1^1!)kN27#oI
z)&okR&Gvv4?5Z4rt^BX*8ekSX5S{_&2CT=o`<FC8XzlM$pIt>OD!L5#+kf3JgQA@Q
zI^#ns$P8XHwEEQZg=BcnrwblIFX1&cHM3;6oP$81j}#Dp2r^qsJ_Rl+<_81h$-J^6
zIeUiev3tIAI2PE!^8?uVxzU$h&M)lIi*s{Y*HNPBpqSB}QqNxudrt?R3#uDjcbQsV
z$Ju}*6og1u{uPD8Z+SoUPEE<u>Tcb-_44J*!pL9y;lM8{DJohi9QK?A2nf@AQtgbf
zsTlz<QYR{dfbwg(lOI1$eE+8Ixi7QIn#Nh_T8?Nh0P^XntwJt1no`LFX3`BKrmNI^
zML~Ny<z*t3<qy$1xCAP2qstk}^=>Ap`uTIM8wF(YU#is3i;j-yjbGD1&o4%D)Nz|;
zWqV^z!2~?BO)p)FSslI#y>|NjkyKrT(XY*I6pb4KGNmqO0x%EKy?#yUqm#f+8Y0I0
zLL2OWf=|_zePrVLvC^{q$pteDnCtgE2{C0<{ZWuZatkRR1g{B<pnuFJQ+=@w91I{~
zUzki~(_6m22X6To)(o^^N``z?P8*n5z~rQVZA6w>4q^`kO*HxfdNWxZYreHG)(m0=
zw*$Qd0zsPg3#1ZuA3f`}H^qcAjB~yPHa{#YjE=yHXSALHS>8%_sxEhY6kd`Oz5|Az
z&}`pQec`yRgTw0PHi#MrJ!8>DmwBSDLU|AebohT;XCHt%=~-m+98I2C+swWl8WIAM
z<*h$m34CQ{`9Qd}I|{Gt1>MD*7vkN^r7SJ`u<LnsH6?D}hQ#t32sVsz+{kjYI?l)Z
z<NqSpWy3RY$R1#+xOl<~=pLZHFS}hWi0+Sr6mk_r)3b-VQcvTadfCa{2S;0A_Xfc^
z6)u%Aqg(oSYlXfz*_m}(<n9u8yUTkrR5p!5o2EqnWfXe695qC6FPZXp^~qRp#gti|
z1W`Y28d#?I{}LE8SFD0VLPDaVwm&>luC@6vAEFty6kGZaV~QODp7LNzDT6;27OE>M
z%s+#OHqjWIhw$?ZOmv$&)QlXTT&QM)dH5R%4%!SD^>mIP5BI-R{~~`}{hhYd8Ru^q
zVff6qfdm5Ao};(S20ed+<mRC+NV9++KIwL@b8>fe#EFl4&)3_Ad(7bkc`6H<Z*n(S
zBW#K5`Y$x8a@2?WEcZUjXxizMi2aa`G>TYO4*<;SS-+;u-90Zf%!XT{Fz3PHF_)2^
LnQpa?bNv4R?zk)6

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_ice_pool_shine_mask.i4.png b/assets_hm_pack/objects/object_wiz/wizrobe_ice_pool_shine_mask.i4.png
new file mode 100644
index 0000000000000000000000000000000000000000..476da04930601586e422dfd5ba77c89d18cec4eb
GIT binary patch
literal 276
zcmV+v0qg#WP)<h;3K|Lk000e1NJLTq000mG000mO0ssI2kdbIM0002nNkl<ZD3O(t
zEfNDE429EeMI;i*5po2Mut(Tq?QvEjBUeTuk;sZSr78WH=~INfF9E`Z9tt6d$hK|k
zx?)FFkK-^iRaI4NF7zs-v2Lxk*38VzhT#by2a_)`h0By1!XcqwfDcnjB9c<_%nKkQ
zzG?^o?#}?y(A4KY;Mb*r`SAVSmdX15rhYO+bRDZ&Ym5;XGxy$0DWw!ut+jpti0C{|
zW`>)YiD=(<Uw#JACxj4Vj4`5c@7;H}O@JRo&N-!oTa7-q$qnV4>5Jw$h{*WfDD3|>
a5#0f8a*>bL<3id10000<MNUMnLSTZH@pc0M

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_ice_smoke.i4.png b/assets_hm_pack/objects/object_wiz/wizrobe_ice_smoke.i4.png
new file mode 100644
index 0000000000000000000000000000000000000000..58ec737b590c208436c7ccfd2f2b48a5465f9410
GIT binary patch
literal 1454
zcmV;f1yTBmP)<h;3K|Lk000e1NJLTq001BW002M;0ssI2^z7pK000GbNkl<ZScPp^
zt(x303{-Olfr5dC3j+@Z9$a|v;627YMqwY}U}0ck;6lSd!N7uPrn7Pk_Ve1-kEPL%
z^TXZE%*<-7?q1K~?(QBDt+j|Svu)crH?!6nPj1@=+IgPw>+ZjP{o1yz;Iv<jh*;N^
z9Mj2&z*a=mTCv4NjEEQ@jg+eXwr#ip6z8A}icH*Vt&m!4Eqa17+#O756a9s8bOn=i
zInb8mfJ+OI1y{ChQ#+_(c@l>QH4cB3*t(IdoH!(HUflh5yVY8!X~OR~jySaM`*994
z!}>Um;Dx_nJxvpTA)~eScswGaxI6qz_tI$h`yDJ=YdzQ$FlrxeVe;ea>k9%PqqoMk
zZGaOrAhDiF&;sx<|FNzsW<7V(lc2Sx?&a-qMFt(tEX!hMgX(hWNoq&rDV!i!b;lOX
zUMRem0b*sx3B!}fwl0#fSm+JvlJ222G&kL*=2d6FdG1~`EQuw`Cw>(B40V^-)GKmc
zYc0A5$#y1_G^iSn(G+AtpW(N)R(hlNFpuY~ne2XPQkvwy4^-26o@pGiZml8RYs9GA
zKn@^L{GghqLkT>334~q`ivAKq!bv)+6G9W=*4H8(lwF`s+S3U^%%DZAvOtm$hE?0P
z)(WiwnOfjf{dHX#ceGE^8X}<$315(SBjPv?cYk|(gHlM*5%G9D_H!in+-|pdo|6oB
z*9>3gd8UZ~4~+>HWD~I3nZwa%q%;GO)T01@+>5guf`tl5nzq)~bzPRF&tvcn1iZYz
zzoUw|`|IoLE(6AaxgY~IE6!xcw9F#7ZQFPbtPI+3rHH%qWJuQXv$Y{+Se<yjkRZ;4
zs*GqW9<Z|vK&QlxFs0oJPH@cg3@;^JG=NPaSyf?{UDp+VYppNt4vZhi0U$=iG)=eL
zZQpmSPt)}N{{H&<3P1zX`@RE_%d*^VH^?}S<MDVr9uK%}-}jes9PuaRkXkEFN5rx$
zpP!%eJVPof$#EQX=G)sFt@P*59{_J0$JW}Qg(*3JvArw{D;JAxDg$aIXbEQ&btWem
zXpP(*{ee1zdN5qlI)O9L@67d7#LVvZJ7kbpwT2$Ztcg3d888EQcyZv*x<(-h;1<zE
z%TU<BY^5&)m#Ukp3cG?N08nJoB}q|_X(3FLG(rk3{(gUde}8|oUdEaKOJb*eYT{1S
zGy!uk^pG*RK4^-zGs&1_M5=t5R+CredA{H8+F6xLb0@o}U3DYHo8X&GiM#(7pqcKH
zJK&H&rQA)LUkZDf=NT1_4;WJFoa5)upTB?qW>IwaX_~M_K2REldUA3yYd;dq30Wx4
z7MM2(yfRbt`uT=c$g6BRpKl)G(w^TF1}9U7%OhD`qTD||KH$R?3jUnRxN`j|A<pWS
zx)L=@M6kbOxY^kNQr^%DAmmdyOrFpTs_HWc{@;MCm6)$Sy@Xbzl<zeD)gL7yv{kaR
za6<rkP*pJTWkC7)IR{%XRNx_wr6ylLh($bd@gh(6u;;Ks2iDGaF1w*&Sr%SgTRC0n
zLszZj(j#eMz_tF><o5hUNExYs#M%Vkc9jtGBk&S4mp9PAbc{v-!CF+iM9kBdH(+x|
z<rv{w-Ur5{KR-@YMnY#Yf@X+%4g#-e)bXf2hn}5qywrdf^)pSm<d|aJPy!z9k)s0C
z=l=Xzs6>~6FHaLuiLW*yil{6A^xoBHj>~{hj+*UxptV-;&Pp_ws@Zeq(KgUduqk(_
z{!c&>PQHEfqR#N{0}(SLxUcJ4l-{31hL=$L5L78Sn)HU?4%MH&{Hi35KEidKyzH#C
z8X0Cba8KzqUg(2_)aXW&H#+Ze@jfsKpXjnsl0jSPozwt-0jh4M6X2ZFX#fBK07*qo
IM6N<$g6^8g82|tP

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_ice_smoke_mask.i4.png b/assets_hm_pack/objects/object_wiz/wizrobe_ice_smoke_mask.i4.png
new file mode 100644
index 0000000000000000000000000000000000000000..0434989c4a7ce7dcfef8a92df29b6efe47799715
GIT binary patch
literal 620
zcmV-y0+aoTP)<h;3K|Lk000e1NJLTq001BW001Be0ssI2{21+{0006rNkl<ZNQuo>
zEt=~v4D{<37#bQH2Kp#HvX2m0C}=1sxM1E+RmE+?b_Mdqj($e+NKQ(BM@lKb5b|Tx
ze@in}T{^-i5#c5@8Aeru?e*wdRq2uTtu=h*lipiv{5r-6aIazAd#AC8sA}&W_C6&1
zG5|mI-bDl{E&>2r@15S^7Z{-<B3z0H!owEJcO?qq4}(?aVGz6D5s`50F#ru(Yd%wC
z<13R~^$8`wj{#T*f2!$+8=jN_ChCK#hSV1&f-eT6jW2~)hA==#;w#jr*2?$Zd#x3l
zt+kwU&KUvBjB0aExURLDnVCTok*?l*KzCe*9wf)uKx7vS^~k`?wrvCCQp&b%9xNOI
z9rSChgj{RQIYV>K35A^Vob!=EYmKD#*n!I*ug~N7Qc6Jvj}no8q@ABOoDJ#F4So=X
zrXi!QO#gPfVNRr!LPL^KLD=?Wvu_>9m3ry9OJDKwDC#8i=KlbkS)tq?CAeNT^W~M^
z86gzkU&Y-S35|xnNQb69pGQgw9jdBx&N(LtZDwEThv^6dYSWCYe<fz7sxagdPk6Wx
z1t*EROYuwwAop<!L1KX92EZBbAIWy%o1cjO^xg*u$kKBUrZBD%fEmE}4RKX<j6pz4
zH0%37MD~5>`!WX5K+R8=p!RehV4zaT&n!|IJ7#vj-^UpHzGI+b6JN2p&VY#2U4EfI
zumkT$$^|;D|Li=4I8*)oKE~ibmha(of)@|fqxc`BzarnyBV}mQ=loRw0000<MNUMn
GLSTaPa2&b-

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_magic_projectile.i4.png b/assets_hm_pack/objects/object_wiz/wizrobe_magic_projectile.i4.png
new file mode 100644
index 0000000000000000000000000000000000000000..0d5bd17d0bd56e656f4099a4f474eb49012315af
GIT binary patch
literal 396
zcmV;70dxL|P)<h;3K|Lk000e1NJLTq001BW001Be0ssI2{21+{0003~Nkl<ZNQvE+
zF>(VT3`LdL1tmw|{->hcQYB>y&1kg$3$YVdi3(W;{GWti*CK!2zK$z;@5QXD{u02t
zaRhV=Oah2PfU&PT^%R2uS1bY+Ef_ZdXtC$Sci!#IMY&=PU|#RteF6Zv7#!6L#yhG*
z+{s+XyazB9?Y2cMJ;pFE)MQnibH?1c6a*9usG#>g=Nw~1M!Ii#lc51zfryy8X9{@d
zeWzHtH$WaVDV^N{SYlV@(Gmcp@S!2#6ZN#LZ4dNr=`0Vj&KB^*7<0I2u)=SX9a9nU
z^QUCHBwqHh)@rS-wM?b8)>@0>KC7y0Ed#6SbzQcMdHGG|GVL~T1qMhrD&Hc0(gFsO
zfK1c$v4WIggK++o-Y~mnBwG|E00UEu;oojw`s_X6lg88vu+wEg5gY)ix`a~{D@fxr
qK<IH)ycdgOdj9Lkq$j%n$bJCU)ral8<j3Uz0000<MNUMnLSTZm1F#nW

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_small_flame.i4.png b/assets_hm_pack/objects/object_wiz/wizrobe_small_flame.i4.png
new file mode 100644
index 0000000000000000000000000000000000000000..ada03430533893d3945080f0fa66fb98e2688304
GIT binary patch
literal 536
zcmV+z0_XjSP)<h;3K|Lk000e1NJLTq001BW001Be0ssI2{21+{0005sNkl<ZNQuo>
ztCGVo4D>YxhJu0m|F1DDG&D3cJh0P^A}f#H+}xZ%##Pi^c_rCN>0g<MeEOHKpF#KD
zf0KadSXlH+rkG%sA{3|heo62=M|Zi42oUc}6cB{CMCa4SpYR0|$=e)(!=gUtds@QW
zbIv(uqKgPTV+=eIlTxCGerK^nM`l$@$CbYzpg!juz;f!%LV1bu+pxC9u;N$^xxiZ|
z)b$Q*nq187bX4RWfomS?w697jHVF}_wZb#gJZB(PouM6KN=a2~tqkkEtLj{atp@A5
zvLi)g-5Z>g9z|k2+7zDFnk~b^q)4EuL`?gcfU)@8*1E3A6dATjWc76mNa4f{Ti{5j
z1sNfIB#ZPZl--AYYj-xr0AkL$wFbH1@jFme6d8%je&XCurip617Qj9pj3XjwTx-r`
z))4R3c*bpNBTjHbbDjE_y?5@Z&_txx%F`Q*O(G_X#`q|41fvr14#;e2?i0Ar0NO_2
zIBs6Nu1J^zi=H^in01EQQRFcY8qNt38Dq58N-3?ifPncT4)c=C;U04I-Z5gWwOZ@z
z^#Z!h&tLlJQOp|W&UzThlGa*FDNxwy6A&b$EYB8qv{{b6w=`Am?9)-qo#jT_V$E6q
aseJ=$BD$80h6+aj0000<MNUMnLSTaK-v2EC

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_wiz/wizrobe_small_flame_mask.i4.png b/assets_hm_pack/objects/object_wiz/wizrobe_small_flame_mask.i4.png
new file mode 100644
index 0000000000000000000000000000000000000000..c59d9839b73b86b93e1b808d1cffb53235e77c1e
GIT binary patch
literal 839
zcmV-N1GxN&P)<h;3K|Lk000e1NJLTq001BW001Be0ssI2{21+{0009HNkl<ZNQre;
zt(qhu49v~6Kt>{wEqR2NEB6scuG~jJwnVl>A|sI}>ZZPIdM~2CnE;i)BIM6;9A+jW
zs;a8RiJ6(%7-NiqJ!1?J!EgMnwaQycDL^=mLseg|SMU9SHKNyAkK^#i^erAe{DpW&
zv8t+@s#05Pt+kd?`~fd;8DYT*0MU1#nOSQM$2UNm8AJOOT0~%;JH1sV0LGA2Ky5^)
z{k!{g0(vup21~V8CPY<x@4a{IDWz;!xMvgcYaHPSQ;O7s5%l%J8j473jin0__&9u^
zKu7j`x`?oO@67D```c3pxBw0O0j~FtarfS-eAZf1N+Pn>5|Q&fMI@yJrK+Zsuyu@)
zbB2D-iTwadDVf=v6Z`=JzR!K%feuh+W32@UucTqF(gSF~;I&rH8BuQHE(nXp0x;eD
z!OejSq$zSp{exO2-7kAfjKi}aY!i3$AsboY=@BUFp##l){n@+x@rT^x-d?=mqI%z7
zuNUd><zEd#PJN{E^IFM`vh=$59>~oNPb`2NW(G3koK-dFd|lVa$A>?eQp!1lDg**e
z@m*_yuYh{|uZ;Mzsf9Mh%?u0KM=$bO`f-y30nE&E%-aa)K3$|KmbP#P@4>woUQlNb
z9a8VjZ@!cGA9q{|T8;N0SYiTH^%1y#zhXhg7|h%Ko_ia3U^Z`HjDbh3wTAP7eBwHR
z5B<J}uv>7Ul!E6Jc?i!OT?;|q1LdhFh=@j*Qo63o-cNSU+04*xDaaw3Whv!6&*a26
zU{zgfJwHD`fex8-p6AJK45s=Z(AepFN@>ois{6k4k;pmYstQ^~=up1vA!A`G@uB#(
zQ)}(L1Bz+f^k@4Hg(5`g>Va(bo|G`1@QH4%{b{XX#`Ea3FCrY4yxxxvbeWX%+}p+&
zK<6c-<G+q#AQ;o7Zr=L!?Rui^$@|d<6H-e1zUQ24t<cXoQAW@V+prYa#m0PH*VotA
z#$_63Nqs_?3STfxk{IRW-FopIV_?dP%?{`sfqmr(%|Q`*Fb9nqeUQ$X*<T5Hg`W3k
R5GViu002ovPDHLkV1i2(n~neg

literal 0
HcmV?d00001

diff --git a/assets_hm_pack/objects/object_zol/object_zol.c b/assets_hm_pack/objects/object_zol/object_zol.c
new file mode 100644
index 000000000..6ec95db8b
--- /dev/null
+++ b/assets_hm_pack/objects/object_zol/object_zol.c
@@ -0,0 +1,263 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+#include "object_zol.h"
+
+u64 gZolNormal1Tex[] = {
+	0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 
+	0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 0x0001000100010001, 
+	0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 
+	0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 
+	0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 0x0843084308430843, 
+	0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 
+	0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 
+	0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 
+	0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 
+	0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 
+	0x294b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 
+	0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d318d, 
+	0x39cf39cf39cf31cf, 0x31cf31cd31cd31cd, 0x31cd39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cd39cd, 0x39cf39cf39cf39cf, 0x39cf39cf39cf31cf, 0x318f318f318f398d, 
+	0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 
+	0x4211421142114211, 0x4211421142114211, 0x4211421142114211, 0x4211421142114211, 0x4211421142114211, 0x4211421142114211, 0x4211421142114211, 0x4211421142114211, 
+	0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 
+	0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 
+	0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 
+	0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 
+	0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 
+	0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 
+	0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 
+	0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 0x6319631963196319, 
+	0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 
+	0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 0x5ad75ad75ad75ad7, 
+	0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 0x5295529552955295, 
+	0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a534a53, 0x4a534a534a514a51, 0x4211421142114211, 0x4211421142114211, 0x4211421142114211, 
+	0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 0x39cf39cf39cf39cf, 
+	0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d318d, 0x318d318d318d314b, 0x314b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 0x294b294b294b294b, 
+	0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 0x2109210921092109, 
+	0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 0x18c718c718c718c7, 
+	0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 0x1085108510851085, 
+	
+};
+
+u64 gZolNormal2Tex[] = {
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000111111, 0x1111111111110000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000111111111, 0x1111111111111100, 0x0000000000000000, 0x0000000000000000, 0x0000011111112222, 0x2222222221111110, 0x0000000000000000, 
+	0x0000000000000000, 0x0001111122222222, 0x2222222222221111, 0x0000000000000000, 0x0000000000000000, 0x0111112222222233, 0x3323333333322211, 0x1100000000000000, 
+	0x0000000000000001, 0x1111222222233333, 0x3333333333333222, 0x1111100000000000, 0x0000000000000011, 0x1112222233333334, 0x4444444443333332, 0x2221110000000000, 
+	0x0000000000000111, 0x1222223333334444, 0x4444444444444333, 0x3322211000000000, 0x0000000000001111, 0x2222233333444444, 0x4555555554444444, 0x4433221100000000, 
+	0x0000000000011112, 0x2223333344444555, 0x5555555555555555, 0x5443332211000000, 0x0000000000011122, 0x2223334444455555, 0x5666666665555555, 0x5544443321100000, 
+	0x0000000000111222, 0x2233344445555566, 0x6667777766666655, 0x5554444443211000, 0x0000000001111222, 0x2333444455566677, 0x7788888887776655, 0x5445566655321000, 
+	0x0000000011111222, 0x3334444555667788, 0x8888888888877665, 0x4445577776532100, 0x0000000011112223, 0x3344445566678888, 0x9999998888888765, 0x4445678888643100, 
+	0x0000000111122223, 0x334445566788899a, 0xaaaaaaaaaa998875, 0x4444578898764200, 0x0000000111122233, 0x344455678889aaab, 0xbbbaaaaaaaa99886, 0x5433578999875210, 
+	0x0000001111222333, 0x4455667889abbbbb, 0xaa99888888999986, 0x54334688aa986310, 0x0000001112222334, 0x45667888aabbbcb9, 0x8876555455567775, 0x433445689ab97420, 
+	0x0000001112223344, 0x5678899aabcba886, 0x5433222222223344, 0x334565478bba8510, 0x0000011122233456, 0x7889aaaabba87543, 0x2211111110111112, 0x2236886579ba8510, 
+	0x0000011122334568, 0x89abbbbaa9854221, 0x1000000000000001, 0x11259a8647ab8410, 0x0000011222334678, 0xabccdcbb97532110, 0x0000000000000000, 0x0113ada865887410, 
+	0x0000011223345689, 0xbcddddca85311000, 0x0000000000000000, 0x00024ad975575310, 0x000001122334578a, 0xcdddedc863100000, 0x0000000000000000, 0x000014ba86554210, 
+	0x000011122334579b, 0xcddedca842000000, 0x0000000000000000, 0x0000025a97532110, 0x000011222334689b, 0xcdeedb9630000000, 0x0000000000000000, 0x0000013877532110, 
+	0x00001122334578ac, 0xddedb98520000000, 0x0000000000000000, 0x0000001356531100, 0x00001122334578bc, 0xddba875310000000, 0x0000000000000000, 0x0000000134421100, 
+	0x00001123345689bc, 0xcb98643210000000, 0x0000000000000000, 0x0000000123321100, 0x00001123345689bb, 0xa875321100000000, 0x0000000000000000, 0x0000000012211000, 
+	0x0000112334578aba, 0x9743210000000000, 0x0000000000000000, 0x0000000012211000, 0x0000112334578aaa, 0x8531100000000000, 0x0000000000000000, 0x1100000011111000, 
+	0x00001122345789a8, 0x6310000000000000, 0x0000000000000112, 0x2211000001111000, 0x0000112234578998, 0x4200000000000000, 0x0000000000001235, 0x6542100001111000, 
+	0x0000112234578987, 0x4100000000000000, 0x0000000000011368, 0x9974200001111000, 0x0000012234578886, 0x3100000000000000, 0x000000000001258b, 0xee96200001111000, 
+	0x0000011233468886, 0x3100000000000000, 0x000000000001269e, 0xeee7310001111000, 0x0000011233468886, 0x3100000000000000, 0x000000000001259e, 0xeee7310000110000, 
+	0x0000011223468885, 0x2100000000000000, 0x000000000001248c, 0xee85200000000000, 0x0000001223468875, 0x2100000000000000, 0x0000000000001357, 0x8863100000000000, 
+	0x0000001123467875, 0x2100000000000000, 0x0000000000122234, 0x5531000000000000, 0x0000001123457875, 0x2100000000000000, 0x0000000012344555, 0x4420000000000000, 
+	0x0000000123456775, 0x3100000000000000, 0x0000000234667776, 0x5431000000000000, 0x0000000112346776, 0x3200000000000000, 0x0000001357888888, 0x7642100000000000, 
+	0x0000000011235676, 0x4210000000000000, 0x0000012578899a99, 0x8753200000000000, 0x0000000001234566, 0x5310000000000000, 0x00000246899bccb9, 0x8864210000000000, 
+	0x0000000001123566, 0x5311000000000000, 0x0000024789bddddb, 0x9885310000000000, 0x0000000000113456, 0x5420000000000000, 0x000013588bdeeeed, 0xb885310000000000, 
+	0x0000000000012356, 0x6531000000000000, 0x000013589bdeeeed, 0xb985310000000000, 0x0000000000011245, 0x6652100000000000, 0x000013589bdeeeed, 0xb875310000000000, 
+	0x0000000000001234, 0x5654210000000000, 0x000013578bdeeedc, 0xa864210000000000, 0x0000000000000123, 0x4555421000000000, 0x0000024789bdddcb, 0x8753100000000000, 
+	0x0000000000000112, 0x3455542100000000, 0x00000135789bbba8, 0x8642100000000000, 0x0000000000000011, 0x2344444210000000, 0x0000011467889988, 0x6431000000000000, 
+	0x0000000000000001, 0x1233455431000000, 0x0000001245677776, 0x5320000000000000, 0x0000000000000000, 0x0122344443210000, 0x0000000123445554, 0x3200000000000000, 
+	0x0000000000000000, 0x0011233333221100, 0x0000000011122222, 0x1000000000000000, 0x0000000000000000, 0x0000112222222221, 0x1000000000000000, 0x0000000000000000, 
+	0x0000000000000000, 0x0000000011112221, 0x1000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000111, 0x1000000000000000, 0x0000000000000000, 
+	
+};
+
+Vtx gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_vtx_cull[8] = {
+	{{{-380, -33, -380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{-380, -33, 380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{-380, 534, 380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{-380, 534, -380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{380, -33, -380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{380, -33, 380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{380, 534, 380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{380, 534, -380},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+};
+
+Vtx gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_vtx_0[40] = {
+	{{{166, 458, 166},0, {724, 283},{0x36, 0x66, 0x36, 0xC7}}},
+	{{{235, 458, 0},0, {801, 283},{0x4D, 0x65, 0x0, 0x78}}},
+	{{{0, 534, 0},0, {536, 196},{0x0, 0x7F, 0x0, 0xE9}}},
+	{{{269, 284, 269},0, {840, 508},{0x55, 0x28, 0x55, 0x68}}},
+	{{{0, 284, 380},0, {536, 508},{0x0, 0x28, 0x79, 0xDD}}},
+	{{{0, 458, 235},0, {536, 283},{0x0, 0x65, 0x4D, 0xFE}}},
+	{{{-166, 458, 166},0, {348, 283},{0xCA, 0x66, 0x36, 0xFE}}},
+	{{{-235, 458, 0},0, {271, 283},{0xB3, 0x65, 0x0, 0xFE}}},
+	{{{-166, 458, -166},0, {348, 283},{0xCA, 0x66, 0xCA, 0xB9}}},
+	{{{0, 458, -235},0, {536, 283},{0x0, 0x65, 0xB3, 0x6E}}},
+	{{{166, 458, -166},0, {724, 283},{0x36, 0x66, 0xCA, 0x52}}},
+	{{{380, 284, 0},0, {965, 508},{0x79, 0x28, 0x0, 0x32}}},
+	{{{269, 131, 269},0, {840, 788},{0x53, 0xCF, 0x53, 0x32}}},
+	{{{0, 131, 380},0, {536, 788},{0x0, 0xCF, 0x75, 0x68}}},
+	{{{-269, 131, 269},0, {232, 788},{0xAD, 0xCF, 0x53, 0x9F}}},
+	{{{-269, 284, 269},0, {232, 508},{0xAB, 0x28, 0x55, 0xFE}}},
+	{{{-380, 284, 0},0, {107, 508},{0x87, 0x28, 0x0, 0xE5}}},
+	{{{-269, 284, -269},0, {232, 508},{0xAB, 0x28, 0xAB, 0x70}}},
+	{{{0, 284, -380},0, {536, 508},{0x0, 0x28, 0x87, 0x32}}},
+	{{{269, 284, -269},0, {840, 508},{0x55, 0x28, 0xAB, 0x32}}},
+	{{{380, 131, 0},0, {965, 788},{0x75, 0xCF, 0x0, 0x32}}},
+	{{{166, 7, 166},0, {724, 1013},{0x2B, 0x90, 0x2A, 0x32}}},
+	{{{0, 7, 235},0, {536, 1013},{0x0, 0x90, 0x3C, 0x32}}},
+	{{{-166, 7, 166},0, {348, 1013},{0xD6, 0x90, 0x2B, 0x32}}},
+	{{{-235, 7, 0},0, {271, 1013},{0xC4, 0x90, 0x0, 0x32}}},
+	{{{-380, 131, 0},0, {107, 788},{0x8B, 0xCF, 0x0, 0x74}}},
+	{{{-269, 131, -269},0, {232, 788},{0xAD, 0xCF, 0xAD, 0x32}}},
+	{{{0, 131, -380},0, {536, 788},{0x0, 0xCF, 0x8B, 0x32}}},
+	{{{269, 131, -269},0, {840, 788},{0x53, 0xCF, 0xAD, 0x32}}},
+	{{{235, 7, 0},0, {801, 1013},{0x3C, 0x90, 0x0, 0x32}}},
+	{{{0, -33, 0},0, {536, 1100},{0x0, 0x81, 0x0, 0x32}}},
+	{{{-166, 7, -166},0, {348, 1013},{0xD5, 0x90, 0xD6, 0x32}}},
+	{{{0, 7, -235},0, {536, 1013},{0x0, 0x90, 0xC4, 0x32}}},
+	{{{-166, 7, -166},0, {348, 1013},{0xD5, 0x90, 0xD6, 0x32}}},
+	{{{-269, 131, -269},0, {232, 788},{0xAD, 0xCF, 0xAD, 0x32}}},
+	{{{0, 131, -380},0, {536, 788},{0x0, 0xCF, 0x8B, 0x32}}},
+	{{{166, 7, -166},0, {724, 1013},{0x2A, 0x90, 0xD5, 0x32}}},
+	{{{269, 131, -269},0, {840, 788},{0x53, 0xCF, 0xAD, 0x32}}},
+	{{{235, 7, 0},0, {801, 1013},{0x3C, 0x90, 0x0, 0x32}}},
+	{{{0, -33, 0},0, {536, 1100},{0x0, 0x81, 0x0, 0x32}}},
+};
+
+Gfx gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_tri_0[] = {
+	gsSPVertex(gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_vtx_0 + 0, 32, 0),
+	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
+	gsSP2Triangles(4, 3, 0, 0, 4, 0, 5, 0),
+	gsSP2Triangles(5, 0, 2, 0, 6, 5, 2, 0),
+	gsSP2Triangles(7, 6, 2, 0, 8, 7, 2, 0),
+	gsSP2Triangles(9, 8, 2, 0, 10, 9, 2, 0),
+	gsSP2Triangles(1, 10, 2, 0, 11, 10, 1, 0),
+	gsSP2Triangles(3, 11, 1, 0, 12, 11, 3, 0),
+	gsSP2Triangles(13, 12, 3, 0, 13, 3, 4, 0),
+	gsSP2Triangles(14, 13, 4, 0, 14, 4, 15, 0),
+	gsSP2Triangles(15, 4, 5, 0, 15, 5, 6, 0),
+	gsSP2Triangles(16, 15, 6, 0, 16, 6, 7, 0),
+	gsSP2Triangles(17, 16, 7, 0, 17, 7, 8, 0),
+	gsSP2Triangles(18, 17, 8, 0, 18, 8, 9, 0),
+	gsSP2Triangles(19, 18, 9, 0, 19, 9, 10, 0),
+	gsSP2Triangles(11, 19, 10, 0, 20, 19, 11, 0),
+	gsSP2Triangles(12, 20, 11, 0, 21, 20, 12, 0),
+	gsSP2Triangles(22, 21, 12, 0, 22, 12, 13, 0),
+	gsSP2Triangles(23, 22, 13, 0, 23, 13, 14, 0),
+	gsSP2Triangles(24, 23, 14, 0, 24, 14, 25, 0),
+	gsSP2Triangles(25, 14, 15, 0, 25, 15, 16, 0),
+	gsSP2Triangles(26, 25, 16, 0, 26, 16, 17, 0),
+	gsSP2Triangles(27, 26, 17, 0, 27, 17, 18, 0),
+	gsSP2Triangles(28, 27, 18, 0, 28, 18, 19, 0),
+	gsSP2Triangles(20, 28, 19, 0, 29, 28, 20, 0),
+	gsSP2Triangles(21, 29, 20, 0, 29, 21, 30, 0),
+	gsSP2Triangles(21, 22, 30, 0, 22, 23, 30, 0),
+	gsSP2Triangles(23, 24, 30, 0, 24, 31, 30, 0),
+	gsSP2Triangles(31, 24, 25, 0, 31, 25, 26, 0),
+	gsSPVertex(gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_vtx_0 + 32, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
+	gsSP2Triangles(4, 0, 3, 0, 4, 3, 5, 0),
+	gsSP2Triangles(6, 4, 5, 0, 4, 6, 7, 0),
+	gsSP2Triangles(0, 4, 7, 0, 1, 0, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gZolNormalDL_f3d_material_003_layerTransparent[] = {
+    gsSPTexture(0x1388, 0x1388, 0, G_TX_RENDERTILE, G_ON),
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(TEXEL1, 0, PRIM_LOD_FRAC, TEXEL0, TEXEL1, TEXEL0, PRIM_LOD_FRAC, TEXEL0, PRIMITIVE, ENVIRONMENT,
+                       COMBINED, ENVIRONMENT, COMBINED, 0, PRIMITIVE, 0),
+    gsDPSetRenderMode(G_RM_FOG_SHADE_A, G_RM_AA_ZB_XLU_SURF2),
+    gsDPSetTextureLUT(G_TT_NONE),
+    gsDPLoadTextureBlock(gZolNormal1Tex, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, G_TX_MIRROR | G_TX_WRAP,
+                         G_TX_MIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
+    gsDPLoadMultiBlock_4b(gZolNormal2Tex, 0x0100, 1, G_IM_FMT_I, 64, 64, 15, G_TX_MIRROR | G_TX_WRAP, G_TX_MIRROR |
+                          G_TX_WRAP, 6, 6, G_TX_NOLOD, G_TX_NOLOD),
+    gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR |
+                         G_SHADING_SMOOTH),
+	gsSPEndDisplayList(),
+};
+
+Gfx gZolNormalDL[] = {
+	gsSPVertex(gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_vtx_cull + 0, 8, 0),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gZolNormalDL_f3d_material_003_layerTransparent),
+	gsSPDisplayList(gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_tri_0),
+	gsSPEndDisplayList(),
+};
+
+u64 gZolEyesDL_eye_ia8[] = {
+	0x0000000000000000, 0x0000000000000000, 0x000000000003090e, 0x0e09030000000000, 0x00000000040c0f0f, 0x1f1f0c0400000000, 0x000000010b0f0f1f, 0x2f2f1f0b01000000, 
+	0x000000070f0f1f2f, 0x3f3f2f1f07000000, 0x0000010e0f1f2f4f, 0x6f6f4f2f1e010000, 0x0000060f1f2f3f6f, 0x8f8f6f3f2f060000, 0x00000b0f1f2f3f6f, 0x8f8f6f3f2f1b0000, 
+	0x00010f0f0f1f2f4f, 0x6f6f4f2f1f0f0100, 0x00050f0f0f0f1f2f, 0x3f3f2f1f0f0f0500, 0x00080f0f0f0f0f1f, 0x2f2f1f0f0f0f0800, 0x000a0f0f0f0f0f0f, 0x1f1f0f0f0f0f0a00, 
+	0x000c0f0f0f0f0f0f, 0x0f0f0f0f0f0f0c00, 0x000d0f0f0f0f0f0f, 0x0f0f0f0f0f0f0d00, 0x000e0f0f0f0f0f0f, 0x0f0f0f0f0f0f0e00, 0x000f0f0f0f0f0f0f, 0x0f0f0f0f0f0f0f00, 
+	0x000f0f0f0f0f0f0f, 0x0f0f0f0f0f0f0f00, 0x000e0f0f0f0f0f0f, 0x0f0f0f0f0f0f0e00, 0x000d0f0f0f0f0f0f, 0x0f0f0f0f0f0f0d00, 0x000c0f0f0f0f0f0f, 0x0f0f0f0f0f0f0c00, 
+	0x000a0f0f0f0f0f0f, 0x0f0f0f0f0f0f0a00, 0x00080f0f0f0f0f0f, 0x0f0f0f0f0f0f0800, 0x00050f0f0f0f0f0f, 0x0f0f0f0f0f0f0500, 0x00010f0f0f0f0f0f, 0x0f0f0f0f0f0f0100, 
+	0x00000b0f0f0f0f0f, 0x0f0f0f0f0f0b0000, 0x0000060f0f0f0f0f, 0x0f0f0f0f0f060000, 0x0000010e0f0f0f0f, 0x0f0f0f0f0e010000, 0x000000070f0f0f0f, 0x0f0f0f0f07000000, 
+	0x000000010b0f0f0f, 0x0f0f0f0b01000000, 0x00000000040c0f0f, 0x0f0f0c0400000000, 0x000000000003090e, 0x0e09030000000000, 0x0000000000000000, 0x0000000000000000, 
+	
+};
+
+Vtx gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_vtx_cull[8] = {
+	{{{-140, 119, 352},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{-140, 119, 381},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{-140, 348, 381},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{-140, 348, 352},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{140, 119, 352},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{140, 119, 381},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{140, 348, 381},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+	{{{140, 348, 352},0, {-16, -16},{0x0, 0x0, 0x0, 0x0}}},
+};
+
+Vtx gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_vtx_0[8] = {
+	{{{40, 119, 380},0, {-15, 1003},{0xEF, 0x0, 0x7E, 0x68}}},
+	{{{140, 348, 354},0, {495, -11},{0x20, 0x0, 0x7B, 0x68}}},
+	{{{40, 348, 380},0, {-15, -11},{0xEF, 0x0, 0x7E, 0xDD}}},
+	{{{140, 119, 354},0, {495, 1003},{0x20, 0x0, 0x7B, 0x32}}},
+	{{{-140, 119, 352},0, {-13, 1003},{0xDD, 0x0, 0x7A, 0x9F}}},
+	{{{-40, 348, 381},0, {493, -11},{0xD, 0x0, 0x7E, 0xDD}}},
+	{{{-140, 348, 352},0, {-13, -11},{0xDD, 0x0, 0x7A, 0xFE}}},
+	{{{-40, 119, 381},0, {493, 1003},{0xD, 0x0, 0x7E, 0x68}}},
+};
+
+Gfx gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_vtx_0 + 0, 8, 0),
+	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
+	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_gZolEyesDL_f3d_material_002_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 20, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 32, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetTextureLUT(G_TT_NONE),
+	gsDPTileSync(),
+	gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 1, gZolEyesDL_eye_ia8),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 4, 0),
+	gsDPLoadSync(),
+	gsDPLoadBlock(7, 0, 0, 255, 1024),
+	gsDPPipeSync(),
+	gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b, 2, 0, 0, 0, G_TX_WRAP | G_TX_MIRROR, 5, 0, G_TX_WRAP | G_TX_MIRROR, 4, 0),
+	gsDPSetTileSize(0, 0, 0, 60, 124),
+	gsDPSetPrimColor(0, 0, 254, 254, 254, 255),
+	gsSPEndDisplayList(),
+};
+
+Gfx gZolEyesDL[] = {
+	gsSPClearGeometryMode(G_LIGHTING),
+	gsSPVertex(gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_vtx_cull + 0, 8, 0),
+	gsSPCullDisplayList(0, 7),
+	gsSPDisplayList(mat_gZolEyesDL_f3d_material_002_layerOpaque),
+	gsSPDisplayList(gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/objects/object_zol/object_zol.h b/assets_hm_pack/objects/object_zol/object_zol.h
new file mode 100644
index 000000000..0d2eec1ba
--- /dev/null
+++ b/assets_hm_pack/objects/object_zol/object_zol.h
@@ -0,0 +1,21 @@
+#ifndef OBJECT_ZOL_H
+#define OBJECT_ZOL_H 1
+
+extern u64 gZolNormal1Tex[];
+extern u64 gZolNormal2Tex[];
+extern u64 gZolNormalDL_chu_normal_1_rgba16_png_rgba16[];
+extern u64 gZolNormalDL_chu_normal_2_i4_png_i4[];
+extern Vtx gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_vtx_cull[8];
+extern Vtx gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_vtx_0[40];
+extern Gfx gZolNormalDL_gZolNormalDL_mesh_mesh_layer_Transparent_tri_0[];
+extern Gfx mat_gZolNormalDL_f3d_material_003_layerTransparent[];
+extern Gfx gZolNormalDL[];
+
+extern u64 gZolEyesDL_eye_ia8[];
+extern Vtx gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_vtx_cull[8];
+extern Vtx gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_vtx_0[8];
+extern Gfx gZolEyesDL_gZolEyeDL_mesh_001_mesh_layer_Opaque_tri_0[];
+extern Gfx mat_gZolEyesDL_f3d_material_002_layerOpaque[];
+extern Gfx gZolEyesDL[];
+
+#endif
diff --git a/assets_hm_pack/scenes/test_map/test_map_room_0.c b/assets_hm_pack/scenes/test_map/test_map_room_0.c
new file mode 100644
index 000000000..ffec648c5
--- /dev/null
+++ b/assets_hm_pack/scenes/test_map/test_map_room_0.c
@@ -0,0 +1,1599 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+#include "test_map_scene.h"
+#include "segment_symbols.h"
+#include "command_macros_base.h"
+#include "z64cutscene_commands.h"
+#include "variables.h"
+
+/**
+ * Header Child Day (Default)
+*/
+#define LENGTH_TEST_MAP_ROOM_0_HEADER00_OBJECTLIST 14
+#define LENGTH_TEST_MAP_ROOM_0_HEADER00_ACTORLIST 44
+SceneCmd test_map_room_0_header00[] = {
+    SCENE_CMD_ECHO_SETTINGS(0x00),
+    SCENE_CMD_ROOM_BEHAVIOR(0x00, 0x00, false, false),
+    SCENE_CMD_SKYBOX_DISABLES(false, false),
+    SCENE_CMD_TIME_SETTINGS(0xFF, 0xFF, 10),
+    SCENE_CMD_ROOM_SHAPE(&test_map_room_0_shapeHeader),
+    SCENE_CMD_OBJECT_LIST(LENGTH_TEST_MAP_ROOM_0_HEADER00_OBJECTLIST, test_map_room_0_header00_objectList),
+    SCENE_CMD_ACTOR_LIST(LENGTH_TEST_MAP_ROOM_0_HEADER00_ACTORLIST, test_map_room_0_header00_actorList),
+    SCENE_CMD_END(),
+};
+
+s16 test_map_room_0_header00_objectList[LENGTH_TEST_MAP_ROOM_0_HEADER00_OBJECTLIST] = {
+    OBJECT_LADDER,
+    OBJECT_METAL_CRATE,
+    OBJECT_PLATFORMS,
+    OBJECT_OKUTA,
+    OBJECT_JUMPTOGGLE_PLATFORM,
+    OBJECT_WALL_PULL_SWITCH,
+    OBJECT_BOX,
+    OBJECT_FLOOR_SPIKES,
+    OBJECT_HAMMER_PEG,
+    OBJECT_ZOL,
+    OBJECT_METAL_CRATE,
+    OBJECT_RAT,
+    OBJECT_PLATFORMS,
+    OBJECT_FAN,
+};
+
+ActorEntry test_map_room_0_header00_actorList[LENGTH_TEST_MAP_ROOM_0_HEADER00_ACTORLIST] = {
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_METAL_CRATE,
+        /* Position   */ { 636, -120, -228 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0xFFFF
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { -233, -96, 1442 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x600B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_OBJ_FAN,
+        /* Position   */ { 1000, 328, -1250 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x060D
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_JUMPTOGGLE_PLATFORM,
+        /* Position   */ { -177, -20, -801 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0001
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 100, 285, 662 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x8000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { -97, -96, 1169 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x100B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_RAT,
+        /* Position   */ { 245, -120, 793 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_OBJ_FAN,
+        /* Position   */ { 750, -220, -1250 },
+        /* Rotation   */ { DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x03FF
+    },
+
+    // Dungeon Switches
+    {
+        /* Actor ID   */ ACTOR_OBJ_SWITCH,
+        /* Position   */ { 650, -120, -650 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0300
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 0, -120, 1750 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x700B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 107, -96, 1442 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x500B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_LADDER,
+        /* Position   */ { 800, -120, -750 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x5003
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_WALL_PULL_SWITCH,
+        /* Position   */ { 256, -70, 194 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0005
+    },
+
+    // Flame Circle
+    {
+        /* Actor ID   */ ACTOR_BG_HIDAN_CURTAIN,
+        /* Position   */ { 623, -120, 101 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x1046
+    },
+
+    // Treasure Chest
+    {
+        /* Actor ID   */ ACTOR_EN_BOX,
+        /* Position   */ { 623, -120, 101 },
+        /* Rotation   */ { 0, 0, 5 },
+        /* Parameters */ 0xBAC1
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_LADDER,
+        /* Position   */ { 740, 230, -850 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x4102
+    },
+
+    // Treasure Chest
+    {
+        /* Actor ID   */ ACTOR_EN_BOX,
+        /* Position   */ { 532, -120, -257 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x51A2
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 368, -96, 1442 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x400B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 258, 255, 875 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x8000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_WALL_PULL_SWITCH,
+        /* Position   */ { 200, -70, -1250 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0A0D
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_FLOOR_SPIKES,
+        /* Position   */ { -356, -120, 266 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_JUMPTOGGLE_PLATFORM,
+        /* Position   */ { -338, -20, -609 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 122, -96, 1169 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x200B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_JUMPTOGGLE_PLATFORM,
+        /* Position   */ { -505, -20, -403 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0001
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 316, 216, 1122 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x8000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_HAMMER_PEG,
+        /* Position   */ { 391, -120, -207 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x000A
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_EN_ZOL,
+        /* Position   */ { 180, -120, -772 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(107.798), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0101
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_WALL_PULL_SWITCH,
+        /* Position   */ { 306, -70, 251 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(90.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0F06
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 379, 264, 476 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x8000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_RAT,
+        /* Position   */ { -747, -120, 1253 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_FLOOR_SPIKES,
+        /* Position   */ { -566, -120, 515 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0200
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { 368, -96, 1169 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x300B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_HAMMER_PEG,
+        /* Position   */ { 453, -120, -207 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0008
+    },
+
+    // Dungeon Switches
+    {
+        /* Actor ID   */ ACTOR_OBJ_SWITCH,
+        /* Position   */ { 650, -120, -1050 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0100
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_PLATFORMS,
+        /* Position   */ { -354, -96, 1169 },
+        /* Rotation   */ { 0, 0, 0 },
+        /* Parameters */ 0x000B
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_FLOOR_SPIKES,
+        /* Position   */ { -234, -120, 515 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x1100
+    },
+
+    // Dungeon Switches
+    {
+        /* Actor ID   */ ACTOR_OBJ_SWITCH,
+        /* Position   */ { -136, -120, 827 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0B03
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_RAT,
+        /* Position   */ { -301, -120, 628 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_HAMMER_PEG,
+        /* Position   */ { 483, -120, -207 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0007
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_METAL_CRATE,
+        /* Position   */ { 240, -120, -277 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0xFFFF
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_EN_ZOL,
+        /* Position   */ { 447, -120, -684 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(107.798), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_LADDER,
+        /* Position   */ { 800, -120, -950 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(270.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x3001
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_JUMPTOGGLE_PLATFORM,
+        /* Position   */ { -721, -20, -188 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_HAMMER_PEG,
+        /* Position   */ { 423, -120, -207 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0009
+    },
+};
+
+RoomShapeNormal test_map_room_0_shapeHeader = {
+    ROOM_SHAPE_TYPE_NORMAL,
+    ARRAY_COUNT(test_map_room_0_shapeDListEntry),
+    test_map_room_0_shapeDListEntry,
+    test_map_room_0_shapeDListEntry + ARRAY_COUNT(test_map_room_0_shapeDListEntry)
+};
+
+RoomShapeDListsEntry test_map_room_0_shapeDListEntry[1] = {
+    { test_map_room_0_entry_0_opaque, test_map_room_0_entry_0_transparent },
+};
+
+Gfx test_map_room_0_entry_0_opaque[] = {
+	gsSPDisplayList(test_map_dl_Plane_mesh_layer_Opaque),
+	gsSPDisplayList(test_map_dl_Plane_002_mesh_layer_Opaque),
+	gsSPDisplayList(test_map_dl_Plane_003_mesh_layer_Opaque),
+	gsSPDisplayList(test_map_dl_Plane_004_mesh_layer_Opaque),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_room_0_entry_0_transparent[] = {
+	gsSPDisplayList(test_map_dl_Water_Box_Mesh_mesh_layer_Transparent),
+	gsSPEndDisplayList(),
+};
+
+u64 test_map_dl_FT_0x5B2C8_32x32_RGBA16_ci8[] = {
+	0x0000000000010203, 0x0405060000000000, 0x0000000000060708, 0x090a0b0100000000, 0x000000000c0d0406, 0x0b0e0f1000000000, 0x000000000c111213, 0x1415161217000000, 
+	0x00000006180b0600, 0x01191a1b0c000000, 0x000001061c0c0100, 0x000c1b1d1e010000, 0x00011f051e0c0000, 0x0000102014170000, 0x000106020c000000, 0x0000011204020101, 
+	0x0c1b211b0c000000, 0x0000000c03220101, 0x0106230100000000, 0x000000010c23020b, 0x1a24251700000000, 0x000000000c262026, 0x2728190100000000, 0x0000000000190f29, 
+	0x252a290c00000000, 0x00000001122b151e, 0x1e15162c01000000, 0x0000000113162d19, 0x17252e2f10000000, 0x0000171530311f01, 0x010c18321f000000, 0x0000011333340c00, 
+	0x00172535360c0000, 0x00173609371f0000, 0x00001728280c0000, 0x000119182c380000, 0x0000011e2b1b0c01, 0x011b393a06000000, 0x00000038023b0c01, 0x0c3c200601000000, 
+	0x000000013c281828, 0x0d041b0c00000000, 0x000000000126041a, 0x3304060000000000, 0x000000000c201804, 0x043d3e3f00000000, 0x0000000006324039, 0x41390f0c00000000, 
+	0x00000114423c1701, 0x0c1b2f3e0c000000, 0x00000006043d0b0c, 0x433444040c000000, 0x001718451e010000, 0x00014346270c0000, 0x0000060404060000, 0x00171204260c0000, 
+	0x0c0439470c000000, 0x000000060d130c01, 0x000120270c000000, 0x0000000c26200c3f, 0x0f29340c00000000, 0x0000000038022748, 0x0249490100000000, 0x0000000017022847, 
+	0x05330b0100000000, 0x0000000000234a4b, 0x4c18060000000000, 0x0000000001190445, 0x1005071e01000000, 0x0000000123131406, 0x194d3d1f01000000, 0x0000003f1e3d2c06, 
+	0x0010213525170000, 0x0000010212140100, 0x000647320d0c0000, 0x00003f3435360c00, 0x0000103d2a251700, 0x000c201306010000, 0x00000c0b04040600, 0x003f0b0a4e060000, 
+	0x0000000c46041f06, 0x1928130c00000000, 0x0000000143041814, 0x0b130d1e06000000, 0x00000000014f050a, 0x07340c0000000000, 0x000000000006182b, 0x2a16430100000000, 
+	0x000000000103462f, 0x46203f0000000000, 0x000000001749023e, 0x053e0d0601000000, 0x0000000c3e2d0601, 0x0101490c01000000, 0x00000017020c0101, 0x0101192022010000, 
+	0x0000061815430000, 0x000001490c010000, 0x0000492343010000, 0x0000000c3b031001, 0x01190f1e06000000, 0x000000015017010c, 0x0c3b0d0601000000, 0x00000000011c2613, 
+	0x02051e0c00000000, 0x0000000001230345, 0x391d130100000000, 0x0000000000010d2f, 0x191a2d0100000000, 0x000000170d260332, 0x410a140100000000, 0x000000000102461e, 
+	0x011b331b01000000, 0x000010052f43010c, 0x135129180c000000, 0x00000001201a0b3f, 0x000c250a0f100000, 0x0043332914000000, 0x00102d0733190100, 0x00000c27421b3f00, 
+	0x0000105241070b53, 0x1b0a540b00000000, 0x00003f12542a3606, 0x010c181a19010000, 0x0000000c55562a0a, 0x57560b0000000000, 0x000000001954580a, 0x0504051900000000, 
+	
+};
+
+u64 test_map_dl_FT_0x5B2C8_32x32_RGBA16_pal_rgba16[] = {
+	0x18c620c6398d41cd, 0x629562d5314a8bdd, 0xc5efad27941f4a0e, 0x29084a0f7b9b6ad5, 0x2948398b521049ce, 0x41ce6ad473172108, 0x5a53398c6ad75250, 0x394b7b5b5a5241cc, 
+	0x41cf7359394a314b, 0x8c1d62d449cf4a11, 0x5211839b9ca38b9d, 0x4a105a9294a36b17, 0xace794627b197b59, 0x6294946173169460, 0x20c894217b5a418d, 0x418c731952512106, 
+	0x94639ca56293398a, 0x93df835b5a936ad6, 0x521329096a97731b, 0x6a957318839a318b, 0x2109835a7358318a, 0x941e6b16ad26bdad, 0xb56b000000000000
+};
+
+u64 test_map_dl__000170B8_32x32_rgba16_rgba16[] = {
+	0x3359125312951253, 0x12554b9f335b0a95, 0x12d7541f7ce53b9d, 0x33191ad72b19335b, 0x3bdd5c614c214bdf, 0x1ad72b191a972b19, 0x2b1922d722d722d7, 0x2b19439d439f6461, 
+	0x22d7125512950a95, 0x3b9f4c212b192b5b, 0x856bb66f7461335b, 0x12d51ad7335b4bdd, 0x43df339b43df5461, 0x2b1b335b2319335b, 0x22d70a512b192b19, 0x12952b192b19541f, 
+	0x3b592b1b2b192ad9, 0x2b5b2b5b3be18dab, 0xa671952795ab84e5, 0x74a184e584e574e3, 0x64614c1f439d2b5b, 0x2ad92297331b4bdf, 0x33192b193b5b335b, 0x1a971255021122d5, 
+	0x2b5b439d4c2143df, 0x2b5b2b5f95ed9569, 0x7ca553df6ca55c21, 0x53dd3b9b33593319, 0x4bdd5c5f541f439d, 0x2b190a5512553319, 0x3319335d2b191a95, 0x12530a5512951255, 
+	0x2b5b4c218d69856b, 0x74e9a67184a32b19, 0x1ad7335b5c21541f, 0x3b9d335b12951295, 0x335b2b5b3b5b439b, 0x335b23171ad72297, 0x1a972ad933190a51, 0x01d1021312972b19, 
+	0x4c23b6b3a671aef9, 0xd7777461339d3b9d, 0x2ad92b5933194bdd, 0x4bdf335b0a551ad5, 0x2b19335d22d71a95, 0x22d7335b3b5b2ad7, 0x22951a9723190a53, 0x0a130a5512951297, 
+	0x8d276c61641f641f, 0x9d696c6154214b9f, 0x33192b59335b339d, 0x339b335b2b193b5b, 0x439d2b591ad70a53, 0x02130a551a971295, 0x1a951ad71ad71255, 0x12552b192b5b3b9f, 
+	0x3b59335d2b5b2b5b, 0x2319335b53df439d, 0x3b5b339d3b9b439d, 0x53df54214bdd4bdf, 0x5bdd3b5b1ad501d1, 0x02110a1312950a53, 0x1a971ad71ad70a55, 0x2b193b9d5c636c61, 
+	0x2b192b172b5b3bdf, 0x439b22d73b9d4bdd, 0x4c21852785276c61, 0x6c615c1f4bdd3b9d, 0x64616c61335b1a95, 0x0a550213018d0213, 0x1ad72b192ad5335b, 0x43df54212b1722d7, 
+	0x2319129522d72b5b, 0x2b5b231b6ca574e5, 0x5c615c1f6c616461, 0x3b9b3b9d43df4bdd, 0x43e1a5ed7ca36461, 0x1ad7021302130213, 0x339f64633b59335b, 0x439d33170a5322d9, 
+	0x1a9722d722d722d7, 0x1ad73ba16463335b, 0x2ad72b19335b439d, 0x3b9d3b9d3b5b4bdf, 0x64e7646143df74a3, 0x4b9d33192b192b5b, 0x84e76ca35c636461, 0x33171a950a530a55, 
+	0x0a531a952ad712d7, 0x339d4bdd23191ad9, 0x2b1b2b5b2b172b17, 0x335b2b193b9d4c21, 0x74e52b1912953b9b, 0x53dd646395aba62d, 0x74a1439d8dad8ce5, 0x2b171a970a530a13, 
+	0x02110a9522d95463, 0x4bdd12552b192b19, 0x335b2b5b4bdd6461, 0x645f5bdd7ca38d69, 0x852533190a530a53, 0x129522d96c634bdd, 0x331954218d273b5b, 0x339d2b5b1a971295, 
+	0x4bdf64638d694bdd, 0x12950a532b5b4bdf, 0x5c21439b2b17541f, 0x541f439b4b9d541f, 0x53dd541f3b9b22d7, 0x2b5b43dd53dd4bdd, 0x4bdd8d275c61335b, 0x2b19339f3bdf43df, 
+	0x6ca5646133191a97, 0x12552b1b43df4bdd, 0x43df3b9b3b9d439b, 0x2ad733192ad53b5b, 0x1ad723194bdd5421, 0x4bdf2ad533595463, 0x7ce5956954633b5b, 0x2ad72b5922d943df, 
+	0x33192b172ad92297, 0x2b1b3b9d43df335b, 0x3b9d4bdf4b9d22d5, 0x2b1733192b173b5b, 0x2b5b335b64636ca5, 0x541f4bdd541f5c63, 0x95696c635c613b9b, 0x2b191ad722d92b19, 
+	0x33192ad9335b2b19, 0x335b3359335b4bdd, 0x541f6c6374a36c61, 0x3b9b3b9f6ce56c5f, 0x54a5856995ed6463, 0x4c1f541f4c1f95ab, 0xa5ed64614c614c21, 0x439b33592b5b2319, 
+	0x539b2b592b5922d7, 0x2b1923194bdf7ca5, 0x7ca59569be719dab, 0x856bae71b67174e3, 0x856b852795a984e7, 0x74a364a38d69beb3, 0x7ca344214bdf3b9d, 0x335b2b1922d72b5b, 
+	0x3b592ad522d51ad7, 0x2b9d74e5ae2f7ca1, 0x6ca36c1f53595bdf, 0x74e58d27641f3b9d, 0x852774e78d6974a5, 0x84e78529a62f84e3, 0x335d3bdf3b9d2b5b, 0x231922d71ad7439d, 
+	0x5461439b5c1f9569, 0x956984a3641f4bdd, 0x53dd3317129712d7, 0x23192b5b3b9d335b, 0x5c1f5463ae71aded, 0x74e774e785693b9b, 0x335d43df3b9d1ad7, 0x1ad51ad7335d541f, 
+	0x6ca33b174b9b5399, 0x2ad52b59439b4359, 0x4b9b1a9512930a55, 0x1a953319335b3b9d, 0x43df5463852b84a3, 0x339d2b9d85254bdd, 0x4bdb2b5b4bdf335b, 0x12d7129774a37ca3, 
+	0x22d522d722d51ad7, 0x2b174bdf33191a97, 0x2b171ad51a971295, 0x0a951a9722d7339b, 0x439d3b9d335b231b, 0x442164e9c6f5ae2d, 0x9dab84e56c614bdd, 0x5c638d274b9922d5, 
+	0x1a97231922d72319, 0x339d4bdd43593359, 0x12510a5312951a95, 0x0a530a5312d72b19, 0x339d339d3b9d5423, 0x7d29a673cf37aeb5, 0xbf37aeb1b6b1bef5, 0xcf356c613b9d1ad5, 
+	0x439d33191a971295, 0x2b593b5933572ad7, 0x1a95125312d71295, 0x12952b192b592b5b, 0x3b9f4c215ca595ab, 0x95ad85275ca57527, 0x7ce764a34c1f6ce7, 0xa62d74a34c1f2b19, 
+	0x33192b17331b2b1b, 0x1ad73359335922d7, 0x1a951ad71ad51a95, 0x2b193b9d2b5b339d, 0x542164639dad84e7, 0x5c61339d3bdf5c63, 0x74a36ca564a58569, 0x8d27856974a153db, 
+	0x53db331923192319, 0x2b192b5b2ad52317, 0x2b17125322d72b19, 0x335b335b339d5c21, 0x7ce7ae2f84e55421, 0x54612b5b335b43dd, 0x541f74a56ce58569, 0x8527542154638569, 
+	0x84e553db1b193b9b, 0x53df74a53b9d2b59, 0x2ad72b1912971ad7, 0x43df3be14c2374a5, 0x9dab74a55ca3335b, 0x2319335b339d2b19, 0x3b9b74e55c636c61, 0x95695c213b9d4c21, 
+	0x6ce9a62f9da9b671, 0x952553df439d53df, 0x335b3b5b12971ad7, 0x2b1d7d298d277ca3, 0x5c214bdd43df3b9d, 0x2319335b339d4c21, 0x74e5a631beb5b62d, 0x74a1439b54615423, 
+	0x64e56ca595ad84e5, 0x435922d52b19331b, 0x335d6ca3439d5463, 0x8d6b7ca5435b3b9d, 0x339b439b3b5b3b9d, 0x335b1a95335d8d69, 0x7ca35c2164637ca5, 0x6ca16c6185278527, 
+	0x539d4bdf43df2b1b, 0x3b9b12532b19435d, 0x331b3b9f5ca59def, 0x7461335b2b1b2319, 0x956b95ab641f335b, 0x3b9f4c217ca32295, 0x12552b5b3b5d4bdf, 0x4bdf4b9b7ca38d27, 
+	0x3b594bdf3b9d22d7, 0x22d7231922d71a97, 0x331b4bdf54657ca5, 0x331b2b1b2b19335b, 0xae73a631b671a5ef, 0xe7bb9d6922950213, 0x12952b19335b3319, 0x335b1a975c636ca3, 
+	0x2b191a951ad71295, 0x09d1439d2ad71255, 0x1295231b7d275c21, 0x439f1ad72b192b5b, 0x5ca57d2974a56ca3, 0x6c1f43591a9522d7, 0x2b192b192b1722d7, 0x23192b1b54216ca5, 
+	
+};
+
+Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_0[247] = {
+	{{ {-500, -120, 1000}, 0, {15344, 26608}, {127, 0, 0, 255} }},
+	{{ {-500, -120, 1500}, 0, {15344, 31728}, {127, 0, 0, 255} }},
+	{{ {-500, -520, 1500}, 0, {19440, 31728}, {127, 0, 0, 255} }},
+	{{ {-500, -520, 1000}, 0, {19440, 26608}, {127, 0, 0, 255} }},
+	{{ {500, -120, 2000}, 0, {25584, 30704}, {129, 0, 0, 255} }},
+	{{ {500, -120, 1500}, 0, {25584, 25584}, {129, 0, 0, 255} }},
+	{{ {500, -520, 1500}, 0, {21488, 25584}, {129, 0, 0, 255} }},
+	{{ {500, -520, 2000}, 0, {21488, 30704}, {129, 0, 0, 255} }},
+	{{ {-500, -120, 1500}, 0, {15344, 31728}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 1000}, 0, {15344, 26608}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 1000}, 0, {10224, 26608}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 1500}, 0, {10224, 31728}, {0, 127, 0, 255} }},
+	{{ {0, -520, 2000}, 0, {20464, 30704}, {0, 127, 0, 255} }},
+	{{ {-500, -520, 1500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {-500, -520, 2000}, 0, {15344, 30704}, {0, 127, 0, 255} }},
+	{{ {0, -520, 1500}, 0, {20464, 25584}, {0, 127, 0, 255} }},
+	{{ {500, -520, 1500}, 0, {25584, 31728}, {0, 127, 0, 255} }},
+	{{ {500, -520, 1000}, 0, {25584, 26608}, {0, 127, 0, 255} }},
+	{{ {0, -520, 1000}, 0, {20464, 26608}, {0, 127, 0, 255} }},
+	{{ {0, -520, 1500}, 0, {20464, 31728}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 2000}, 0, {15344, 30704}, {0, 0, 129, 255} }},
+	{{ {0, -520, 2000}, 0, {20464, 26608}, {0, 0, 129, 255} }},
+	{{ {-500, -520, 2000}, 0, {15344, 26608}, {0, 0, 129, 255} }},
+	{{ {0, -120, 2000}, 0, {20464, 30704}, {0, 0, 129, 255} }},
+	{{ {0, -120, 1000}, 0, {20464, 27632}, {0, 0, 127, 255} }},
+	{{ {-500, -120, 1000}, 0, {15344, 27632}, {0, 0, 127, 255} }},
+	{{ {-500, -520, 1000}, 0, {15344, 31728}, {0, 0, 127, 255} }},
+	{{ {0, -520, 1000}, 0, {20464, 31728}, {0, 0, 127, 255} }},
+	{{ {500, -120, -500}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {500, -120, -1000}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {0, -120, -1000}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {0, -120, -500}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {900, -120, -1400}, 0, {24560, 1008}, {0, 0, 127, 255} }},
+	{{ {600, -120, -1400}, 0, {21488, 1008}, {0, 0, 127, 255} }},
+	{{ {600, -220, -1400}, 0, {21488, 1008}, {0, 0, 127, 255} }},
+	{{ {900, -220, -1400}, 0, {24560, 1008}, {0, 0, 127, 255} }},
+	{{ {800, -120, -500}, 0, {18416, 15344}, {0, 127, 0, 255} }},
+	{{ {500, -120, -500}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {500, -120, 0}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 0}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {194, -120, 194}, 0, {17121, 17329}, {129, 0, 0, 255} }},
+	{{ {194, -120, 306}, 0, {17121, 18479}, {129, 0, 0, 255} }},
+	{{ {194, 340, 306}, 0, {21830, 18479}, {129, 0, 0, 255} }},
+	{{ {194, 340, 194}, 0, {21830, 17329}, {129, 0, 0, 255} }},
+	{{ {500, -120, 1000}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 1000}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 780}, 0, {20464, 18211}, {0, 127, 0, 255} }},
+	{{ {500, -120, 1000}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 780}, 0, {20464, 18211}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 720}, 0, {20464, 17597}, {0, 127, 0, 255} }},
+	{{ {500, -120, 500}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -1000}, 0, {25584, 5104}, {0, 0, 129, 255} }},
+	{{ {800, -120, -1000}, 0, {23536, 5104}, {0, 0, 129, 255} }},
+	{{ {800, 0, -1000}, 0, {23536, 5104}, {0, 0, 129, 255} }},
+	{{ {1000, 0, -1000}, 0, {25584, 5104}, {0, 0, 129, 255} }},
+	{{ {1000, 280, -700}, 0, {30704, 13296}, {127, 0, 0, 255} }},
+	{{ {1000, 280, -900}, 0, {30704, 11248}, {127, 0, 0, 255} }},
+	{{ {1000, 580, -900}, 0, {30704, 11248}, {127, 0, 0, 255} }},
+	{{ {1000, 580, -700}, 0, {30704, 13296}, {127, 0, 0, 255} }},
+	{{ {1000, 230, -700}, 0, {31216, 13296}, {0, 0, 127, 255} }},
+	{{ {1000, 280, -700}, 0, {31728, 13296}, {0, 0, 127, 255} }},
+	{{ {740, 280, -700}, 0, {31728, 13296}, {0, 0, 127, 255} }},
+	{{ {1000, 230, -700}, 0, {31216, 13296}, {0, 0, 127, 255} }},
+	{{ {740, 280, -700}, 0, {31728, 13296}, {0, 0, 127, 255} }},
+	{{ {740, 230, -700}, 0, {31216, 13296}, {0, 0, 127, 255} }},
+	{{ {1000, 280, -900}, 0, {31728, 11248}, {0, 0, 129, 255} }},
+	{{ {1000, 230, -900}, 0, {31216, 11248}, {0, 0, 129, 255} }},
+	{{ {740, 230, -900}, 0, {31216, 11248}, {0, 0, 129, 255} }},
+	{{ {740, 280, -900}, 0, {31728, 11248}, {0, 0, 129, 255} }},
+	{{ {1000, 230, -900}, 0, {31216, 11248}, {0, 129, 0, 255} }},
+	{{ {1000, 230, -700}, 0, {31216, 13296}, {0, 129, 0, 255} }},
+	{{ {740, 230, -700}, 0, {31216, 13296}, {0, 129, 0, 255} }},
+	{{ {740, 230, -900}, 0, {31216, 11248}, {0, 129, 0, 255} }},
+	{{ {740, 230, -900}, 0, {31216, 11248}, {129, 0, 0, 255} }},
+	{{ {740, 230, -700}, 0, {31216, 13296}, {129, 0, 0, 255} }},
+	{{ {740, 280, -700}, 0, {31728, 13296}, {129, 0, 0, 255} }},
+	{{ {740, 280, -900}, 0, {31728, 11248}, {129, 0, 0, 255} }},
+	{{ {1000, 580, -700}, 0, {30704, 13296}, {0, 127, 0, 255} }},
+	{{ {1000, 580, -900}, 0, {30704, 11248}, {0, 127, 0, 255} }},
+	{{ {740, 580, -900}, 0, {28038, 11248}, {0, 127, 0, 255} }},
+	{{ {740, 580, -700}, 0, {28038, 13296}, {0, 127, 0, 255} }},
+	{{ {740, 280, -900}, 0, {27632, 11248}, {129, 0, 0, 255} }},
+	{{ {740, 280, -700}, 0, {27632, 13296}, {129, 0, 0, 255} }},
+	{{ {740, 580, -700}, 0, {30704, 13296}, {129, 0, 0, 255} }},
+	{{ {740, 580, -900}, 0, {30704, 11248}, {129, 0, 0, 255} }},
+	{{ {1000, 280, -900}, 0, {28656, 11248}, {0, 0, 129, 255} }},
+	{{ {740, 280, -900}, 0, {28656, 11248}, {0, 0, 129, 255} }},
+	{{ {740, 580, -900}, 0, {31728, 11248}, {0, 0, 129, 255} }},
+	{{ {1000, 580, -900}, 0, {31728, 11248}, {0, 0, 129, 255} }},
+	{{ {740, 280, -700}, 0, {27632, 13296}, {0, 0, 127, 255} }},
+	{{ {1000, 280, -700}, 0, {27632, 13296}, {0, 0, 127, 255} }},
+	{{ {1000, 580, -700}, 0, {30704, 13296}, {0, 0, 127, 255} }},
+	{{ {740, 580, -700}, 0, {30704, 13296}, {0, 0, 127, 255} }},
+	{{ {194, -120, 306}, 0, {17329, 18479}, {0, 127, 0, 255} }},
+	{{ {194, -120, 194}, 0, {17329, 17329}, {0, 127, 0, 255} }},
+	{{ {0, -120, 0}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {0, -120, 500}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {306, -120, 306}, 0, {18479, 18479}, {0, 127, 0, 255} }},
+	{{ {500, -120, 500}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {306, -120, 194}, 0, {18479, 17329}, {0, 127, 0, 255} }},
+	{{ {500, -120, 0}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {194, -120, 194}, 0, {17329, 17329}, {0, 127, 0, 255} }},
+	{{ {306, 340, 306}, 0, {18479, 18479}, {0, 127, 0, 255} }},
+	{{ {306, 340, 194}, 0, {18479, 17329}, {0, 127, 0, 255} }},
+	{{ {194, 340, 194}, 0, {17329, 17329}, {0, 127, 0, 255} }},
+	{{ {194, 340, 306}, 0, {17329, 18479}, {0, 127, 0, 255} }},
+	{{ {306, -120, 306}, 0, {18687, 18479}, {127, 0, 0, 255} }},
+	{{ {306, -120, 194}, 0, {18687, 17329}, {127, 0, 0, 255} }},
+	{{ {306, 340, 194}, 0, {13978, 17329}, {127, 0, 0, 255} }},
+	{{ {306, -120, 306}, 0, {18687, 18479}, {127, 0, 0, 255} }},
+	{{ {306, 340, 194}, 0, {13978, 17329}, {127, 0, 0, 255} }},
+	{{ {306, 340, 306}, 0, {13978, 18479}, {127, 0, 0, 255} }},
+	{{ {306, -120, 194}, 0, {18479, 17121}, {0, 0, 129, 255} }},
+	{{ {194, -120, 194}, 0, {17329, 17121}, {0, 0, 129, 255} }},
+	{{ {194, 340, 194}, 0, {17329, 21830}, {0, 0, 129, 255} }},
+	{{ {306, 340, 194}, 0, {18479, 21830}, {0, 0, 129, 255} }},
+	{{ {1000, -120, 2000}, 0, {15344, 30704}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 1500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {500, -120, 1500}, 0, {10224, 25584}, {0, 127, 0, 255} }},
+	{{ {500, -120, 2000}, 0, {10224, 30704}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -1500}, 0, {20464, 5104}, {129, 0, 0, 255} }},
+	{{ {1000, 580, -1000}, 0, {20464, 10224}, {129, 0, 0, 255} }},
+	{{ {1000, 580, -1500}, 0, {20464, 5104}, {129, 0, 0, 255} }},
+	{{ {1000, -120, -1000}, 0, {20464, 10224}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 720}, 0, {20464, 17597}, {129, 0, 0, 255} }},
+	{{ {1000, -20, 720}, 0, {20464, 17597}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 1500}, 0, {15344, 25584}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 2000}, 0, {15344, 30704}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 2000}, 0, {15344, 30704}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 1500}, 0, {15344, 25584}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 780}, 0, {20464, 18211}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 1000}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 1000}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {1000, -20, 780}, 0, {20464, 18211}, {129, 0, 0, 255} }},
+	{{ {1000, -20, 780}, 0, {20464, 18211}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 1000}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1000, -20, 720}, 0, {20464, 17597}, {129, 0, 0, 255} }},
+	{{ {-1050, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1050, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1000, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1000, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1050, -120, 720}, 0, {15856, 18211}, {0, 127, 0, 255} }},
+	{{ {-1050, -120, 780}, 0, {15856, 17597}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 780}, 0, {15856, 17597}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 720}, 0, {15856, 18211}, {0, 127, 0, 255} }},
+	{{ {-1050, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1050, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1000, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1000, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1050, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-1050, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-1000, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-1000, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-1000, -120, 500}, 0, {10224, 25584}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 0}, 0, {10224, 20464}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 0}, 0, {10224, 20464}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 500}, 0, {10224, 25584}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 1500}, 0, {10224, 31728}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 1000}, 0, {10224, 26608}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 1000}, 0, {10224, 26608}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 1500}, 0, {10224, 31728}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, -500}, 0, {10224, 31728}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, -1000}, 0, {10224, 26608}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, -1000}, 0, {10224, 26608}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, -500}, 0, {10224, 31728}, {127, 0, 0, 255} }},
+	{{ {500, -120, -1500}, 0, {20464, -16}, {0, 0, 127, 255} }},
+	{{ {1000, -120, -1500}, 0, {25584, -16}, {0, 0, 127, 255} }},
+	{{ {1000, 580, -1500}, 0, {25584, -16}, {0, 0, 127, 255} }},
+	{{ {500, 580, -1500}, 0, {20464, -16}, {0, 0, 127, 255} }},
+	{{ {1000, -120, 2000}, 0, {15344, 30704}, {0, 0, 129, 255} }},
+	{{ {500, -120, 2000}, 0, {10224, 30704}, {0, 0, 129, 255} }},
+	{{ {500, 580, 2000}, 0, {10224, 30704}, {0, 0, 129, 255} }},
+	{{ {1000, 580, 2000}, 0, {15344, 30704}, {0, 0, 129, 255} }},
+	{{ {0, -120, 2000}, 0, {20464, 30704}, {0, 0, 129, 255} }},
+	{{ {-500, -120, 2000}, 0, {15344, 30704}, {0, 0, 129, 255} }},
+	{{ {-500, 580, 2000}, 0, {15344, 30704}, {0, 0, 129, 255} }},
+	{{ {0, 580, 2000}, 0, {20464, 30704}, {0, 0, 129, 255} }},
+	{{ {-500, -120, -1000}, 0, {10224, 31728}, {0, 0, 127, 255} }},
+	{{ {-500, 580, -1000}, 0, {10224, 31728}, {0, 0, 127, 255} }},
+	{{ {-1000, 580, -1000}, 0, {10224, 26608}, {0, 0, 127, 255} }},
+	{{ {-1000, -120, -1000}, 0, {10224, 26608}, {0, 0, 127, 255} }},
+	{{ {900, -220, -1100}, 0, {24560, 4080}, {0, 127, 0, 255} }},
+	{{ {900, -220, -1400}, 0, {24560, 1008}, {0, 127, 0, 255} }},
+	{{ {600, -220, -1400}, 0, {21488, 1008}, {0, 127, 0, 255} }},
+	{{ {600, -220, -1100}, 0, {21488, 4080}, {0, 127, 0, 255} }},
+	{{ {900, -120, -1100}, 0, {24560, 4080}, {129, 0, 0, 255} }},
+	{{ {900, -120, -1400}, 0, {24560, 1008}, {129, 0, 0, 255} }},
+	{{ {900, -220, -1400}, 0, {24560, 1008}, {129, 0, 0, 255} }},
+	{{ {900, -220, -1100}, 0, {24560, 4080}, {129, 0, 0, 255} }},
+	{{ {600, -120, -1400}, 0, {21488, 1008}, {127, 0, 0, 255} }},
+	{{ {600, -120, -1100}, 0, {21488, 4080}, {127, 0, 0, 255} }},
+	{{ {600, -220, -1100}, 0, {21488, 4080}, {127, 0, 0, 255} }},
+	{{ {600, -220, -1400}, 0, {21488, 1008}, {127, 0, 0, 255} }},
+	{{ {600, -120, -1100}, 0, {21488, 4080}, {0, 0, 129, 255} }},
+	{{ {900, -120, -1100}, 0, {24560, 4080}, {0, 0, 129, 255} }},
+	{{ {900, -220, -1100}, 0, {24560, 4080}, {0, 0, 129, 255} }},
+	{{ {600, -220, -1100}, 0, {21488, 4080}, {0, 0, 129, 255} }},
+	{{ {0, -120, 1000}, 0, {20464, 30704}, {0, 127, 0, 255} }},
+	{{ {0, -120, 500}, 0, {20464, 25584}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 1000}, 0, {15344, 30704}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 0}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 0}, 0, {10224, 20464}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 500}, 0, {10224, 25584}, {0, 127, 0, 255} }},
+	{{ {-31, -120, -31}, 0, {20150, 20150}, {0, 127, 0, 255} }},
+	{{ {-31, -120, -500}, 0, {20150, 15344}, {0, 127, 0, 255} }},
+	{{ {-500, -120, -500}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {-500, -120, -31}, 0, {15344, 20150}, {0, 127, 0, 255} }},
+	{{ {-500, -120, -969}, 0, {15344, 10538}, {0, 127, 0, 255} }},
+	{{ {-969, -120, -969}, 0, {10538, 10538}, {0, 127, 0, 255} }},
+	{{ {-969, -120, -500}, 0, {10538, 15344}, {0, 127, 0, 255} }},
+	{{ {-31, -20, -31}, 0, {20150, 20150}, {0, 127, 0, 255} }},
+	{{ {-500, -20, -31}, 0, {15344, 20150}, {0, 127, 0, 255} }},
+	{{ {-500, -20, 0}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {0, -20, 0}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {-31, -20, -500}, 0, {20150, 15344}, {0, 127, 0, 255} }},
+	{{ {-31, -20, -500}, 0, {20150, 15344}, {0, 127, 0, 255} }},
+	{{ {0, -20, 0}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {0, -20, -500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {-969, -20, -969}, 0, {10538, 10538}, {0, 127, 0, 255} }},
+	{{ {-500, -20, -969}, 0, {15344, 10538}, {0, 127, 0, 255} }},
+	{{ {-500, -20, -1000}, 0, {15344, 10224}, {0, 127, 0, 255} }},
+	{{ {-1000, -20, -1000}, 0, {10224, 10224}, {0, 127, 0, 255} }},
+	{{ {-969, -20, -500}, 0, {10538, 15344}, {0, 127, 0, 255} }},
+	{{ {-1000, -20, -500}, 0, {10224, 15344}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 0}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 0}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {1000, 580, -500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {600, -120, -1100}, 0, {21488, 4080}, {0, 127, 0, 255} }},
+	{{ {600, -120, -1400}, 0, {21488, 1008}, {0, 127, 0, 255} }},
+	{{ {500, -120, -1500}, 0, {20464, -16}, {0, 127, 0, 255} }},
+	{{ {600, -120, -1400}, 0, {21488, 1008}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -1500}, 0, {25584, -16}, {0, 127, 0, 255} }},
+	{{ {500, -120, -1500}, 0, {20464, -16}, {0, 127, 0, 255} }},
+	{{ {900, -120, -1400}, 0, {24560, 1008}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -1000}, 0, {25584, 5104}, {0, 127, 0, 255} }},
+	{{ {900, -120, -1100}, 0, {24560, 4080}, {0, 127, 0, 255} }},
+	{{ {800, -120, -1000}, 0, {23536, 5104}, {0, 127, 0, 255} }},
+	{{ {500, -120, -1000}, 0, {20464, 5104}, {0, 127, 0, 255} }},
+	{{ {600, -120, -1100}, 0, {21488, 4080}, {0, 127, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 15, 13, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 7, 5, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(7, 4, 6, 0),
+	gsSP1Triangle(6, 8, 7, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 11, 12, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 48, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(2, 3, 0, 0),
+	gsSP1Triangle(2, 4, 3, 0),
+	gsSP1Triangle(5, 6, 7, 0),
+	gsSP1Triangle(5, 7, 8, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 11, 12, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 64, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(3, 5, 6, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(7, 9, 10, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(11, 13, 14, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 79, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 95, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 0, 3, 0),
+	gsSP1Triangle(4, 3, 5, 0),
+	gsSP1Triangle(6, 4, 5, 0),
+	gsSP1Triangle(6, 5, 7, 0),
+	gsSP1Triangle(8, 6, 7, 0),
+	gsSP1Triangle(8, 7, 2, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 11, 12, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 111, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(3, 5, 6, 0),
+	gsSP1Triangle(7, 8, 9, 0),
+	gsSP1Triangle(7, 9, 10, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(11, 14, 12, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 126, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 142, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 158, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 174, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 190, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 206, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(6, 8, 9, 0),
+	gsSP1Triangle(6, 9, 10, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(11, 13, 14, 0),
+	gsSP1Triangle(15, 11, 14, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 222, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(3, 4, 5, 0),
+	gsSP1Triangle(3, 5, 6, 0),
+	gsSP1Triangle(7, 3, 6, 0),
+	gsSP1Triangle(7, 6, 8, 0),
+	gsSP1Triangle(9, 10, 11, 0),
+	gsSP1Triangle(9, 11, 12, 0),
+	gsSP1Triangle(13, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_0 + 238, 9, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(3, 4, 1, 0),
+	gsSP1Triangle(3, 5, 4, 0),
+	gsSP1Triangle(5, 6, 4, 0),
+	gsSP1Triangle(5, 7, 6, 0),
+	gsSP1Triangle(5, 8, 7, 0),
+	gsSP1Triangle(8, 2, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_1[247] = {
+	{{ {-500, -120, 2000}, 0, {15344, 30704}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 1500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 1500}, 0, {10224, 25584}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 2000}, 0, {10224, 30704}, {0, 127, 0, 255} }},
+	{{ {0, -120, 2000}, 0, {20464, 30704}, {0, 0, 129, 255} }},
+	{{ {500, -120, 2000}, 0, {25584, 30704}, {0, 0, 129, 255} }},
+	{{ {500, -520, 2000}, 0, {25584, 26608}, {0, 0, 129, 255} }},
+	{{ {0, -520, 2000}, 0, {20464, 26608}, {0, 0, 129, 255} }},
+	{{ {-500, -120, 1500}, 0, {15344, 25584}, {127, 0, 0, 255} }},
+	{{ {-500, -120, 2000}, 0, {15344, 30704}, {127, 0, 0, 255} }},
+	{{ {-500, -520, 2000}, 0, {19440, 30704}, {127, 0, 0, 255} }},
+	{{ {-500, -520, 1500}, 0, {19440, 25584}, {127, 0, 0, 255} }},
+	{{ {-500, -120, 1000}, 0, {15344, 30704}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 500}, 0, {10224, 25584}, {0, 127, 0, 255} }},
+	{{ {-1000, -120, 1000}, 0, {10224, 30704}, {0, 127, 0, 255} }},
+	{{ {0, -120, 500}, 0, {20464, 25584}, {0, 127, 0, 255} }},
+	{{ {0, -120, 0}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 0}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {-500, -120, 500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {-500, -120, -31}, 0, {15344, 20150}, {0, 127, 0, 255} }},
+	{{ {-500, -120, -500}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {-969, -120, -500}, 0, {10538, 15344}, {0, 127, 0, 255} }},
+	{{ {-969, -120, -31}, 0, {10538, 20150}, {0, 127, 0, 255} }},
+	{{ {-31, -120, -500}, 0, {20150, 15344}, {0, 127, 0, 255} }},
+	{{ {-31, -120, -969}, 0, {20150, 10538}, {0, 127, 0, 255} }},
+	{{ {-500, -120, -969}, 0, {15344, 10538}, {0, 127, 0, 255} }},
+	{{ {500, -520, 2000}, 0, {25584, 30704}, {0, 127, 0, 255} }},
+	{{ {500, -520, 1500}, 0, {25584, 25584}, {0, 127, 0, 255} }},
+	{{ {0, -520, 1500}, 0, {20464, 25584}, {0, 127, 0, 255} }},
+	{{ {0, -520, 2000}, 0, {20464, 30704}, {0, 127, 0, 255} }},
+	{{ {0, -520, 1500}, 0, {20464, 31728}, {0, 127, 0, 255} }},
+	{{ {0, -520, 1000}, 0, {20464, 26608}, {0, 127, 0, 255} }},
+	{{ {-500, -520, 1000}, 0, {15344, 26608}, {0, 127, 0, 255} }},
+	{{ {-500, -520, 1500}, 0, {15344, 31728}, {0, 127, 0, 255} }},
+	{{ {500, -120, 1000}, 0, {25584, 27632}, {0, 0, 127, 255} }},
+	{{ {0, -120, 1000}, 0, {20464, 27632}, {0, 0, 127, 255} }},
+	{{ {0, -520, 1000}, 0, {20464, 31728}, {0, 0, 127, 255} }},
+	{{ {500, -520, 1000}, 0, {25584, 31728}, {0, 0, 127, 255} }},
+	{{ {500, -120, 1500}, 0, {25584, 31728}, {129, 0, 0, 255} }},
+	{{ {500, -120, 1000}, 0, {25584, 26608}, {129, 0, 0, 255} }},
+	{{ {500, -520, 1000}, 0, {21488, 26608}, {129, 0, 0, 255} }},
+	{{ {500, -520, 1500}, 0, {21488, 31728}, {129, 0, 0, 255} }},
+	{{ {500, -120, 1000}, 0, {20464, 25584}, {0, 127, 0, 255} }},
+	{{ {500, -120, 500}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {0, -120, 500}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {0, -120, 1000}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {300, -120, -1300}, 0, {23536, 7152}, {0, 0, 129, 255} }},
+	{{ {200, -120, -1300}, 0, {22512, 7152}, {0, 0, 129, 255} }},
+	{{ {200, -20, -1300}, 0, {22512, 7152}, {0, 0, 129, 255} }},
+	{{ {300, -20, -1300}, 0, {23536, 7152}, {0, 0, 129, 255} }},
+	{{ {500, -120, 0}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {500, -120, -500}, 0, {20464, 10224}, {0, 127, 0, 255} }},
+	{{ {0, -120, -500}, 0, {15344, 10224}, {0, 127, 0, 255} }},
+	{{ {0, -120, 0}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {500, -120, -500}, 0, {15344, 15344}, {0, 127, 0, 255} }},
+	{{ {800, -120, -500}, 0, {18416, 15344}, {0, 127, 0, 255} }},
+	{{ {800, -120, -700}, 0, {18416, 13296}, {0, 127, 0, 255} }},
+	{{ {800, -120, -800}, 0, {18416, 12272}, {0, 127, 0, 255} }},
+	{{ {800, -120, -1000}, 0, {18416, 10224}, {0, 127, 0, 255} }},
+	{{ {800, -120, -900}, 0, {18416, 11248}, {0, 127, 0, 255} }},
+	{{ {500, -120, -1000}, 0, {15344, 10224}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 500}, 0, {20464, 25584}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 0}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {500, -120, 0}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {500, -120, 500}, 0, {15344, 25584}, {0, 127, 0, 255} }},
+	{{ {800, -120, -900}, 0, {18416, 11248}, {0, 0, 127, 255} }},
+	{{ {1000, -120, -900}, 0, {20464, 11248}, {0, 0, 127, 255} }},
+	{{ {1000, 0, -900}, 0, {20464, 11248}, {0, 0, 127, 255} }},
+	{{ {800, 0, -900}, 0, {18416, 11248}, {0, 0, 127, 255} }},
+	{{ {740, 46, -900}, 0, {18416, 11248}, {129, 0, 0, 255} }},
+	{{ {740, 46, -800}, 0, {18416, 12272}, {129, 0, 0, 255} }},
+	{{ {740, 75, -800}, 0, {18416, 12272}, {129, 0, 0, 255} }},
+	{{ {740, 75, -900}, 0, {18416, 11248}, {129, 0, 0, 255} }},
+	{{ {800, -120, -800}, 0, {18416, 12272}, {129, 0, 0, 255} }},
+	{{ {800, -120, -700}, 0, {18416, 13296}, {129, 0, 0, 255} }},
+	{{ {800, 150, -700}, 0, {18416, 13296}, {129, 0, 0, 255} }},
+	{{ {800, 150, -800}, 0, {18416, 12272}, {129, 0, 0, 255} }},
+	{{ {1000, -120, -500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -700}, 0, {20464, 13296}, {0, 127, 0, 255} }},
+	{{ {800, -120, -700}, 0, {18416, 13296}, {0, 127, 0, 255} }},
+	{{ {800, -120, -500}, 0, {18416, 15344}, {0, 127, 0, 255} }},
+	{{ {1000, 0, -900}, 0, {20464, 11248}, {0, 127, 0, 255} }},
+	{{ {1000, 0, -1000}, 0, {20464, 10224}, {0, 127, 0, 255} }},
+	{{ {800, 0, -1000}, 0, {18416, 10224}, {0, 127, 0, 255} }},
+	{{ {800, 0, -900}, 0, {18416, 11248}, {0, 127, 0, 255} }},
+	{{ {800, -120, -1000}, 0, {18416, 10224}, {129, 0, 0, 255} }},
+	{{ {800, -120, -900}, 0, {18416, 11248}, {129, 0, 0, 255} }},
+	{{ {800, 0, -900}, 0, {18416, 11248}, {129, 0, 0, 255} }},
+	{{ {800, 0, -1000}, 0, {18416, 10224}, {129, 0, 0, 255} }},
+	{{ {800, -120, -800}, 0, {18416, 12272}, {129, 0, 0, 255} }},
+	{{ {800, 46, -800}, 0, {18416, 12272}, {129, 0, 0, 255} }},
+	{{ {800, 46, -900}, 0, {18416, 11248}, {129, 0, 0, 255} }},
+	{{ {1000, -120, -900}, 0, {20464, 11248}, {0, 0, 129, 255} }},
+	{{ {800, -120, -900}, 0, {18416, 11248}, {0, 0, 129, 255} }},
+	{{ {800, 46, -900}, 0, {18416, 11248}, {0, 0, 129, 255} }},
+	{{ {1000, 46, -900}, 0, {20464, 11248}, {0, 0, 129, 255} }},
+	{{ {800, -120, -800}, 0, {18416, 12272}, {0, 0, 127, 255} }},
+	{{ {1000, -120, -800}, 0, {20464, 12272}, {0, 0, 127, 255} }},
+	{{ {1000, 75, -800}, 0, {20464, 12272}, {0, 0, 127, 255} }},
+	{{ {800, 75, -800}, 0, {18416, 12272}, {0, 0, 127, 255} }},
+	{{ {1000, 150, -700}, 0, {20464, 13296}, {0, 127, 0, 255} }},
+	{{ {1000, 150, -800}, 0, {20464, 12272}, {0, 127, 0, 255} }},
+	{{ {800, 150, -800}, 0, {18416, 12272}, {0, 127, 0, 255} }},
+	{{ {800, 150, -700}, 0, {18416, 13296}, {0, 127, 0, 255} }},
+	{{ {1000, -120, -800}, 0, {20464, 12272}, {0, 0, 129, 255} }},
+	{{ {800, -120, -800}, 0, {18416, 12272}, {0, 0, 129, 255} }},
+	{{ {800, 150, -800}, 0, {18416, 12272}, {0, 0, 129, 255} }},
+	{{ {1000, 150, -800}, 0, {20464, 12272}, {0, 0, 129, 255} }},
+	{{ {800, -120, -700}, 0, {18416, 13296}, {0, 0, 127, 255} }},
+	{{ {1000, -120, -700}, 0, {20464, 13296}, {0, 0, 127, 255} }},
+	{{ {1000, 150, -700}, 0, {20464, 13296}, {0, 0, 127, 255} }},
+	{{ {800, 150, -700}, 0, {18416, 13296}, {0, 0, 127, 255} }},
+	{{ {800, 75, -900}, 0, {18416, 11248}, {0, 0, 129, 255} }},
+	{{ {800, 46, -900}, 0, {18416, 11248}, {0, 0, 129, 255} }},
+	{{ {740, 46, -900}, 0, {17798, 11248}, {0, 0, 129, 255} }},
+	{{ {740, 75, -900}, 0, {17798, 11248}, {0, 0, 129, 255} }},
+	{{ {1000, 75, -800}, 0, {20464, 12272}, {0, 127, 0, 255} }},
+	{{ {1000, 75, -900}, 0, {20464, 11248}, {0, 127, 0, 255} }},
+	{{ {800, 75, -900}, 0, {18416, 11248}, {0, 127, 0, 255} }},
+	{{ {800, 75, -800}, 0, {18416, 12272}, {0, 127, 0, 255} }},
+	{{ {740, 75, -900}, 0, {17798, 11248}, {0, 127, 0, 255} }},
+	{{ {740, 75, -800}, 0, {17798, 12272}, {0, 127, 0, 255} }},
+	{{ {1000, 46, -900}, 0, {20464, 11248}, {0, 0, 129, 255} }},
+	{{ {800, 46, -900}, 0, {18416, 11248}, {0, 0, 129, 255} }},
+	{{ {800, 75, -900}, 0, {18416, 11248}, {0, 0, 129, 255} }},
+	{{ {1000, 75, -900}, 0, {20464, 11248}, {0, 0, 129, 255} }},
+	{{ {800, 46, -800}, 0, {18416, 12272}, {0, 0, 127, 255} }},
+	{{ {800, 75, -800}, 0, {18416, 12272}, {0, 0, 127, 255} }},
+	{{ {740, 75, -800}, 0, {18416, 12272}, {0, 0, 127, 255} }},
+	{{ {740, 46, -800}, 0, {18416, 12272}, {0, 0, 127, 255} }},
+	{{ {800, 46, -900}, 0, {18416, 11248}, {0, 129, 0, 255} }},
+	{{ {800, 46, -800}, 0, {18416, 12272}, {0, 129, 0, 255} }},
+	{{ {740, 46, -800}, 0, {18416, 12272}, {0, 129, 0, 255} }},
+	{{ {740, 46, -900}, 0, {18416, 11248}, {0, 129, 0, 255} }},
+	{{ {-500, -20, -31}, 0, {15344, 20150}, {0, 127, 0, 255} }},
+	{{ {-1000, -20, 0}, 0, {10224, 20464}, {0, 127, 0, 255} }},
+	{{ {-500, -20, 0}, 0, {15344, 20464}, {0, 127, 0, 255} }},
+	{{ {-969, -20, -31}, 0, {10538, 20150}, {0, 127, 0, 255} }},
+	{{ {-969, -20, -31}, 0, {10538, 20150}, {0, 127, 0, 255} }},
+	{{ {-1000, -20, -500}, 0, {10224, 15344}, {0, 127, 0, 255} }},
+	{{ {-1000, -20, 0}, 0, {10224, 20464}, {0, 127, 0, 255} }},
+	{{ {-969, -20, -500}, 0, {10538, 15344}, {0, 127, 0, 255} }},
+	{{ {-500, -20, -969}, 0, {15344, 10538}, {0, 127, 0, 255} }},
+	{{ {0, -20, -1000}, 0, {20464, 10224}, {0, 127, 0, 255} }},
+	{{ {-500, -20, -1000}, 0, {15344, 10224}, {0, 127, 0, 255} }},
+	{{ {-31, -20, -969}, 0, {20150, 10538}, {0, 127, 0, 255} }},
+	{{ {0, -20, -500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {-31, -20, -500}, 0, {20150, 15344}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 1500}, 0, {15344, 31728}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 1000}, 0, {15344, 26608}, {0, 127, 0, 255} }},
+	{{ {500, -120, 1000}, 0, {10224, 26608}, {0, 127, 0, 255} }},
+	{{ {500, -120, 1500}, 0, {10224, 31728}, {0, 127, 0, 255} }},
+	{{ {1000, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1000, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1050, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1050, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1000, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {1000, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {1050, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {1050, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {1000, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1000, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1050, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1050, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1050, -120, 780}, 0, {15856, 18211}, {0, 127, 0, 255} }},
+	{{ {1050, -120, 720}, 0, {15856, 17597}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 720}, 0, {15344, 17597}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 780}, 0, {15344, 18211}, {0, 127, 0, 255} }},
+	{{ {1000, -120, 0}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 500}, 0, {20464, 25584}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 500}, 0, {20464, 25584}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 0}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {1000, -120, -700}, 0, {20464, 13296}, {129, 0, 0, 255} }},
+	{{ {1000, 580, -1000}, 0, {20464, 10224}, {129, 0, 0, 255} }},
+	{{ {1000, -120, -1000}, 0, {20464, 10224}, {129, 0, 0, 255} }},
+	{{ {1000, 580, -700}, 0, {20464, 13296}, {129, 0, 0, 255} }},
+	{{ {1000, 580, -500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1000, -120, -500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 1000}, 0, {15344, 26608}, {129, 0, 0, 255} }},
+	{{ {1000, -120, 1500}, 0, {15344, 31728}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 1500}, 0, {15344, 31728}, {129, 0, 0, 255} }},
+	{{ {1000, 580, 1000}, 0, {15344, 26608}, {129, 0, 0, 255} }},
+	{{ {-1000, -120, 1000}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 780}, 0, {20464, 17597}, {127, 0, 0, 255} }},
+	{{ {-1000, -20, 780}, 0, {20464, 17597}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 1000}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 720}, 0, {20464, 18211}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 500}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 500}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {-1000, -20, 720}, 0, {20464, 18211}, {127, 0, 0, 255} }},
+	{{ {-1000, -20, 720}, 0, {20464, 18211}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 500}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 1000}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {-1000, -20, 780}, 0, {20464, 17597}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 2000}, 0, {10224, 30704}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 1500}, 0, {10224, 25584}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 1500}, 0, {10224, 25584}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 2000}, 0, {10224, 30704}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 0}, 0, {10224, 30704}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, -500}, 0, {10224, 25584}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, -500}, 0, {10224, 25584}, {127, 0, 0, 255} }},
+	{{ {-1000, 580, 0}, 0, {10224, 30704}, {127, 0, 0, 255} }},
+	{{ {0, -120, -1000}, 0, {20464, 10224}, {127, 0, 0, 255} }},
+	{{ {0, -120, -1500}, 0, {20464, 5104}, {127, 0, 0, 255} }},
+	{{ {0, 580, -1500}, 0, {20464, 5104}, {127, 0, 0, 255} }},
+	{{ {0, 580, -1000}, 0, {20464, 10224}, {127, 0, 0, 255} }},
+	{{ {0, -120, -1500}, 0, {20464, 5104}, {0, 0, 127, 255} }},
+	{{ {500, -120, -1500}, 0, {25584, 5104}, {0, 0, 127, 255} }},
+	{{ {500, 580, -1500}, 0, {25584, 5104}, {0, 0, 127, 255} }},
+	{{ {0, 580, -1500}, 0, {20464, 5104}, {0, 0, 127, 255} }},
+	{{ {500, -120, 2000}, 0, {25584, 30704}, {0, 0, 129, 255} }},
+	{{ {0, -120, 2000}, 0, {20464, 30704}, {0, 0, 129, 255} }},
+	{{ {0, 580, 2000}, 0, {20464, 30704}, {0, 0, 129, 255} }},
+	{{ {500, 580, 2000}, 0, {25584, 30704}, {0, 0, 129, 255} }},
+	{{ {-500, -120, 2000}, 0, {15344, 30704}, {0, 0, 129, 255} }},
+	{{ {-1000, -120, 2000}, 0, {10224, 30704}, {0, 0, 129, 255} }},
+	{{ {-1000, 580, 2000}, 0, {10224, 30704}, {0, 0, 129, 255} }},
+	{{ {-500, 580, 2000}, 0, {15344, 30704}, {0, 0, 129, 255} }},
+	{{ {0, -120, -1000}, 0, {10224, 30704}, {0, 0, 127, 255} }},
+	{{ {0, 580, -1000}, 0, {10224, 30704}, {0, 0, 127, 255} }},
+	{{ {-500, 580, -1000}, 0, {10224, 25584}, {0, 0, 127, 255} }},
+	{{ {-500, -120, -1000}, 0, {10224, 25584}, {0, 0, 127, 255} }},
+	{{ {300, -20, -1200}, 0, {23536, 8176}, {0, 127, 0, 255} }},
+	{{ {300, -20, -1300}, 0, {23536, 7152}, {0, 127, 0, 255} }},
+	{{ {200, -20, -1300}, 0, {22512, 7152}, {0, 127, 0, 255} }},
+	{{ {200, -20, -1200}, 0, {22512, 8176}, {0, 127, 0, 255} }},
+	{{ {200, -120, -1300}, 0, {22512, 7152}, {129, 0, 0, 255} }},
+	{{ {200, -120, -1200}, 0, {22512, 8176}, {129, 0, 0, 255} }},
+	{{ {200, -20, -1200}, 0, {22512, 8176}, {129, 0, 0, 255} }},
+	{{ {200, -20, -1300}, 0, {22512, 7152}, {129, 0, 0, 255} }},
+	{{ {200, -120, -1200}, 0, {22512, 8176}, {0, 0, 127, 255} }},
+	{{ {300, -120, -1200}, 0, {23536, 8176}, {0, 0, 127, 255} }},
+	{{ {300, -20, -1200}, 0, {23536, 8176}, {0, 0, 127, 255} }},
+	{{ {200, -20, -1200}, 0, {22512, 8176}, {0, 0, 127, 255} }},
+	{{ {300, -120, -1200}, 0, {23536, 8176}, {127, 0, 0, 255} }},
+	{{ {300, -120, -1300}, 0, {23536, 7152}, {127, 0, 0, 255} }},
+	{{ {300, -20, -1300}, 0, {23536, 7152}, {127, 0, 0, 255} }},
+	{{ {300, -20, -1200}, 0, {23536, 8176}, {127, 0, 0, 255} }},
+	{{ {200, -120, -1200}, 0, {22512, 8176}, {0, 127, 0, 255} }},
+	{{ {200, -120, -1300}, 0, {22512, 7152}, {0, 127, 0, 255} }},
+	{{ {0, -120, -1500}, 0, {20464, 5104}, {0, 127, 0, 255} }},
+	{{ {500, -120, -1500}, 0, {25584, 5104}, {0, 127, 0, 255} }},
+	{{ {300, -120, -1300}, 0, {23536, 7152}, {0, 127, 0, 255} }},
+	{{ {500, -120, -1000}, 0, {25584, 10224}, {0, 127, 0, 255} }},
+	{{ {300, -120, -1200}, 0, {23536, 8176}, {0, 127, 0, 255} }},
+	{{ {0, -120, -1000}, 0, {20464, 10224}, {0, 127, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 16, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 5, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSP1Triangle(11, 13, 14, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 31, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 47, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(11, 12, 8, 0),
+	gsSP1Triangle(11, 13, 12, 0),
+	gsSP1Triangle(12, 14, 8, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 62, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 78, 15, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(9, 12, 13, 0),
+	gsSP1Triangle(9, 13, 14, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 93, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 109, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(11, 10, 12, 0),
+	gsSP1Triangle(11, 12, 13, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 123, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 15, 13, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 139, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 3, 1, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 7, 5, 0),
+	gsSP1Triangle(7, 8, 5, 0),
+	gsSP1Triangle(7, 9, 8, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(10, 12, 13, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 153, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 169, 14, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 7, 5, 0),
+	gsSP1Triangle(4, 8, 7, 0),
+	gsSP1Triangle(4, 9, 8, 0),
+	gsSP1Triangle(10, 11, 12, 0),
+	gsSP1Triangle(10, 12, 13, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 183, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 199, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 215, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_1 + 231, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(9, 11, 10, 0),
+	gsSP1Triangle(9, 12, 11, 0),
+	gsSP1Triangle(12, 13, 11, 0),
+	gsSP1Triangle(12, 14, 13, 0),
+	gsSP1Triangle(14, 15, 13, 0),
+	gsSP1Triangle(14, 8, 15, 0),
+	gsSP1Triangle(8, 10, 15, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_2[24] = {
+	{{ {-500, -120, -31}, 0, {15344, 20150}, {0, 0, 129, 255} }},
+	{{ {-969, -120, -31}, 0, {10538, 20150}, {0, 0, 129, 255} }},
+	{{ {-969, -20, -31}, 0, {10538, 20150}, {0, 0, 129, 255} }},
+	{{ {-500, -20, -31}, 0, {15344, 20150}, {0, 0, 129, 255} }},
+	{{ {-500, -120, 0}, 0, {15344, 20464}, {0, 0, 127, 255} }},
+	{{ {0, -120, 0}, 0, {20464, 20464}, {0, 0, 127, 255} }},
+	{{ {0, -20, 0}, 0, {20464, 20464}, {0, 0, 127, 255} }},
+	{{ {-500, -20, 0}, 0, {15344, 20464}, {0, 0, 127, 255} }},
+	{{ {0, -120, 0}, 0, {15344, 15344}, {127, 0, 0, 255} }},
+	{{ {0, -120, -500}, 0, {15344, 10224}, {127, 0, 0, 255} }},
+	{{ {0, -20, -500}, 0, {15344, 10224}, {127, 0, 0, 255} }},
+	{{ {0, -20, 0}, 0, {15344, 15344}, {127, 0, 0, 255} }},
+	{{ {-31, -120, -969}, 0, {20150, 10538}, {129, 0, 0, 255} }},
+	{{ {-31, -20, -500}, 0, {20150, 15344}, {129, 0, 0, 255} }},
+	{{ {-31, -20, -969}, 0, {20150, 10538}, {129, 0, 0, 255} }},
+	{{ {-31, -120, -500}, 0, {20150, 15344}, {129, 0, 0, 255} }},
+	{{ {-500, -120, -969}, 0, {15344, 10538}, {0, 0, 127, 255} }},
+	{{ {-31, -120, -969}, 0, {20150, 10538}, {0, 0, 127, 255} }},
+	{{ {-31, -20, -969}, 0, {20150, 10538}, {0, 0, 127, 255} }},
+	{{ {-500, -20, -969}, 0, {15344, 10538}, {0, 0, 127, 255} }},
+	{{ {-969, -120, -31}, 0, {10538, 20150}, {127, 0, 0, 255} }},
+	{{ {-969, -20, -500}, 0, {10538, 15344}, {127, 0, 0, 255} }},
+	{{ {-969, -20, -31}, 0, {10538, 20150}, {127, 0, 0, 255} }},
+	{{ {-969, -120, -500}, 0, {10538, 15344}, {127, 0, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_2[] = {
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_2 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 15, 13, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_2 + 16, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 7, 5, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_3[28] = {
+	{{ {-31, -120, -31}, 0, {20150, 20150}, {0, 0, 129, 255} }},
+	{{ {-500, -120, -31}, 0, {15344, 20150}, {0, 0, 129, 255} }},
+	{{ {-500, -20, -31}, 0, {15344, 20150}, {0, 0, 129, 255} }},
+	{{ {-31, -20, -31}, 0, {20150, 20150}, {0, 0, 129, 255} }},
+	{{ {-969, -120, -500}, 0, {10538, 15344}, {127, 0, 0, 255} }},
+	{{ {-969, -120, -969}, 0, {10538, 10538}, {127, 0, 0, 255} }},
+	{{ {-969, -20, -969}, 0, {10538, 10538}, {127, 0, 0, 255} }},
+	{{ {-969, -20, -500}, 0, {10538, 15344}, {127, 0, 0, 255} }},
+	{{ {-1000, -120, 0}, 0, {10224, 20464}, {0, 0, 127, 255} }},
+	{{ {-500, -120, 0}, 0, {15344, 20464}, {0, 0, 127, 255} }},
+	{{ {-500, -20, 0}, 0, {15344, 20464}, {0, 0, 127, 255} }},
+	{{ {-1000, -20, 0}, 0, {10224, 20464}, {0, 0, 127, 255} }},
+	{{ {-969, -120, -969}, 0, {10538, 10538}, {0, 0, 127, 255} }},
+	{{ {-500, -120, -969}, 0, {15344, 10538}, {0, 0, 127, 255} }},
+	{{ {-500, -20, -969}, 0, {15344, 10538}, {0, 0, 127, 255} }},
+	{{ {-969, -20, -969}, 0, {10538, 10538}, {0, 0, 127, 255} }},
+	{{ {-31, -120, -500}, 0, {20150, 15344}, {129, 0, 0, 255} }},
+	{{ {-31, -120, -31}, 0, {20150, 20150}, {129, 0, 0, 255} }},
+	{{ {-31, -20, -31}, 0, {20150, 20150}, {129, 0, 0, 255} }},
+	{{ {-31, -20, -500}, 0, {20150, 15344}, {129, 0, 0, 255} }},
+	{{ {0, -120, -500}, 0, {15344, 20464}, {127, 0, 0, 255} }},
+	{{ {0, -120, -1000}, 0, {15344, 15344}, {127, 0, 0, 255} }},
+	{{ {0, -20, -1000}, 0, {15344, 15344}, {127, 0, 0, 255} }},
+	{{ {0, -20, -500}, 0, {15344, 20464}, {127, 0, 0, 255} }},
+	{{ {194, -120, 306}, 0, {17329, 18687}, {0, 0, 127, 255} }},
+	{{ {306, -120, 306}, 0, {18479, 18687}, {0, 0, 127, 255} }},
+	{{ {306, 340, 306}, 0, {18479, 13978}, {0, 0, 127, 255} }},
+	{{ {194, 340, 306}, 0, {17329, 13978}, {0, 0, 127, 255} }},
+};
+
+Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_3[] = {
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_3 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_3 + 16, 12, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_4[4] = {
+	{{ {600, -120, -1400}, 0, {4152, -3160}, {0, 127, 0, 255} }},
+	{{ {600, -120, -1100}, 0, {4152, 4152}, {0, 127, 0, 255} }},
+	{{ {900, -120, -1100}, 0, {-3160, 4152}, {0, 127, 0, 255} }},
+	{{ {900, -120, -1400}, 0, {-3160, -3160}, {0, 127, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_4[] = {
+	gsSPVertex(test_map_dl_Plane_mesh_layer_Opaque_vtx_4 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_002_mesh_layer_Opaque_vtx_0[16] = {
+	{{ {-500, -120, -34}, 0, {-5648, -528}, {0, 0, 129, 255} }},
+	{{ {-500, -20, -34}, 0, {-5648, 1520}, {0, 0, 129, 255} }},
+	{{ {-34, -20, -34}, 0, {6640, 1520}, {0, 0, 129, 255} }},
+	{{ {-34, -120, -34}, 0, {6640, -528}, {0, 0, 129, 255} }},
+	{{ {-34, -120, -34}, 0, {-5648, -528}, {129, 0, 0, 255} }},
+	{{ {-34, -20, -34}, 0, {-5648, 1520}, {129, 0, 0, 255} }},
+	{{ {-34, -20, -500}, 0, {6640, 1520}, {129, 0, 0, 255} }},
+	{{ {-34, -120, -500}, 0, {6640, -528}, {129, 0, 0, 255} }},
+	{{ {-966, -120, -34}, 0, {-5648, -528}, {0, 0, 129, 255} }},
+	{{ {-966, -20, -34}, 0, {-5648, 1520}, {0, 0, 129, 255} }},
+	{{ {-500, -20, -34}, 0, {6640, 1520}, {0, 0, 129, 255} }},
+	{{ {-500, -120, -34}, 0, {6640, -528}, {0, 0, 129, 255} }},
+	{{ {-34, -120, -500}, 0, {-5648, -528}, {129, 0, 0, 255} }},
+	{{ {-34, -20, -500}, 0, {-5648, 1520}, {129, 0, 0, 255} }},
+	{{ {-34, -20, -966}, 0, {6640, 1520}, {129, 0, 0, 255} }},
+	{{ {-34, -120, -966}, 0, {6640, -528}, {129, 0, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_002_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(test_map_dl_Plane_002_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_003_mesh_layer_Opaque_vtx_0[16] = {
+	{{ {-502, -120, 3}, 0, {-5648, 1520}, {0, 0, 127, 255} }},
+	{{ {3, -120, 3}, 0, {6640, 1520}, {0, 0, 127, 255} }},
+	{{ {3, -20, 3}, 0, {6640, -528}, {0, 0, 127, 255} }},
+	{{ {-502, -20, 3}, 0, {-5648, -528}, {0, 0, 127, 255} }},
+	{{ {3, -120, 3}, 0, {-5648, 1520}, {127, 0, 0, 255} }},
+	{{ {3, -120, -502}, 0, {6640, 1520}, {127, 0, 0, 255} }},
+	{{ {3, -20, -502}, 0, {6640, -528}, {127, 0, 0, 255} }},
+	{{ {3, -20, 3}, 0, {-5648, -528}, {127, 0, 0, 255} }},
+	{{ {-1008, -120, 3}, 0, {-5648, 1520}, {0, 0, 127, 255} }},
+	{{ {-502, -120, 3}, 0, {6640, 1520}, {0, 0, 127, 255} }},
+	{{ {-502, -20, 3}, 0, {6640, -528}, {0, 0, 127, 255} }},
+	{{ {-1008, -20, 3}, 0, {-5648, -528}, {0, 0, 127, 255} }},
+	{{ {3, -120, -502}, 0, {-5648, 1520}, {127, 0, 0, 255} }},
+	{{ {3, -120, -1008}, 0, {6640, 1520}, {127, 0, 0, 255} }},
+	{{ {3, -20, -1008}, 0, {6640, -528}, {127, 0, 0, 255} }},
+	{{ {3, -20, -502}, 0, {-5648, -528}, {127, 0, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_003_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(test_map_dl_Plane_003_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_004_mesh_layer_Opaque_vtx_0[4] = {
+	{{ {194, -120, 307}, 0, {-1144, 5616}, {0, 0, 127, 255} }},
+	{{ {306, -120, 307}, 0, {1360, 5616}, {0, 0, 127, 255} }},
+	{{ {306, 340, 307}, 0, {1360, -4624}, {0, 0, 127, 255} }},
+	{{ {194, 340, 307}, 0, {-1144, -4624}, {0, 0, 127, 255} }},
+};
+
+Gfx test_map_dl_Plane_004_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(test_map_dl_Plane_004_mesh_layer_Opaque_vtx_0 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Water_Box_Mesh_mesh_layer_Transparent_vtx_0[4] = {
+	{{ {-528, -130, 2000}, 0, {-16, 8176}, {0, 127, 0, 255} }},
+	{{ {539, -130, 2000}, 0, {8176, 8176}, {0, 127, 0, 255} }},
+	{{ {539, -130, 933}, 0, {8176, -16}, {0, 127, 0, 255} }},
+	{{ {-528, -130, 933}, 0, {-16, -16}, {0, 127, 0, 255} }},
+};
+
+Gfx test_map_dl_Water_Box_Mesh_mesh_layer_Transparent_tri_0[] = {
+	gsSPVertex(test_map_dl_Water_Box_Mesh_mesh_layer_Transparent_vtx_0 + 0, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_test_map_dl_Floor_climbable_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 1, test_map_dl_Test_Floor_00_i8),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_test_map_dl_FloorDark_climbable_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 214, 214, 214, 255),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 1, test_map_dl_Test_Floor_00_i8),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_test_map_dl_vines_cosmetic_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, TEXEL0, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_RGBA16 | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_TEX_EDGE2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, test_map_dl_FT_0x5B2C8_32x32_RGBA16_pal_rgba16),
+	gsDPSetTile(0, 0, 0, 256, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadTLUTCmd(5, 88),
+	gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 1, test_map_dl_FT_0x5B2C8_32x32_RGBA16_ci8),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_test_map_dl_oot_water_mat_layerTransparent[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL1, TEXEL0, ENV_ALPHA, TEXEL0, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, COMBINED, 0, PRIMITIVE, 0),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_CULL_BACK | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_XLU_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 128),
+	gsDPSetEnvColor(255, 255, 255, 128),
+	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 1, test_map_dl__000170B8_32x32_rgba16_rgba16),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 1023, 256),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 0, 1, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 1, G_TX_WRAP | G_TX_NOMIRROR, 5, 1),
+	gsDPSetTileSize(1, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_dl_Plane_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_test_map_dl_FloorDark_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_test_map_dl_Floor_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_mesh_layer_Opaque_tri_1),
+	gsSPDisplayList(mat_test_map_dl_Floor_climbable_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_mesh_layer_Opaque_tri_2),
+	gsSPDisplayList(mat_test_map_dl_FloorDark_climbable_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_mesh_layer_Opaque_tri_3),
+	gsSPDisplayList(mat_test_map_dl_vines_cosmetic_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_mesh_layer_Opaque_tri_4),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_dl_Plane_002_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_test_map_dl_vines_cosmetic_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_002_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_dl_Plane_003_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_test_map_dl_vines_cosmetic_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_003_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_dl_Plane_004_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_test_map_dl_vines_cosmetic_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_004_mesh_layer_Opaque_tri_0),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_dl_Water_Box_Mesh_mesh_layer_Transparent[] = {
+	gsSPDisplayList(mat_test_map_dl_oot_water_mat_layerTransparent),
+	gsSPDisplayList(test_map_dl_Water_Box_Mesh_mesh_layer_Transparent_tri_0),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/scenes/test_map/test_map_room_1.c b/assets_hm_pack/scenes/test_map/test_map_room_1.c
new file mode 100644
index 000000000..779a91720
--- /dev/null
+++ b/assets_hm_pack/scenes/test_map/test_map_room_1.c
@@ -0,0 +1,248 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+#include "test_map_scene.h"
+#include "segment_symbols.h"
+#include "command_macros_base.h"
+#include "z64cutscene_commands.h"
+#include "variables.h"
+
+/**
+ * Header Child Day (Default)
+*/
+#define LENGTH_TEST_MAP_ROOM_1_HEADER00_OBJECTLIST 2
+#define LENGTH_TEST_MAP_ROOM_1_HEADER00_ACTORLIST 1
+SceneCmd test_map_room_1_header00[] = {
+    SCENE_CMD_ECHO_SETTINGS(0x00),
+    SCENE_CMD_ROOM_BEHAVIOR(0x00, 0x00, false, false),
+    SCENE_CMD_SKYBOX_DISABLES(false, false),
+    SCENE_CMD_TIME_SETTINGS(0xFF, 0xFF, 10),
+    SCENE_CMD_ROOM_SHAPE(&test_map_room_1_shapeHeader),
+    SCENE_CMD_OBJECT_LIST(LENGTH_TEST_MAP_ROOM_1_HEADER00_OBJECTLIST, test_map_room_1_header00_objectList),
+    SCENE_CMD_ACTOR_LIST(LENGTH_TEST_MAP_ROOM_1_HEADER00_ACTORLIST, test_map_room_1_header00_actorList),
+    SCENE_CMD_END(),
+};
+
+s16 test_map_room_1_header00_objectList[LENGTH_TEST_MAP_ROOM_1_HEADER00_OBJECTLIST] = {
+    OBJECT_WIZ,
+    OBJECT_BB,
+};
+
+ActorEntry test_map_room_1_header00_actorList[LENGTH_TEST_MAP_ROOM_1_HEADER00_ACTORLIST] = {
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_EN_WIZ,
+        /* Position   */ { 1750, -120, 750 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(180.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+};
+
+RoomShapeNormal test_map_room_1_shapeHeader = {
+    ROOM_SHAPE_TYPE_NORMAL,
+    ARRAY_COUNT(test_map_room_1_shapeDListEntry),
+    test_map_room_1_shapeDListEntry,
+    test_map_room_1_shapeDListEntry + ARRAY_COUNT(test_map_room_1_shapeDListEntry)
+};
+
+RoomShapeDListsEntry test_map_room_1_shapeDListEntry[1] = {
+    { test_map_room_1_entry_0_opaque, NULL },
+};
+
+Gfx test_map_room_1_entry_0_opaque[] = {
+	gsSPDisplayList(test_map_dl_Plane_001_mesh_layer_Opaque),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_001_mesh_layer_Opaque_vtx_0[56] = {
+	{{ {1050, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1050, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1100, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1100, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {1100, -120, 780}, 0, {16368, 18211}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 720}, 0, {16368, 17597}, {0, 127, 0, 255} }},
+	{{ {1050, -120, 720}, 0, {15856, 17597}, {0, 127, 0, 255} }},
+	{{ {1050, -120, 780}, 0, {15856, 18211}, {0, 127, 0, 255} }},
+	{{ {1050, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1050, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1100, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1100, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {1500, -120, 1000}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 500}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 1000}, 0, {16368, 20464}, {0, 127, 0, 255} }},
+	{{ {1050, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {1050, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {1100, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {1100, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {2000, -120, 500}, 0, {30704, 20464}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 105}, 0, {30704, 16419}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 105}, 0, {25584, 16419}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 500}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {2400, -120, 1000}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {2400, -120, 500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 500}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 1000}, 0, {16368, 20464}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 500}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 500}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {1100, -20, 720}, 0, {20464, 17597}, {127, 0, 0, 255} }},
+	{{ {1100, -120, 720}, 0, {20464, 17597}, {127, 0, 0, 255} }},
+	{{ {1100, -120, 780}, 0, {20464, 18211}, {127, 0, 0, 255} }},
+	{{ {1100, -20, 780}, 0, {20464, 18211}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 1000}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {1100, -120, 1000}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {1100, -20, 780}, 0, {20464, 18211}, {127, 0, 0, 255} }},
+	{{ {1100, -20, 720}, 0, {20464, 17597}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 500}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 1000}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {2000, -120, 1395}, 0, {30704, 19389}, {0, 0, 129, 255} }},
+	{{ {1500, -120, 1395}, 0, {25584, 19389}, {0, 0, 129, 255} }},
+	{{ {1500, 580, 1395}, 0, {25584, 19389}, {0, 0, 129, 255} }},
+	{{ {2000, 580, 1395}, 0, {30704, 19389}, {0, 0, 129, 255} }},
+	{{ {2400, -120, 500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {2400, -120, 1000}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {2400, 580, 1000}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {2400, 580, 500}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1500, -120, 105}, 0, {25584, 16419}, {0, 0, 127, 255} }},
+	{{ {2000, -120, 105}, 0, {30704, 16419}, {0, 0, 127, 255} }},
+	{{ {2000, 580, 105}, 0, {30704, 16419}, {0, 0, 127, 255} }},
+	{{ {1500, 580, 105}, 0, {25584, 16419}, {0, 0, 127, 255} }},
+	{{ {2000, -120, 1395}, 0, {30704, 19389}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 1000}, 0, {30704, 15344}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 1000}, 0, {25584, 15344}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 1395}, 0, {25584, 19389}, {0, 127, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_001_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_0 + 48, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_001_mesh_layer_Opaque_vtx_1[52] = {
+	{{ {2000, -120, 1000}, 0, {30704, 20464}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 500}, 0, {30704, 15344}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 500}, 0, {25584, 15344}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 1000}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 500}, 0, {29680, 20464}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 105}, 0, {29680, 16419}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 105}, 0, {25584, 16419}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 500}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 1395}, 0, {20464, 19389}, {0, 127, 0, 255} }},
+	{{ {1500, -120, 1000}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 1000}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {1100, -120, 1395}, 0, {16368, 19389}, {0, 127, 0, 255} }},
+	{{ {2400, -120, 500}, 0, {29680, 20464}, {0, 127, 0, 255} }},
+	{{ {2400, -120, 105}, 0, {29680, 16419}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 105}, 0, {25584, 16419}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 500}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 105}, 0, {25584, 16419}, {0, 0, 127, 255} }},
+	{{ {2400, -120, 105}, 0, {29680, 16419}, {0, 0, 127, 255} }},
+	{{ {2400, 580, 105}, 0, {29680, 16419}, {0, 0, 127, 255} }},
+	{{ {2000, 580, 105}, 0, {25584, 16419}, {0, 0, 127, 255} }},
+	{{ {1100, -120, 500}, 0, {25584, 20464}, {127, 0, 0, 255} }},
+	{{ {1100, -120, 105}, 0, {25584, 16419}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 105}, 0, {25584, 16419}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 500}, 0, {25584, 20464}, {127, 0, 0, 255} }},
+	{{ {1500, -120, 1395}, 0, {20464, 19389}, {0, 0, 129, 255} }},
+	{{ {1100, -120, 1395}, 0, {16368, 19389}, {0, 0, 129, 255} }},
+	{{ {1100, 580, 1395}, 0, {16368, 19389}, {0, 0, 129, 255} }},
+	{{ {1500, 580, 1395}, 0, {20464, 19389}, {0, 0, 129, 255} }},
+	{{ {1100, -120, 1395}, 0, {16368, 19389}, {127, 0, 0, 255} }},
+	{{ {1100, -120, 1000}, 0, {16368, 15344}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 1000}, 0, {16368, 15344}, {127, 0, 0, 255} }},
+	{{ {1100, 580, 1395}, 0, {16368, 19389}, {127, 0, 0, 255} }},
+	{{ {2400, -120, 105}, 0, {29680, 16419}, {129, 0, 0, 255} }},
+	{{ {2400, -120, 500}, 0, {29680, 20464}, {129, 0, 0, 255} }},
+	{{ {2400, 580, 500}, 0, {29680, 20464}, {129, 0, 0, 255} }},
+	{{ {2400, 580, 105}, 0, {29680, 16419}, {129, 0, 0, 255} }},
+	{{ {2400, -120, 1395}, 0, {20464, 19389}, {0, 0, 129, 255} }},
+	{{ {2000, -120, 1395}, 0, {16368, 19389}, {0, 0, 129, 255} }},
+	{{ {2000, 580, 1395}, 0, {16368, 19389}, {0, 0, 129, 255} }},
+	{{ {2400, 580, 1395}, 0, {20464, 19389}, {0, 0, 129, 255} }},
+	{{ {2400, -120, 1000}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {2400, -120, 1395}, 0, {20464, 19389}, {129, 0, 0, 255} }},
+	{{ {2400, 580, 1395}, 0, {20464, 19389}, {129, 0, 0, 255} }},
+	{{ {2400, 580, 1000}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {1100, -120, 105}, 0, {25584, 16419}, {0, 0, 127, 255} }},
+	{{ {1500, -120, 105}, 0, {29680, 16419}, {0, 0, 127, 255} }},
+	{{ {1500, 580, 105}, 0, {29680, 16419}, {0, 0, 127, 255} }},
+	{{ {1100, 580, 105}, 0, {25584, 16419}, {0, 0, 127, 255} }},
+	{{ {2400, -120, 1395}, 0, {20464, 19389}, {0, 127, 0, 255} }},
+	{{ {2400, -120, 1000}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 1000}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {2000, -120, 1395}, 0, {16368, 19389}, {0, 127, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_001_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_1 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_1 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_001_mesh_layer_Opaque_vtx_1 + 48, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_dl_Plane_001_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_test_map_dl_Floor_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_001_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_test_map_dl_FloorDark_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_001_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/scenes/test_map/test_map_room_2.c b/assets_hm_pack/scenes/test_map/test_map_room_2.c
new file mode 100644
index 000000000..88bd2a41b
--- /dev/null
+++ b/assets_hm_pack/scenes/test_map/test_map_room_2.c
@@ -0,0 +1,255 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+#include "test_map_scene.h"
+#include "segment_symbols.h"
+#include "command_macros_base.h"
+#include "z64cutscene_commands.h"
+#include "variables.h"
+
+/**
+ * Header Child Day (Default)
+*/
+#define LENGTH_TEST_MAP_ROOM_2_HEADER00_OBJECTLIST 1
+#define LENGTH_TEST_MAP_ROOM_2_HEADER00_ACTORLIST 2
+SceneCmd test_map_room_2_header00[] = {
+    SCENE_CMD_ECHO_SETTINGS(0x00),
+    SCENE_CMD_ROOM_BEHAVIOR(0x00, 0x00, false, false),
+    SCENE_CMD_SKYBOX_DISABLES(false, false),
+    SCENE_CMD_TIME_SETTINGS(0xFF, 0xFF, 10),
+    SCENE_CMD_ROOM_SHAPE(&test_map_room_2_shapeHeader),
+    SCENE_CMD_OBJECT_LIST(LENGTH_TEST_MAP_ROOM_2_HEADER00_OBJECTLIST, test_map_room_2_header00_objectList),
+    SCENE_CMD_ACTOR_LIST(LENGTH_TEST_MAP_ROOM_2_HEADER00_ACTORLIST, test_map_room_2_header00_actorList),
+    SCENE_CMD_END(),
+};
+
+s16 test_map_room_2_header00_objectList[LENGTH_TEST_MAP_ROOM_2_HEADER00_OBJECTLIST] = {
+    OBJECT_POLS_VOICE,
+};
+
+ActorEntry test_map_room_2_header00_actorList[LENGTH_TEST_MAP_ROOM_2_HEADER00_ACTORLIST] = {
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_POLS_VOICE,
+        /* Position   */ { -1755, -120, 1061 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(220.479), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+
+    // Custom Actor
+    {
+        /* Actor ID   */ ACTOR_POLS_VOICE,
+        /* Position   */ { -1758, -120, 528 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(46.857), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0000
+    },
+};
+
+RoomShapeNormal test_map_room_2_shapeHeader = {
+    ROOM_SHAPE_TYPE_NORMAL,
+    ARRAY_COUNT(test_map_room_2_shapeDListEntry),
+    test_map_room_2_shapeDListEntry,
+    test_map_room_2_shapeDListEntry + ARRAY_COUNT(test_map_room_2_shapeDListEntry)
+};
+
+RoomShapeDListsEntry test_map_room_2_shapeDListEntry[1] = {
+    { test_map_room_2_entry_0_opaque, NULL },
+};
+
+Gfx test_map_room_2_entry_0_opaque[] = {
+	gsSPDisplayList(test_map_dl_Plane_005_mesh_layer_Opaque),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_005_mesh_layer_Opaque_vtx_0[56] = {
+	{{ {-1050, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1050, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1100, -20, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1100, -120, 720}, 0, {-16, 1008}, {0, 0, 127, 255} }},
+	{{ {-1100, -120, 720}, 0, {16368, 18211}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 780}, 0, {16368, 17597}, {0, 127, 0, 255} }},
+	{{ {-1050, -120, 780}, 0, {15856, 17597}, {0, 127, 0, 255} }},
+	{{ {-1050, -120, 720}, 0, {15856, 18211}, {0, 127, 0, 255} }},
+	{{ {-1050, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1050, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1100, -120, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1100, -20, 780}, 0, {-16, 1008}, {0, 0, 129, 255} }},
+	{{ {-1500, -120, 500}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 1000}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 1000}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 500}, 0, {16368, 20464}, {0, 127, 0, 255} }},
+	{{ {-1050, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-1050, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-1100, -20, 780}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-1100, -20, 720}, 0, {-16, 1008}, {0, 129, 0, 255} }},
+	{{ {-2000, -120, 105}, 0, {30704, 19389}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 500}, 0, {30704, 15344}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 500}, 0, {25584, 15344}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 105}, 0, {25584, 19389}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 1000}, 0, {30704, 20464}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 1395}, 0, {30704, 16419}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 1395}, 0, {25584, 16419}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 1000}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {-2400, -120, 500}, 0, {20464, 20464}, {0, 127, 0, 255} }},
+	{{ {-2400, -120, 1000}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 1000}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 500}, 0, {16368, 20464}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 1000}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 1000}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {-1100, -20, 780}, 0, {20464, 17597}, {129, 0, 0, 255} }},
+	{{ {-1100, -120, 780}, 0, {20464, 17597}, {129, 0, 0, 255} }},
+	{{ {-1100, -120, 720}, 0, {20464, 18211}, {129, 0, 0, 255} }},
+	{{ {-1100, -20, 720}, 0, {20464, 18211}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 500}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {-1100, -120, 500}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {-1100, -20, 720}, 0, {20464, 18211}, {129, 0, 0, 255} }},
+	{{ {-1100, -20, 780}, 0, {20464, 17597}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 1000}, 0, {20464, 15344}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 500}, 0, {20464, 20464}, {129, 0, 0, 255} }},
+	{{ {-1500, -120, 1395}, 0, {25584, 16419}, {0, 0, 129, 255} }},
+	{{ {-2000, -120, 1395}, 0, {30704, 16419}, {0, 0, 129, 255} }},
+	{{ {-2000, 580, 1395}, 0, {30704, 16419}, {0, 0, 129, 255} }},
+	{{ {-1500, 580, 1395}, 0, {25584, 16419}, {0, 0, 129, 255} }},
+	{{ {-2000, -120, 105}, 0, {30704, 19389}, {0, 0, 127, 255} }},
+	{{ {-1500, -120, 105}, 0, {25584, 19389}, {0, 0, 127, 255} }},
+	{{ {-1500, 580, 105}, 0, {25584, 19389}, {0, 0, 127, 255} }},
+	{{ {-2000, 580, 105}, 0, {30704, 19389}, {0, 0, 127, 255} }},
+	{{ {-2400, -120, 1000}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {-2400, -120, 500}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {-2400, 580, 500}, 0, {20464, 20464}, {127, 0, 0, 255} }},
+	{{ {-2400, 580, 1000}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+};
+
+Gfx test_map_dl_Plane_005_mesh_layer_Opaque_tri_0[] = {
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_0 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_0 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_0 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_0 + 48, 8, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSPEndDisplayList(),
+};
+
+Vtx test_map_dl_Plane_005_mesh_layer_Opaque_vtx_1[52] = {
+	{{ {-2000, -120, 500}, 0, {30704, 20464}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 1000}, 0, {30704, 15344}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 1000}, 0, {25584, 15344}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 500}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 1000}, 0, {29680, 20464}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 1395}, 0, {29680, 16419}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 1395}, 0, {25584, 16419}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 1000}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 105}, 0, {20464, 19389}, {0, 127, 0, 255} }},
+	{{ {-1500, -120, 500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 500}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 105}, 0, {16368, 19389}, {0, 127, 0, 255} }},
+	{{ {-2400, -120, 1000}, 0, {29680, 20464}, {0, 127, 0, 255} }},
+	{{ {-2400, -120, 1395}, 0, {29680, 16419}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 1395}, 0, {25584, 16419}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 1000}, 0, {25584, 20464}, {0, 127, 0, 255} }},
+	{{ {-2400, -120, 105}, 0, {20464, 19389}, {0, 127, 0, 255} }},
+	{{ {-2400, -120, 500}, 0, {20464, 15344}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 500}, 0, {16368, 15344}, {0, 127, 0, 255} }},
+	{{ {-2000, -120, 105}, 0, {16368, 19389}, {0, 127, 0, 255} }},
+	{{ {-1100, -120, 105}, 0, {16368, 19389}, {129, 0, 0, 255} }},
+	{{ {-1100, -120, 500}, 0, {16368, 15344}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 500}, 0, {16368, 15344}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 105}, 0, {16368, 19389}, {129, 0, 0, 255} }},
+	{{ {-2400, -120, 1395}, 0, {29680, 16419}, {127, 0, 0, 255} }},
+	{{ {-2400, -120, 1000}, 0, {29680, 20464}, {127, 0, 0, 255} }},
+	{{ {-2400, 580, 1000}, 0, {29680, 20464}, {127, 0, 0, 255} }},
+	{{ {-2400, 580, 1395}, 0, {29680, 16419}, {127, 0, 0, 255} }},
+	{{ {-2400, -120, 105}, 0, {20464, 19389}, {0, 0, 127, 255} }},
+	{{ {-2000, -120, 105}, 0, {16368, 19389}, {0, 0, 127, 255} }},
+	{{ {-2000, 580, 105}, 0, {16368, 19389}, {0, 0, 127, 255} }},
+	{{ {-2400, 580, 105}, 0, {20464, 19389}, {0, 0, 127, 255} }},
+	{{ {-2400, -120, 500}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {-2400, -120, 105}, 0, {20464, 19389}, {127, 0, 0, 255} }},
+	{{ {-2400, 580, 105}, 0, {20464, 19389}, {127, 0, 0, 255} }},
+	{{ {-2400, 580, 500}, 0, {20464, 15344}, {127, 0, 0, 255} }},
+	{{ {-1100, -120, 1395}, 0, {25584, 16419}, {0, 0, 129, 255} }},
+	{{ {-1500, -120, 1395}, 0, {29680, 16419}, {0, 0, 129, 255} }},
+	{{ {-1500, 580, 1395}, 0, {29680, 16419}, {0, 0, 129, 255} }},
+	{{ {-1100, 580, 1395}, 0, {25584, 16419}, {0, 0, 129, 255} }},
+	{{ {-2000, -120, 1395}, 0, {25584, 16419}, {0, 0, 129, 255} }},
+	{{ {-2400, -120, 1395}, 0, {29680, 16419}, {0, 0, 129, 255} }},
+	{{ {-2400, 580, 1395}, 0, {29680, 16419}, {0, 0, 129, 255} }},
+	{{ {-2000, 580, 1395}, 0, {25584, 16419}, {0, 0, 129, 255} }},
+	{{ {-1100, -120, 1000}, 0, {25584, 20464}, {129, 0, 0, 255} }},
+	{{ {-1100, -120, 1395}, 0, {25584, 16419}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 1395}, 0, {25584, 16419}, {129, 0, 0, 255} }},
+	{{ {-1100, 580, 1000}, 0, {25584, 20464}, {129, 0, 0, 255} }},
+	{{ {-1500, -120, 105}, 0, {20464, 19389}, {0, 0, 127, 255} }},
+	{{ {-1100, -120, 105}, 0, {16368, 19389}, {0, 0, 127, 255} }},
+	{{ {-1100, 580, 105}, 0, {16368, 19389}, {0, 0, 127, 255} }},
+	{{ {-1500, 580, 105}, 0, {20464, 19389}, {0, 0, 127, 255} }},
+};
+
+Gfx test_map_dl_Plane_005_mesh_layer_Opaque_tri_1[] = {
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_1 + 0, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_1 + 16, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_1 + 32, 16, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSP1Triangle(4, 5, 6, 0),
+	gsSP1Triangle(4, 6, 7, 0),
+	gsSP1Triangle(8, 9, 10, 0),
+	gsSP1Triangle(8, 10, 11, 0),
+	gsSP1Triangle(12, 13, 14, 0),
+	gsSP1Triangle(12, 14, 15, 0),
+	gsSPVertex(test_map_dl_Plane_005_mesh_layer_Opaque_vtx_1 + 48, 4, 0),
+	gsSP1Triangle(0, 1, 2, 0),
+	gsSP1Triangle(0, 2, 3, 0),
+	gsSPEndDisplayList(),
+};
+
+Gfx test_map_dl_Plane_005_mesh_layer_Opaque[] = {
+	gsSPDisplayList(mat_test_map_dl_FloorDark_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_005_mesh_layer_Opaque_tri_0),
+	gsSPDisplayList(mat_test_map_dl_Floor_layerOpaque),
+	gsSPDisplayList(test_map_dl_Plane_005_mesh_layer_Opaque_tri_1),
+	gsSPEndDisplayList(),
+};
+
diff --git a/assets_hm_pack/scenes/test_map/test_map_scene.c b/assets_hm_pack/scenes/test_map/test_map_scene.c
new file mode 100644
index 000000000..be833d004
--- /dev/null
+++ b/assets_hm_pack/scenes/test_map/test_map_scene.c
@@ -0,0 +1,869 @@
+#include "ultra64.h"
+#include "z64.h"
+#include "macros.h"
+#include "test_map_scene.h"
+#include "segment_symbols.h"
+#include "command_macros_base.h"
+#include "z64cutscene_commands.h"
+#include "variables.h"
+
+/**
+ * Header Child Day (Default)
+*/
+SceneCmd test_map_scene_header00[] = {
+    SCENE_CMD_SOUND_SETTINGS(0x00, 0x00, 0x02),
+    SCENE_CMD_ROOM_LIST(3, test_map_scene_roomList),
+    SCENE_CMD_MISC_SETTINGS(0x00, 0x00),
+    SCENE_CMD_COL_HEADER(&test_map_collisionHeader),
+    SCENE_CMD_SPECIAL_FILES(0x00, OBJECT_GAMEPLAY_DANGEON_KEEP),
+    SCENE_CMD_SKYBOX_SETTINGS(0x01, 0x00, LIGHT_MODE_TIME),
+    SCENE_CMD_ENTRANCE_LIST(test_map_scene_header00_entranceList),
+    SCENE_CMD_SPAWN_LIST(1, test_map_scene_header00_playerEntryList),
+    SCENE_CMD_ENV_LIGHT_SETTINGS(4, test_map_scene_header00_lightSettings),
+    SCENE_CMD_TRANSITION_ACTOR_LIST(2, test_map_scene_header00_transitionActors),
+    SCENE_CMD_END(),
+};
+
+RomFile test_map_scene_roomList[] = {
+    { (u32)_test_map_room_0SegmentRomStart, (u32)_test_map_room_0SegmentRomEnd },
+    { (u32)_test_map_room_1SegmentRomStart, (u32)_test_map_room_1SegmentRomEnd },
+    { (u32)_test_map_room_2SegmentRomStart, (u32)_test_map_room_2SegmentRomEnd },
+};
+
+ActorEntry test_map_scene_header00_playerEntryList[] = {
+    {
+        /* Actor ID   */ ACTOR_PLAYER,
+        /* Position   */ { 450, -120, -1450 },
+        /* Rotation   */ { DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000), DEG_TO_BINANG(0.000) },
+        /* Parameters */ 0x0FFF
+    },
+};
+
+TransitionActorEntry test_map_scene_header00_transitionActors[] = {
+    // Lifting Wooden Door
+    {
+        /* Room & Cam Index (Front, Back) */ { 0, -1, 2, -1 },
+        /* Actor ID                       */ ACTOR_DOOR_SHUTTER,
+        /* Position                       */ { -1050, -120, 750 },
+        /* Rotation Y                     */ DEG_TO_BINANG(270.000),
+        /* Parameters                     */ 0x0000
+    },
+
+    // Lifting Wooden Door
+    {
+        /* Room & Cam Index (Front, Back) */ { 0, -1, 1, -1 },
+        /* Actor ID                       */ ACTOR_DOOR_SHUTTER,
+        /* Position                       */ { 1050, -120, 750 },
+        /* Rotation Y                     */ DEG_TO_BINANG(90.000),
+        /* Parameters                     */ 0x0000
+    },
+};
+
+Spawn test_map_scene_header00_entranceList[] = {
+    // { Spawn Actor List Index, Room Index }
+    { 0, 0 },
+};
+
+EnvLightSettings test_map_scene_header00_lightSettings[4] = {
+    // Dawn Lighting
+    {
+        {    70,    45,    57 },   // Ambient Color
+        {    73,    73,    73 },   // Diffuse0 Direction
+        {   180,   154,   138 },   // Diffuse0 Color
+        {   -73,   -73,   -73 },   // Diffuse1 Direction
+        {    20,    20,    60 },   // Diffuse1 Color
+        {   140,   120,   100 },   // Fog Color
+        ((1 << 10) | 993),         // Blend Rate & Fog Near
+        12800,                     // Fog Far
+    },
+    // Day Lighting
+    {
+        {   105,    90,    90 },   // Ambient Color
+        {    73,    73,    73 },   // Diffuse0 Direction
+        {   255,   255,   240 },   // Diffuse0 Color
+        {   -73,   -73,   -73 },   // Diffuse1 Direction
+        {    50,    50,    90 },   // Diffuse1 Color
+        {   100,   100,   120 },   // Fog Color
+        ((1 << 10) | 996),         // Blend Rate & Fog Near
+        12800,                     // Fog Far
+    },
+    // Dusk Lighting
+    {
+        {   120,    90,     0 },   // Ambient Color
+        {    73,    73,    73 },   // Diffuse0 Direction
+        {   250,   135,    50 },   // Diffuse0 Color
+        {   -73,   -73,   -73 },   // Diffuse1 Direction
+        {    30,    30,    60 },   // Diffuse1 Color
+        {   120,    70,    50 },   // Fog Color
+        ((1 << 10) | 995),         // Blend Rate & Fog Near
+        12800,                     // Fog Far
+    },
+    // Night Lighting
+    {
+        {    40,    70,   100 },   // Ambient Color
+        {    73,    73,    73 },   // Diffuse0 Direction
+        {    20,    20,    35 },   // Diffuse0 Color
+        {   -73,   -73,   -73 },   // Diffuse1 Direction
+        {    50,    50,   100 },   // Diffuse1 Color
+        {     0,     0,    30 },   // Fog Color
+        ((1 << 10) | 992),         // Blend Rate & Fog Near
+        12800,                     // Fog Far
+    },
+};
+
+u64 test_map_dl_Test_Floor_00_i8[] = {
+	0x7f7f7f7f7f7f7f7f, 0x7f7f7f7f7f7f7f7f, 0x7f7f7f7f7f7f7f7f, 0x7f7f7f7f7f7f7f7f, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x7f5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 0x5c5c5c5c5c5c5c5c, 
+	
+};
+
+Gfx mat_test_map_dl_Floor_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 1, test_map_dl_Test_Floor_00_i8),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Gfx mat_test_map_dl_FloorDark_layerOpaque[] = {
+	gsDPPipeSync(),
+	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, COMBINED, 0, PRIMITIVE, 0, 0, 0, 0, COMBINED),
+	gsSPSetGeometryMode(G_ZBUFFER | G_SHADE | G_CULL_BACK | G_FOG | G_LIGHTING | G_SHADING_SMOOTH),
+	gsSPClearGeometryMode(G_CULL_FRONT | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
+	gsSPSetOtherMode(G_SETOTHERMODE_H, 4, 19, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | G_TC_FILT | G_TF_BILERP | G_TT_NONE | G_TL_TILE | G_TD_CLAMP | G_TP_PERSP | G_CYC_2CYCLE | G_PM_NPRIMITIVE),
+	gsSPSetOtherMode(G_SETOTHERMODE_L, 0, 31, G_AC_NONE | G_ZS_PIXEL | G_RM_FOG_SHADE_A | G_RM_AA_ZB_OPA_SURF2),
+	gsSPTexture(65535, 65535, 0, 0, 1),
+	gsDPSetPrimColor(0, 0, 214, 214, 214, 255),
+	gsDPSetTextureImage(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 1, test_map_dl_Test_Floor_00_i8),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b_LOAD_BLOCK, 0, 0, 7, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 0, 0),
+	gsDPLoadBlock(7, 0, 0, 511, 512),
+	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0, 0, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, 0),
+	gsDPSetTileSize(0, 0, 0, 124, 124),
+	gsSPEndDisplayList(),
+};
+
+Vec3s test_map_camPosData[3] = {
+	{ 0, 0, 0 },
+	{ 4791, 379, 0 },
+	{ 3960, -1, -1 },
+};
+
+BgCamInfo test_map_camData[1] = {
+	{ CAM_SET_NORMAL0, 3, &test_map_camPosData[0] },
+};
+
+SurfaceType test_map_polygonTypes[] = {
+	{ 0x00000000, 0x00000000 },
+	{ 0x00000000, 0x00000002 },
+	{ 0x00800000, 0x00000002 },
+	{ 0x00800000, 0x00000000 },
+};
+
+CollisionPoly test_map_polygons[] = {
+	{ 0x0000, 0x0002, 0x0000, 0x0001, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0000, 0x0002, 0x0003, 0x0000, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0000, 0x0006, 0x0004, 0x0005, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0000, 0x0006, 0x0007, 0x0004, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0000, 0x0001, 0x0000, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0001, 0x0008, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x000a, 0x000b, 0x000c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x000a, 0x000c, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x000c, 0x000d, 0x000e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x000c, 0x000e, 0x000f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0010, 0x0011, 0x0012, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0010, 0x0012, 0x0013, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0012, 0x0014, 0x0015, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0012, 0x0015, 0x0016, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0017, 0x0018, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0000, 0x0017, 0x0002, 0x0019, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0000, 0x0006, 0x001a, 0x001b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0000, 0x0006, 0x001b, 0x0018, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0000, 0x0017, 0x001c, 0x001d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0000, 0x0017, 0x0019, 0x001c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0000, 0x0003, 0x000a, 0x0000, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfc18 },
+	{ 0x0000, 0x0003, 0x001b, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfc18 },
+	{ 0x0000, 0x001e, 0x001f, 0x0020, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x001e, 0x0020, 0x0021, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0024, 0x0022, 0x0023, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0578 },
+	{ 0x0000, 0x0024, 0x0025, 0x0022, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0578 },
+	{ 0x0000, 0x0026, 0x0027, 0x0028, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0029, 0x001e, 0x0026, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0028, 0x0029, 0x0026, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x002a, 0x002b, 0x002c, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x00c2 },
+	{ 0x0000, 0x002a, 0x002c, 0x002d, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x00c2 },
+	{ 0x0000, 0x002e, 0x002f, 0x0030, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0031, 0x0032, 0x0033, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x002e, 0x0030, 0x0031, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0031, 0x0033, 0x002e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0034, 0x0035, 0x0036, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc18 },
+	{ 0x0000, 0x0034, 0x0036, 0x0037, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc18 },
+	{ 0x0000, 0x0038, 0x0039, 0x003a, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfc18 },
+	{ 0x0000, 0x0038, 0x003a, 0x003b, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfc18 },
+	{ 0x0000, 0x003c, 0x0038, 0x003d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x02bc },
+	{ 0x0000, 0x003c, 0x003d, 0x003e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x02bc },
+	{ 0x0000, 0x003f, 0x0040, 0x0039, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0000, 0x0040, 0x0041, 0x0039, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0000, 0x003f, 0x003c, 0x003e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0x00e6 },
+	{ 0x0000, 0x003f, 0x003e, 0x0040, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0x00e6 },
+	{ 0x0000, 0x0040, 0x003e, 0x003d, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x02e4 },
+	{ 0x0000, 0x0040, 0x003d, 0x0041, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x02e4 },
+	{ 0x0000, 0x003b, 0x003a, 0x0042, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xfdbc },
+	{ 0x0000, 0x003b, 0x0042, 0x0043, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xfdbc },
+	{ 0x0000, 0x0041, 0x003d, 0x0043, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x02e4 },
+	{ 0x0000, 0x0041, 0x0043, 0x0042, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x02e4 },
+	{ 0x0000, 0x0039, 0x0041, 0x0042, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0000, 0x0039, 0x0042, 0x003a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0000, 0x003d, 0x0038, 0x003b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x02bc },
+	{ 0x0000, 0x003d, 0x003b, 0x0043, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x02bc },
+	{ 0x0000, 0x0044, 0x0045, 0x0046, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x0044, 0x0046, 0x0047, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x0048, 0x0049, 0x004a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x0048, 0x004a, 0x004b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x004c, 0x0044, 0x0047, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x004c, 0x0047, 0x004d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x004e, 0x0048, 0x004b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x004e, 0x004b, 0x004f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0000, 0x002b, 0x002a, 0x0050, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x002b, 0x0050, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x002a, 0x0051, 0x0026, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x002a, 0x0026, 0x0050, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0052, 0x002b, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0052, 0x000b, 0x0033, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0051, 0x0052, 0x0033, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0051, 0x0033, 0x0026, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0053, 0x0054, 0x002d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xfeac },
+	{ 0x0000, 0x0053, 0x002d, 0x002c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xfeac },
+	{ 0x0000, 0x0052, 0x0051, 0x0054, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfece },
+	{ 0x0000, 0x0052, 0x0054, 0x0053, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfece },
+	{ 0x0000, 0x0051, 0x002a, 0x002d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x00c2 },
+	{ 0x0000, 0x0051, 0x002d, 0x0054, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x00c2 },
+	{ 0x0000, 0x0055, 0x0056, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0055, 0x0005, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0057, 0x0034, 0x0058, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0057, 0x0058, 0x0059, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0032, 0x0031, 0x005a, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0032, 0x005a, 0x005b, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0028, 0x0027, 0x005c, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0028, 0x005c, 0x005d, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0056, 0x0055, 0x005e, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0056, 0x005e, 0x005f, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0030, 0x002f, 0x0060, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0030, 0x0060, 0x0061, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0061, 0x0060, 0x005b, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0061, 0x005b, 0x005a, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0063, 0x0064, 0x0062, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0000, 0x0064, 0x0065, 0x0062, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0000, 0x0063, 0x0066, 0x0067, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0063, 0x0067, 0x0064, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0066, 0x0068, 0x0069, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0000, 0x0066, 0x0069, 0x0067, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0000, 0x0068, 0x0062, 0x0065, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0000, 0x0068, 0x0065, 0x0069, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0000, 0x000f, 0x000e, 0x006a, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x000f, 0x006a, 0x006b, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0009, 0x0008, 0x006c, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0009, 0x006c, 0x006d, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x006e, 0x006f, 0x0070, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x006e, 0x0070, 0x0071, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0000, 0x0072, 0x0057, 0x0059, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x05dc },
+	{ 0x0000, 0x0072, 0x0059, 0x0073, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x05dc },
+	{ 0x0000, 0x0055, 0x0004, 0x0074, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0000, 0x0055, 0x0074, 0x005e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0000, 0x001d, 0x001c, 0x0075, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0000, 0x001d, 0x0075, 0x0076, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0000, 0x0077, 0x0078, 0x0070, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03e8 },
+	{ 0x0000, 0x0077, 0x0070, 0x006f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03e8 },
+	{ 0x0000, 0x0079, 0x0023, 0x0072, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0079, 0x0072, 0x001f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0023, 0x0022, 0x0057, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0023, 0x0057, 0x0072, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007a, 0x0035, 0x0034, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0022, 0x007a, 0x0034, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0022, 0x0034, 0x0057, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007a, 0x0079, 0x001f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007a, 0x001f, 0x0035, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007b, 0x0025, 0x0024, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x00dc },
+	{ 0x0000, 0x007b, 0x0024, 0x007c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x00dc },
+	{ 0x0000, 0x0025, 0x007a, 0x0022, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0384 },
+	{ 0x0000, 0x0025, 0x007b, 0x007a, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0384 },
+	{ 0x0000, 0x007c, 0x0023, 0x0079, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfda8 },
+	{ 0x0000, 0x007c, 0x0024, 0x0023, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfda8 },
+	{ 0x0000, 0x007b, 0x0079, 0x007a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfbb4 },
+	{ 0x0000, 0x007b, 0x007c, 0x0079, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfbb4 },
+	{ 0x0000, 0x0023, 0x0079, 0x007a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0023, 0x007a, 0x0022, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007d, 0x007e, 0x007f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007d, 0x007f, 0x0080, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007f, 0x0081, 0x0082, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x007f, 0x0082, 0x0083, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0084, 0x0080, 0x0085, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0084, 0x0085, 0x0086, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0087, 0x0088, 0x0089, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0087, 0x0089, 0x007e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0089, 0x0088, 0x008a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0000, 0x0089, 0x008a, 0x008b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0000, 0x0083, 0x0082, 0x008c, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x0083, 0x008c, 0x008d, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x0084, 0x0086, 0x008e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0000, 0x0084, 0x008e, 0x008f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0000, 0x0086, 0x0085, 0x0090, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x0086, 0x0090, 0x008e, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x0088, 0x0087, 0x0091, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0000, 0x0088, 0x0091, 0x008a, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0000, 0x0092, 0x0093, 0x0094, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0000, 0x0092, 0x0094, 0x0095, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0000, 0x0096, 0x0092, 0x0095, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0000, 0x0096, 0x0095, 0x0097, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0000, 0x0082, 0x0081, 0x0098, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0000, 0x0082, 0x0098, 0x008c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0000, 0x0092, 0x0096, 0x007d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0092, 0x007d, 0x0093, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0063, 0x0062, 0x0099, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0000, 0x0063, 0x0099, 0x009a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0000, 0x009a, 0x009b, 0x0066, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x009a, 0x0066, 0x0063, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0066, 0x009b, 0x0068, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0000, 0x009b, 0x009c, 0x0068, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0000, 0x009d, 0x009e, 0x009f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x009d, 0x009f, 0x00a0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x0062, 0x0068, 0x009c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0000, 0x0062, 0x009c, 0x0099, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0000, 0x00a1, 0x00a2, 0x009d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x00a1, 0x009d, 0x00a3, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x00a4, 0x00a5, 0x00a6, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x00a4, 0x00a6, 0x009e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x00a7, 0x00a8, 0x00a4, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x00a7, 0x00a4, 0x00a2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0000, 0x009f, 0x00a9, 0x009c, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x009f, 0x009c, 0x009b, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x009a, 0x0099, 0x00aa, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x009a, 0x00aa, 0x00a0, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x0099, 0x009c, 0x00a9, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x0099, 0x00a9, 0x00aa, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0000, 0x00a6, 0x00a5, 0x00ab, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0000, 0x00a6, 0x00ab, 0x00ac, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0000, 0x00a1, 0x00a3, 0x00ad, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0000, 0x00a1, 0x00ad, 0x00ae, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0000, 0x00a8, 0x00a7, 0x00af, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0000, 0x00a8, 0x00af, 0x00b0, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0001, 0x001c, 0x0001, 0x0009, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x001c, 0x0009, 0x00b1, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0007, 0x001d, 0x0004, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0001, 0x0007, 0x0017, 0x001d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0001, 0x0019, 0x0001, 0x001c, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0001, 0x0019, 0x0002, 0x0001, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0001, 0x0000, 0x000c, 0x000f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0000, 0x000f, 0x0008, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x000b, 0x0050, 0x000d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x000b, 0x000d, 0x000c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0013, 0x0012, 0x0016, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0013, 0x0016, 0x00b2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0011, 0x00b3, 0x0014, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0011, 0x0014, 0x0012, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0007, 0x0006, 0x0018, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0001, 0x0007, 0x0018, 0x0017, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0001, 0x0018, 0x001b, 0x0003, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0001, 0x0018, 0x0003, 0x0002, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0208 },
+	{ 0x0001, 0x001b, 0x002e, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfc18 },
+	{ 0x0001, 0x001b, 0x001a, 0x002e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfc18 },
+	{ 0x0001, 0x001a, 0x0005, 0x002e, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0001, 0x001a, 0x0006, 0x0005, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x01f4 },
+	{ 0x0001, 0x002e, 0x0033, 0x000b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x002e, 0x000b, 0x000a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00b4, 0x00b5, 0x00b6, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfaec },
+	{ 0x0001, 0x00b4, 0x00b6, 0x00b7, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfaec },
+	{ 0x0001, 0x0026, 0x001e, 0x0021, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0026, 0x0021, 0x0050, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x001e, 0x0029, 0x00b8, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x001e, 0x00b8, 0x00b9, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0035, 0x001f, 0x001e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00b9, 0x0035, 0x001e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0032, 0x0027, 0x0026, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0032, 0x0026, 0x0033, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00ba, 0x00bb, 0x00bc, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0384 },
+	{ 0x0001, 0x00ba, 0x00bc, 0x00bd, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0384 },
+	{ 0x0001, 0x00be, 0x00bf, 0x00c0, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x02e4 },
+	{ 0x0001, 0x00be, 0x00c0, 0x00c1, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x02e4 },
+	{ 0x0001, 0x00b9, 0x00b8, 0x00c2, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0320 },
+	{ 0x0001, 0x00b9, 0x00c2, 0x00c3, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0320 },
+	{ 0x0001, 0x0028, 0x00c4, 0x00b8, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0028, 0x00b8, 0x0029, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00bc, 0x0037, 0x0036, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0000 },
+	{ 0x0001, 0x00bc, 0x0036, 0x00bd, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0000 },
+	{ 0x0001, 0x0035, 0x00ba, 0x00bd, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0320 },
+	{ 0x0001, 0x0035, 0x00bd, 0x0036, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0320 },
+	{ 0x0001, 0x00ba, 0x00b9, 0x00c5, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0320 },
+	{ 0x0001, 0x00ba, 0x00c5, 0x00c6, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0320 },
+	{ 0x0001, 0x00bb, 0x00ba, 0x00c6, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0001, 0x00bb, 0x00c6, 0x00c7, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0001, 0x00b9, 0x00c8, 0x00c9, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0320 },
+	{ 0x0001, 0x00b9, 0x00c9, 0x00ca, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0320 },
+	{ 0x0001, 0x00cb, 0x00cc, 0x00c3, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xff6a },
+	{ 0x0001, 0x00cb, 0x00c3, 0x00c2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xff6a },
+	{ 0x0001, 0x00c8, 0x00b9, 0x00c3, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfce0 },
+	{ 0x0001, 0x00c8, 0x00c3, 0x00cc, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfce0 },
+	{ 0x0001, 0x00b8, 0x00c4, 0x00cb, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x02bc },
+	{ 0x0001, 0x00b8, 0x00cb, 0x00c2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x02bc },
+	{ 0x0001, 0x00c6, 0x00be, 0x00cd, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0001, 0x00be, 0x00c1, 0x00cd, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0001, 0x00c9, 0x00ce, 0x00cd, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xffb5 },
+	{ 0x0001, 0x00c9, 0x00cd, 0x00ca, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xffb5 },
+	{ 0x0001, 0x00c7, 0x00c6, 0x00cd, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0001, 0x00c7, 0x00cd, 0x00ce, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xfc7c },
+	{ 0x0001, 0x00c5, 0x00ca, 0x00c0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0320 },
+	{ 0x0001, 0x00c5, 0x00c0, 0x00bf, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0320 },
+	{ 0x0001, 0x00ca, 0x00cd, 0x00c1, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xffb5 },
+	{ 0x0001, 0x00ca, 0x00c1, 0x00c0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0xffb5 },
+	{ 0x0001, 0x00c6, 0x00c5, 0x00bf, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0x002e },
+	{ 0x0001, 0x00c6, 0x00bf, 0x00be, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0x002e },
+	{ 0x0001, 0x0045, 0x00cf, 0x00d0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x0045, 0x00d0, 0x0046, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x0049, 0x00d1, 0x00d2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x0049, 0x00d2, 0x004a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x00cf, 0x004e, 0x004f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x00cf, 0x004f, 0x00d0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x00d1, 0x004c, 0x004d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x00d1, 0x004d, 0x00d2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x0056, 0x002f, 0x002e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0056, 0x002e, 0x0005, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0031, 0x00d3, 0x005a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0001, 0x00d3, 0x00d4, 0x005a, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0001, 0x0061, 0x005a, 0x00d4, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0001, 0x0061, 0x00d4, 0x00d5, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0001, 0x0030, 0x0061, 0x00d5, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0001, 0x0030, 0x00d5, 0x00d6, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0001, 0x00d6, 0x00d3, 0x0031, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00d6, 0x0031, 0x0030, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0027, 0x0032, 0x005b, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0027, 0x005b, 0x005c, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x00c4, 0x003b, 0x0058, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x00c4, 0x0058, 0x0034, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x002f, 0x0056, 0x005f, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x002f, 0x005f, 0x0060, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x00c4, 0x0028, 0x005d, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x00c4, 0x005d, 0x003b, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0008, 0x0067, 0x0069, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0008, 0x0069, 0x006c, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0064, 0x000f, 0x006b, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0064, 0x006b, 0x0065, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0065, 0x006b, 0x006c, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0065, 0x006c, 0x0069, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x00b1, 0x0009, 0x006d, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x00b1, 0x006d, 0x00d7, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x000e, 0x006e, 0x0071, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x000e, 0x0071, 0x006a, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03e8 },
+	{ 0x0001, 0x0020, 0x00d8, 0x00d9, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0001, 0x0020, 0x00d9, 0x00da, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0001, 0x00d8, 0x0072, 0x0073, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x05dc },
+	{ 0x0001, 0x00d8, 0x0073, 0x00d9, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x05dc },
+	{ 0x0001, 0x0004, 0x001d, 0x0076, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0001, 0x0004, 0x0076, 0x0074, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0001, 0x001c, 0x00b1, 0x00d7, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0001, 0x001c, 0x00d7, 0x0075, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x07d0 },
+	{ 0x0001, 0x0020, 0x00da, 0x0078, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03e8 },
+	{ 0x0001, 0x0020, 0x0078, 0x0077, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03e8 },
+	{ 0x0001, 0x00db, 0x00b5, 0x00d8, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00db, 0x00d8, 0x0020, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00b4, 0x00dc, 0x001f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00b4, 0x001f, 0x0072, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00b5, 0x00b4, 0x0072, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00b5, 0x0072, 0x00d8, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00dc, 0x00db, 0x0020, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00dc, 0x0020, 0x001f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00dd, 0x00b7, 0x00b6, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x00dd, 0x00b6, 0x00de, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0014 },
+	{ 0x0001, 0x00b5, 0x00db, 0x00de, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x00c8 },
+	{ 0x0001, 0x00b5, 0x00de, 0x00b6, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x00c8 },
+	{ 0x0001, 0x00db, 0x00dc, 0x00dd, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x04b0 },
+	{ 0x0001, 0x00db, 0x00dd, 0x00de, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x04b0 },
+	{ 0x0001, 0x00dc, 0x00b4, 0x00b7, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfed4 },
+	{ 0x0001, 0x00dc, 0x00b7, 0x00dd, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfed4 },
+	{ 0x0001, 0x00e1, 0x00df, 0x00e0, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0401 },
+	{ 0x0001, 0x00e1, 0x00e2, 0x00df, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0401 },
+	{ 0x0001, 0x00e4, 0x00e5, 0x00e3, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbcd },
+	{ 0x0001, 0x00e5, 0x00e6, 0x00e3, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbcd },
+	{ 0x0001, 0x00e9, 0x00e7, 0x00e8, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbcd },
+	{ 0x0001, 0x00e9, 0x00ea, 0x00e7, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbcd },
+	{ 0x0001, 0x00ec, 0x00ed, 0x00eb, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0401 },
+	{ 0x0001, 0x00ed, 0x00ee, 0x00eb, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0401 },
+	{ 0x0001, 0x00d6, 0x00d5, 0x00ef, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0001, 0x00d6, 0x00ef, 0x00f0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x030c },
+	{ 0x0001, 0x00f0, 0x00f1, 0x00d3, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00f0, 0x00d3, 0x00d6, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00d3, 0x00f1, 0x00d4, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0001, 0x00f1, 0x00f2, 0x00d4, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfd30 },
+	{ 0x0001, 0x0080, 0x007f, 0x0083, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0080, 0x0083, 0x0085, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00d5, 0x00d4, 0x00f2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0001, 0x00d5, 0x00f2, 0x00ef, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(1.6292068494294654e-07), 0xffec },
+	{ 0x0001, 0x007e, 0x0089, 0x0081, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x007e, 0x0081, 0x007f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0096, 0x0087, 0x007e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0096, 0x007e, 0x007d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0083, 0x008d, 0x00f2, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x0083, 0x00f2, 0x00f1, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x00f0, 0x00ef, 0x0090, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x00f0, 0x0090, 0x0085, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x00ef, 0x00f2, 0x008d, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x00ef, 0x008d, 0x0090, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x0093, 0x0084, 0x008f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0001, 0x0093, 0x008f, 0x0094, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0001, 0x0087, 0x0096, 0x0097, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0001, 0x0087, 0x0097, 0x0091, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0001, 0x0081, 0x0089, 0x008b, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0001, 0x0081, 0x008b, 0x0098, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0001, 0x0093, 0x007d, 0x0080, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x0093, 0x0080, 0x0084, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00a2, 0x00a4, 0x009e, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00a2, 0x009e, 0x009d, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x009e, 0x00a6, 0x00f3, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x009e, 0x00f3, 0x009f, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00a3, 0x009d, 0x00a0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00a3, 0x00a0, 0x00f4, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00a8, 0x00f5, 0x00a5, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00a8, 0x00a5, 0x00a4, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00f6, 0x00a7, 0x00a2, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00f6, 0x00a2, 0x00a1, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), 0x0078 },
+	{ 0x0001, 0x00f4, 0x00a0, 0x00aa, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x00f4, 0x00aa, 0x00f7, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x00f5, 0x00a8, 0x00b0, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0001, 0x00f5, 0x00b0, 0x00f8, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0001, 0x00f6, 0x00a1, 0x00ae, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0001, 0x00f6, 0x00ae, 0x00f9, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0001, 0x00a7, 0x00f6, 0x00f9, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0001, 0x00a7, 0x00f9, 0x00af, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0960 },
+	{ 0x0001, 0x00f3, 0x00a6, 0x00ac, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0001, 0x00f3, 0x00ac, 0x00fa, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0001, 0x00a5, 0x00f5, 0x00f8, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0001, 0x00a5, 0x00f8, 0x00ab, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0x0573 },
+	{ 0x0001, 0x009f, 0x00f3, 0x00fa, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x009f, 0x00fa, 0x00a9, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0xfbb4 },
+	{ 0x0001, 0x00a3, 0x00f4, 0x00f7, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0001, 0x00a3, 0x00f7, 0x00ad, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xff97 },
+	{ 0x0002, 0x0013, 0x00b2, 0x00cf, COLPOLY_SNORMAL(-5.080050602401798e-09), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xffe1 },
+	{ 0x0002, 0x0013, 0x00cf, 0x0045, COLPOLY_SNORMAL(-5.080050602401798e-09), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xffe1 },
+	{ 0x0002, 0x000d, 0x0050, 0x0047, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0000 },
+	{ 0x0002, 0x000d, 0x0047, 0x0046, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0000 },
+	{ 0x0002, 0x0050, 0x0021, 0x004d, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0002, 0x0050, 0x004d, 0x0047, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0002, 0x00b3, 0x0011, 0x004c, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(-8.276453160037151e-16), COLPOLY_SNORMAL(-5.080050602401798e-09), 0xffe1 },
+	{ 0x0002, 0x00b3, 0x004c, 0x00d1, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(-8.276453160037151e-16), COLPOLY_SNORMAL(-5.080050602401798e-09), 0xffe1 },
+	{ 0x0002, 0x0014, 0x00b3, 0x00d1, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03c9 },
+	{ 0x0002, 0x0014, 0x00d1, 0x0049, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03c9 },
+	{ 0x0002, 0x00b2, 0x0016, 0x004e, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03c9 },
+	{ 0x0002, 0x00b2, 0x004e, 0x00cf, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03c9 },
+	{ 0x0003, 0x0010, 0x0013, 0x0045, COLPOLY_SNORMAL(5.080050602401798e-09), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xffe1 },
+	{ 0x0003, 0x0010, 0x0045, 0x0044, COLPOLY_SNORMAL(5.080050602401798e-09), COLPOLY_SNORMAL(-1.6292068494294654e-07), COLPOLY_SNORMAL(-1.0), 0xffe1 },
+	{ 0x0003, 0x0016, 0x0015, 0x0048, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03c9 },
+	{ 0x0003, 0x0016, 0x0048, 0x004e, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x03c9 },
+	{ 0x0003, 0x000e, 0x000d, 0x0046, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0000 },
+	{ 0x0003, 0x000e, 0x0046, 0x00d0, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x0000 },
+	{ 0x0003, 0x0015, 0x0014, 0x0049, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03c9 },
+	{ 0x0003, 0x0015, 0x0049, 0x0048, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0x03c9 },
+	{ 0x0003, 0x0011, 0x0010, 0x0044, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(8.276453160037151e-16), COLPOLY_SNORMAL(5.080050602401798e-09), 0xffe1 },
+	{ 0x0003, 0x0011, 0x0044, 0x004c, COLPOLY_SNORMAL(-1.0), COLPOLY_SNORMAL(8.276453160037151e-16), COLPOLY_SNORMAL(5.080050602401798e-09), 0xffe1 },
+	{ 0x0003, 0x0021, 0x0020, 0x00d2, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0003, 0x0021, 0x00d2, 0x004d, COLPOLY_SNORMAL(1.0), COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(0.0), 0x0000 },
+	{ 0x0003, 0x002b, 0x0052, 0x0053, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfece },
+	{ 0x0003, 0x002b, 0x0053, 0x002c, COLPOLY_SNORMAL(0.0), COLPOLY_SNORMAL(1.6292068494294654e-07), COLPOLY_SNORMAL(1.0), 0xfece },
+};
+
+Vec3s test_map_vertices[251] = {
+	{ -500, -120, 1000 },
+	{ -500, -120, 1500 },
+	{ -500, -520, 1500 },
+	{ -500, -520, 1000 },
+	{ 500, -120, 2000 },
+	{ 500, -120, 1500 },
+	{ 500, -520, 1500 },
+	{ 500, -520, 2000 },
+	{ -1000, -120, 1000 },
+	{ -1000, -120, 1500 },
+	{ 0, -120, 1000 },
+	{ 0, -120, 500 },
+	{ -500, -120, 500 },
+	{ -500, -120, 0 },
+	{ -1000, -120, 0 },
+	{ -1000, -120, 500 },
+	{ -31, -120, -31 },
+	{ -31, -120, -500 },
+	{ -500, -120, -500 },
+	{ -500, -120, -31 },
+	{ -500, -120, -969 },
+	{ -969, -120, -969 },
+	{ -969, -120, -500 },
+	{ 0, -520, 2000 },
+	{ 0, -520, 1500 },
+	{ -500, -520, 2000 },
+	{ 500, -520, 1000 },
+	{ 0, -520, 1000 },
+	{ -500, -120, 2000 },
+	{ 0, -120, 2000 },
+	{ 500, -120, -500 },
+	{ 500, -120, -1000 },
+	{ 0, -120, -1000 },
+	{ 0, -120, -500 },
+	{ 900, -120, -1400 },
+	{ 600, -120, -1400 },
+	{ 600, -220, -1400 },
+	{ 900, -220, -1400 },
+	{ 500, -120, 0 },
+	{ 1000, -120, 0 },
+	{ 1000, -120, -500 },
+	{ 800, -120, -500 },
+	{ 194, -120, 194 },
+	{ 194, -120, 306 },
+	{ 194, 340, 306 },
+	{ 194, 340, 194 },
+	{ 500, -120, 1000 },
+	{ 1000, -120, 1000 },
+	{ 1000, -120, 780 },
+	{ 1000, -120, 720 },
+	{ 1000, -120, 500 },
+	{ 500, -120, 500 },
+	{ 1000, -120, -1000 },
+	{ 800, -120, -1000 },
+	{ 800, 0, -1000 },
+	{ 1000, 0, -1000 },
+	{ 1000, 280, -700 },
+	{ 1000, 280, -900 },
+	{ 1000, 580, -900 },
+	{ 1000, 580, -700 },
+	{ 1000, 230, -700 },
+	{ 740, 280, -700 },
+	{ 740, 230, -700 },
+	{ 1000, 230, -900 },
+	{ 740, 230, -900 },
+	{ 740, 280, -900 },
+	{ 740, 580, -900 },
+	{ 740, 580, -700 },
+	{ -31, -20, -31 },
+	{ -500, -20, -31 },
+	{ -500, -20, 0 },
+	{ 0, -20, 0 },
+	{ -969, -20, -969 },
+	{ -500, -20, -969 },
+	{ -500, -20, -1000 },
+	{ -1000, -20, -1000 },
+	{ -31, -20, -500 },
+	{ 0, -20, -500 },
+	{ -969, -20, -500 },
+	{ -1000, -20, -500 },
+	{ 0, -120, 0 },
+	{ 306, -120, 194 },
+	{ 306, -120, 306 },
+	{ 306, 340, 306 },
+	{ 306, 340, 194 },
+	{ 1000, -120, 2000 },
+	{ 1000, -120, 1500 },
+	{ 1000, -120, -1500 },
+	{ 1000, 580, -1000 },
+	{ 1000, 580, -1500 },
+	{ 1000, -20, 720 },
+	{ 1000, 580, 500 },
+	{ 1000, 580, 0 },
+	{ 1000, 580, -500 },
+	{ 1000, 580, 2000 },
+	{ 1000, 580, 1500 },
+	{ 1000, 580, 1000 },
+	{ 1000, -20, 780 },
+	{ -1050, -20, 720 },
+	{ -1050, -120, 720 },
+	{ -1000, -120, 720 },
+	{ -1000, -20, 720 },
+	{ -1050, -120, 780 },
+	{ -1000, -120, 780 },
+	{ -1050, -20, 780 },
+	{ -1000, -20, 780 },
+	{ -1000, 580, 0 },
+	{ -1000, 580, 500 },
+	{ -1000, 580, 1000 },
+	{ -1000, 580, 1500 },
+	{ -1000, -120, -500 },
+	{ -1000, -120, -1000 },
+	{ -1000, 580, -1000 },
+	{ -1000, 580, -500 },
+	{ 500, -120, -1500 },
+	{ 500, 580, -1500 },
+	{ 500, 580, 2000 },
+	{ -500, 580, 2000 },
+	{ 0, 580, 2000 },
+	{ -500, -120, -1000 },
+	{ -500, 580, -1000 },
+	{ 600, -120, -1100 },
+	{ 900, -120, -1100 },
+	{ 900, -220, -1100 },
+	{ 600, -220, -1100 },
+	{ 2000, -120, 1000 },
+	{ 2000, -120, 500 },
+	{ 1500, -120, 500 },
+	{ 1500, -120, 1000 },
+	{ 1500, -120, 105 },
+	{ 1100, -120, 105 },
+	{ 1100, -120, 500 },
+	{ 1500, -120, 1395 },
+	{ 1100, -120, 1000 },
+	{ 1100, -120, 1395 },
+	{ 2400, -120, 500 },
+	{ 2400, -120, 105 },
+	{ 2000, -120, 105 },
+	{ 2400, 580, 105 },
+	{ 2000, 580, 105 },
+	{ 1100, 580, 105 },
+	{ 1100, 580, 500 },
+	{ 1100, 580, 1395 },
+	{ 1500, 580, 1395 },
+	{ 1100, 580, 1000 },
+	{ 2400, 580, 500 },
+	{ 2400, -120, 1395 },
+	{ 2000, -120, 1395 },
+	{ 2000, 580, 1395 },
+	{ 2400, 580, 1395 },
+	{ 2400, -120, 1000 },
+	{ 2400, 580, 1000 },
+	{ 1500, 580, 105 },
+	{ -1100, -20, 720 },
+	{ -1100, -120, 720 },
+	{ -1100, -120, 780 },
+	{ -1100, -20, 780 },
+	{ -1500, -120, 500 },
+	{ -1500, -120, 1000 },
+	{ -1100, -120, 1000 },
+	{ -1100, -120, 500 },
+	{ -2000, -120, 105 },
+	{ -2000, -120, 500 },
+	{ -1500, -120, 105 },
+	{ -2000, -120, 1000 },
+	{ -2000, -120, 1395 },
+	{ -1500, -120, 1395 },
+	{ -2400, -120, 500 },
+	{ -2400, -120, 1000 },
+	{ -1100, 580, 1000 },
+	{ -1100, 580, 500 },
+	{ -2000, 580, 1395 },
+	{ -1500, 580, 1395 },
+	{ -1500, 580, 105 },
+	{ -2000, 580, 105 },
+	{ -2400, 580, 500 },
+	{ -2400, 580, 1000 },
+	{ -1000, -120, 2000 },
+	{ -969, -120, -31 },
+	{ -31, -120, -969 },
+	{ 300, -120, -1300 },
+	{ 200, -120, -1300 },
+	{ 200, -20, -1300 },
+	{ 300, -20, -1300 },
+	{ 800, -120, -700 },
+	{ 800, -120, -800 },
+	{ 800, -120, -900 },
+	{ 1000, -120, -900 },
+	{ 1000, 0, -900 },
+	{ 800, 0, -900 },
+	{ 740, 46, -900 },
+	{ 740, 46, -800 },
+	{ 740, 75, -800 },
+	{ 740, 75, -900 },
+	{ 800, 150, -700 },
+	{ 800, 150, -800 },
+	{ 1000, -120, -700 },
+	{ 800, 46, -800 },
+	{ 800, 46, -900 },
+	{ 1000, 46, -900 },
+	{ 1000, -120, -800 },
+	{ 1000, 75, -800 },
+	{ 800, 75, -800 },
+	{ 1000, 150, -700 },
+	{ 1000, 150, -800 },
+	{ 800, 75, -900 },
+	{ 1000, 75, -900 },
+	{ -969, -20, -31 },
+	{ -1000, -20, 0 },
+	{ -31, -20, -969 },
+	{ 0, -20, -1000 },
+	{ 1050, -120, 720 },
+	{ 1050, -20, 720 },
+	{ 1050, -20, 780 },
+	{ 1050, -120, 780 },
+	{ -1000, 580, 2000 },
+	{ 0, -120, -1500 },
+	{ 0, 580, -1500 },
+	{ 0, 580, -1000 },
+	{ 200, -120, -1200 },
+	{ 300, -120, -1200 },
+	{ 300, -20, -1200 },
+	{ 200, -20, -1200 },
+	{ 1025, -20, 780 },
+	{ 1025, -20, 720 },
+	{ 1025, -120, 720 },
+	{ 1025, -120, 780 },
+	{ 1075, -20, 780 },
+	{ 1075, -120, 780 },
+	{ 1075, -120, 720 },
+	{ 1075, -20, 720 },
+	{ -1075, -20, 780 },
+	{ -1075, -20, 720 },
+	{ -1075, -120, 720 },
+	{ -1075, -120, 780 },
+	{ -1025, -20, 780 },
+	{ -1025, -120, 780 },
+	{ -1025, -120, 720 },
+	{ -1025, -20, 720 },
+	{ 1100, -20, 780 },
+	{ 1100, -120, 780 },
+	{ 1100, -120, 720 },
+	{ 1100, -20, 720 },
+	{ -1100, -120, 1395 },
+	{ -1100, -120, 105 },
+	{ -2400, -120, 1395 },
+	{ -2400, -120, 105 },
+	{ -1100, 580, 105 },
+	{ -2400, 580, 1395 },
+	{ -2400, 580, 105 },
+	{ -1100, 580, 1395 },
+};
+
+WaterBox test_map_waterBoxes[] = {
+	{ -527, -130, 934, 1066, 1066, 0x00000000 },
+	{ -527, -130, 934, 1066, 1066, 0x0007e000 },
+};
+
+CollisionHeader test_map_collisionHeader = {
+	-2400,
+	-520,
+	-1500,
+	2400,
+	580,
+	2000,
+	251,
+	test_map_vertices,
+	406,
+	test_map_polygons,
+	test_map_polygonTypes,
+	test_map_camData,
+	2,
+	test_map_waterBoxes
+};
+
diff --git a/assets_hm_pack/scenes/test_map/test_map_scene.h b/assets_hm_pack/scenes/test_map/test_map_scene.h
new file mode 100644
index 000000000..17c2f7bc8
--- /dev/null
+++ b/assets_hm_pack/scenes/test_map/test_map_scene.h
@@ -0,0 +1,84 @@
+extern SceneCmd test_map_scene_header00[];
+extern RomFile test_map_scene_roomList[];
+extern u8 _test_map_room_0SegmentRomStart[];
+extern u8 _test_map_room_0SegmentRomEnd[];
+extern u8 _test_map_room_1SegmentRomStart[];
+extern u8 _test_map_room_1SegmentRomEnd[];
+extern u8 _test_map_room_2SegmentRomStart[];
+extern u8 _test_map_room_2SegmentRomEnd[];
+extern ActorEntry test_map_scene_header00_playerEntryList[];
+extern TransitionActorEntry test_map_scene_header00_transitionActors[];
+extern Spawn test_map_scene_header00_entranceList[];
+extern EnvLightSettings test_map_scene_header00_lightSettings[4];
+extern u64 test_map_dl_Test_Floor_00_i8[];
+extern Gfx mat_test_map_dl_Floor_layerOpaque[];
+extern Gfx mat_test_map_dl_FloorDark_layerOpaque[];
+extern Vec3s test_map_camPosData[3];
+extern BgCamInfo test_map_camData[1];
+extern SurfaceType test_map_polygonTypes[];
+extern CollisionPoly test_map_polygons[];
+extern Vec3s test_map_vertices[251];
+extern WaterBox test_map_waterBoxes[];
+extern CollisionHeader test_map_collisionHeader;
+extern SceneCmd* test_map_room_0_alternateHeaders[];
+extern SceneCmd test_map_room_0_header00[];
+extern s16 test_map_room_0_header00_objectList[];
+extern ActorEntry test_map_room_0_header00_actorList[];
+extern SceneCmd* test_map_room_1_alternateHeaders[];
+extern SceneCmd test_map_room_1_header00[];
+extern s16 test_map_room_1_header00_objectList[];
+extern ActorEntry test_map_room_1_header00_actorList[];
+extern SceneCmd* test_map_room_2_alternateHeaders[];
+extern SceneCmd test_map_room_2_header00[];
+extern s16 test_map_room_2_header00_objectList[];
+extern ActorEntry test_map_room_2_header00_actorList[];
+extern RoomShapeNormal test_map_room_0_shapeHeader;
+extern RoomShapeDListsEntry test_map_room_0_shapeDListEntry[1];
+extern RoomShapeNormal test_map_room_1_shapeHeader;
+extern RoomShapeDListsEntry test_map_room_1_shapeDListEntry[1];
+extern RoomShapeNormal test_map_room_2_shapeHeader;
+extern RoomShapeDListsEntry test_map_room_2_shapeDListEntry[1];
+extern Gfx test_map_room_0_entry_0_opaque[];
+extern Gfx test_map_room_0_entry_0_transparent[];
+extern u64 test_map_dl_FT_0x5B2C8_32x32_RGBA16_ci8[];
+extern u64 test_map_dl_FT_0x5B2C8_32x32_RGBA16_pal_rgba16[];
+extern u64 test_map_dl__000170B8_32x32_rgba16_rgba16[];
+extern Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_0[247];
+extern Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_0[];
+extern Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_1[247];
+extern Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_1[];
+extern Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_2[24];
+extern Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_2[];
+extern Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_3[28];
+extern Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_3[];
+extern Vtx test_map_dl_Plane_mesh_layer_Opaque_vtx_4[4];
+extern Gfx test_map_dl_Plane_mesh_layer_Opaque_tri_4[];
+extern Vtx test_map_dl_Plane_002_mesh_layer_Opaque_vtx_0[16];
+extern Gfx test_map_dl_Plane_002_mesh_layer_Opaque_tri_0[];
+extern Vtx test_map_dl_Plane_003_mesh_layer_Opaque_vtx_0[16];
+extern Gfx test_map_dl_Plane_003_mesh_layer_Opaque_tri_0[];
+extern Vtx test_map_dl_Plane_004_mesh_layer_Opaque_vtx_0[4];
+extern Gfx test_map_dl_Plane_004_mesh_layer_Opaque_tri_0[];
+extern Vtx test_map_dl_Water_Box_Mesh_mesh_layer_Transparent_vtx_0[4];
+extern Gfx test_map_dl_Water_Box_Mesh_mesh_layer_Transparent_tri_0[];
+extern Gfx mat_test_map_dl_Floor_climbable_layerOpaque[];
+extern Gfx mat_test_map_dl_FloorDark_climbable_layerOpaque[];
+extern Gfx mat_test_map_dl_vines_cosmetic_layerOpaque[];
+extern Gfx mat_test_map_dl_oot_water_mat_layerTransparent[];
+extern Gfx test_map_dl_Plane_mesh_layer_Opaque[];
+extern Gfx test_map_dl_Plane_002_mesh_layer_Opaque[];
+extern Gfx test_map_dl_Plane_003_mesh_layer_Opaque[];
+extern Gfx test_map_dl_Plane_004_mesh_layer_Opaque[];
+extern Gfx test_map_dl_Water_Box_Mesh_mesh_layer_Transparent[];
+extern Gfx test_map_room_1_entry_0_opaque[];
+extern Vtx test_map_dl_Plane_001_mesh_layer_Opaque_vtx_0[56];
+extern Gfx test_map_dl_Plane_001_mesh_layer_Opaque_tri_0[];
+extern Vtx test_map_dl_Plane_001_mesh_layer_Opaque_vtx_1[52];
+extern Gfx test_map_dl_Plane_001_mesh_layer_Opaque_tri_1[];
+extern Gfx test_map_dl_Plane_001_mesh_layer_Opaque[];
+extern Gfx test_map_room_2_entry_0_opaque[];
+extern Vtx test_map_dl_Plane_005_mesh_layer_Opaque_vtx_0[56];
+extern Gfx test_map_dl_Plane_005_mesh_layer_Opaque_tri_0[];
+extern Vtx test_map_dl_Plane_005_mesh_layer_Opaque_vtx_1[52];
+extern Gfx test_map_dl_Plane_005_mesh_layer_Opaque_tri_1[];
+extern Gfx test_map_dl_Plane_005_mesh_layer_Opaque[];
diff --git a/include/tables/actor_table.h b/include/tables/actor_table.h
index f879d777c..f345b2cd0 100644
--- a/include/tables/actor_table.h
+++ b/include/tables/actor_table.h
@@ -482,3 +482,5 @@
 /* 0x01D4 */ DEFINE_ACTOR(En_Mm2, ACTOR_EN_MM2, ACTOROVL_ALLOC_NORMAL, "En_Mm2")
 /* 0x01D5 */ DEFINE_ACTOR(Bg_Jya_Block, ACTOR_BG_JYA_BLOCK, ACTOROVL_ALLOC_NORMAL, "Bg_Jya_Block")
 /* 0x01D6 */ DEFINE_ACTOR(Obj_Warp2block, ACTOR_OBJ_WARP2BLOCK, ACTOROVL_ALLOC_NORMAL, "Obj_Warp2block")
+
+#include "include/tables/hm_pack/actor_table.h"
diff --git a/include/tables/hm_pack/actor_table.h b/include/tables/hm_pack/actor_table.h
new file mode 100644
index 000000000..31762b6bd
--- /dev/null
+++ b/include/tables/hm_pack/actor_table.h
@@ -0,0 +1,14 @@
+DEFINE_ACTOR(Rat, ACTOR_RAT, ACTOROVL_ALLOC_NORMAL, "Rat")
+DEFINE_ACTOR(Metal_Crate, ACTOR_METAL_CRATE, ACTOROVL_ALLOC_NORMAL, "Metal_Crate")
+DEFINE_ACTOR(Invisible_Trigger_Switch, ACTOR_INVISIBLE_TRIGGER_SWITCH, ACTOROVL_ALLOC_NORMAL, "Invisible_Trigger_Switch")
+DEFINE_ACTOR(En_Zol, ACTOR_EN_ZOL, ACTOROVL_ALLOC_NORMAL, "En_Zol")
+DEFINE_ACTOR(Hammer_Peg, ACTOR_HAMMER_PEG, ACTOROVL_ALLOC_NORMAL, "Hammer_Peg")
+DEFINE_ACTOR(Ladder, ACTOR_LADDER, ACTOROVL_ALLOC_NORMAL, "Ladder")
+DEFINE_ACTOR(En_Wiz, ACTOR_EN_WIZ, ACTOROVL_ALLOC_NORMAL, "En_Wiz")
+DEFINE_ACTOR(En_Wiz_Fire, ACTOR_EN_WIZ_FIRE, ACTOROVL_ALLOC_NORMAL, "En_Wiz_Fire")
+DEFINE_ACTOR(Floor_Spikes, ACTOR_FLOOR_SPIKES, ACTOROVL_ALLOC_NORMAL, "Floor_Spikes")
+DEFINE_ACTOR(Pols_Voice, ACTOR_POLS_VOICE, ACTOROVL_ALLOC_NORMAL, "Pols_Voice")
+DEFINE_ACTOR(Jumptoggle_Platform, ACTOR_JUMPTOGGLE_PLATFORM, ACTOROVL_ALLOC_NORMAL, "Jumptoggle_Platform")
+DEFINE_ACTOR(Platforms, ACTOR_PLATFORMS, ACTOROVL_ALLOC_NORMAL, "Platforms")
+DEFINE_ACTOR(Wall_Pull_Switch, ACTOR_WALL_PULL_SWITCH, ACTOROVL_ALLOC_NORMAL, "Wall_Pull_Switch")
+DEFINE_ACTOR(Obj_Fan, ACTOR_OBJ_FAN, ACTOROVL_ALLOC_NORMAL, "Obj_Fan")
diff --git a/include/tables/hm_pack/object_table.h b/include/tables/hm_pack/object_table.h
new file mode 100644
index 000000000..e9a417715
--- /dev/null
+++ b/include/tables/hm_pack/object_table.h
@@ -0,0 +1,12 @@
+DEFINE_OBJECT(object_rat, OBJECT_RAT)
+DEFINE_OBJECT(object_metal_crate, OBJECT_METAL_CRATE)
+DEFINE_OBJECT(object_zol, OBJECT_ZOL)
+DEFINE_OBJECT(object_hammer_peg, OBJECT_HAMMER_PEG)
+DEFINE_OBJECT(object_ladder, OBJECT_LADDER)
+DEFINE_OBJECT(object_wiz, OBJECT_WIZ)
+DEFINE_OBJECT(object_floor_spikes, OBJECT_FLOOR_SPIKES)
+DEFINE_OBJECT(object_pols_voice, OBJECT_POLS_VOICE)
+DEFINE_OBJECT(object_jumptoggle_platform, OBJECT_JUMPTOGGLE_PLATFORM)
+DEFINE_OBJECT(object_platforms, OBJECT_PLATFORMS)
+DEFINE_OBJECT(object_wall_pull_switch, OBJECT_WALL_PULL_SWITCH)
+DEFINE_OBJECT(object_fan, OBJECT_FAN)
diff --git a/include/tables/object_table.h b/include/tables/object_table.h
index 97e6aa255..606ec5c3f 100644
--- a/include/tables/object_table.h
+++ b/include/tables/object_table.h
@@ -409,3 +409,5 @@
 /* 0x018F */ DEFINE_OBJECT(object_ouke_haka, OBJECT_OUKE_HAKA)
 /* 0x0190 */ DEFINE_OBJECT(object_timeblock, OBJECT_TIMEBLOCK)
 /* 0x0191 */ DEFINE_OBJECT(object_zl4, OBJECT_ZL4)
+
+#include "include/tables/hm_pack/object_table.h"
diff --git a/spec b/spec
index 7a02ebd18..149d491d6 100644
--- a/spec
+++ b/spec
@@ -3376,6 +3376,8 @@ beginseg
     include "build/src/overlays/actors/ovl_Shot_Sun/ovl_Shot_Sun_reloc.o"
 endseg
 
+#include "spec.hm_pack_actors.inc"
+
 beginseg
     name "gameplay_keep"
     romalign 0x1000
@@ -6049,6 +6051,8 @@ beginseg
     number 6
 endseg
 
+#include "spec.hm_pack_objects.inc"
+
 beginseg
     name "g_pn_01"
     romalign 0x1000
diff --git a/spec.hm_pack_actors.inc b/spec.hm_pack_actors.inc
new file mode 100644
index 000000000..24e6cb521
--- /dev/null
+++ b/spec.hm_pack_actors.inc
@@ -0,0 +1,83 @@
+beginseg
+    name "ovl_Rat"
+    include "build/src/overlays/actors/hm_pack/ovl_Rat/rat.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Rat/ovl_Rat_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Metal_Crate"
+    include "build/src/overlays/actors/hm_pack/ovl_Metal_Crate/metal_crate.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Metal_Crate/ovl_Metal_Crate_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Invisible_Trigger_Switch"
+    include "build/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/invisible_trigger_switch.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/ovl_Invisible_Trigger_Switch_reloc.o"
+endseg
+
+beginseg
+    name "ovl_En_Zol"
+    include "build/src/overlays/actors/hm_pack/ovl_En_Zol/z_en_zol.o"
+    include "build/src/overlays/actors/hm_pack/ovl_En_Zol/ovl_En_Zol_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Hammer_Peg"
+    include "build/src/overlays/actors/hm_pack/ovl_Hammer_Peg/hammer_peg.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Hammer_Peg/ovl_Hammer_Peg_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Ladder"
+    include "build/src/overlays/actors/hm_pack/ovl_Ladder/ladder.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Ladder/ovl_Ladder_reloc.o"
+endseg
+
+beginseg
+    name "ovl_En_Wiz"
+    include "build/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.o"
+    include "build/src/overlays/actors/hm_pack/ovl_En_Wiz/ovl_En_Wiz_reloc.o"
+endseg
+
+beginseg
+    name "ovl_En_Wiz_Fire"
+    include "build/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.o"
+    include "build/src/overlays/actors/hm_pack/ovl_En_Wiz/ovl_En_Wiz_Fire_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Floor_Spikes"
+    include "build/src/overlays/actors/hm_pack/ovl_Floor_Spikes/floor_spikes.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Floor_Spikes/ovl_Floor_Spikes_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Pols_Voice"
+    include "build/src/overlays/actors/hm_pack/ovl_Pols_Voice/pols_voice.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Pols_Voice/ovl_Pols_Voice_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Jumptoggle_Platform"
+    include "build/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/jumptoggle_platform.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/ovl_Jumptoggle_Platform_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Platforms"
+    include "build/src/overlays/actors/hm_pack/ovl_Platforms/platforms.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Platforms/ovl_Platforms_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Wall_Pull_Switch"
+    include "build/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/wall_pull_switch.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/ovl_Wall_Pull_Switch_reloc.o"
+endseg
+
+beginseg
+    name "ovl_Obj_Fan"
+    include "build/src/overlays/actors/hm_pack/ovl_Obj_Fan/z_obj_fan.o"
+    include "build/src/overlays/actors/hm_pack/ovl_Obj_Fan/ovl_Obj_Fan_reloc.o"
+endseg
diff --git a/spec.hm_pack_objects.inc b/spec.hm_pack_objects.inc
new file mode 100644
index 000000000..8c48ae5a7
--- /dev/null
+++ b/spec.hm_pack_objects.inc
@@ -0,0 +1,133 @@
+beginseg
+    name "object_rat"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_rat/rat_skel.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_attack.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_damaged.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_death.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_endrun.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_idle.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_notice.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_run.o"
+    include "build/assets_hm_pack/objects/object_rat/rat_anim_startrun.o"
+    number 6
+endseg
+
+beginseg
+    name "object_metal_crate"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_metal_crate/object_metal_crate.o"
+    number 6
+endseg
+
+beginseg
+    name "object_zol"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_zol/object_zol.o"
+    number 6
+endseg
+
+beginseg
+    name "object_hammer_peg"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_model.o"
+    include "build/assets_hm_pack/objects/object_hammer_peg/hammer_peg_top_model.o"
+    include "build/assets_hm_pack/objects/object_hammer_peg/hammer_peg_base_col.o"
+    number 6
+endseg
+
+beginseg
+    name "object_ladder"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_ladder/ladder_medium_model.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_medium_col.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_small_model.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_small_col.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_large_model.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_large_col.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_metal_medium_model.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_metal_medium_col.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_metal_small_model.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_metal_small_col.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_metal_large_model.o"
+    include "build/assets_hm_pack/objects/object_ladder/ladder_metal_large_col.o"
+    number 6
+endseg
+
+beginseg
+    name "object_wiz"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_wiz/object_wiz.o"
+    number 6
+endseg
+
+beginseg
+    name "object_floor_spikes"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_col.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_small_model.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_small_model.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_col.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_medium_model.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_medium_model.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_col.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_base_large_model.o"
+    include "build/assets_hm_pack/objects/object_floor_spikes/floor_spike_spikes_large_model.o"
+    number 6
+endseg
+
+beginseg
+    name "object_pols_voice"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_pols_voice/pols_voice_skel.o"
+    include "build/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_idle.o"
+    include "build/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_hop.o"
+    include "build/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_grab.o"
+    include "build/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_damaged.o"
+    include "build/assets_hm_pack/objects/object_pols_voice/pols_voice_anim_die.o"
+    number 6
+endseg
+
+beginseg
+    name "object_jumptoggle_platform"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.o"
+    number 6
+endseg
+
+beginseg
+    name "object_platforms"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_platforms/platform_cone_grass_model.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_cone_grass_col.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_hex_grass_model.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_hex_grass_col.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_hex_ice_model.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_hex_ice_col.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_grass_model.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_grass_col.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_stone_model.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_stone_checkermodel.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_stone_col.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_wood_model.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_wood_checkermodel.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_wood_col.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_ice_model.o"
+    include "build/assets_hm_pack/objects/object_platforms/platform_square_ice_col.o"
+    number 6
+endseg
+
+beginseg
+    name "object_wall_pull_switch"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.o"
+    number 6
+endseg
+
+beginseg
+    name "object_fan"
+    romalign 0x1000
+    include "build/assets_hm_pack/objects/object_fan/object_fan.o"
+    include "build/assets_hm_pack/objects/object_fan/gWindDL.o"
+    number 6
+endseg
diff --git a/src/code/fault.c b/src/code/fault.c
index 593613f50..25011d51d 100644
--- a/src/code/fault.c
+++ b/src/code/fault.c
@@ -374,7 +374,9 @@ void Fault_PadCallback(Input* inputs) {
     PadMgr_RequestPadData(inputs, false);
 #else
     // Guarantee crashing behavior: false -> NULL, previous value in a2 is more often non-zero than zero
-    PadMgr_RequestPadData((PadMgr*)inputs, NULL, true);
+    // TODO: ...delete before release!!!?
+    // PadMgr_RequestPadData((PadMgr*)inputs, NULL, true);;
+    PadMgr_RequestPadData(&gPadMgr, inputs, false);
 #endif
 }
 
@@ -1222,7 +1224,8 @@ void Fault_ThreadEntry(void* arg) {
         } else {
             // Draw error bar signifying the crash screen is available
             Fault_DrawCornerRec(GPACK_RGBA5551(255, 0, 0, 1));
-            Fault_WaitForButtonCombo();
+            // TODO: change back before release!!!
+            // Fault_WaitForButtonCombo();
         }
 
         // Set auto-scrolling and default colors
diff --git a/src/code/sys_math3d.c b/src/code/sys_math3d.c
index 5c7975754..9497aa584 100644
--- a/src/code/sys_math3d.c
+++ b/src/code/sys_math3d.c
@@ -2145,8 +2145,309 @@ s32 Math3D_YZInSphere(Sphere16* sphere, f32 y, f32 z) {
     return false;
 }
 
+void Math3D_VtxF2L(Vtx* r, Vec3f* v) {
+    r->n.ob[0] = Math_FFloorF(0.5f + v->x * 128.0f);
+    r->n.ob[1] = Math_FFloorF(0.5f + v->y * 128.0f);
+    r->n.ob[2] = Math_FFloorF(0.5f + v->z * 128.0f);
+    r->n.flag = 0;
+    r->n.tc[0] = 0;
+    r->n.tc[1] = 0;
+    r->n.n[0] = v->x * 127.0f;
+    r->n.n[1] = v->y * 127.0f;
+    r->n.n[2] = v->z * 127.0f;
+    r->n.a = 0xFF;
+}
+ 
+void Math3D_IcoSphSubdivideEdge(Vec3f* r, Vec3f* a, Vec3f* b) {
+    Math_Vec3f_Sum(a, b, r);
+    Math_Vec3f_Scale(r, 1.0f / Math3D_Vec3fMagnitude(r));
+}
+ 
+static Gfx sPolyGfxInit[] = {
+    gsSPLoadGeometryMode(G_ZBUFFER | G_SHADE | G_LIGHTING),
+    gsSPTexture(0, 0, 0, G_TX_RENDERTILE, G_OFF),
+    gsDPPipeSync(),
+    gsDPSetCycleType(G_CYC_1CYCLE),
+    gsDPSetRenderMode(
+        Z_CMP | IM_RD | CVG_DST_FULL | FORCE_BL | ZMODE_XLU | GBL_c1(G_BL_CLR_IN, G_BL_A_IN, G_BL_CLR_MEM, G_BL_1MA),
+        Z_CMP | IM_RD | CVG_DST_FULL | FORCE_BL | ZMODE_XLU | GBL_c2(G_BL_CLR_IN, G_BL_A_IN, G_BL_CLR_MEM, G_BL_1MA)),
+    gsDPSetCombineLERP(PRIMITIVE, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT, PRIMITIVE, 0, SHADE, 0, 0, 0, 0, ENVIRONMENT),
+    gsDPSetEnvColor(255, 255, 255, 128),
+    gsSPEndDisplayList(),
+};
+ 
+void Math3D_DrawSphereImpl(GraphicsContext* gfxCtx, Gfx** gfxP, f32 x, f32 y, f32 z, f32 radius) {
+    static Gfx* pSphGfx = NULL;
+    static Vtx sphVtx[42];
+    static Gfx sphGfx[45];
+ 
+    Gfx* sphGfxP;
+    s32 i;
+ 
+    if (!pSphGfx) {
+        Vec3f vtx[42];
+        s32 r0n = 1, r0m = r0n / 5, r0i = 0 + 0;
+        s32 r1n = 5, r1m = r1n / 5, r1i = r0i + r0n;
+        s32 r2n = 10, r2m = r2n / 5, r2i = r1i + r1n;
+        s32 r3n = 10, r3m = r3n / 5, r3i = r2i + r2n;
+        s32 r4n = 10, r4m = r4n / 5, r4i = r3i + r3n;
+        s32 r5n = 5, r5m = r5n / 5, r5i = r4i + r4n;
+        s32 r6n = 1, r6m = r6n / 5, r6i = r5i + r5n;
+ 
+        vtx[r0i + (0 * r0m + 0) % r0n].x = 0.0f;
+        vtx[r0i + (0 * r0m + 0) % r0n].y = 1.0f;
+        vtx[r0i + (0 * r0m + 0) % r0n].z = 0.0f;
+ 
+        vtx[r6i + (0 * r6m + 0) % r6n].x = 0.0f;
+        vtx[r6i + (0 * r6m + 0) % r6n].y = -1.0f;
+        vtx[r6i + (0 * r6m + 0) % r6n].z = 0.0f;
+ 
+        for (i = 0; i < 5; ++i) {
+            static const f32 aXZ = 2.0f * M_PI / 10.0f;
+            static const f32 aY = 0.463647609f; // Math_FAtanF(1.0f / 2.0f);
+ 
+            vtx[r2i + (i * r2m + 0) % r2n].x = cosf(aXZ * (i * r2m + 0)) * cosf(aY * 1.0f);
+            vtx[r2i + (i * r2m + 0) % r2n].y = sinf(aY * 1.0f);
+            vtx[r2i + (i * r2m + 0) % r2n].z = -sinf(aXZ * (i * r2m + 0)) * cosf(aY * 1.0f);
+ 
+            vtx[r4i + (i * r4m + 0) % r4n].x = cosf(aXZ * (i * r4m + 1)) * cosf(aY * -1.0f);
+            vtx[r4i + (i * r4m + 0) % r4n].y = sinf(aY * -1.0f);
+            vtx[r4i + (i * r4m + 0) % r4n].z = -sinf(aXZ * (i * r4m + 1)) * cosf(aY * -1.0f);
+        }
+ 
+        for (i = 0; i < 5; ++i) {
+            Math3D_IcoSphSubdivideEdge(&vtx[r1i + (i * r1m + 0) % r1n], &vtx[r0i + (i * r0m + 0) % r0n],
+                                       &vtx[r2i + (i * r2m + 0) % r2n]);
+            Math3D_IcoSphSubdivideEdge(&vtx[r2i + (i * r2m + 1) % r2n], &vtx[r2i + (i * r2m + 0) % r2n],
+                                       &vtx[r2i + (i * r2m + 2) % r2n]);
+            Math3D_IcoSphSubdivideEdge(&vtx[r3i + (i * r3m + 0) % r3n], &vtx[r2i + (i * r2m + 0) % r2n],
+                                       &vtx[r4i + (i * r4m + 0) % r4n]);
+            Math3D_IcoSphSubdivideEdge(&vtx[r3i + (i * r3m + 1) % r3n], &vtx[r4i + (i * r4m + 0) % r4n],
+                                       &vtx[r2i + (i * r2m + 2) % r2n]);
+            Math3D_IcoSphSubdivideEdge(&vtx[r4i + (i * r4m + 1) % r4n], &vtx[r4i + (i * r4m + 0) % r4n],
+                                       &vtx[r4i + (i * r4m + 2) % r4n]);
+            Math3D_IcoSphSubdivideEdge(&vtx[r5i + (i * r5m + 0) % r5n], &vtx[r4i + (i * r4m + 0) % r4n],
+                                       &vtx[r6i + (i * r6m + 0) % r6n]);
+        }
+ 
+        for (i = 0; i < 42; ++i) {
+            Math3D_VtxF2L(&sphVtx[i], &vtx[i]);
+        }
+ 
+        sphGfxP = pSphGfx = sphGfx;
+ 
+        gSPSetGeometryMode(sphGfxP++, G_CULL_BACK | G_SHADING_SMOOTH);
+        gSPVertex(sphGfxP++, &sphVtx[r0i], r0n + r1n + r2n + r3n, r0i - r0i);
+ 
+        r3i -= r0i;
+        r2i -= r0i;
+        r1i -= r0i;
+        r0i -= r0i;
+ 
+        for (i = 0; i < 5; ++i) {
+            s32 v[24];
+ 
+            v[0] = r0i + (i * r0m + 0) % r0n;
+            v[1] = r1i + (i * r1m + 0) % r1n;
+            v[2] = r1i + (i * r1m + 1) % r1n;
+            v[3] = r1i + (i * r1m + 0) % r1n;
+            v[4] = r2i + (i * r2m + 0) % r2n;
+            v[5] = r2i + (i * r2m + 1) % r2n;
+            v[6] = r1i + (i * r1m + 0) % r1n;
+            v[7] = r2i + (i * r2m + 1) % r2n;
+            v[8] = r1i + (i * r1m + 1) % r1n;
+            v[9] = r1i + (i * r1m + 1) % r1n;
+            v[10] = r2i + (i * r2m + 1) % r2n;
+            v[11] = r2i + (i * r2m + 2) % r2n;
+            v[12] = r2i + (i * r2m + 0) % r2n;
+            v[13] = r3i + (i * r3m + 0) % r3n;
+            v[14] = r2i + (i * r2m + 1) % r2n;
+            v[15] = r2i + (i * r2m + 1) % r2n;
+            v[16] = r3i + (i * r3m + 0) % r3n;
+            v[17] = r3i + (i * r3m + 1) % r3n;
+            v[18] = r2i + (i * r2m + 1) % r2n;
+            v[19] = r3i + (i * r3m + 1) % r3n;
+            v[20] = r2i + (i * r2m + 2) % r2n;
+            v[21] = r2i + (i * r2m + 2) % r2n;
+            v[22] = r3i + (i * r3m + 1) % r3n;
+            v[23] = r3i + (i * r3m + 2) % r3n;
+ 
+            gSP2Triangles(sphGfxP++, v[0], v[1], v[2], 0, v[3], v[4], v[5], 0);
+            gSP2Triangles(sphGfxP++, v[6], v[7], v[8], 0, v[9], v[10], v[11], 0);
+            gSP2Triangles(sphGfxP++, v[12], v[13], v[14], 0, v[15], v[16], v[17], 0);
+            gSP2Triangles(sphGfxP++, v[18], v[19], v[20], 0, v[21], v[22], v[23], 0);
+        }
+ 
+        gSPVertex(sphGfxP++, &sphVtx[r4i], r4n + r5n + r6n, r4i - r4i);
+ 
+        r6i -= r4i;
+        r5i -= r4i;
+        r4i -= r4i;
+ 
+        for (i = 0; i < 5; ++i) {
+            s32 v[24];
+ 
+            v[0] = r3i + (i * r3m + 1) % r3n;
+            v[1] = r4i + (i * r4m + 0) % r4n;
+            v[2] = r4i + (i * r4m + 1) % r4n;
+            v[3] = r3i + (i * r3m + 1) % r3n;
+            v[4] = r4i + (i * r4m + 1) % r4n;
+            v[5] = r3i + (i * r3m + 2) % r3n;
+            v[6] = r3i + (i * r3m + 2) % r3n;
+            v[7] = r4i + (i * r4m + 1) % r4n;
+            v[8] = r4i + (i * r4m + 2) % r4n;
+            v[9] = r3i + (i * r3m + 2) % r3n;
+            v[10] = r4i + (i * r4m + 2) % r4n;
+            v[11] = r3i + (i * r3m + 3) % r3n;
+            v[12] = r4i + (i * r4m + 0) % r4n;
+            v[13] = r5i + (i * r5m + 0) % r5n;
+            v[14] = r4i + (i * r4m + 1) % r4n;
+            v[15] = r4i + (i * r4m + 1) % r4n;
+            v[16] = r5i + (i * r5m + 0) % r5n;
+            v[17] = r5i + (i * r5m + 1) % r5n;
+            v[18] = r4i + (i * r4m + 1) % r4n;
+            v[19] = r5i + (i * r5m + 1) % r5n;
+            v[20] = r4i + (i * r4m + 2) % r4n;
+            v[21] = r5i + (i * r5m + 0) % r5n;
+            v[22] = r6i + (i * r6m + 0) % r6n;
+            v[23] = r5i + (i * r5m + 1) % r5n;
+ 
+            gSP2Triangles(sphGfxP++, v[0], v[1], v[2], 0, v[3], v[4], v[5], 0);
+            gSP2Triangles(sphGfxP++, v[6], v[7], v[8], 0, v[9], v[10], v[11], 0);
+            gSP2Triangles(sphGfxP++, v[12], v[13], v[14], 0, v[15], v[16], v[17], 0);
+            gSP2Triangles(sphGfxP++, v[18], v[19], v[20], 0, v[21], v[22], v[23], 0);
+        }
+        gSPClearGeometryMode(sphGfxP++, G_CULL_BACK | G_SHADING_SMOOTH);
+        gSPEndDisplayList(sphGfxP++);
+    }
+ 
+    Matrix_Push();
+ 
+    Matrix_Translate(x, y, z, MTXMODE_NEW);
+    Matrix_Scale(radius / 128.0f, radius / 128.0f, radius / 128.0f, MTXMODE_APPLY);
+ 
+    gSPMatrix((*gfxP)++, Matrix_NewMtx(gfxCtx, __FILE__, __LINE__), G_MTX_MODELVIEW | G_MTX_LOAD | G_MTX_PUSH);
+    gSPDisplayList((*gfxP)++, pSphGfx);
+    gSPPopMatrix((*gfxP)++, G_MTX_MODELVIEW);
+ 
+    Matrix_Pop();
+}
+ 
 void Math3D_DrawSphere(PlayState* play, Sphere16* sph) {
-}
-
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+ 
+    gSPDisplayList(POLY_XLU_DISP++, sPolyGfxInit);
+    gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255, 255, 255, 255);
+ 
+    Math3D_DrawSphereImpl(play->state.gfxCtx, &POLY_XLU_DISP, sph->center.x, sph->center.y, sph->center.z, sph->radius);
+ 
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+}
+ 
+void Math3D_DrawCylinderImpl(GraphicsContext* gfxCtx, Gfx** gfxP, f32 x, f32 y, f32 z, s16 radius, s16 height) {
+    static Gfx* pCylGfx = NULL;
+ 
+    if (!pCylGfx) {
+        static Gfx cylGfx[5 + 12 * 2];
+        static Vtx cylVtx[2 + 12 * 2];
+ 
+        s32 i;
+        Gfx* cylGfxP = pCylGfx = cylGfx;
+ 
+        cylVtx[0].n.ob[0] = 0;
+        cylVtx[0].n.ob[1] = 0;
+        cylVtx[0].n.ob[2] = 0;
+        cylVtx[0].n.flag = 0;
+        cylVtx[0].n.tc[0] = 0;
+        cylVtx[0].n.tc[1] = 0;
+        cylVtx[0].n.n[0] = 0;
+        cylVtx[0].n.n[1] = -127;
+        cylVtx[0].n.n[2] = 0;
+        cylVtx[0].n.a = 255;
+ 
+        cylVtx[1].n.ob[0] = 0;
+        cylVtx[1].n.ob[1] = 128;
+        cylVtx[1].n.ob[2] = 0;
+        cylVtx[1].n.flag = 0;
+        cylVtx[1].n.tc[0] = 0;
+        cylVtx[1].n.tc[1] = 0;
+        cylVtx[1].n.n[0] = 0;
+        cylVtx[1].n.n[1] = 127;
+        cylVtx[1].n.n[2] = 0;
+        cylVtx[1].n.a = 255;
+ 
+        for (i = 0; i < 12; ++i) {
+            s32 vtxX = Math_FFloorF(0.5f + cosf(2.f * M_PI * i / 12) * 128.f);
+            s32 vtxZ = Math_FFloorF(0.5f - sinf(2.f * M_PI * i / 12) * 128.f);
+            s32 normX = cosf(2.f * M_PI * i / 12) * 127.f;
+            s32 normZ = -sinf(2.f * M_PI * i / 12) * 127.f;
+ 
+            cylVtx[2 + i * 2 + 0].n.ob[0] = vtxX;
+            cylVtx[2 + i * 2 + 0].n.ob[1] = 0;
+            cylVtx[2 + i * 2 + 0].n.ob[2] = vtxZ;
+            cylVtx[2 + i * 2 + 0].n.flag = 0;
+            cylVtx[2 + i * 2 + 0].n.tc[0] = 0;
+            cylVtx[2 + i * 2 + 0].n.tc[1] = 0;
+            cylVtx[2 + i * 2 + 0].n.n[0] = normX;
+            cylVtx[2 + i * 2 + 0].n.n[1] = 0;
+            cylVtx[2 + i * 2 + 0].n.n[2] = normZ;
+            cylVtx[2 + i * 2 + 0].n.a = 255;
+ 
+            cylVtx[2 + i * 2 + 1].n.ob[0] = vtxX;
+            cylVtx[2 + i * 2 + 1].n.ob[1] = 128;
+            cylVtx[2 + i * 2 + 1].n.ob[2] = vtxZ;
+            cylVtx[2 + i * 2 + 1].n.flag = 0;
+            cylVtx[2 + i * 2 + 1].n.tc[0] = 0;
+            cylVtx[2 + i * 2 + 1].n.tc[1] = 0;
+            cylVtx[2 + i * 2 + 1].n.n[0] = normX;
+            cylVtx[2 + i * 2 + 1].n.n[1] = 0;
+            cylVtx[2 + i * 2 + 1].n.n[2] = normZ;
+            cylVtx[2 + i * 2 + 1].n.a = 255;
+        }
+ 
+        gSPSetGeometryMode(cylGfxP++, G_CULL_BACK | G_SHADING_SMOOTH);
+        gSPVertex(cylGfxP++, cylVtx, 2 + 12 * 2, 0);
+ 
+        for (i = 0; i < 12; ++i) {
+            s32 p = (i + 12 - 1) % 12;
+ 
+            gSP2Triangles(cylGfxP++, 2 + p * 2 + 0, 2 + i * 2 + 0, 2 + i * 2 + 1, 0, 2 + p * 2 + 0, 2 + i * 2 + 1,
+                          2 + p * 2 + 1, 0);
+        }
+ 
+        gSPClearGeometryMode(cylGfxP++, G_SHADING_SMOOTH);
+ 
+        for (i = 0; i < 12; ++i) {
+            s32 p = (i + 12 - 1) % 12;
+ 
+            gSP2Triangles(cylGfxP++, 0, 2 + i * 2 + 0, 2 + p * 2 + 0, 0, 1, 2 + p * 2 + 1, 2 + i * 2 + 1, 0);
+        }
+ 
+        gSPClearGeometryMode(cylGfxP++, G_CULL_BACK);
+        gSPEndDisplayList(cylGfxP++);
+    }
+ 
+    Matrix_Push();
+ 
+    Matrix_Translate(x, y, z, MTXMODE_NEW);
+    Matrix_Scale(radius / 128.0f, height / 128.0f, radius / 128.0f, MTXMODE_APPLY);
+ 
+    gSPMatrix((*gfxP)++, Matrix_NewMtx(gfxCtx, __FILE__, __LINE__), G_MTX_MODELVIEW | G_MTX_LOAD | G_MTX_PUSH);
+    gSPDisplayList((*gfxP)++, pCylGfx);
+    gSPPopMatrix((*gfxP)++, G_MTX_MODELVIEW);
+ 
+    Matrix_Pop();
+}
+ 
 void Math3D_DrawCylinder(PlayState* play, Cylinder16* cyl) {
-}
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+ 
+    gSPDisplayList(POLY_XLU_DISP++, sPolyGfxInit);
+    gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255, 255, 255, 255);
+ 
+    Math3D_DrawCylinderImpl(play->state.gfxCtx, &POLY_XLU_DISP, cyl->pos.x, cyl->pos.y + cyl->yShift, cyl->pos.z,
+                            cyl->radius, cyl->height);
+ 
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+}
+ 
diff --git a/src/makerom/rom_header.s b/src/makerom/rom_header.s
index 883b8b0ab..7b7d58c7e 100644
--- a/src/makerom/rom_header.s
+++ b/src/makerom/rom_header.s
@@ -14,5 +14,5 @@
 .word  0x00000000               /* Unknown */
 .word  0x0000004E               /* Cartridge */
 .ascii "ZL"                     /* Cartridge ID */
-.ascii "P"                      /* Region */
+.ascii "E"                      /* Region */
 .byte  0x0F                     /* Version */
diff --git a/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.c b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.c
new file mode 100644
index 000000000..38590bb22
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.c
@@ -0,0 +1,908 @@
+/*
+ * File: z_En_Wiz.c
+ * Overlay: ovl_En_Wiz
+ * Description: Wizzrobe enemy from the Hylian Modding actor pack.
+ * Params: 0xXXYY, XX is type, YY is the enemy spawn set
+ *      -- XX: Type - 0x00 Master (Spawns Enemies), 0x01 Fire, 0x02 Ice
+ *      -- YY: Enemy Spawn Set - see sEnemySpawnTable
+ * 
+ * Spawn position should be in the center of the room!
+ * Spawn parameters set the enemy spawn table, sEnemySpawnTable
+ */
+
+#include "z_en_wiz.h"
+#include "overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.h"
+#include "assets_hm_pack/objects/object_wiz/object_wiz.h"
+
+#define FLAGS (ACTOR_FLAG_0 | ACTOR_FLAG_2 | ACTOR_FLAG_4)
+
+typedef enum {
+    /*  0 */ CASTTYPE_FIRE,
+    /*  1 */ CASTTYPE_NONE,
+    /*  2 */ CASTTYPE_ENEMY,
+    /*  3 */ CASTTYPE_ICE = 4
+} CastType;
+
+#define TARGET_ON (this->actor.flags |= ACTOR_FLAG_0)
+#define TARGET_OFF (this->actor.flags &= ~ACTOR_FLAG_0)
+
+// uncomment this to only run DoNothing
+// #define TEST
+
+void EnWiz_Init(Actor* thisx, PlayState* play);
+void EnWiz_InitCollision(Actor* thisx, PlayState* play);
+void EnWiz_Destroy(Actor* thisx, PlayState* play2);
+void EnWiz_Update(Actor* thisx, PlayState* play);
+void EnWiz_Draw(Actor* thisx, PlayState* play);
+
+void EnWiz_SetupAppear(EnWiz* this);
+void EnWiz_SetupCastAttack(EnWiz* this);
+void EnWiz_SetupCastEnemies(EnWiz* this);
+void EnWiz_SetupAttack(EnWiz* this);
+void EnWiz_SetupDisappear(EnWiz* this);
+void EnWiz_SetupIdle(EnWiz* this);
+void EnWiz_SetupDamaged(EnWiz* this);
+void EnWiz_SetupFrozen(Actor* thisx);
+void EnWiz_SetupDeath(EnWiz* this);
+void EnWiz_SetupTeleport(EnWiz* this, PlayState* play);
+
+void EnWiz_Appear(EnWiz* this, PlayState* play);
+void EnWiz_CastAttack(EnWiz* this, PlayState* play);
+void EnWiz_CastEnemies(EnWiz* this, PlayState* play);
+void EnWiz_Attack(EnWiz* this, PlayState* play);
+void EnWiz_Disappear(EnWiz* this, PlayState* play);
+void EnWiz_Idle(EnWiz* this, PlayState* play);
+void EnWiz_Damaged(EnWiz* this, PlayState* play);
+void EnWiz_Frozen(EnWiz* this, PlayState* play);
+void EnWiz_Death(EnWiz* this, PlayState* play);
+void EnWiz_Teleport(EnWiz* this, PlayState* play);
+
+void EnWiz_DoNothing(EnWiz* this, PlayState* play);
+
+ActorInit En_Wiz_InitVars = {
+    ACTOR_EN_WIZ,
+    ACTORCAT_ENEMY,
+    FLAGS,
+    OBJECT_WIZ,
+    sizeof(EnWiz),
+    (ActorFunc)EnWiz_Init,
+    (ActorFunc)EnWiz_Destroy,
+    (ActorFunc)EnWiz_Update,
+    (ActorFunc)EnWiz_Draw,
+};
+
+static ColliderCylinderInit sCylinderInit = {
+    {
+        COLTYPE_HIT0,
+        AT_NONE,
+        AC_ON | AC_TYPE_PLAYER,
+        OC1_ON | OC1_TYPE_ALL,
+        OC2_TYPE_2,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+        { 0xFFCFFFFF, 0x00, 0x00 },
+        { 0xFFCFFFFF, 0x00, 0x00 },
+        TOUCH_NONE,
+        BUMP_ON,
+        OCELEM_ON,
+    },
+    { 55, 70, 0, { 0 } },
+};
+
+typedef enum {
+    /* 0x0 */ EN_WIZ_DMGEFF_NORMAL,     // Deals no damage
+    /* 0x1 */ EN_WIZ_DMGEFF_IMMUNE,     // Deals no damage
+              EN_WIZ_DMGEFF_EXTRA,      // Deals extra damage when frozen
+    /* 0xE */ EN_WIZ_DMGEFF_FIRE = 0xE, // Damages and sets Ice Wizrobes on fire
+    /* 0xF */ EN_WIZ_DMGEFF_FREEZE     // Damages and surrounds Fire Wizrobes with ice
+} EnWizDamageEffect;
+
+static DamageTable sDamageTable[] = {
+    /* Deku nut      */ DMG_ENTRY(0, EN_WIZ_DMGEFF_IMMUNE),
+    /* Deku stick    */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Slingshot     */ DMG_ENTRY(1, EN_WIZ_DMGEFF_NORMAL),
+    /* Explosive     */ DMG_ENTRY(2, EN_WIZ_DMGEFF_EXTRA),
+    /* Boomerang     */ DMG_ENTRY(0, EN_WIZ_DMGEFF_IMMUNE),
+    /* Normal arrow  */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Hammer swing  */ DMG_ENTRY(2, EN_WIZ_DMGEFF_EXTRA),
+    /* Hookshot      */ DMG_ENTRY(0, EN_WIZ_DMGEFF_IMMUNE),
+    /* Kokiri sword  */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Master sword  */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Giant's Knife */ DMG_ENTRY(4, EN_WIZ_DMGEFF_NORMAL),
+    /* Fire arrow    */ DMG_ENTRY(2, EN_WIZ_DMGEFF_FIRE),
+    /* Ice arrow     */ DMG_ENTRY(2, EN_WIZ_DMGEFF_FREEZE),
+    /* Light arrow   */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Unk arrow 1   */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Unk arrow 2   */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Unk arrow 3   */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Fire magic    */ DMG_ENTRY(2, EN_WIZ_DMGEFF_FIRE),
+    /* Ice magic     */ DMG_ENTRY(2, EN_WIZ_DMGEFF_FREEZE),
+    /* Light magic   */ DMG_ENTRY(0, EN_WIZ_DMGEFF_NORMAL),
+    /* Shield        */ DMG_ENTRY(0, EN_WIZ_DMGEFF_NORMAL),
+    /* Mirror Ray    */ DMG_ENTRY(0, EN_WIZ_DMGEFF_NORMAL),
+    /* Kokiri spin   */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Giant spin    */ DMG_ENTRY(4, EN_WIZ_DMGEFF_NORMAL),
+    /* Master spin   */ DMG_ENTRY(2, EN_WIZ_DMGEFF_NORMAL),
+    /* Kokiri jump   */ DMG_ENTRY(4, EN_WIZ_DMGEFF_NORMAL),
+    /* Giant jump    */ DMG_ENTRY(8, EN_WIZ_DMGEFF_NORMAL),
+    /* Master jump   */ DMG_ENTRY(4, EN_WIZ_DMGEFF_NORMAL),
+    /* Unknown 1     */ DMG_ENTRY(0, EN_WIZ_DMGEFF_NORMAL),
+    /* Unblockable   */ DMG_ENTRY(0, EN_WIZ_DMGEFF_NORMAL),
+    /* Hammer jump   */ DMG_ENTRY(4, EN_WIZ_DMGEFF_EXTRA),
+    /* Unknown 2     */ DMG_ENTRY(0, EN_WIZ_DMGEFF_NORMAL),
+};
+
+static CollisionCheckInfoInit sColChkInfoInit = { 0, 12, 60, MASS_IMMOVABLE };
+
+// table for spawning different enemy sets
+typedef struct {
+    u16 actor1;
+    s16 params1;
+    u16 actor2;
+    s16 params2;
+    u16 scaleMult; // used to multiply effect scales to account for smaller and larger enemies
+    u8 count;
+} EnemySpawnTable;
+
+// index for table is defined by spawn params, so 0x0000 will be 0, 0x0001 will be 1 and so on
+static EnemySpawnTable sEnemySpawnTable[] = {
+    //      actor1                  params1     actor2                  params2     scaleMult       entryCount
+    /* 0 */ {ACTOR_EN_BB,           0xFFFF,     0,                      0,          1,              1},
+    /* 1 */ {ACTOR_EN_BB,           0xFFFF,     ACTOR_EN_BB,            0xFFFF,     1,              2},
+    /* 2 */ {ACTOR_EN_FIREFLY,      0x0001,     ACTOR_EN_FIREFLY,       0x0004,     1,              2},
+    /* 3 */ {ACTOR_EN_IK,           0x0002,     0,                      0,          2,              1},
+};
+
+static InitChainEntry sInitChain[] = {
+    ICHAIN_F32(uncullZoneForward, 2000, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneScale, 350, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneDownward, 1000, ICHAIN_CONTINUE),
+    ICHAIN_U8(targetMode, 2, ICHAIN_STOP),
+};
+
+void EnWiz_InitCollision(Actor* thisx, PlayState* play) {
+    EnWiz* this = (EnWiz*)thisx;
+
+    Collider_InitCylinder(play, &this->collider);
+    Collider_SetCylinder(play, &this->collider, &this->actor, &sCylinderInit);
+    Collider_UpdateCylinder(&this->actor, &this->collider);
+}
+
+void EnWiz_Init(Actor* thisx, PlayState* play) {
+    EnWiz* this = (EnWiz*)thisx;
+
+    Actor_ProcessInitChain(thisx, sInitChain);
+    Actor_SetScale(&this->actor, 0.01f);
+    SkelAnime_InitFlex(play, &this->skelAnime, &Armature, &IdleAnim, this->jointTable, this->morphTable,
+                       12);
+    ActorShape_Init(&thisx->shape, -200.0f, ActorShadow_DrawCircle, 70.0f);
+
+    EnWiz_InitCollision(thisx, play);
+    CollisionCheck_SetInfo(&thisx->colChkInfo, NULL, &sColChkInfoInit);
+    thisx->colChkInfo.damageTable = sDamageTable;
+    thisx->colChkInfo.health = 6;
+
+    thisx->shape.yOffset = -200.0f; // maybe remove this?
+
+    Actor_SetScale(&this->actor, 0.008f);
+
+    this->type = (thisx->params & 0xFF00) >> 8;
+
+    // clothing colors
+    switch (this->type) {
+        case ENWIZ_TYPE_MASTER:
+            this->typeColor.r = 255;
+            this->typeColor.g = 150;
+            this->typeColor.b = 0;
+            break;
+        case ENWIZ_TYPE_FIRE:
+            this->typeColor.r = 150;
+            this->typeColor.g = 0;
+            this->typeColor.b = 0;
+            break;
+        case ENWIZ_TYPE_ICE:
+            this->typeColor.r = 0;
+            this->typeColor.g = 100;
+            this->typeColor.b = 255;
+            break;
+    }
+    this->typeColor.a = 0;
+
+    this->alpha = 0; // invisible during spawn
+    TARGET_OFF;
+
+    this->spawnCount[0] = this->spawnCount[1] = 0;
+    this->enemySpawnSet = thisx->params & 0xFF;
+
+    this->floatPosY = this->actor.home.pos.y;
+
+    EnWiz_SetupTeleport(this, play);
+}
+
+void EnWiz_Destroy(Actor* thisx, PlayState* play2) {
+    PlayState* play = play2;
+    EnWiz* this = (EnWiz*)thisx;
+
+    Collider_DestroyCylinder(play, &this->collider);
+}
+
+/**
+ * Helper Functions
+ */
+
+void EnWiz_LevitateSetY(EnWiz* this, PlayState* play) {
+    this->actor.world.pos.y = Math_SinS(play->gameplayFrames * 0x800) * 8.0f + this->floatPosY + 20.0f; // + 20.0f is only for the bombiwa offset
+}
+
+// call this function only once and not every frame, returns 0 when spawns are active or 1 if not, to check for
+s32 EnWiz_SpawnCheck(EnWiz* this, PlayState* play) {
+    u8 i;
+
+    for (i = 0; i < 2; i++) {
+        if (this->spawnCount[i] > 0) {
+            if (this->spawnedActor[i] != NULL && this->spawnedActor[i]->update == NULL) { // when spawn is killed
+                this->spawnCount[i] = 0;
+            }
+        }
+    }
+
+    if (this->spawnCount[0] == 0 && this->spawnCount[1] == 0) {
+        return 1;
+    } else {
+        return 0;
+    }
+}
+
+static Vec3f sEffectPosAccel = { 0.0f, 0.0f, 0.0f };
+static Vec3f sEffectPosVel = { 0.0f, 10.0f, 0.0f };
+static Color_RGBA8 sEffectEnvColor = { 80, 0, 80, 255 };
+
+void EnWiz_SpawnEnemies(EnWiz* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    Vec3f spawnPos;
+    Vec3f effectPos;
+    s16 spawnAngle;
+    u8 i;
+    f32 distToPlayer;
+    s16 yawToPlayer;
+
+    // calculate spawn position distance from home position
+    yawToPlayer = Math_Vec3f_Yaw(&this->actor.home.pos, &player->actor.world.pos);
+
+    spawnAngle = yawToPlayer;
+
+    distToPlayer = Math_Vec3f_DistXZ(&this->actor.home.pos, &player->actor.world.pos);
+    distToPlayer = distToPlayer * 0.6f;
+
+    spawnPos.x = this->actor.home.pos.x + (Math_SinS(spawnAngle) * distToPlayer);
+    spawnPos.y = player->actor.floorHeight;
+    spawnPos.z = this->actor.home.pos.z + (Math_CosS(spawnAngle) * distToPlayer);
+
+    // calculate separation distance from spawn position
+    if (sEnemySpawnTable[this->enemySpawnSet].count > 1) {
+        spawnAngle += DEG_TO_BINANG(90);
+
+        spawnPos.x += (Math_SinS(spawnAngle) * 60.0f);
+        spawnPos.z += (Math_CosS(spawnAngle) * 60.0f);
+    }
+
+    for (i = 0; i < 4; i++) {
+        effectPos.x = spawnPos.x + ((Math_SinS((Rand_ZeroOne() * 65536.0f)) * (20.0f * sEnemySpawnTable[this->enemySpawnSet].scaleMult)) + Rand_CenteredFloat(10.0f));
+        effectPos.y = player->actor.floorHeight + 10.0f;
+        effectPos.z = spawnPos.z + ((Math_CosS((Rand_ZeroOne() * 65536.0f)) * (20.0f * sEnemySpawnTable[this->enemySpawnSet].scaleMult)) + Rand_CenteredFloat(10.0f));
+
+        func_8002829C(play, &effectPos, &sEffectPosVel, &sEffectPosAccel, &this->castColor, &sEffectEnvColor,
+                          1500 * sEnemySpawnTable[this->enemySpawnSet].scaleMult, 20);
+    }
+
+    this->spawnedActor[0] = Actor_Spawn(&play->actorCtx, play, sEnemySpawnTable[this->enemySpawnSet].actor1, spawnPos.x, spawnPos.y, spawnPos.z, 0, yawToPlayer, 0, sEnemySpawnTable[this->enemySpawnSet].params1);
+    this->spawnCount[0] = 1;
+
+    // second enemy
+    if (sEnemySpawnTable[this->enemySpawnSet].count > 1) {
+        // calculate spawn position distance from home position
+        spawnAngle = yawToPlayer;
+
+        spawnPos.x = this->actor.home.pos.x + (Math_SinS(spawnAngle) * distToPlayer);
+        spawnPos.y = player->actor.floorHeight;
+        spawnPos.z = this->actor.home.pos.z + (Math_CosS(spawnAngle) * distToPlayer);
+
+        // calculate separation distance from spawn position
+        spawnAngle += DEG_TO_BINANG(270);
+
+        spawnPos.x += (Math_SinS(spawnAngle) * 60.0f);
+        spawnPos.z += (Math_CosS(spawnAngle) * 60.0f);
+
+        for (i = 0; i < 4; i++) {
+            effectPos.x = spawnPos.x + ((Math_SinS((Rand_ZeroOne() * 65536.0f)) * (20.0f * sEnemySpawnTable[this->enemySpawnSet].scaleMult)) + Rand_CenteredFloat(10.0f));
+            effectPos.y = player->actor.floorHeight + 10.0f;
+            effectPos.z = spawnPos.z + ((Math_CosS((Rand_ZeroOne() * 65536.0f)) * (20.0f * sEnemySpawnTable[this->enemySpawnSet].scaleMult)) + Rand_CenteredFloat(10.0f));
+
+            func_8002829C(play, &effectPos, &sEffectPosVel, &sEffectPosAccel, &this->castColor, &this->castColor,
+                              1500 * sEnemySpawnTable[this->enemySpawnSet].scaleMult, 20);
+        }
+
+        this->spawnedActor[1] = Actor_Spawn(&play->actorCtx, play, sEnemySpawnTable[this->enemySpawnSet].actor2, spawnPos.x, spawnPos.y, spawnPos.z, 0, yawToPlayer, 0, sEnemySpawnTable[this->enemySpawnSet].params2);
+        this->spawnCount[1] = 1;
+    }
+}
+
+void EnWiz_DecideAction(EnWiz* this, PlayState* play) {
+    if (Rand_ZeroOne() >= 0.3f) {
+        if (EnWiz_SpawnCheck(this, play) && this->type == ENWIZ_TYPE_MASTER) {
+            this->castMagicType = CASTTYPE_ENEMY;
+            EnWiz_SetupCastEnemies(this);
+        } else {
+            if ((Rand_ZeroOne() >= 0.5f && this->type == ENWIZ_TYPE_MASTER) || this->type == ENWIZ_TYPE_ICE) {
+                this->castMagicType = CASTTYPE_ICE;
+                EnWiz_SetupCastAttack(this);
+            } else {
+                this->castMagicType = CASTTYPE_FIRE;
+                EnWiz_SetupCastAttack(this);
+            }
+        }
+    } else {
+        if ((Rand_ZeroOne() >= 0.5f && this->type == ENWIZ_TYPE_MASTER) || this->type == ENWIZ_TYPE_FIRE) {
+            this->castMagicType = CASTTYPE_FIRE;
+            EnWiz_SetupCastAttack(this);
+        } else {
+            this->castMagicType = CASTTYPE_ICE;
+            EnWiz_SetupCastAttack(this);
+        }
+    }
+}
+
+void EnWiz_SpawnSparkles(EnWiz* this, PlayState* play, s16 numSparkles, s32 movementType) {
+    static Vec3f velocities[] = { { 0.0f, 0.1f, 0.0f }, { 0.0f, 0.0f, 0.0f } };
+    static Vec3f accelerations[] = { { 0.0f, 0.01f, 0.0f }, { 0.0f, 0.0f, 0.0f } };
+    Vec3f pos;
+    Vec3f velocity;
+    Vec3f accel;
+    Color_RGBA8 envColor;
+    s32 i;
+    s16 scale;
+    s16 life;
+    f32 angle;
+
+    if (numSparkles < 1) {
+        numSparkles = 1;
+    }
+
+    envColor.r = 255;
+    envColor.g = 255;
+    envColor.b = 255;
+    velocity = velocities[movementType];
+    accel = accelerations[movementType];
+    scale = 3000;
+    life = 16;
+    angle = (Rand_ZeroOne() - 0.5f) * (2.0f * 3.14f);
+
+    for (i = 0; i < numSparkles; i++) {
+        if (movementType == 1) {
+            velocity.y = Rand_ZeroFloat(5.0f) + 5.0f;
+            scale = 4000;
+            pos.x = Math_SinF(angle) * 30.0f + this->actor.world.pos.x;
+            pos.z = Math_CosF(angle) * 30.0f + this->actor.world.pos.z;
+            pos.y = this->actor.world.pos.y;
+        } else {
+            accel.x = Rand_CenteredFloat(1.0f);
+            accel.y = Rand_CenteredFloat(0.5f);
+            accel.z = Rand_CenteredFloat(1.0f);
+            pos = this->staffFlamePos;
+        }
+        EffectSsKiraKira_SpawnDispersed(play, &pos, &velocity, &accel, &this->castColor, &envColor, scale, life);
+    }
+}
+
+/**
+ * Setup & Action Functions
+ */
+
+// Appear
+void EnWiz_SetupAppear(EnWiz* this) {
+    Animation_MorphToLoop(&this->skelAnime, &IdleAnim, -3.0f);
+    Actor_PlaySfx(&this->actor, NA_SE_EN_PO_APPEAR);
+    this->timer = 0;
+    TARGET_ON;
+    this->actionFunc = EnWiz_Appear;
+}
+
+void EnWiz_Appear(EnWiz* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    // Debug_Print(0, "EnWiz_Appear");
+
+    this->timer++;
+
+    this->alpha = CLAMP_MAX((s32)(this->timer * 25.5f), 255);
+
+    if (this->alpha == 255 && this->timer >= 30) {
+        this->timer = Rand_S16Offset(80, 10);
+        EnWiz_DecideAction(this, play);
+    } else {
+        this->actor.world.rot.y -= 2000;
+    }
+}
+
+// Cast magic attacks
+void EnWiz_SetupCastAttack(EnWiz* this) {
+    Animation_MorphToLoop(&this->skelAnime, &WindupAnim, -3.0f);
+    this->timer = Rand_S16Offset(30, 15);
+    this->actionFunc = EnWiz_CastAttack;
+}
+
+void EnWiz_CastAttack(EnWiz* this, PlayState* play) {
+    // Debug_Print(0, "EnWiz_CastAttack");
+
+    EnWiz_SpawnSparkles(this, play, 1, 0);
+
+    Math_ApproachS(&this->actor.world.rot.y, this->actor.yawTowardsPlayer, 6, 0x400);
+
+    Actor_PlaySfx(&this->actor, NA_SE_EN_GANON_CHARGE_MASIC - SFX_FLAG);
+
+    if (this->timer <= 0) {
+        EnWiz_SetupAttack(this);
+    }
+
+    this->timer--;
+}
+
+// Cast enemies
+void EnWiz_SetupCastEnemies(EnWiz* this) {
+    Animation_MorphToLoop(&this->skelAnime, &EnemyAnim, -3.0f);
+    this->timer = Rand_S16Offset(30, 15);
+    this->actionFunc = EnWiz_CastEnemies;
+}
+
+void EnWiz_CastEnemies(EnWiz* this, PlayState* play) {
+    // Debug_Print(0, "EnWiz_CastEnemies");
+
+    EnWiz_SpawnSparkles(this, play, 2, 1);
+
+    Math_ApproachS(&this->actor.world.rot.y, this->actor.yawTowardsPlayer, 6, 0x400);
+
+    Actor_PlaySfx(&this->actor, NA_SE_EN_GANON_CHARGE_MASIC - SFX_FLAG);
+
+    if (this->timer <= 0) {
+        EnWiz_SpawnEnemies(this, play);
+        EnWiz_SetupDisappear(this);
+    }
+
+    this->timer--;
+}
+
+// Attack
+void EnWiz_SetupAttack(EnWiz* this) {
+    Animation_PlayOnce(&this->skelAnime, &AttackAnim);
+    this->timer = 0;
+    this->actionFunc = EnWiz_Attack;
+}
+
+void EnWiz_Attack(EnWiz* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    f32 beamPitch;
+    Vec3f pos = this->actor.world.pos;
+
+    if (this->skelAnime.curFrame == 1) {
+        Actor_PlaySfx(&this->actor, NA_SE_IT_EXPLOSION_FRAME);
+
+        pos.x += Math_SinS(this->actor.world.rot.y) * 40.0f;
+        pos.y += 60.0f;
+        pos.z += Math_CosS(this->actor.world.rot.y) * 40.0f;
+
+        beamPitch = Math_Vec3f_Pitch(&player->actor.world.pos, &this->staffFlamePos);
+
+        Actor_SpawnAsChild(&play->actorCtx, &this->actor, play, ACTOR_EN_WIZ_FIRE, pos.x, pos.y, pos.z,
+                               beamPitch,
+                               this->actor.world.rot.y, 0, this->castMagicType);
+        this->hasActiveProjectile = true;
+    }
+
+    if (SkelAnime_Update(&this->skelAnime)) { // after whole animation has been played
+        EnWiz_SetupDisappear(this);
+    }
+}
+
+// Disappear
+void EnWiz_SetupDisappear(EnWiz* this) {
+    Animation_MorphToLoop(&this->skelAnime, &IdleAnim, -3.0f);
+    Actor_PlaySfx(&this->actor, NA_SE_EN_PO_DISAPPEAR);
+    this->timer = 20;
+    TARGET_OFF;
+    this->actionFunc = EnWiz_Disappear;
+}
+
+void EnWiz_Disappear(EnWiz* this, PlayState* play) {
+
+    // Debug_Print(0, "EnWiz_Disappear");
+
+    this->alpha = CLAMP((s32)(this->timer * 25.5f), 0, 255);
+
+    if (this->alpha == 0) {
+        // EnWiz_GetTeleportPos(this, play);
+        EnWiz_SetupTeleport(this, play);
+    } else {
+        this->actor.world.rot.y += 2000;
+    }
+
+    this->timer--;
+}
+
+// Idle
+void EnWiz_SetupIdle(EnWiz* this) {
+    #ifdef TEST
+    this->alpha = 100;
+    this->timer = 120;
+    this->actionFunc = EnWiz_DoNothing;
+    #else
+    Animation_MorphToLoop(&this->skelAnime, &IdleAnim, -5.0f);
+    this->timer = Rand_S16Offset(40, 15); // this->timer = Rand_S16Offset(30, 10);
+    this->actionFunc = EnWiz_Idle;
+    #endif
+    
+}
+
+void EnWiz_Idle(EnWiz* this, PlayState* play) {
+
+    // Debug_Print(0, "EnWiz_Idle");
+
+    Math_ApproachS(&this->actor.world.rot.y, this->actor.yawTowardsPlayer, 6, 0x400);
+
+    // test
+    if (this->timer <= 0) {
+        if (this->alpha == 0) {
+            EnWiz_SetupAppear(this);
+        } else {
+            EnWiz_SetupDisappear(this);
+        }
+    } else {
+        this->timer--;
+    }
+}
+
+// Damaged
+void EnWiz_SetupDamaged(EnWiz* this) {
+    Animation_MorphToPlayOnce(&this->skelAnime, &DamageAnim, -2.0f);
+    Actor_PlaySfx(&this->actor, NA_SE_EN_AMOS_DAMAGE);
+    this->timer = 20;
+    this->actor.speed = -6.0f;
+    this->actionFunc = EnWiz_Damaged;
+}
+
+void EnWiz_Damaged(EnWiz* this, PlayState* play) {
+    if (this->timer <= 0) {
+        #ifdef TEST
+        Animation_MorphToLoop(&this->skelAnime, &IdleAnim, -3.0f);
+        this->actionFunc = EnWiz_DoNothing;
+        this->timer = 40;
+        #else
+        this->actor.speed = 0.0f;
+        EnWiz_SetupDisappear(this);
+        #endif
+    } else {
+        Math_SmoothStepToF(&this->actor.speed, 0.0f, 1.0f, 0.5f, 0.0f);
+        Actor_MoveXYZ(&this->actor);
+        this->timer--;
+    }
+}
+
+// Frozen
+void EnWiz_SetupFrozen(Actor* thisx) {
+    EnWiz* this = (EnWiz*)thisx;
+
+    Animation_MorphToPlayOnce(&this->skelAnime, &DamageAnim, -2.0f);
+    // this->actor.speed = -6.0f;
+    this->actor.world.rot.y = this->actor.yawTowardsPlayer;
+    if (thisx->colChkInfo.damageEffect == 0xF) {
+        this->spawnIceTimer = 36;
+    }
+    Actor_PlaySfx(&this->actor, NA_SE_EN_GOMA_JR_FREEZE);
+
+    this->collider.base.colType = COLTYPE_HARD;
+    this->collider.base.acFlags |= AC_HARD;
+
+    this->actionFunc = EnWiz_Frozen;
+}
+
+void EnWiz_Frozen(EnWiz* this, PlayState* play) {
+    if (this->actor.colorFilterTimer == 0) {
+        Actor_PlaySfx(&this->actor, NA_SE_PL_ICE_BROKEN);
+        if (this->actor.colChkInfo.health == 0) {
+            EnWiz_SetupDeath(this);
+        } else {
+            #ifdef TEST
+            Animation_MorphToLoop(&this->skelAnime, &IdleAnim, -3.0f);
+            this->actionFunc = EnWiz_DoNothing;
+            this->timer = 40;
+            #else
+            this->collider.base.colType = COLTYPE_HIT0;
+            this->collider.base.acFlags &= ~AC_HARD;
+            EnWiz_SetupDisappear(this);
+            #endif
+        }
+
+    }
+}
+
+// Death
+void EnWiz_SetupDeath(EnWiz* this) {
+    Animation_MorphToPlayOnce(&this->skelAnime, &DamageAnim, -2.0f);
+    Actor_PlaySfx(&this->actor, NA_SE_EN_AMOS_DEAD);
+    this->actor.colorFilterTimer = 0;
+    this->timer = 10;
+    this->actionFunc = EnWiz_Death;
+}
+
+void EnWiz_Death(EnWiz* this, PlayState* play) {
+    Vec3f deadEffectVel = { 0.0f, 0.0f, 0.0f };
+    Vec3f accel = { 0.0f, 0.3f, 0.0f };
+    Vec3f pos;
+
+    // Math_ApproachZeroF(&this->actor.speed, 1.0f, 2.0f);
+
+    Audio_PlaySfxGeneral(NA_SE_EN_GOMA_LAST - SFX_FLAG, &this->actor.projectedPos, 4,
+                                     &gSfxDefaultFreqAndVolScale, &gSfxDefaultFreqAndVolScale, &gSfxDefaultReverb);
+
+    if (this->timer > 5) {
+        pos.x = Rand_CenteredFloat(20.0f) + this->actor.world.pos.x;
+        pos.y = (Rand_CenteredFloat(40.0f) + this->actor.world.pos.y) - 10.0f;
+        pos.z = (Rand_CenteredFloat(20.0f) + this->actor.world.pos.z) + 5.0f;
+        accel = deadEffectVel;
+        accel.y = 0.03f;
+        EffectSsKFire_Spawn(play, &pos, &deadEffectVel, &accel, (s16)Rand_ZeroFloat(15.0f) + 30, 0);
+    } else if (Math_SmoothStepToF(&this->actor.scale.y, 0, 1.0f, 0.00075f, 0.0f) <= 0.001f) {
+        Item_DropCollectibleRandom(play, &this->actor, &this->actor.world.pos, 0xE0);
+        Actor_Kill(&this->actor);
+    }
+
+    this->actor.world.rot.y += 2000;
+
+    this->timer--;
+}
+
+void EnWiz_SetupTeleport(EnWiz* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    this->teleportTimer = Rand_S16Offset(30, 20);
+    this->timer = Rand_S16Offset(50, 20);
+
+    this->actor.world.pos = this->actor.home.pos;
+    this->floatPosY = player->actor.floorHeight + 120.0f;
+    this->actor.world.rot.y = (Rand_ZeroOne() * 65536.0f);
+    this->actor.gravity = 0.0f;
+
+    this->actor.speed = 10.0f;
+
+    this->actionFunc = EnWiz_Teleport;
+}
+
+void EnWiz_Teleport(EnWiz* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    if (this->timer >= 0) {
+        if ((this->actor.speed != 0.0f) && (this->actor.bgCheckFlags & BGCHECKFLAG_WALL)) {
+            this->actor.world.rot.y = this->actor.wallYaw;
+        }
+        if (this->teleportTimer >= 0) {
+            Actor_MoveXYZ(&this->actor);
+        }
+
+        this->timer--;
+        this->teleportTimer--;
+    } else {
+        this->actor.speed = 0.0f;
+        // this->floatPosY = player->actor.floorHeight + 30.0f + Rand_ZeroFloat(180.0f);
+        this->floatPosY = player->actor.floorHeight + 80.0f + Rand_CenteredFloat(60.0f);
+        this->actor.world.rot.y = this->actor.yawTowardsPlayer;
+        EnWiz_SetupAppear(this);
+    }
+}
+
+// testing function
+void EnWiz_DoNothing(EnWiz* this, PlayState* play) {
+    // Debug_Print(0, "EnWiz_DoNothing");
+}
+
+void EnWiz_CheckDamage(Actor* thisx, PlayState* play) {
+    f32 rand01;
+    EnWiz* this = (EnWiz*)thisx;
+
+    if ((this->collider.base.acFlags & AC_HIT)) {
+        this->collider.base.acFlags &= ~AC_HIT;
+
+        // freeze wizzrobe
+        if (thisx->colChkInfo.damageEffect == EN_WIZ_DMGEFF_FREEZE) {
+            if (this->actionFunc != EnWiz_Frozen) {
+                Actor_SetColorFilter(thisx, COLORFILTER_COLORFLAG_BLUE, 120, COLORFILTER_BUFFLAG_OPA, 80);
+                Actor_ApplyDamage(thisx);
+                EnWiz_SetupFrozen(thisx);
+            }
+        // other damage that isn't IMMUNE
+        } else if (thisx->colChkInfo.damageEffect != EN_WIZ_DMGEFF_IMMUNE) {
+            // regular damage
+            if (this->actionFunc != EnWiz_Frozen && ((thisx->colorFilterTimer == 0) || ((thisx->colorFilterParams & 0x4000) == 0))) {
+                Actor_SetColorFilter(thisx, COLORFILTER_COLORFLAG_RED, 255, COLORFILTER_BUFFLAG_OPA, 8);
+                Actor_ApplyDamage(thisx);
+                EnWiz_SetupDamaged(this);
+            }
+            // when health is 0 or instant kill when frozen
+            if (thisx->colChkInfo.health == 0 || (this->actionFunc == EnWiz_Frozen && 
+            (thisx->colChkInfo.damageEffect == EN_WIZ_DMGEFF_FIRE || thisx->colChkInfo.damageEffect == EN_WIZ_DMGEFF_EXTRA))) {
+                if (this->actionFunc == EnWiz_Frozen) {
+                    Actor_PlaySfx(&this->actor, NA_SE_PL_ICE_BROKEN);
+                }
+                EnWiz_SetupDeath(this);
+            }
+        }
+
+    }
+}
+
+void EnWiz_Update(Actor* thisx, PlayState* play) {
+    EnWiz* this = (EnWiz*)thisx;
+    Player* player = GET_PLAYER(play);
+
+    SkelAnime_Update(&this->skelAnime);
+
+    EnWiz_CheckDamage(thisx, play);
+
+    Actor_UpdateBgCheckInfo(play, &this->actor, 10.0f, 25.0f, 0.0f, UPDBGCHECKINFO_FLAG_0 | UPDBGCHECKINFO_FLAG_2);
+    Collider_UpdateCylinder(&this->actor, &this->collider);
+    this->actionFunc(this, play);
+
+    if (this->actionFunc != EnWiz_Frozen) {
+        EnWiz_LevitateSetY(this, play);
+    }
+
+    this->actor.shape.rot.y = this->actor.world.rot.y;
+    this->actor.shape.shadowAlpha = this->alpha;
+
+    #ifdef TEST
+    CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+    // CollisionCheck_SetOC(play, &play->colChkCtx, &this->collider.base);
+    #else
+    if (this->actionFunc == EnWiz_CastAttack || this->actionFunc == EnWiz_CastEnemies || this->actionFunc == EnWiz_Attack || this->actionFunc == EnWiz_Frozen) {
+        CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+    }
+    if (this->actionFunc != EnWiz_Teleport) {
+        CollisionCheck_SetOC(play, &play->colChkCtx, &this->collider.base);
+    }
+    #endif
+
+}
+
+void EnWiz_PostLimbDraw(PlayState* play, s32 limbIndex, Gfx** dList, Vec3s* rot, void* thisx, Gfx** gfx) {
+    EnWiz* this = (EnWiz*)thisx;
+    Vec3f zeroVec = { 0.0f, 0.0f, 0.0f }; // position offset
+    Vec3f staffFlamePos = { 0.0f, 0.0f, 0.0f };
+    Vec3f bodyPartPos;
+    s32 bodyPart = -1;
+
+    if (limbIndex == ARMATURE_STAFF_R_LIMB) {
+        staffFlamePos.x = 0.0f;
+        staffFlamePos.y = 5000.0f;
+        if (this->actionFunc != EnWiz_CastAttack) {
+            staffFlamePos.y = 0.0f;
+            staffFlamePos.x = 5300.0f;
+        }
+
+        Matrix_Translate(0.0f, 0.0f, 0.0f, MTXMODE_APPLY);
+        Matrix_MultVec3f(&staffFlamePos, &this->staffFlamePos);
+    }
+
+    if (limbIndex == ARMATURE_HEAD_LIMB) {
+        // set navi target position to head
+        Matrix_MultVec3f(&zeroVec, &this->actor.focus.pos);
+    }
+
+    if (this->spawnIceTimer != 0) {
+        switch (limbIndex) {
+            case ARMATURE_HEAD_LIMB:
+                bodyPart = 0;
+                break;
+            case ARMATURE_STAFF_R_LIMB:
+                bodyPart = 1;
+                break;
+            case ARMATURE_FOREARM_L_LIMB:
+                bodyPart = 2;
+                break;
+            case ARMATURE_FOREARM_R_LIMB:
+                bodyPart = 3;
+                break;
+            case ARMATURE_UPPERARM_R_LIMB:
+                bodyPart = 4;
+                break;
+            case ARMATURE_UPPERARM_L_LIMB:
+                bodyPart = 5;
+                break;
+            case ARMATURE_UPPERBODY_LIMB:
+                bodyPart = 6;
+                break;
+            case ARMATURE_LOWERBODY_POS_LIMB:
+                bodyPart = 7;
+                break;
+            case ARMATURE_LOWERJAW_LIMB:
+                bodyPart = 8;
+                break;
+        }
+
+        if (bodyPart >= 0) {
+            Matrix_MultVec3f(&zeroVec, &bodyPartPos);
+
+            this->bodyPartsPos[bodyPart].x = bodyPartPos.x;
+            this->bodyPartsPos[bodyPart].y = bodyPartPos.y;
+            this->bodyPartsPos[bodyPart].z = bodyPartPos.z;
+        }
+    }
+}
+
+Gfx* EnWiz_SetEnvColor(GraphicsContext* gfxCtx, u8 r, u8 g, u8 b, u8 a) {
+    Gfx* dList = Graph_Alloc(gfxCtx, sizeof(Gfx) * 2);
+
+    gDPSetEnvColor(dList, r, g, b, a);
+    gSPEndDisplayList(dList + 1);
+    return dList;
+}
+
+void EnWiz_Draw(Actor* thisx, PlayState* play) {
+    EnWiz* this = (EnWiz*)thisx;
+
+    OPEN_DISPS(play->state.gfxCtx, "../z_en_wiz.c", __LINE__);
+
+    if (this->alpha == 255) {
+        gSPSegment(POLY_OPA_DISP++, 0x09,
+                   EnWiz_SetEnvColor(play->state.gfxCtx, this->typeColor.r, this->typeColor.g, this->typeColor.b, 255));
+
+        // pulsating casting effect
+        if (this->actionFunc == EnWiz_CastAttack || this->actionFunc == EnWiz_CastEnemies) {
+            switch (this->castMagicType) {
+                case CASTTYPE_FIRE:
+                    this->castColor.r = 255;
+                    this->castColor.g = 150;
+                    this->castColor.b = 0;
+                    break;
+                case CASTTYPE_ICE:
+                    this->castColor.r = 0;
+                    this->castColor.g = 150;
+                    this->castColor.b = 255;
+                    break;
+                case CASTTYPE_ENEMY:
+                    this->castColor.r = 160;
+                    this->castColor.g = 0;
+                    this->castColor.b = 160;
+                    break;
+            }
+            POLY_OPA_DISP =
+                Gfx_SetFog2(POLY_OPA_DISP, this->castColor.r, this->castColor.g, this->castColor.b, 0, 0, 4000 - (s32)(Math_CosS(play->gameplayFrames * 4000) * 2000.0f));
+        }
+
+        func_80034BA0(play, &this->skelAnime, NULL, EnWiz_PostLimbDraw, &this->actor, this->alpha);
+
+        // pulsating casting effect
+        if (this->actionFunc == EnWiz_CastAttack || this->actionFunc == EnWiz_CastEnemies) {
+            POLY_OPA_DISP = Play_SetFog(play, POLY_OPA_DISP);
+        }
+
+    } else {
+        gSPSegment(POLY_XLU_DISP++, 0x09,
+                   EnWiz_SetEnvColor(play->state.gfxCtx, this->typeColor.r, this->typeColor.g, this->typeColor.b, this->alpha));
+                   
+        func_80034CC4(play, &this->skelAnime, NULL, EnWiz_PostLimbDraw, &this->actor, this->alpha);
+    }
+
+    CLOSE_DISPS(play->state.gfxCtx, "../z_en_wiz.c", __LINE__);
+
+    if (this->spawnIceTimer != 0) {
+        thisx->colorFilterTimer++;
+        this->spawnIceTimer--;
+
+        if ((this->spawnIceTimer % 4) == 0) {
+            s32 iceIndex = this->spawnIceTimer >> 2;
+
+            EffectSsEnIce_SpawnFlyingVec3s(play, thisx, &this->bodyPartsPos[iceIndex], 150, 150, 150, 250, 235, 245,
+                                           255, 1.8f);
+        }
+    }
+}
diff --git a/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.h b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.h
new file mode 100644
index 000000000..ac1d45563
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.h
@@ -0,0 +1,44 @@
+#ifndef Z_EN_WIZ_H
+#define Z_EN_WIZ_H
+
+#include "ultra64.h"
+#include "global.h"
+#include "assets_hm_pack/objects/object_wiz/object_wiz.h"
+
+struct EnWiz;
+
+typedef void (*EnWizActionFunc)(struct EnWiz*, PlayState*);
+
+typedef enum {
+    /* 0 */ ENWIZ_TYPE_MASTER,  // master wizzrobe
+    /* 1 */ ENWIZ_TYPE_FIRE,    // fire wizzrobe
+    /* 2 */ ENWIZ_TYPE_ICE      // ice wizzrobe
+} EnWizType;
+
+typedef struct EnWiz {
+    Actor actor;
+    SkelAnime skelAnime;
+    EnWizActionFunc actionFunc;
+    ColliderCylinder collider;
+    s16 type;
+    s16 alpha;
+    s16 timer;
+    Actor* spawnedActor[2];
+    u8 spawnCount[2];
+    u8 enemySpawnSet;
+    s16 hasActiveProjectile;
+    s8 dropboomerang;
+    Vec3f staffFlamePos;
+    u8 castMagicType;
+    Color_RGBA8 castColor;
+    Color_RGBA8 typeColor;
+    u8 EnemyAnim;
+    u8 spawnIceTimer;
+    s16 teleportTimer;
+    f32 floatPosY;
+    Vec3s bodyPartsPos[10];
+    Vec3s jointTable[12];
+    Vec3s morphTable[12];
+} EnWiz;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.c b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.c
new file mode 100644
index 000000000..a036f8a09
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.c
@@ -0,0 +1,831 @@
+/*
+ * File: z_en_wiz_fire.c
+ * Overlay: ovl_En_Wiz_Fire
+ * Description: Wizrobe Fire/Ice Attack
+ */
+
+#include "z_en_wiz_fire.h"
+#include "overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz.h"
+#include "assets_hm_pack/objects/object_wiz/object_wiz.h"
+
+#define FLAGS (ACTOR_FLAG_4 | ACTOR_FLAG_27)
+
+#define THIS ((EnWizFire*)thisx)
+
+#define BINANG_ADD(a, b) ((s16)(a + b))
+
+void EnWizFire_Init(Actor* thisx, PlayState* play);
+void EnWizFire_Destroy(Actor* thisx, PlayState* play);
+void EnWizFire_Update(Actor* thisx, PlayState* play2);
+void EnWizFire_Draw(Actor* thisx, PlayState* play2);
+
+void EnWiz_SetupMoveMagicProjectile(EnWizFire* this, PlayState* play);
+void EnWiz_MoveMagicProjectile(EnWizFire* this, PlayState* play);
+void EnWiz_SetupSmallFlame(EnWizFire* this, PlayState* play);
+void EnWiz_SmallFlame(EnWizFire* this, PlayState* play);
+void EnWiz_Pool(EnWizFire* this, PlayState* play);
+void EnWiz_KillMagicProjectile(EnWizFire* this, PlayState* play);
+void EnWizFire_DrawSmallFlame(Actor* thisx, PlayState* play);
+void EnWizFire_InitializeEffect(EnWizFire* this, Vec3f* pos, Vec3f* accel);
+void EnWizFire_UpdateEffects(EnWizFire* this, PlayState* play);
+void EnWizFire_DrawEffects(EnWizFire* this, PlayState* play);
+
+typedef enum {
+    /* 0 */ EN_WIZ_FIRE_ACTION_MOVE_MAGIC_PROJECTILE,
+    /* 1 */ EN_WIZ_FIRE_ACTION_SMALL_FLAME,
+    /* 2 */ EN_WIZ_FIRE_ACTION_POOL,
+    /* 3 */ EN_WIZ_FIRE_ACTION_KILL_MAGIC_PROJECTILE
+} EnWizFireAction;
+
+static s32 sPoolHitByIceArrow = false;
+
+ActorInit En_Wiz_Fire_InitVars = {
+    ACTOR_EN_WIZ_FIRE,
+    ACTORCAT_ENEMY,
+    FLAGS,
+    OBJECT_WIZ,
+    sizeof(EnWizFire),
+    (ActorFunc)EnWizFire_Init,
+    (ActorFunc)EnWizFire_Destroy,
+    (ActorFunc)EnWizFire_Update,
+    (ActorFunc)EnWizFire_Draw,
+};
+
+static ColliderCylinderInit sCylinderInit = {
+    {
+        COLTYPE_NONE,
+        AT_ON | AT_TYPE_ENEMY,
+        AC_ON | AC_TYPE_PLAYER,
+        OC1_NONE,
+        OC2_TYPE_1,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+        { 0xF7CFFFFF, 0x09, 0x10 },
+        { 0x01001202, 0x00, 0x00 },
+        TOUCH_ON | TOUCH_SFX_NORMAL,
+        BUMP_ON,
+        OCELEM_NONE,
+    },
+    { 0, 0, 0, { 0, 0, 0 } },
+};
+
+void EnWizFire_Init(Actor* thisx, PlayState* play) {
+    EnWizFire* this = THIS;
+
+    Collider_InitCylinder(play, &this->collider);
+    Collider_SetCylinder(play, &this->collider, &this->actor, &sCylinderInit);
+
+    this->type = EN_WIZ_FIRE_GET_TYPE(&this->actor);
+    this->actor.targetMode = 3;
+    this->wallCheckTimer = 10;
+    this->alpha = 255.0f;
+
+    if (!Player_HasMirrorShieldEquipped(play)) {
+        this->collider.info.toucher.dmgFlags = 0x20000000;
+    }
+
+    switch (this->type) {
+        case EN_WIZ_FIRE_TYPE_ICE_MAGIC_PROJECTILE:
+            this->isIceType = true;
+            this->collider.info.toucher.damage = 8;
+            this->collider.info.toucher.effect = 2;
+            this->collider.info.bumper.dmgFlags = (0x1000000 | 0x800 | 0x200 | 0x2);
+            this->type = EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE;
+            // fallthrough
+        case EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE:
+            if (this->type == EN_WIZ_FIRE_TYPE_ICE_MAGIC_PROJECTILE) {
+                this->type = EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE;
+                this->collider.info.toucher.damage = 8;
+            }
+            // fallthrough
+        case EN_WIZ_FIRE_TYPE_ARCING_MAGIC_PROJECTILE:
+        case EN_WIZ_FIRE_TYPE_REFLECTED_MAGIC_PROJECTILE:
+            this->actionFunc = EnWiz_SetupMoveMagicProjectile;
+            break;
+
+        case EN_WIZ_FIRE_TYPE_SMALL_FLAME:
+            this->actor.draw = EnWizFire_DrawSmallFlame;
+            this->smallFlameScroll = Rand_S16Offset(0, 10000);
+            this->action = EN_WIZ_FIRE_ACTION_SMALL_FLAME;
+            this->collider.info.toucher.damage = 2;
+            this->actionFunc = EnWiz_SetupSmallFlame;
+            break;
+
+        default:
+            break;
+    }
+}
+
+void EnWizFire_Destroy(Actor* thisx, PlayState* play) {
+    EnWizFire* this = THIS;
+
+    Collider_DestroyCylinder(play, &this->collider);
+}
+
+f32 randPlusMinusPoint5Scaled(EnWizFire* this, f32 scale) {
+    return Rand_Centered() * scale;
+}
+
+void EnWiz_SetupMoveMagicProjectile(EnWizFire* this, PlayState* play) {
+    Vec3f velocity = { 0.0f, 0.0f, 0.0f };
+    u8 i;
+
+    Matrix_Push();
+
+    for (i = 0; i < ARRAY_COUNT(this->magicProjectilePos); i++) {
+        this->magicProjectilePos[i] = this->actor.world.pos;
+    }
+    this->lowestUsedIndex = 0;
+
+    Matrix_RotateY(BINANG_TO_RAD(this->actor.world.rot.y), MTXMODE_NEW);
+    Matrix_RotateX(BINANG_TO_RAD(this->actor.world.rot.x), MTXMODE_APPLY);
+
+    if (this->type != EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) {
+        velocity.z = randPlusMinusPoint5Scaled(this, 2.0f) + 8.0f;
+    } else {
+        velocity.z = 12.0f;
+    }
+
+    Matrix_MultVec3f(&velocity, &this->actor.velocity);
+    Matrix_Pop();
+
+    this->timer = 50;
+
+    if (this->type != EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) {
+        this->actor.velocity.y = 10.0f;
+        this->actor.gravity = -1.0f;
+        this->targetScale = 0.01f;
+    } else {
+        this->targetScale = 0.02f;
+        this->timer = 100;
+    }
+
+    this->action = EN_WIZ_FIRE_ACTION_MOVE_MAGIC_PROJECTILE;
+    this->actionFunc = EnWiz_MoveMagicProjectile;
+}
+
+/**
+ * Moves all types of magic projectiles around, including arcing ones created by the
+ * Fire Wizrobe's attack or ones reflected by the Mirror Shield.
+ */
+void EnWiz_MoveMagicProjectile(EnWizFire* this, PlayState* play) {
+    Vec3f velocity = { 0.0f, 0.0f, 0.0f };
+
+    this->actor.world.rot.z += 5000;
+
+    if (this->type != EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) {
+        this->targetScale = 0.01f;
+    } else {
+        this->targetScale = 0.02f;
+    }
+
+    if ((this->timer == 0) && (this->scale < 0.001f)) {
+        Math_Vec3f_Copy(&this->actor.velocity, &this->ZeroVec3f);
+        this->action = EN_WIZ_FIRE_ACTION_KILL_MAGIC_PROJECTILE;
+        this->increaseLowestUsedIndexTimer = 0;
+        this->actionFunc = EnWiz_KillMagicProjectile;
+        return;
+    }
+
+    if (this->timer == 0) {
+        this->targetScale = 0.0f;
+    }
+
+    Math_ApproachF(&this->scale, this->targetScale, 0.2f, 0.01f);
+
+    if (this->wallCheckTimer == 0) {
+        if ((this->actor.bgCheckFlags & BGCHECKFLAG_WALL) && (this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) &&
+            (this->timer != 0) && (this->actor.bgCheckFlags & BGCHECKFLAG_WALL)) {
+            sPoolHitByIceArrow = false;
+            this->timer = 0;
+            this->targetScale = 0.0f;
+        }
+    }
+
+    if ((this->actor.bgCheckFlags & BGCHECKFLAG_GROUND)/*  && (this->poolTimer == 0) */) {
+        s32 i;
+        s16 arcingProjectileRotY;
+        s32 pad;
+
+        // Debug_Print(3, "BGCHECK_GROUND!");
+
+        if (this->type == EN_WIZ_FIRE_TYPE_ARCING_MAGIC_PROJECTILE) {
+            this->increaseLowestUsedIndexTimer = 10;
+
+            Matrix_Push();
+            Matrix_RotateY(BINANG_TO_RAD((s16)randPlusMinusPoint5Scaled(this, 0x100) + this->actor.world.rot.y), MTXMODE_NEW);
+            velocity.z = randPlusMinusPoint5Scaled(this, 2.0f) + 8.0f;
+            Matrix_MultVec3f(&velocity, &this->actor.velocity);
+            Matrix_Pop();
+
+            this->actor.velocity.y = 6.0f;
+            this->actor.gravity = -0.7f;
+
+            if (!this->hasSpawnedSmallFlame) {
+                Actor_Spawn(&play->actorCtx, play, ACTOR_EN_WIZ_FIRE, this->actor.world.pos.x,
+                            this->actor.world.pos.y - 10.0f, this->actor.world.pos.z, 0, 0, 0,
+                            EN_WIZ_FIRE_TYPE_SMALL_FLAME);
+                this->hasSpawnedSmallFlame = true;
+            }
+
+            this->timer = 0;
+            this->scale = 0.0f;
+            Math_Vec3f_Copy(&this->actor.velocity, &this->ZeroVec3f);
+            this->action = EN_WIZ_FIRE_ACTION_KILL_MAGIC_PROJECTILE;
+            this->increaseLowestUsedIndexTimer = 0;
+            this->actionFunc = EnWiz_KillMagicProjectile;
+            return;
+        }
+
+        if ((this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE)/*  && (this->timer != 0) */) {
+            if (this->actor.floorBgId == BGCHECK_SCENE) {
+                // Debug_Print(3, "BGCHECK_SCENE!");
+                this->poolTimer = 100;
+                if (!this->isIceType) {
+                    arcingProjectileRotY = 0;
+
+                    for (i = 0; i < 3; i++) {
+                        Actor_Spawn(&play->actorCtx, play, ACTOR_EN_WIZ_FIRE, this->actor.world.pos.x,
+                                    this->actor.world.pos.y, this->actor.world.pos.z, 0, arcingProjectileRotY, 0,
+                                    EN_WIZ_FIRE_TYPE_ARCING_MAGIC_PROJECTILE);
+                        arcingProjectileRotY += BINANG_ADD((s32)randPlusMinusPoint5Scaled(this, 0x1000), 0x3333);
+                    }
+
+                    Actor_PlaySfx(&this->actor, NA_SE_IT_BOMB_EXPLOSION);
+                    this->poolTimer = Rand_S16Offset(70, 30);
+                } else if (this->poolTimer != 0) {
+                    Actor_PlaySfx(&this->actor, NA_SE_EV_ICE_FREEZE - SFX_FLAG);
+                }
+
+                Math_Vec3f_Copy(&this->actor.velocity, &this->ZeroVec3f);
+                this->timer = 0;
+                this->action = EN_WIZ_FIRE_ACTION_POOL;
+                this->scale = 0.0f;
+                this->actionFunc = EnWiz_Pool;
+            }
+
+            return;
+        }
+    }
+
+    if ((this->type != EN_WIZ_FIRE_TYPE_REFLECTED_MAGIC_PROJECTILE) && (this->timer != 0)) {
+        if (this->collider.base.acFlags & AC_HIT) {
+            this->collider.base.acFlags &= ~AC_HIT;
+            if (this->collider.info.acHitInfo->toucher.dmgFlags == 0x1000) {
+                this->timer = 0;
+                this->hitByIceArrow = true;
+                SfxSource_PlaySfxAtFixedWorldPos(play, &this->actor.world.pos, 50, NA_SE_EV_ICE_MELT);
+            }
+        }
+
+        if (Player_HasMirrorShieldEquipped(play) && (this->collider.base.atFlags & AT_BOUNCED)) {
+            Actor_PlaySfx(&this->actor, NA_SE_IT_SHIELD_REFLECT_MG);
+            this->collider.base.atFlags &= ~(AT_TYPE_ENEMY | AT_BOUNCED | AT_HIT);
+            this->collider.base.atFlags |= AT_TYPE_PLAYER;
+            this->collider.info.toucher.dmgFlags = 0x20;
+            this->collider.info.toucher.damage = 2;
+            this->timer = 100;
+            this->type = EN_WIZ_FIRE_TYPE_REFLECTED_MAGIC_PROJECTILE;
+            this->actor.velocity.x *= -1.0f;
+            this->actor.velocity.y *= -0.5f;
+            this->actor.velocity.z *= -1.0f;
+
+            if ((this->actor.parent != NULL) && (this->actor.parent->id == ACTOR_EN_WIZ) &&
+                (this->actor.parent->update != NULL)) {
+                ((EnWiz*)this->actor.parent)->hasActiveProjectile = false;
+            }
+        }
+    }
+}
+
+void EnWiz_SetupSmallFlame(EnWizFire* this, PlayState* play) {
+    this->targetScale = 0.02f;
+    this->timer = Rand_S16Offset(50, 50);
+    this->scaleMod.x = randPlusMinusPoint5Scaled(this, 1.0f) * 0.007f;
+    this->scaleMod.y = randPlusMinusPoint5Scaled(this, 1.0f) * 0.005f;
+    this->scaleMod.z = randPlusMinusPoint5Scaled(this, 1.0f) * 0.007f;
+    this->actionFunc = EnWiz_SmallFlame;
+}
+
+/**
+ * Manages the small flame that is created when the arcing projectiles from the Fire Wizrobe's
+ * attack hit the floor.
+ */
+void EnWiz_SmallFlame(EnWizFire* this, PlayState* play) {
+    if (this->timer > 10) {
+        Math_ApproachF(&this->scale, this->targetScale, 0.3f, 0.01f);
+    } else {
+        Math_ApproachF(&this->scale, 2.0f * this->targetScale, 0.2f, 0.002f);
+        Math_ApproachZeroF(&this->alpha, 1.0f, 35.0f);
+        if ((this->timer == 0) && (this->alpha < 2.0f)) {
+            Actor_Kill(&this->actor);
+        }
+        return;
+    }
+
+    if (this->collider.base.acFlags & AC_HIT) {
+        if (this->timer != 0) {
+            this->collider.base.acFlags &= ~AC_HIT;
+            if (this->timer > 10) {
+                this->timer -= 10;
+            }
+
+            if (this->collider.info.acHitInfo->toucher.dmgFlags == 0x1000) {
+                this->timer = 0;
+                this->hitByIceArrow = true;
+                SfxSource_PlaySfxAtFixedWorldPos(play, &this->actor.world.pos, 50, NA_SE_EV_ICE_MELT);
+            }
+        }
+    }
+
+    if (this->timer != 0) {
+        Actor_PlaySfx(&this->actor, NA_SE_EV_BURN_OUT - SFX_FLAG);
+    }
+}
+
+/**
+ * Manages the pool of fire or ice that is created when a magic projectile hits the floor.
+ */
+void EnWiz_Pool(EnWizFire* this, PlayState* play) {
+    s32 pad;
+
+    if ((this->actor.parent != NULL) && (this->actor.parent->id == ACTOR_EN_WIZ) &&
+        (this->actor.parent->update != NULL) && (this->actor.parent->colChkInfo.health == 0)) {
+        this->poolTimer = 0;
+        this->playerHitByIceProjectile = true;
+    }
+
+    this->lowestUsedIndex++;
+
+    if (this->lowestUsedIndex > 10) {
+        this->lowestUsedIndex = 10;
+    }
+
+    if (this->poolTimer != 0) {
+        Math_ApproachF(&this->blendScale, 60.0f, 0.5f, 10.0f);
+        if (this->isIceType == true) {
+            Vec3f accel = { 0.0f, 0.0f, 0.0f };
+            Vec3f pos;
+
+            accel.x = randPlusMinusPoint5Scaled(this, 3.0f) / 10.0f;
+            accel.y = 0.23f;
+            accel.z = randPlusMinusPoint5Scaled(this, 3.0f) / 10.0f;
+
+            Math_Vec3f_Copy(&pos, &this->actor.world.pos);
+            pos.x += randPlusMinusPoint5Scaled(this, 150.0f);
+            pos.z += randPlusMinusPoint5Scaled(this, 150.0f);
+
+            Math_ApproachF(&this->poolScale, 0.022f, 0.3f, 0.01f);
+            this->collider.dim.radius = this->poolScale * 4300.0f;
+            this->collider.dim.height = 30;
+            this->collider.dim.yShift = 15;
+            EnWizFire_InitializeEffect(this, &pos, &accel);
+            Actor_PlaySfx(&this->actor, NA_SE_EV_ICE_FREEZE - SFX_FLAG);
+            return;
+        }
+
+        Math_ApproachF(&this->poolScale, 0.02f, 0.3f, 0.002f);
+        Math_ApproachF(&this->fireSmokeScale, 0.02f, 0.3f, 0.002f);
+        Math_ApproachF(&this->bigFlameScale, 0.02f, 0.3f, 0.2f);
+        this->collider.dim.radius = this->poolScale * 4000.0f;
+        this->collider.dim.height = this->bigFlameScale * 1850.0f;
+        this->collider.dim.yShift = -15;
+
+        if (this->collider.dim.height < 2) {
+            this->collider.dim.height = 2;
+        }
+
+        if (this->collider.base.acFlags & AC_HIT) {
+            this->collider.base.acFlags &= ~AC_HIT;
+            if (!sPoolHitByIceArrow && (this->collider.info.acHitInfo->toucher.dmgFlags == 0x1000)) {
+                sPoolHitByIceArrow = true;
+                this->hitByIceArrow = true;
+                this->poolTimer = 0;
+                SfxSource_PlaySfxAtFixedWorldPos(play, &this->actor.world.pos, 50, NA_SE_EV_ICE_MELT);
+            }
+        }
+
+        this->actor.world.pos.y = this->actor.floorHeight + 10.0f;
+        Actor_SetFocus(&this->actor, 0.0f);
+        return;
+    }
+
+    Math_ApproachZeroF(&this->blendScale, 0.2f, 3.0f);
+
+    if (this->isIceType == true) {
+        Math_ApproachZeroF(&this->poolScale, 0.046f, 0.001f);
+        Actor_PlaySfx(&this->actor, NA_SE_EV_ICE_FREEZE - SFX_FLAG);
+
+        if (!this->shouldPoolFadeOut) {
+            if ((this->actor.parent != NULL) && (this->actor.parent->id == ACTOR_EN_WIZ) && (this->poolScale < 0.05f)) {
+                EnWiz* wiz = (EnWiz*)this->actor.parent;
+
+                this->collider.dim.yShift = -15;
+                this->shouldPoolFadeOut = true;
+                wiz->hasActiveProjectile = false;
+            }
+        }
+
+        if (this->shouldPoolFadeOut && (this->poolScale < 0.05f)) {
+            Math_ApproachZeroF(&this->alpha, 1.0f, 5.0f);
+        }
+
+        if ((this->poolScale < 0.001f) && (this->blendScaleFrac < 0.001f)) {
+            sPoolHitByIceArrow = false;
+            Actor_Kill(&this->actor);
+        }
+
+        return;
+    }
+
+    Math_ApproachZeroF(&this->bigFlameScale, 0.1f, 0.01f);
+
+    if (this->bigFlameScale < 0.01f) {
+        Math_ApproachZeroF(&this->alpha, 1.0f, 10.0f);
+        if ((this->alpha < 10.0f) && (this->blendScaleFrac < 0.001f)) {
+            sPoolHitByIceArrow = false;
+            if ((this->actor.parent != NULL) && (this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) &&
+                (this->actor.parent->id == ACTOR_EN_WIZ) && (this->actor.parent->update != NULL)) {
+                EnWiz* wiz = (EnWiz*)this->actor.parent;
+
+                wiz->hasActiveProjectile = false;
+            }
+
+            Actor_Kill(&this->actor);
+        }
+    }
+}
+
+void EnWiz_KillMagicProjectile(EnWizFire* this, PlayState* play) {
+    if (this->increaseLowestUsedIndexTimer == 0) {
+        this->increaseLowestUsedIndexTimer = 2;
+        this->lowestUsedIndex++;
+        if (this->lowestUsedIndex >= 6) {
+            if ((this->actor.parent != NULL) && (this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) &&
+                (this->actor.parent->id == ACTOR_EN_WIZ)) {
+                EnWiz* wiz = (EnWiz*)this->actor.parent;
+
+                sPoolHitByIceArrow = false;
+                if (wiz->actor.update != NULL) {
+                    wiz->hasActiveProjectile = false;
+                }
+            }
+
+            Actor_Kill(&this->actor);
+        }
+    }
+}
+
+void EnWizFire_Update(Actor* thisx, PlayState* play2) {
+    PlayState* play = play2;
+    EnWizFire* this = THIS;
+    Player* player = GET_PLAYER(play);
+    s32 j;
+    s16 randomScale;
+    s16 index;
+
+    Actor_SetScale(&this->actor, this->scale);
+    EnWizFire_UpdateEffects(this, play);
+    this->blendScaleFrac = this->blendScale / 60.0f;
+
+    this->smallFlameScroll++;
+
+    this->actionFunc(this, play);
+
+    this->actor.shape.yOffset = 10.0f;
+
+    if (this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE && this->action != EN_WIZ_FIRE_ACTION_POOL) {
+        this->actor.speed = 20.0f;
+        Actor_UpdateVelocityXYZ(&this->actor);
+    }
+
+    Actor_UpdatePos(&this->actor);
+
+    this->magicProjectilePos[0] = this->actor.world.pos;
+
+    for (j = ARRAY_COUNT(this->magicProjectilePos) - 2; j >= 0; j--) {
+        this->magicProjectilePos[j + 1] = this->magicProjectilePos[j];
+    }
+
+    this->actor.velocity.y += this->actor.gravity;
+
+    DECR(this->wallCheckTimer);
+    DECR(this->timer);
+    DECR(this->steamSpawnTimer);
+    DECR(this->poolTimer);
+
+    Actor_UpdateBgCheckInfo(play, &this->actor, 20.0f, 5.0f, 10, 0x1D);
+
+    /* if ((this->hitByIceArrow || sPoolHitByIceArrow) && (this->steamSpawnTimer == 0)) {
+        Vec3f accel;
+        Vec3f velocity;
+        Vec3f pos;
+        f32 scaleStep;
+        s32 i;
+
+        accel.x = 0.0f;
+        accel.y = 1.0f;
+        accel.z = 0.0f;
+        velocity.x = 0.0f;
+        velocity.y = 1.0f;
+        velocity.z = 0.0f;
+
+        scaleStep = Rand_S16Offset(20, 10);
+        if (this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) {
+            scaleStep = Rand_S16Offset(40, 20);
+        }
+
+        this->steamSpawnTimer = Rand_S16Offset(2, 2);
+
+    } */
+
+    if (this->action < EN_WIZ_FIRE_ACTION_POOL) {
+        this->collider.dim.radius = (this->scale * 15.0f) + 25.0f;
+        this->collider.dim.height = (this->scale * 15.0f) + 25.0f;
+        this->collider.dim.yShift = (this->scale * -0.75f) - 5.0f;
+    }
+
+    if (this->type == EN_WIZ_FIRE_TYPE_SMALL_FLAME) {
+        this->collider.dim.radius = 10;
+        this->collider.dim.height = this->scale * 5000.0f;
+        this->collider.dim.yShift = 0;
+    }
+
+    if (this->collider.base.atFlags & AT_HIT) {
+        this->collider.base.atFlags &= ~AT_HIT;
+        if (this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) {
+            if (player->invincibilityTimer > 0) {
+                player->invincibilityTimer += 40;
+                if (this->isIceType) {
+                    player->invincibilityTimer += 50;
+                    this->playerHitByIceProjectile = true;
+                }
+            }
+        }
+    }
+
+    if (!this->hitByIceArrow && !sPoolHitByIceArrow &&
+        ((this->type != EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) || (this->alpha > 200.0f))) {
+        Collider_UpdateCylinder(&this->actor, &this->collider);
+        CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+        if (player->invincibilityTimer == 0) {
+            CollisionCheck_SetAT(play, &play->colChkCtx, &this->collider.base);
+        }
+    }
+}
+
+void EnWizFire_DrawIcePool(EnWizFire* this, PlayState* play) {
+    s32 pad;
+
+    OPEN_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+
+    if ((this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) && (this->action == EN_WIZ_FIRE_ACTION_POOL)) {
+        Gfx_SetupDL_25Opa(play->state.gfxCtx);
+        Gfx_SetupDL_25Xlu(play->state.gfxCtx);
+        Matrix_Translate(this->actor.world.pos.x, this->actor.floorHeight, this->actor.world.pos.z, MTXMODE_NEW);
+        Matrix_Scale(this->poolScale, this->poolScale, this->poolScale, MTXMODE_APPLY);
+
+        gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+        gDPPipeSync(POLY_XLU_DISP++);
+        gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255, 255, 255, (s8)this->alpha);
+        gDPSetEnvColor(POLY_XLU_DISP++, 0, 40, 30, 80);
+        gSPDisplayList(POLY_XLU_DISP++, gWizrobeIcePoolDL);
+        gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 215, 215, 215, (s8)this->alpha);
+        gDPSetEnvColor(POLY_XLU_DISP++, 255, 255, 255, 128);
+        gSPSegment(POLY_XLU_DISP++, 0x08,
+                   Gfx_TwoTexScroll(play->state.gfxCtx, 0, -play->state.frames & 0x7F, -play->state.frames & 0x7F, 32,
+                                    64, 1, play->state.frames & 0xFF, play->state.frames & 0xFF, 16, 16));
+
+        Matrix_RotateY(BINANG_TO_RAD(0), MTXMODE_APPLY);
+
+        gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+        gSPDisplayList(POLY_XLU_DISP++, gWizrobeIcePoolShineDL);
+    }
+
+    EnWizFire_DrawEffects(this, play);
+
+    CLOSE_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+}
+
+void EnWizFire_DrawFirePoolAndFlame(EnWizFire* this, PlayState* play2) {
+    PlayState* play = play2;
+
+    OPEN_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+
+    if ((this->type == EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE) && (this->action == EN_WIZ_FIRE_ACTION_POOL)) {
+        Gfx_SetupDL_25Opa(play->state.gfxCtx);
+        Gfx_SetupDL_25Xlu(play->state.gfxCtx);
+
+        Matrix_Push();
+        Matrix_Translate(this->actor.world.pos.x, this->actor.floorHeight, this->actor.world.pos.z, MTXMODE_NEW);
+        Matrix_Scale(this->poolScale, this->poolScale, this->poolScale, MTXMODE_APPLY);
+
+        gSPSegment(POLY_XLU_DISP++, 0x08,
+                   Gfx_TwoTexScroll(play->state.gfxCtx, 0, -play->state.frames % 128, 0, 0x20, 0x20, 1,
+                                    (play->state.frames * 2) % 128, 0, 0x20, 0x20));
+        gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+        gDPPipeSync(POLY_XLU_DISP++);
+        gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 100, 40, 0, (s8)this->alpha);
+        gDPSetEnvColor(POLY_XLU_DISP++, 255, 245, 255, 128);
+        gSPDisplayList(POLY_XLU_DISP++, gWizrobeFirePoolDL);
+
+        Matrix_Pop();
+
+        Matrix_Push();
+        Matrix_Translate(this->actor.world.pos.x, this->actor.floorHeight, this->actor.world.pos.z, MTXMODE_NEW);
+        Matrix_ReplaceRotation(&play->billboardMtxF);
+
+        gSPSegment(POLY_XLU_DISP++, 0x08,
+                   Gfx_TwoTexScroll(play->state.gfxCtx, 0, play->state.frames % 128, (-play->state.frames * 6) % 256,
+                                    0x20, 0x40, 1, (play->state.frames * 2) % 128, (-play->state.frames * 6) % 256,
+                                    0x20, 0x40));
+        gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 80, 0, 0, (s8)this->alpha);
+        gDPPipeSync(POLY_XLU_DISP++);
+        gDPSetEnvColor(POLY_XLU_DISP++, 0, 0, 0, 100);
+
+        Matrix_Scale(this->fireSmokeScale, this->fireSmokeScale, this->fireSmokeScale, MTXMODE_APPLY);
+
+        gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+        gSPDisplayList(POLY_XLU_DISP++, gWizrobeFireSmokeDL);
+
+        Matrix_Pop();
+
+        Matrix_Translate(this->actor.world.pos.x, this->actor.floorHeight, this->actor.world.pos.z, MTXMODE_NEW);
+        Matrix_ReplaceRotation(&play->billboardMtxF);
+
+        gSPSegment(POLY_XLU_DISP++, 0x08,
+                   Gfx_TwoTexScroll(play->state.gfxCtx, 0, (-play->state.frames * 3) % 128, 0, 0x20, 0x20, 1, 0,
+                                    (-play->state.frames * 10) % 256, 0x20, 0x40));
+        gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 100, 50, 0, 255);
+        gDPPipeSync(POLY_XLU_DISP++);
+        gDPSetEnvColor(POLY_XLU_DISP++, 200, 235, 240, 128);
+
+        Matrix_Scale(this->bigFlameScale, this->bigFlameScale, this->bigFlameScale, MTXMODE_APPLY);
+
+        gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+        gSPDisplayList(POLY_XLU_DISP++, gWizrobeBigFlameDL);
+    }
+
+    CLOSE_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+}
+
+void EnWizFire_Draw(Actor* thisx, PlayState* play) {
+    EnWizFire* this = THIS;
+    s32 i;
+
+    if (this->actionFunc == EnWiz_MoveMagicProjectile || this->actionFunc == EnWiz_KillMagicProjectile) {
+        OPEN_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+
+        Gfx_SetupDL_25Opa(play->state.gfxCtx);
+        Gfx_SetupDL_25Xlu(play->state.gfxCtx);
+        Matrix_Push();
+
+        for (i = ARRAY_COUNT(this->magicProjectilePos) - 1; i >= this->lowestUsedIndex; i--) {
+            f32 scale = this->actor.scale.x - (i * -0.0019f);
+
+            if (scale > 0.0f) {
+                if (!this->isIceType) {
+                    gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255, 255 - (i * 25), 0, 255 - (i * 25));
+                    gDPSetEnvColor(POLY_XLU_DISP++, 255 - (i * 25), 0, 0, 0);
+                } else {
+                    gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255 - (i * 7), 255 - (i * 3), 255 - (i * 3), 255 - (i * 25));
+                    gDPSetEnvColor(POLY_XLU_DISP++, 220, 255, 235, 0);
+                }
+
+                Matrix_Translate(this->magicProjectilePos[i].x, this->magicProjectilePos[i].y + this->actor.shape.yOffset,
+                                 this->magicProjectilePos[i].z, MTXMODE_NEW);
+                Matrix_Scale(scale, scale, scale, MTXMODE_APPLY);
+                Matrix_ReplaceRotation(&play->billboardMtxF);
+                Matrix_RotateZ(BINANG_TO_RAD(this->actor.world.rot.z), MTXMODE_APPLY);
+
+                gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+                gSPDisplayList(POLY_XLU_DISP++, gWizrobeMagicProjectileDL);
+            }
+        }
+
+        Matrix_Pop();
+
+        CLOSE_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+    }
+
+    if (!this->isIceType) {
+        EnWizFire_DrawFirePoolAndFlame(this, play);
+    } else {
+        EnWizFire_DrawIcePool(this, play);
+    }
+}
+
+void EnWizFire_DrawSmallFlame(Actor* thisx, PlayState* play) {
+    s32 pad;
+    EnWizFire* this = THIS;
+
+    OPEN_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+
+    Matrix_Translate(this->actor.world.pos.x, this->actor.floorHeight + 20.0f, this->actor.world.pos.z, MTXMODE_NEW);
+    Matrix_Scale(this->scale + this->scaleMod.x, this->scale + this->scaleMod.y, this->scale + this->scaleMod.z,
+                 MTXMODE_APPLY);
+
+    gSPSegment(POLY_XLU_DISP++, 0x08,
+               Gfx_TwoTexScroll(play->state.gfxCtx, 0, 0, 0, 32, 32, 1, this->smallFlameScroll & 0x7F,
+                                (-this->smallFlameScroll * 10) & 0x7F, 32, 32));
+    gDPSetPrimColor(POLY_XLU_DISP++, 0, 0x80, 100, 50, 0, (s8)this->alpha);
+    gDPSetEnvColor(POLY_XLU_DISP++, 200, 235, 245, 255);
+
+    Matrix_Mult(&play->billboardMtxF, MTXMODE_APPLY);
+
+    gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+    gSPDisplayList(POLY_XLU_DISP++, gWizrobeSmallFlameDL);
+
+    CLOSE_DISPS(play->state.gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+}
+
+void EnWizFire_InitializeEffect(EnWizFire* this, Vec3f* pos, Vec3f* accel) {
+    s16 i;
+    EnWizFireEffect* effect = &this->effects[0];
+
+    for (i = 0; i < ARRAY_COUNT(this->effects); i++, effect++) {
+        if (!effect->isEnabled) {
+            effect->isEnabled = true;
+            Math_Vec3f_Copy(&effect->velocity, &this->ZeroVec3f);
+            effect->smokeScroll = Rand_ZeroFloat(100.0f);
+            effect->pos = *pos;
+            effect->accel = *accel;
+            effect->scale = (Rand_ZeroFloat(5.0f) + 20.0f) * 0.001f;
+            effect->shouldDecreaseAlpha = 0;
+            effect->alpha = 0;
+            break;
+        }
+    }
+}
+
+void EnWizFire_UpdateEffects(EnWizFire* this, PlayState* play) {
+    s32 i;
+    EnWizFireEffect* effect = &this->effects[0];
+
+    for (i = 0; i < ARRAY_COUNT(this->effects); i++, effect++) {
+        if (effect->isEnabled) {
+            effect->smokeScroll++;
+
+            effect->pos.x += effect->velocity.x;
+            effect->pos.y += effect->velocity.y;
+            effect->pos.z += effect->velocity.z;
+
+            effect->velocity.x += effect->accel.x;
+            effect->velocity.y += effect->accel.y;
+            effect->velocity.z += effect->accel.z;
+
+            if (!effect->shouldDecreaseAlpha) {
+                effect->alpha += 10;
+                if (effect->alpha >= 100) {
+                    effect->shouldDecreaseAlpha = true;
+                }
+            } else {
+                effect->alpha -= 8;
+                if (effect->alpha <= 0) {
+                    effect->alpha = 0;
+                    effect->isEnabled = false;
+                }
+            }
+        }
+    }
+}
+
+void EnWizFire_DrawEffects(EnWizFire* this, PlayState* play) {
+    s16 i;
+    u8 materialFlag;
+    EnWizFireEffect* effect = &this->effects[0];
+    GraphicsContext* gfxCtx = play->state.gfxCtx;
+
+    OPEN_DISPS(gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+
+    Gfx_SetupDL_25Opa(play->state.gfxCtx);
+    Gfx_SetupDL_25Xlu(play->state.gfxCtx);
+
+    materialFlag = false;
+    for (i = 0; i < ARRAY_COUNT(this->effects); i++, effect++) {
+        if (effect->isEnabled) {
+            if (!materialFlag) {
+                gSPDisplayList(POLY_XLU_DISP++, gWizrobeIceSmokeMaterialDL);
+                materialFlag++;
+            }
+
+            gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 195, 225, 235, effect->alpha);
+            gSPSegment(POLY_XLU_DISP++, 0x08,
+                       Gfx_TwoTexScroll(play->state.gfxCtx, 0, (effect->smokeScroll * 3) & 0x7F,
+                                        (effect->smokeScroll * 0xF) & 0xFF, 32, 64, 1, 0, 0, 32, 32));
+
+            Matrix_Translate(effect->pos.x, effect->pos.y, effect->pos.z, MTXMODE_NEW);
+            Matrix_ReplaceRotation(&play->billboardMtxF);
+            Matrix_Scale(effect->scale, effect->scale, 1.0f, MTXMODE_APPLY);
+
+            gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(gfxCtx, "../z_en_wiz_fire.c", __LINE__), G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+            gDPSetRenderMode(POLY_XLU_DISP++, G_RM_PASS, G_RM_AA_ZB_XLU_SURF2);
+            gSPClearGeometryMode(POLY_XLU_DISP++, G_CULL_BACK | G_FOG);
+            gSPDisplayList(POLY_XLU_DISP++, gWizrobeIceSmokeModelDL);
+        }
+    }
+
+    CLOSE_DISPS(gfxCtx, "../z_en_wiz_fire.c", __LINE__);
+}
diff --git a/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.h b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.h
new file mode 100644
index 000000000..ba96013f7
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_En_Wiz/z_en_wiz_fire.h
@@ -0,0 +1,68 @@
+#ifndef Z_EN_WIZ_FIRE_H
+#define Z_EN_WIZ_FIRE_H
+
+#include "ultra64.h"
+#include "global.h"
+
+typedef enum {
+    /* 0 */ EN_WIZ_FIRE_TYPE_MAGIC_PROJECTILE,
+    /* 1 */ EN_WIZ_FIRE_TYPE_ARCING_MAGIC_PROJECTILE,
+    /* 2 */ EN_WIZ_FIRE_TYPE_SMALL_FLAME,
+    /* 3 */ EN_WIZ_FIRE_TYPE_REFLECTED_MAGIC_PROJECTILE,
+    /* 4 */ EN_WIZ_FIRE_TYPE_ICE_MAGIC_PROJECTILE
+} EnWizFireType;
+
+#define EN_WIZ_FIRE_GET_TYPE(thisx) ((thisx)->params)
+
+struct EnWizFire;
+
+typedef void (*EnWizFireActionFunc)(struct EnWizFire*, PlayState*);
+
+typedef struct {
+    /* 0x00 */ u8 isEnabled;
+    /* 0x01 */ u8 smokeScroll;
+    /* 0x06 */ s16 alpha;
+    /* 0x08 */ s16 shouldDecreaseAlpha;
+    /* 0x0C */ f32 scale;
+    /* 0x10 */ Vec3f pos;
+    /* 0x1C */ Vec3f velocity;
+    /* 0x28 */ Vec3f accel;
+} EnWizFireEffect; // size = 0x34
+
+typedef struct EnWizFire {
+    /* 0x0000 */ Actor actor;
+    /* 0x0144 */ EnWizFireActionFunc actionFunc;
+    /* 0x0148 */ u8 hitByIceArrow;
+    /* 0x014C */ f32 scale;
+    /* 0x0150 */ f32 targetScale;
+    /* 0x0154 */ Vec3f scaleMod;
+    /* 0x0160 */ s16 action;
+    /* 0x0162 */ s16 type;
+    /* 0x0164 */ union {
+                    u8 shouldPoolFadeOut;
+                    u8 hasSpawnedSmallFlame;
+                };
+    /* 0x0166 */ s16 isIceType;
+    /* 0x0168 */ s16 timer;
+    /* 0x016A */ union {
+                    s16 poolTimer;
+                    s16 increaseLowestUsedIndexTimer;
+                };
+    /* 0x016C */ s16 steamSpawnTimer;
+    /* 0x016E */ s16 lowestUsedIndex;
+    /* 0x0170 */ s16 smallFlameScroll;
+    /* 0x0172 */ s16 wallCheckTimer; // The projectile won't check for impacts with walls until this is zero
+    /* 0x0174 */ s8 playerHitByIceProjectile; // Set, but never used
+    /* 0x0178 */ Vec3f magicProjectilePos[10];
+    /* 0x01F0 */ f32 poolScale;
+    /* 0x01F4 */ f32 bigFlameScale;
+    /* 0x01F8 */ f32 fireSmokeScale;
+    /* 0x01FC */ f32 alpha;
+    /* 0x0200 */ f32 blendScale;
+    /* 0x0204 */ f32 blendScaleFrac;
+    /* 0x0208 */ ColliderCylinder collider;
+    /* 0x0254 */ EnWizFireEffect effects[50];
+                 Vec3f ZeroVec3f;
+} EnWizFire; // size = 0x2AF4
+
+#endif // Z_EN_WIZ_FIRE_H
diff --git a/src/overlays/actors/hm_pack/ovl_En_Zol/z_en_zol.c b/src/overlays/actors/hm_pack/ovl_En_Zol/z_en_zol.c
new file mode 100644
index 000000000..a4c194caa
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_En_Zol/z_en_zol.c
@@ -0,0 +1,664 @@
+/*
+ * File: z_en_zol.c
+ * Overlay: ovl_En_Zol
+ * Description: Zol enemy from the Hylian Modding actor pack.
+ *  * Params: XXYY
+ *      -- XX: Spawn appearance - 0x00 None, 0x01 Floor, 0x02 Ceiling
+ *      -- YY: Type - 0x00 Green, 0x01 Red
+ */
+
+#define ENZOL_SPAWN ((this->actor.params & 0xFF00) >> 8)
+#define ENZOL_TYPE (this->actor.params & 0xFF)
+
+#include "z_en_zol.h"
+#include "assets_hm_pack/objects/object_zol/object_zol.h"
+#include "overlays/effects/ovl_Effect_Ss_Dead_Sound/z_eff_ss_dead_sound.h"
+
+#define FLAGS (ACTOR_FLAG_0 | ACTOR_FLAG_2 | ACTOR_FLAG_4)
+
+void EnZol_Init(Actor* thisx, PlayState* play);
+void EnZol_Destroy(Actor* thisx, PlayState* play);
+void EnZol_Update(Actor* thisx, PlayState* play);
+void EnZol_Draw(Actor* thisx, PlayState* play);
+
+void EnZol_SetupWaitForPlayer(EnZol* this);
+void EnZol_SetupWaitForPlayerCeiling(EnZol* this);
+void EnZol_SetupGrow(EnZol* this);
+void EnZol_SetupEmerge(EnZol* this);
+void EnZol_SetupIdle(EnZol* this);
+void EnZol_SetupTurnTowardPlayer(EnZol* this);
+void EnZol_SetupJumpTowardPlayer(EnZol* this);
+void EnZol_SetupRecoil(EnZol* this);
+void EnZol_SetupFrozen(EnZol* this);
+void EnZol_SetupDeathCry(EnZol* this);
+
+void EnZol_WaitForPlayer(EnZol* this, PlayState* play);
+void EnZol_WaitForPlayerCeiling(EnZol* this, PlayState* play);
+void EnZol_Grow(EnZol* this, PlayState* play);
+void EnZol_Idle(EnZol* this, PlayState* play);
+void EnZol_TurnTowardPlayer(EnZol* this, PlayState* play);
+void EnZol_JumpTowardPlayer(EnZol* this, PlayState* play);
+void EnZol_Recoil(EnZol* this, PlayState* play);
+void EnZol_Frozen(EnZol* this, PlayState* play);
+void EnZol_DeathCry(EnZol* this, PlayState* play);
+
+typedef enum {
+    ZOL_IDLE,
+    ZOL_AIR,
+    ZOL_LANDED,
+    ZOL_EMERGE,
+    ZOL_WAIT,
+    ZOL_FROZEN,
+    ZOL_DEATH
+} EnZolState;
+
+const ActorInit En_Zol_InitVars = {
+    ACTOR_EN_ZOL,
+    ACTORCAT_ENEMY,
+    FLAGS,
+    OBJECT_ZOL,
+    sizeof(EnZol),
+    (ActorFunc)EnZol_Init,
+    (ActorFunc)EnZol_Destroy,
+    (ActorFunc)EnZol_Update,
+    (ActorFunc)EnZol_Draw,
+};
+
+static ColliderCylinderInit sCylinderInit = {
+    {
+        COLTYPE_HIT6,
+        AT_ON | AT_TYPE_ENEMY,
+        AC_ON | AC_TYPE_PLAYER,
+        OC1_ON | OC1_TYPE_ALL,
+        OC2_TYPE_1,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+            { 0xFFCFFFFE, 0x00, 0x08 },
+            { 0xFFCFFFFE, 0x00, 0x00 },
+        TOUCH_ON | TOUCH_SFX_NORMAL,
+        BUMP_ON | BUMP_HOOKABLE,
+        OCELEM_ON,
+    },
+    { 54, 60, 0, { 0, 0, 0 } },
+};
+
+typedef enum {
+    /* 0x0 */ ZOL_DMGEFF_DEFAULT,
+    /* 0xF */ ZOL_DMGEFF_ICE = 0xF
+} ZolDamageEffect;
+
+static DamageTable sDamageTable[] = {
+    /* Deku nut      */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Deku stick    */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Slingshot     */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Explosive     */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Boomerang     */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Normal arrow  */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Hammer swing  */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Hookshot      */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Kokiri sword  */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Master sword  */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Giant's Knife */ DMG_ENTRY(2, ZOL_DMGEFF_DEFAULT),
+    /* Fire arrow    */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Ice arrow     */ DMG_ENTRY(4, ZOL_DMGEFF_ICE),
+    /* Light arrow   */ DMG_ENTRY(2, ZOL_DMGEFF_DEFAULT),
+    /* Unk arrow 1   */ DMG_ENTRY(2, ZOL_DMGEFF_DEFAULT),
+    /* Unk arrow 2   */ DMG_ENTRY(2, ZOL_DMGEFF_DEFAULT),
+    /* Unk arrow 3   */ DMG_ENTRY(2, ZOL_DMGEFF_DEFAULT),
+    /* Fire magic    */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Ice magic     */ DMG_ENTRY(3, ZOL_DMGEFF_ICE),
+    /* Light magic   */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Shield        */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Mirror Ray    */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Kokiri spin   */ DMG_ENTRY(1, ZOL_DMGEFF_DEFAULT),
+    /* Giant spin    */ DMG_ENTRY(4, ZOL_DMGEFF_DEFAULT),
+    /* Master spin   */ DMG_ENTRY(2, ZOL_DMGEFF_DEFAULT),
+    /* Kokiri jump   */ DMG_ENTRY(2, ZOL_DMGEFF_DEFAULT),
+    /* Giant jump    */ DMG_ENTRY(8, ZOL_DMGEFF_DEFAULT),
+    /* Master jump   */ DMG_ENTRY(4, ZOL_DMGEFF_DEFAULT),
+    /* Unknown 1     */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Unblockable   */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+    /* Hammer jump   */ DMG_ENTRY(4, ZOL_DMGEFF_DEFAULT),
+    /* Unknown 2     */ DMG_ENTRY(0, ZOL_DMGEFF_DEFAULT),
+};
+
+static InitChainEntry sInitChain[] = {
+    ICHAIN_F32(targetArrowOffset, 200, ICHAIN_CONTINUE),
+    ICHAIN_F32(minVelocityY, -40, ICHAIN_CONTINUE),
+    ICHAIN_F32_DIV1000(gravity, -1000, ICHAIN_STOP),
+};
+
+// sine func for decreasing wobble effect
+void EnZol_Wobble(EnZol* this) {
+    Math_SmoothStepToF(&this->wobbleScale, 0.0f, 0.04f, 0.05f, 0.0f);
+    this->actor.scale.x = this->actor.scale.z = (sinf((f32)this->wobbletimerMax * (M_PI / 4)) * this->wobbleScale) + this->wobbleScale + this->scale;
+}
+
+// changes scaling during different states for zol deformation
+void EnZol_Scale(EnZol* this) {
+    if (this->state == ZOL_LANDED) {
+        if (this->timer2 > 0) {
+            this->timer2--;
+        } else {
+            this->timer2 = 5;
+            this->state = ZOL_IDLE;
+        }
+    }
+
+    if (!(this->actor.bgCheckFlags & BGCHECKFLAG_GROUND) && (this->actionFunc == EnZol_JumpTowardPlayer || this->actionFunc ==  EnZol_Recoil)) {
+        this->state = ZOL_AIR;
+    }
+
+    switch (this->state) {
+        case ZOL_EMERGE:
+            Math_SmoothStepToF(&this->actor.scale.x, 0.02f, 0.1f, 0.2f, 0.0f);
+            Math_SmoothStepToF(&this->actor.scale.y, 0.2f, 0.1f, 0.2f, 0.0f);
+            this->actor.scale.z = this->actor.scale.x;
+        break;
+        case ZOL_IDLE:
+            Math_SmoothStepToF(&this->actor.scale.y, this->scale, 0.5f, 0.2f, 0.0f);
+        break;
+        case ZOL_AIR:
+            Math_SmoothStepToF(&this->actor.scale.x, 0.02f, 0.1f, 0.1f, 0.0f);
+            Math_SmoothStepToF(&this->actor.scale.y, 0.2f, 0.1f, 0.1f, 0.0f);
+            this->actor.scale.z = this->actor.scale.x;
+        break;
+        case ZOL_LANDED:
+            Math_SmoothStepToF(&this->actor.scale.y, 0.01f, 0.6f, 0.5f, 0.0f);
+        break;
+    }
+}
+
+void EnZol_Init(Actor* thisx, PlayState* play) {
+    EnZol* this = (EnZol*)thisx;
+
+    Actor_ProcessInitChain(thisx, sInitChain);
+    if (this->actor.params == ZOL_SPLIT) {
+        this->scale = 0.04f;
+    } else {
+        this->scale = 0.08f;
+    }
+    Actor_SetScale(thisx, this->scale);
+    ActorShape_Init(&thisx->shape, -200.0f, ActorShadow_DrawCircle, 8.0f);
+    this->wobbleScale = 0.0f;
+    this->timer2 = 5;
+    this->timer = 0;
+
+    thisx->focus.pos = thisx->world.pos;
+    thisx->focus.pos.y += 20.0f;
+    thisx->targetMode = 3;
+    
+    Collider_InitCylinder(play, &this->collider);
+    Collider_SetCylinder(play, &this->collider, &this->actor, &sCylinderInit);
+    thisx->colChkInfo.damageTable = sDamageTable;
+    thisx->colChkInfo.health = 2;
+    thisx->colChkInfo.mass = MASS_HEAVY;
+    this->bgcheckinfo = UPDBGCHECKINFO_FLAG_0 | UPDBGCHECKINFO_FLAG_2;
+
+    switch (ENZOL_TYPE) {
+        case ZOL_GREEN:
+        break;
+        case ZOL_RED:
+            this->collider.base.colType = COLTYPE_HIT7; // red blood hit effect
+        break;
+        case ZOL_SPLIT:
+            this->collider.base.colType = COLTYPE_HIT7; // red blood hit effect
+            this->collider.dim.radius = 26;
+            this->collider.dim.height = 35;
+            this->actor.shape.rot.y += 0x4000; 
+            EnZol_SetupRecoil(this);
+        break;
+    }
+
+    if (ENZOL_TYPE != ZOL_SPLIT) {
+        switch (ENZOL_SPAWN) {
+            case ZOL_NONE:
+                EnZol_SetupIdle(this);
+                break;
+            case ZOL_FLOOR:
+                this->scale = 0.0f;
+                this->actor.scale.x = this->actor.scale.z  = 0.0f;
+                this->actor.scale.y = 0.01f;
+
+                this->actor.flags &= ~ACTOR_FLAG_0; // navi target disabled
+                EnZol_SetupWaitForPlayer(this);
+                break;
+            case ZOL_CEILING:
+                this->scale = 0.0f;
+                Actor_SetScale(thisx, this->scale);
+                EnZol_SetupWaitForPlayerCeiling(this);
+                break;
+        }    
+    }
+    
+}
+
+void EnZol_Destroy(Actor* thisx, PlayState* play) {
+    EnZol* this = (EnZol*)thisx;
+
+    Collider_DestroyCylinder(play, &this->collider);
+}
+
+// setups and action funcs
+// zol is invisible and waiting for player to come closer
+void EnZol_SetupWaitForPlayer(EnZol* this) {
+    this->state = ZOL_WAIT;
+    this->actionFunc = EnZol_WaitForPlayer;
+}
+
+void EnZol_WaitForPlayer(EnZol* this, PlayState* play) {
+    if ((this->actor.xzDistToPlayer < 250.0f) && (this->actor.yDistToPlayer <= 80.0f)) {
+        this->wobbletimerMax = 120;
+        this->wobbleScale = 0.03f;
+        EnZol_SetupGrow(this);
+    } 
+}
+
+// zol is invisible and waiting for player to come closer
+void EnZol_SetupWaitForPlayerCeiling(EnZol* this) {
+    this->state = ZOL_WAIT;
+    this->actor.gravity = 0.0f;
+    this->actionFunc = EnZol_WaitForPlayerCeiling;
+}
+
+void EnZol_WaitForPlayerCeiling(EnZol* this, PlayState* play) {
+    if ((this->actor.xzDistToPlayer < 250.0f)) {
+        this->scale = 0.08f;
+        // Actor_SetScale(&this->actor, this->scale);
+        EnZol_SetupIdle(this);
+    } 
+}
+
+// zol appears
+void EnZol_SetupGrow(EnZol* this) {
+    this->timer = 18;
+    this->actor.flags |= ACTOR_FLAG_0; // targetable
+    this->actionFunc = EnZol_Grow;
+}
+
+void EnZol_Grow(EnZol* this, PlayState* play) {
+    Sfx_PlaySfxAtPos(&this->actor.world.pos, NA_SE_EN_MOFER_CORE_ROLL - SFX_FLAG); // play sound continuously, every frame
+    Math_SmoothStepToF(&this->scale, 0.08f, 0.1f, 0.4f, 0.0f);
+    if (this->timer < 10) {
+        Math_SmoothStepToF(&this->actor.scale.y, 0.08, 0.1f, 0.2f, 0.0f);
+    }
+    if (this->timer > 0) {
+        this->timer--;
+    } else {
+        EnZol_SetupEmerge(this);
+    }
+}
+
+// zol jumps after appearing
+void EnZol_SetupEmerge(EnZol* this) {
+    this->actor.velocity.y = 12.0f;
+    this->actor.gravity = -1.0f;
+    this->timer = 30;
+    Actor_PlaySfx(&this->actor, NA_SE_EN_AWA_BOUND);
+    this->actionFunc = EnZol_JumpTowardPlayer;
+}
+
+// zol idle
+void EnZol_SetupIdle(EnZol* this) {
+    this->actor.speed = 0.0f;
+    this->timer = Rand_S16Offset(10, 25); // base, range
+    this->actionFunc = EnZol_Idle;
+}
+
+void EnZol_Idle(EnZol* this, PlayState* play) {
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 1.0f, 0.5f, 0.0f);
+
+    this->actor.gravity = -1.0f;
+
+    if ((this->actor.bgCheckFlags & (BGCHECKFLAG_GROUND | BGCHECKFLAG_GROUND_TOUCH)) &&
+        (this->actor.velocity.y <= 0.0f)) {
+        this->actor.velocity.y = 0.0f;
+    }
+
+    if (this->timer > 0) {
+        this->timer--;
+    } else if ((this->actor.xzDistToPlayer < 350.0f) && (this->actor.yDistToPlayer <= 80.0f)) {
+        EnZol_SetupTurnTowardPlayer(this);
+    }
+}
+
+// zol rotates towards player
+void EnZol_SetupTurnTowardPlayer(EnZol* this) {
+    if (this->actor.bgCheckFlags & (BGCHECKFLAG_GROUND | BGCHECKFLAG_GROUND_TOUCH)) {
+        if (this->actor.velocity.y <= 0.0f) {
+            this->actor.gravity = 0.0f;
+            this->actor.velocity.y = 0.0f;
+            this->actor.speed = 0.0f;
+        }
+    }
+    this->actionFunc = EnZol_TurnTowardPlayer;
+}
+
+void EnZol_TurnTowardPlayer(EnZol* this, PlayState* play) {
+    s16 angleToPlayer;
+    s16 turnVelocity;
+
+    Math_SmoothStepToF(&this->actor.scale.y, this->scale, 0.4f, 0.2f, 0.0f);
+
+    if (this->actor.bgCheckFlags & (BGCHECKFLAG_GROUND | BGCHECKFLAG_GROUND_TOUCH)) {
+        this->actor.gravity = 0.0f;
+        this->actor.velocity.y = 0.0f;
+        this->actor.speed = 0.0f;
+    }
+
+    // Calculate turn velocity based on angle to player
+    angleToPlayer = Actor_WorldYawTowardActor(&this->actor, &GET_PLAYER(play)->actor) - this->actor.world.rot.y;
+    if (angleToPlayer > 0) {
+        turnVelocity = (angleToPlayer / 42.0f) + 10.0f;
+        this->actor.world.rot.y += (turnVelocity * 4);
+    } else {
+        turnVelocity = (angleToPlayer / 42.0f) - 10.0f;
+        this->actor.world.rot.y += (turnVelocity * 4);
+    }
+
+    // Idle if player is far enough away from the zol, move or attack if almost facing player
+    this->actor.shape.rot.y = this->actor.world.rot.y;
+    if ((this->actor.xzDistToPlayer > 350.0f) && (this->actor.yDistToPlayer > 80.0f)) {
+        EnZol_SetupIdle(this);
+    } else if (Actor_IsFacingPlayer(&this->actor, 3640)) {
+        EnZol_SetupJumpTowardPlayer(this);
+    }
+}
+
+// zol jumps towards player
+void EnZol_SetupJumpTowardPlayer(EnZol* this) {
+    this->timer = 25;
+    this->actor.velocity.y = 10.0f;
+    this->actor.gravity = -1.0f;
+    this->actor.speed = 6.0f;
+    Actor_PlaySfx(&this->actor, NA_SE_EN_AWA_BOUND);
+    this->actionFunc = EnZol_JumpTowardPlayer;
+}
+
+void EnZol_JumpTowardPlayer(EnZol* this, PlayState* play) {
+    this->timer--;
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 0.1f, 1.0f, 0.0f);
+    Math_SmoothStepToS(&this->actor.shape.rot.y, this->actor.yawTowardsPlayer, 1, 1000, 0);
+
+    if (this->actor.bgCheckFlags & (BGCHECKFLAG_GROUND_TOUCH)) {
+        Actor_PlaySfx(&this->actor, NA_SE_EN_DODO_M_GND);
+        this->state = ZOL_LANDED;
+        this->wobbletimerMax = 120;
+        this->wobbleScale = 0.03f;
+    }
+
+    if (this->actor.bgCheckFlags & (BGCHECKFLAG_GROUND | BGCHECKFLAG_GROUND_TOUCH) && (this->actor.velocity.y <= 0.0f)) {
+        // slightly turn toward player upon landing
+        Math_SmoothStepToS(&this->actor.shape.rot.y, this->actor.yawTowardsPlayer, 1, 4000, 0);
+        this->actor.world.rot.y = this->actor.shape.rot.y;
+
+        if (this->actor.floorHeight > BGCHECK_Y_MIN) {
+            this->actor.world.pos.y = this->actor.floorHeight;
+        }
+
+        if (this->timer <= 0) {
+            EnZol_SetupIdle(this);
+        }
+    }
+}
+
+// zol recoils after being hit
+void EnZol_SetupRecoil(EnZol* this) {
+    this->timer = 7;
+    this->actor.speed = -6.0f;
+    this->actor.gravity = -1.0f;
+    this->actionFunc = EnZol_Recoil;
+}
+
+void EnZol_Recoil(EnZol* this, PlayState* play) {
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 1.0f, 0.5f, 0.0f);
+    
+    if (this->actor.bgCheckFlags & (BGCHECKFLAG_GROUND_TOUCH)) {
+        Actor_PlaySfx(&this->actor, NA_SE_EN_DODO_M_GND);
+        this->state = ZOL_LANDED;
+        this->wobbletimerMax = 120;
+        this->wobbleScale = 0.03f;
+    }
+
+    if (this->actor.bgCheckFlags & (BGCHECKFLAG_GROUND | BGCHECKFLAG_GROUND_TOUCH) && (this->actor.velocity.y <= 0.0f)) {
+        if (this->actor.floorHeight > BGCHECK_Y_MIN) {
+            this->actor.world.pos.y = this->actor.floorHeight;
+        }
+    }
+
+    if ((this->actor.speed == 0.0f) && (this->actor.bgCheckFlags & BGCHECKFLAG_GROUND)) {
+        if (this->timer > 0) {
+            this->timer--;
+        } else {
+            this->actor.world.rot.y = this->actor.shape.rot.y;
+            this->collider.base.atFlags &= ~AT_HIT;
+
+            EnZol_SetupJumpTowardPlayer(this); 
+        }
+    }
+}
+
+// zol frozen
+void EnZol_SetupFrozen(EnZol* this) {
+    this->state = ZOL_FROZEN;
+    this->actor.velocity.y = 0.0f;
+    this->actor.speed = 0.0f;
+    this->actor.gravity = 0.0f;
+    Actor_SetColorFilter(&this->actor, COLORFILTER_COLORFLAG_BLUE, 255, COLORFILTER_BUFFLAG_XLU, 36);
+    this->timer = 50;
+    this->actionFunc = EnZol_Frozen;
+}
+
+void EnZol_Frozen(EnZol* this, PlayState* play) {
+    Vec3f pos;
+    s16 iceChunkVar;
+    s16 iceChunkTimer;
+
+    if (this->timer != 0) {
+        this->timer--;
+    }
+
+    iceChunkTimer = this->timer - 34;
+    this->actor.colorFilterTimer = 36;
+
+    if (iceChunkTimer > 0) {
+        iceChunkVar = iceChunkTimer >> 1;
+
+        if ((this->timer % 2) != 0) {
+            pos.y = this->actor.world.pos.y + ((Rand_ZeroOne() * 45.0f) * (this->actor.scale.y * 10));
+            pos.x = this->actor.world.pos.x + ((iceChunkVar & 2) ? 18.0f : -18.0f);
+            pos.z = this->actor.world.pos.z + ((iceChunkVar & 1) ? 18.0f : -18.0f);
+
+            EffectSsEnIce_SpawnFlyingVec3f(play, &this->actor, &pos, 150, 150, 150, 250, 235, 245, 255,
+                                           (Rand_ZeroOne() * this->scale) + 1.8f);
+        }
+    } else if (this->timer == 0) {
+        this->actor.gravity = -1.0f;
+        if ((this->actor.speed == 0.0f) && (this->actor.bgCheckFlags & BGCHECKFLAG_GROUND)) {
+            Actor_PlaySfx(&this->actor, NA_SE_PL_ICE_BROKEN);
+            EnZol_SetupJumpTowardPlayer(this);
+            this->actor.colorFilterTimer = 0;
+        }
+    }
+}
+
+// zol dies
+void EnZol_SetupDeathCry(EnZol* this) {
+    this->state = ZOL_DEATH;
+    this->actor.colorFilterTimer = 0;
+    this->actor.speed = 0.0f;
+    this->actionFunc = EnZol_DeathCry;
+}
+
+static Vec3f sEffectAccel = { 0.0f, -0.5f, 0.0f };
+static Color_RGBA8 sEffectPrimColor = { 180, 255, 180, 255 };
+static Color_RGBA8 sEffectEnvColor = { 0, 70, 0, 0 };
+
+void EnZol_DeathCry(EnZol* this, PlayState* play) {
+    u32 i;
+    Vec3f effectAccel;
+    Vec3f effectVel;
+    Vec3f effectPos;
+    Color_RGBA8 effectPrimColor;
+    Color_RGBA8 effectEnvColor;
+    u8 effectScale;
+
+    Actor_SetScale(&this->actor, this->actor.scale.x * 1.185f);
+    if (this->actor.scale.y >= this->scale + 0.08f) {
+        EffectSsDeadSound_SpawnStationary(play, &this->actor.projectedPos, NA_SE_EN_AWA_BREAK, true,
+                                        DEADSOUND_REPEAT_MODE_OFF, 40);
+        effectPrimColor = sEffectPrimColor;
+        effectEnvColor = sEffectEnvColor;
+        if (ENZOL_TYPE == ZOL_SPLIT || ENZOL_TYPE == ZOL_RED) { // red one, split
+            effectScale = 100;
+            effectPrimColor.r = 255;
+            effectPrimColor.g = 180;
+            effectEnvColor.r = 70;
+            effectEnvColor.g = 0;
+            Item_DropCollectibleRandom(play, &this->actor, &this->actor.world.pos, 0x10);
+        } else { // green
+            effectScale = 150;
+            Item_DropCollectibleRandom(play, &this->actor, &this->actor.world.pos, 0x10);
+        }
+        effectAccel = sEffectAccel;
+
+        effectPos.x = this->actor.world.pos.x;
+        effectPos.y = this->actor.world.pos.y;
+        effectPos.z = this->actor.world.pos.z;
+
+        for (i = 0; i < 20; i++) {
+            effectVel.x = (Rand_ZeroOne() - 0.5f) * 10.0f;
+            effectVel.y = Rand_ZeroOne() * 10.0f;
+            effectVel.z = (Rand_ZeroOne() - 0.5f) * 10.0f;
+            EffectSsDtBubble_SpawnCustomColor(play, &effectPos, &effectVel, &effectAccel, &effectPrimColor,
+                                              &effectEnvColor, Rand_S16Offset(effectScale, 50), 0x19, 0);
+        }
+        Actor_Kill(&this->actor);
+    }
+}
+
+// water check
+void EnZol_CheckDrowned(EnZol* this) {
+    if (this->state != ZOL_DEATH && (this->actor.bgCheckFlags & BGCHECKFLAG_WATER) && (this->actor.yDistToWater > 5.0f)) {
+        this->actor.gravity = -0.1f;
+        EnZol_SetupDeathCry(this);
+        return;
+    }
+}
+
+// damage check
+void EnZol_CheckDamage(Actor* thisx, PlayState* play) {
+    EnZol* this = (EnZol*)thisx;
+
+    EnZol_CheckDrowned(this);
+
+    if (this->collider.base.acFlags & AC_HIT && this->actionFunc != EnZol_Recoil && this->state != ZOL_WAIT  && this->state != ZOL_DEATH) {
+        this->collider.base.acFlags &= ~AC_HIT;
+        this->damageEffect = thisx->colChkInfo.damageEffect;
+
+        if ((thisx->colorFilterTimer == 0) || ((thisx->colorFilterParams & 0x4000) == 0)) {
+            if (this->actor.colChkInfo.damageEffect == ZOL_DMGEFF_ICE && this->state != ZOL_FROZEN) {
+                EnZol_SetupFrozen(this);
+            } else {
+                Actor_SetColorFilter(thisx, 0x4000, 0xFF, 0, 8);
+                Actor_ApplyDamage(thisx);
+                this->wobbletimerMax = 120;
+                this->wobbleScale = 0.03f;
+
+                this->actor.world.rot.y = this->actor.yawTowardsPlayer;
+                EnZol_SetupRecoil(this);
+
+                // split into two mini zols via actor spawn
+                if (ENZOL_TYPE == ZOL_RED) {
+                    Actor* childZol;
+
+                    this->actor.params = ZOL_SPLIT;
+                    this->scale = 0.04f;
+                    Actor_SetScale(&this->actor, this->scale);
+                    this->collider.dim.radius = 26;
+                    this->collider.dim.height = 35;
+
+                    Actor_PlaySfx(thisx, NA_SE_EN_AWA_BREAK);
+
+                    childZol = Actor_SpawnAsChild(&play->actorCtx, &this->actor, play, ACTOR_EN_ZOL,
+                                                    thisx->world.pos.x, thisx->world.pos.y, thisx->world.pos.z,
+                                                    thisx->world.rot.x, this->actor.yawTowardsPlayer - 0x4000, thisx->world.rot.z, ZOL_SPLIT);
+
+                    this->actor.world.rot.y = this->actor.yawTowardsPlayer + 0x4000;
+
+                    if (childZol != NULL) {
+                        childZol->colChkInfo.health = thisx->colChkInfo.health;
+                    }
+                }
+            }
+        }
+        if (thisx->colChkInfo.health == 0) {
+            EnZol_SetupDeathCry(this);
+        }
+    }
+}
+
+void EnZol_Update(Actor* thisx, PlayState* play) {
+    EnZol* this = (EnZol*)thisx;
+    Player* player = GET_PLAYER(play);
+
+    EnZol_CheckDamage(thisx, play);
+
+    this->actionFunc(this, play);
+
+    Actor_MoveXZGravity(&this->actor);
+    Actor_UpdateBgCheckInfo(play, &this->actor, 20.0f, 20.0f, 20.0f,this->bgcheckinfo);
+
+    if (this->wobbletimerMax > 0) {
+        this->wobbletimerMax--;
+    }
+    
+    EnZol_Scale(this);
+    if (this->state < ZOL_FROZEN) {
+        EnZol_Wobble(this);
+    }
+
+    thisx->focus.pos = thisx->world.pos;
+    thisx->focus.pos.y = thisx->world.pos.y + 20.0f;
+
+    Collider_UpdateCylinder(thisx, &this->collider);
+    CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+    if (player->invincibilityTimer == 0) {
+        CollisionCheck_SetAT(play, &play->colChkCtx, &this->collider.base); // add check for player damagetimer
+    }
+    CollisionCheck_SetOC(play, &play->colChkCtx, &this->collider.base);
+}
+
+void EnZol_Draw(Actor* thisx, PlayState* play) {
+    EnZol* this = (EnZol*)thisx;
+
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    Gfx_SetupDL_25Xlu(play->state.gfxCtx);
+    func_8002ED80(&this->actor, play, 0); // hilite
+    Matrix_SetTranslateRotateYXZ(this->actor.world.pos.x, this->actor.world.pos.y,
+                                 this->actor.world.pos.z, &this->actor.shape.rot);
+    Matrix_Scale(this->actor.scale.x, this->actor.scale.y, this->actor.scale.z, MTXMODE_APPLY);
+    gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, __FILE__, __LINE__),
+                  G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+
+    switch (ENZOL_TYPE) {
+        case ZOL_GREEN:
+            gDPSetEnvColor(POLY_XLU_DISP++, 0, 70, 0, 255);
+            gDPSetPrimColor(POLY_XLU_DISP++, 0x00, 0x80, 180, 255, 180, 255);
+        break;
+        case ZOL_SPLIT:
+        case ZOL_RED:
+            gDPSetEnvColor(POLY_XLU_DISP++, 70, 0, 0, 255);
+            gDPSetPrimColor(POLY_XLU_DISP++, 0x00, 0x80, 255, 180, 180, 255);
+        break;
+    }
+
+    gSPDisplayList(POLY_XLU_DISP++, gZolNormalDL);
+
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    Gfx_DrawDListOpa(play, gZolEyesDL);
+}
diff --git a/src/overlays/actors/hm_pack/ovl_En_Zol/z_en_zol.h b/src/overlays/actors/hm_pack/ovl_En_Zol/z_en_zol.h
new file mode 100644
index 000000000..84416d0f5
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_En_Zol/z_en_zol.h
@@ -0,0 +1,37 @@
+#ifndef Z_EN_ZOL_H
+#define Z_EN_ZOL_H
+
+#include "ultra64.h"
+#include "global.h"
+
+struct EnZol;
+
+typedef void (*EnZolActionFunc)(struct EnZol*, PlayState*);
+
+typedef enum {
+    /* 0 */ ZOL_GREEN,  // 0x0000
+    /* 1 */ ZOL_RED,    // 0x0001
+    /* 2 */ ZOL_SPLIT   // 0x0002
+} ZolType;
+
+typedef enum {
+    /* 0 */ ZOL_NONE,       // 0x0000
+    /* 1 */ ZOL_FLOOR,      // 0x0100
+    /* 2 */ ZOL_CEILING     // 0x0200
+} ZolSpawn;
+
+typedef struct EnZol {
+    Actor actor;
+    EnZolActionFunc actionFunc;
+    ColliderCylinder collider;
+    s32 bgcheckinfo;
+    u8 damageEffect;
+    f32 scale;
+    f32 wobbleScale;
+    s32 wobbletimerMax;
+    s32 timer;
+    s32 timer2;
+    s16 state;
+} EnZol;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Floor_Spikes/floor_spikes.c b/src/overlays/actors/hm_pack/ovl_Floor_Spikes/floor_spikes.c
new file mode 100644
index 000000000..d6dda845a
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Floor_Spikes/floor_spikes.c
@@ -0,0 +1,506 @@
+/*
+ * File: z_floor_spikes.c
+ * Overlay: ovl_Floor_Spikes
+ * Description: Retractable floor spikes by hiisuya, from the Hylian Modding actor pack.
+ */
+
+#include "floor_spikes.h"
+#include "assets_hm_pack/objects/object_floor_spikes/object_floor_spikes.h"
+
+#define SPIKE_TYPE(this)    ((this->dyna.actor.params >> 0xC) & 0xF) // 0xF000
+#define SPIKE_SIZE(this)    ((this->dyna.actor.params >> 0x8) & 0xF) // 0x0F00
+#define SWITCH_FLAG(this)   (this->dyna.actor.params & 0x3F) // 0x00FF
+#define USE_SWITCH(this)    (this->dyna.actor.home.rot.x)
+#define USE_VOID(this)      (this->dyna.actor.home.rot.z)
+
+/**
+ * Params:
+ *  0xF000 = Type
+ *     0x0 = Player Triggered
+ *     0x1 = Cyclic
+ *     0x2 = Start On
+ *     0x3 = Start Off
+ *  
+ *  0x0F00 = Size
+ *     0x0 = Small
+ *     0x1 = Medium
+ *     0x2 = Large
+ * 
+ *  0x00FF = Switch Flag
+ * 
+ *  Rot X > 0 = React to Switch Flags
+ *  Rot Z > 0 = Void out on touch
+ * 
+ *  Ex: 0x3104, rot.x = 1, rot.z = 0 | Medium sized spikes that start turned off. Will switch states when flag (0x4) is set/unset. Will not Void.
+ *  Ex: 0x1200, rot.x = 0, rot.z = 1 | Large spikes that go up and down cyclicly. Will not react to switch flags. Will Void on touch.
+ * 
+ *  Notes:
+ *      The types "Switch Start On/Off" will ALWAYS react to switch flags. They will override if you say not to.
+ *      There is an ON and OFF state which is controlled by Switch Flags for every type. If you don't allow Switch Flag reaction, then the state is always ON.
+ *      All types will maintain their ON/OFF position based on their parameters (and switch status) on room reload.
+ *          Aka: If a Cyclic Spike that reacts to Switch Flag has that flag set, it will retract and be turned OFF. It will then remain OFF until that flag is unset.
+ *      If you need to change timings, use the defines labeled below, though the results may not be perfect.
+*/
+
+#define SPIKE_RETRACT_TIME 7
+#define SPIKE_WAIT_TIME 20
+
+#define FLAGS (ACTOR_FLAG_4)
+
+void FloorSpikes_Init(Actor* thisx, PlayState* play);
+void FloorSpikes_Destroy(Actor* thisx, PlayState* play);
+void FloorSpikes_Update(Actor* thisx, PlayState* play);
+void FloorSpikes_Draw(Actor* thisx, PlayState* play);
+
+void FloorSpikes_UpdateRetracted(Actor* thisx, PlayState* play);
+
+void FloorSpikes_SetupWaitForTrigger(FloorSpikes* this, PlayState* play);
+void FloorSpikes_WaitForTrigger(FloorSpikes* this, PlayState* play);
+void FloorSpikes_SetupTrigger(FloorSpikes* this, PlayState* play);
+void FloorSpikes_Trigger(FloorSpikes* this, PlayState* play);
+void FloorSpikes_SetupReturnToWait(FloorSpikes* this, PlayState* play);
+void FloorSpikes_ReturnToWait(FloorSpikes* this, PlayState* play);
+
+void FloorSpikes_SetupRunCyclic(FloorSpikes* this, PlayState* play);
+void FloorSpikes_RunCyclic(FloorSpikes* this, PlayState* play);
+
+void FloorSpikes_SetupWaitForSwitch(FloorSpikes* this, PlayState* play);
+void FloorSpikes_WaitForSwitchOn(FloorSpikes* this, PlayState* play);
+void FloorSpikes_WaitForSwitchOff(FloorSpikes* this, PlayState* play);
+
+void FloorSpikes_SetupExtend(FloorSpikes* this, PlayState* play);
+void FloorSpikes_Extend(FloorSpikes* this, PlayState* play);
+void FloorSpikes_SetupRetract(FloorSpikes* this, PlayState* play);
+void FloorSpikes_Retract(FloorSpikes* this, PlayState* play);
+
+void FloorSpikes_DoNothing(FloorSpikes* this, PlayState* play);
+
+typedef enum {
+    SPIKE_TYPE_PLAYER_TRIGGERED = 0,
+    SPIKE_TYPE_CYCLIC,
+    SPIKE_TYPE_SWITCH_START_ON,
+    SPIKE_TYPE_SWITCH_START_OFF,
+} FloorSpikesType;
+typedef enum {
+    SPIKE_SIZE_SMALL = 0,
+    SPIKE_SIZE_MEDIUM,
+    SPIKE_SIZE_LARGE,
+} FloorSpikesSize;
+
+typedef enum {
+    CYCLIC_GO_DOWN = 0,
+    CYCLIC_WAIT_DOWN,
+    CYCLIC_GO_UP,
+    CYCLIC_WAIT_UP
+} FloorSpikesCyclicState;
+
+const ActorInit Floor_Spikes_InitVars = {
+    ACTOR_FLOOR_SPIKES,
+    ACTORCAT_BG,
+    FLAGS,
+    OBJECT_FLOOR_SPIKES,
+    sizeof(FloorSpikes),
+    (ActorFunc)FloorSpikes_Init,
+    (ActorFunc)FloorSpikes_Destroy,
+    (ActorFunc)FloorSpikes_Update,
+    (ActorFunc)FloorSpikes_Draw,
+};
+
+static ColliderQuadInit sDmgPlayerQuadInit = {
+    .base = {
+        .colType = COLTYPE_NONE,
+        .atFlags = AT_ON | AT_TYPE_ENEMY,
+        .shape = COLSHAPE_QUAD,
+    },
+    .info = {
+        .toucher = { .dmgFlags = DMG_UNBLOCKABLE, .damage = 16 },
+        .toucherFlags = TOUCH_ON,
+    }
+};
+
+static ColliderQuadInit sDmgOthersQuadInit = {
+    .base = {
+        .colType = COLTYPE_NONE,
+        .atFlags = AT_ON | AT_TYPE_PLAYER | AT_TYPE_OTHER,
+        .shape = COLSHAPE_QUAD,
+    },
+    .info = {
+        .toucher = { .dmgFlags = DMG_SLASH_MASTER, .damage = 16 },
+        .toucherFlags = TOUCH_ON,
+    }
+};
+
+static InitChainEntry sInitChain[] = {
+    ICHAIN_VEC3F_DIV1000(scale, 100, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneForward, 3000, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneScale, 500, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneDownward, 1000, ICHAIN_STOP),
+};
+
+void FloorSpikes_Init(Actor* thisx, PlayState* play) {
+    FloorSpikes* this = (FloorSpikes*)thisx;
+    CollisionHeader* colHeader = NULL;
+
+    u8 flagActive = Flags_GetSwitch(play, SWITCH_FLAG(this));
+
+    Actor_ProcessInitChain(thisx, sInitChain);
+    DynaPolyActor_Init(&this->dyna, 0);
+
+    this->useSwitchFlag = !!USE_SWITCH(this);
+    this->useVoidOut = !!USE_VOID(this);
+    this->spikeProgress = 0.0f;
+    this->spikesActive = false; // always start spikes off no matter what
+
+    this->dyna.actor.shape.rot.x = this->dyna.actor.home.rot.x = 0.0f;
+    this->dyna.actor.shape.rot.z = this->dyna.actor.home.rot.z = 0.0f;
+
+    switch (SPIKE_SIZE(this)) {
+        case SPIKE_SIZE_SMALL:
+            CollisionHeader_GetVirtual(&gSpikePadSmallCol_collisionHeader, &colHeader);
+            break;
+        case SPIKE_SIZE_MEDIUM:
+            CollisionHeader_GetVirtual(&gSpikePadMediumCol_collisionHeader, &colHeader);
+            break;
+        case SPIKE_SIZE_LARGE:
+            CollisionHeader_GetVirtual(&gSpikePadLargeCol_collisionHeader, &colHeader);
+            break;
+    }
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeader);
+
+    Collider_InitQuad(play, &this->playerCollider);
+    Collider_InitQuad(play, &this->othersCollider);
+    Collider_SetQuad(play, &this->playerCollider, &this->dyna.actor, &sDmgPlayerQuadInit);
+    Collider_SetQuad(play, &this->othersCollider, &this->dyna.actor, &sDmgOthersQuadInit);
+
+    switch (SPIKE_TYPE(this)) {
+        case SPIKE_TYPE_PLAYER_TRIGGERED:
+            FloorSpikes_SetupWaitForTrigger(this, play);
+            break;
+        case SPIKE_TYPE_CYCLIC:
+            FloorSpikes_SetupRunCyclic(this, play);
+            break;
+        case SPIKE_TYPE_SWITCH_START_ON: // Set their states for the appropriate spot based on type and switch flag activation.
+            if (flagActive) { 
+                this->spikeProgress = 0.0f;
+                this->spikesActive = false;
+            } else {
+                this->spikeProgress = 1.0f;
+                this->spikesActive = true;
+            }
+            this->useSwitchFlag = true;
+            FloorSpikes_SetupWaitForSwitch(this, play);
+            break;
+        case SPIKE_TYPE_SWITCH_START_OFF:
+            if (flagActive) {
+                this->spikeProgress = 1.0f;
+                this->spikesActive = true;
+            } else {
+                this->spikeProgress = 0.0f;
+                this->spikesActive = false;
+            }
+            this->useSwitchFlag = true;
+            FloorSpikes_SetupWaitForSwitch(this, play);
+            break;
+    }
+
+    Actor_SetScale(&this->dyna.actor, 0.01f);
+}
+
+void FloorSpikes_Destroy(Actor* thisx, PlayState* play) {
+    FloorSpikes* this = (FloorSpikes*)thisx;
+
+    Collider_DestroyQuad(play, &this->playerCollider);
+    Collider_DestroyQuad(play, &this->othersCollider);
+    DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+}
+
+void FloorSpikes_Update(Actor* thisx, PlayState* play) {
+    FloorSpikes* this = (FloorSpikes*)thisx;
+    Player* player = GET_PLAYER(play);
+
+    if (this->playerCollider.base.atFlags & AT_HIT) {
+        this->playerCollider.base.atFlags &= ~AT_HIT;
+
+        if ((this->useVoidOut) && (this->playerCollider.base.at->id == ACTOR_PLAYER)) {
+            player->actor.freezeTimer = 50;
+            play->damagePlayer(play, -16);
+            Play_TriggerRespawn(play);
+            gSaveContext.respawnFlag = -2;
+            SEQCMD_STOP_SEQUENCE(SEQ_PLAYER_BGM_MAIN, 0);
+            play->transitionType = TRANS_TYPE_FADE_BLACK;
+            Sfx_PlaySfxCentered2(NA_SE_OC_ABYSS);
+        }
+    }
+
+    this->actionFunc(this, play);
+
+    if ((this->useSwitchFlag) && (SPIKE_TYPE(this) <= SPIKE_TYPE_CYCLIC)) {
+        if (Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+            if (this->spikesActive) {
+                this->timer = SPIKE_RETRACT_TIME;
+                this->actionFunc = FloorSpikes_Retract;
+                this->dyna.actor.update = FloorSpikes_UpdateRetracted;
+            } else if (!this->spikesActive) {
+                this->actionFunc = FloorSpikes_DoNothing;
+                this->dyna.actor.update = FloorSpikes_UpdateRetracted;
+            }
+        }
+    }
+
+    if ((this->spikesActive) && (this->spikeProgress > 0.5f)) {
+        CollisionCheck_SetAT(play, &play->colChkCtx, &this->othersCollider.base);
+        if (player->actor.freezeTimer == 0) {
+            if (player->invincibilityTimer == 0) {
+                CollisionCheck_SetAT(play, &play->colChkCtx, &this->playerCollider.base);
+            }
+
+            if (DynaPolyActor_IsPlayerOnTop(&this->dyna)) {
+                player->speedXZ = CLAMP_MAX(player->speedXZ, 3.0f);
+            }
+        }
+    }
+}
+
+void FloorSpikes_UpdateRetracted(Actor* thisx, PlayState* play) {
+    FloorSpikes* this = (FloorSpikes*)thisx;
+
+    if (!Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+        switch (SPIKE_TYPE(this)) {
+            case SPIKE_TYPE_PLAYER_TRIGGERED:
+                FloorSpikes_SetupWaitForTrigger(this, play);
+                break;
+            case SPIKE_TYPE_CYCLIC:
+                FloorSpikes_SetupRunCyclic(this, play);
+                
+                break;
+        }
+        this->dyna.actor.update = FloorSpikes_Update;
+    }
+
+    this->actionFunc(this, play);
+}
+
+static Gfx* sBaseDLists[3] = { gSpikePadSmallDL, gSpikePadMediumDL, gSpikePadLargeDL };
+static Gfx* sSpikesDLists[3] = { gSpikesSmallDL, gSpikesMediumDL, gSpikesLargeDL };
+
+                                    //small                               medium                       large
+static Vec3f sQuad1Pos[3] = { { 4000.0f,  3200.0f, 4000.0f  },  { 8000.0f, 3200.0f,  8000.0f  }, { 16000.0f, 3200.0f, 16000.0f    } };
+static Vec3f sQuad2Pos[3] = { { -4000.0f, 3200.0f, 4000.0f  },  { -8000.0f, 3200.0f, 8000.0f  }, { -16000.0f, 3200.0f, 16000.0f   } };
+static Vec3f sQuad3Pos[3] = { { -4000.0f, 3200.0f, -4000.0f },  { -8000.0f, 3200.0f, -8000.0f }, { -16000.0f, 3200.0f, -16000.0f  } };
+static Vec3f sQuad4Pos[3] = { { 4000.0f,  3200.0f, -4000.0f },  { 8000.0f,  3200.0f, -8000.0f }, { 16000.0f, 3200.0f, -16000.0f   } };
+
+void FloorSpikes_Draw(Actor* thisx, PlayState* play) {
+    FloorSpikes* this = (FloorSpikes*)thisx;
+    static Vec3f sZeroVec = { 0.0f, 0.0f, 0.0f };
+
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    Gfx_DrawDListOpa(play, sBaseDLists[SPIKE_SIZE(this)]);
+
+    if (this->spikesActive) {
+        Matrix_Push();
+
+        Matrix_MultVec3f(&sQuad1Pos[SPIKE_SIZE(this)], &this->playerCollider.dim.quad[0]);
+        Matrix_MultVec3f(&sQuad2Pos[SPIKE_SIZE(this)], &this->playerCollider.dim.quad[1]);
+        Matrix_MultVec3f(&sQuad3Pos[SPIKE_SIZE(this)], &this->playerCollider.dim.quad[3]);
+        Matrix_MultVec3f(&sQuad4Pos[SPIKE_SIZE(this)], &this->playerCollider.dim.quad[2]);
+        Collider_SetQuadVertices(&this->playerCollider, &this->playerCollider.dim.quad[0], &this->playerCollider.dim.quad[1],
+                                  &this->playerCollider.dim.quad[2], &this->playerCollider.dim.quad[3]);
+        Collider_SetQuadVertices(&this->othersCollider, &this->playerCollider.dim.quad[0], &this->playerCollider.dim.quad[1],
+                                  &this->playerCollider.dim.quad[2], &this->playerCollider.dim.quad[3]);
+
+        Matrix_Scale(1.0f, this->spikeProgress, 1.0f, MTXMODE_APPLY);
+        gSPMatrix(POLY_OPA_DISP++, Matrix_NewMtx(play->state.gfxCtx, __FILE__, __LINE__),
+              G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+
+        Gfx_DrawDListOpa(play, sSpikesDLists[SPIKE_SIZE(this)]);
+        Matrix_Pop();
+    }
+
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+}
+
+void FloorSpikes_SetupWaitForTrigger(FloorSpikes* this, PlayState* play) {
+    this->spikesActive = false;
+    this->spikeProgress = 0.0f;
+    this->timer = 5;
+    this->actionFunc = FloorSpikes_WaitForTrigger;
+}
+
+void FloorSpikes_WaitForTrigger(FloorSpikes* this, PlayState* play) {
+    if (DECR(this->timer) == 0) {
+        if (DynaPolyActor_IsPlayerOnTop(&this->dyna) || DynaPolyActor_IsActorOnTop(&this->dyna)) {
+            FloorSpikes_SetupTrigger(this, play);
+        }
+    }
+}
+
+void FloorSpikes_SetupTrigger(FloorSpikes* this, PlayState* play) {
+    this->timer = SPIKE_WAIT_TIME;
+    this->spikesActive = true;
+    this->actionFunc = FloorSpikes_Trigger;
+}
+
+void FloorSpikes_Trigger(FloorSpikes* this, PlayState* play) {
+    if (DECR(this->timer) == 0) {
+        this->spikeProgress = 1.0f;
+        FloorSpikes_SetupReturnToWait(this, play);
+    } else {
+        if (this->timer <= SPIKE_RETRACT_TIME) {
+            Actor_PlaySfx(&this->dyna.actor, NA_SE_IT_SWORD_PICKOUT - SFX_FLAG);
+            this->spikeProgress = CLAMP_MAX(this->spikeProgress + 0.65f, 1.0f);
+        } else {
+            this->spikeProgress = 0.3f;
+        }
+    }
+}
+
+void FloorSpikes_SetupReturnToWait(FloorSpikes* this, PlayState* play) {
+    this->timer = SPIKE_WAIT_TIME;
+    this->actionFunc = FloorSpikes_ReturnToWait;
+}
+
+void FloorSpikes_ReturnToWait(FloorSpikes* this, PlayState* play) {
+    if (DECR(this->timer) == 0) {
+        this->spikesActive = false;
+        this->spikeProgress = 0.0f;
+        FloorSpikes_SetupWaitForTrigger(this, play);
+    } else {
+        if (this->timer <= SPIKE_RETRACT_TIME) {
+            Actor_PlaySfx(&this->dyna.actor, NA_SE_IT_SWORD_PICKOUT - SFX_FLAG);
+            this->spikeProgress = CLAMP_MIN(this->spikeProgress - 0.55f, 0.0f);
+        }
+    }
+}
+
+void FloorSpikes_SetupRunCyclic(FloorSpikes* this, PlayState* play) {
+    this->timer = SPIKE_WAIT_TIME;
+    this->spikesActive = false;
+    this->spikeProgress = 0.0f;
+    this->cyclicState = CYCLIC_WAIT_DOWN;
+    this->actionFunc = FloorSpikes_RunCyclic;
+}
+
+void FloorSpikes_RunCyclic(FloorSpikes* this, PlayState* play) {
+
+    if (DECR(this->timer) == 0) {
+        switch (this->cyclicState) {
+            case CYCLIC_WAIT_DOWN:
+                this->timer = SPIKE_RETRACT_TIME;
+                this->cyclicState = CYCLIC_GO_UP;
+                break;
+            case CYCLIC_GO_UP:
+                this->timer = SPIKE_WAIT_TIME;
+                this->cyclicState = CYCLIC_WAIT_UP;
+                break;
+            case CYCLIC_WAIT_UP:
+                this->timer = SPIKE_RETRACT_TIME;
+                this->cyclicState = CYCLIC_GO_DOWN;
+                break;
+            case CYCLIC_GO_DOWN:
+                this->spikesActive = false;
+                this->timer = SPIKE_WAIT_TIME;
+                this->cyclicState = CYCLIC_WAIT_DOWN;
+                break;
+        }
+    } else {
+        switch (this->cyclicState) {
+            case CYCLIC_WAIT_DOWN:
+                if (this->timer <= SPIKE_RETRACT_TIME) {
+                    this->spikesActive = true;
+                    this->spikeProgress = 0.3f;
+                } else {
+                    this->spikeProgress = 0.0f;
+                }
+                break;
+            case CYCLIC_WAIT_UP:
+                this->spikeProgress = 1.0f;
+                break;
+            case CYCLIC_GO_DOWN:
+                Actor_PlaySfx(&this->dyna.actor, NA_SE_IT_SWORD_PICKOUT - SFX_FLAG);
+                this->spikeProgress = CLAMP_MIN(this->spikeProgress - 0.55f, 0.0f);
+                break;
+            case CYCLIC_GO_UP:
+                Actor_PlaySfx(&this->dyna.actor, NA_SE_IT_SWORD_PICKOUT - SFX_FLAG);
+                this->spikeProgress = CLAMP_MAX(this->spikeProgress + 0.65f, 1.0f);
+                break;
+        }
+    }
+}
+
+
+void FloorSpikes_SetupWaitForSwitch(FloorSpikes* this, PlayState* play) {
+    if (Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+        this->actionFunc = FloorSpikes_WaitForSwitchOn;
+    } else {
+        this->actionFunc = FloorSpikes_WaitForSwitchOff;
+    }
+}
+
+void FloorSpikes_WaitForSwitchOn(FloorSpikes* this, PlayState* play) {
+    if (!Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+        if (this->spikesActive) {
+            FloorSpikes_SetupRetract(this, play);
+        } else {
+            FloorSpikes_SetupExtend(this, play);
+        }
+    }
+}
+
+void FloorSpikes_WaitForSwitchOff(FloorSpikes* this, PlayState* play) {
+    if (Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+        if (this->spikesActive) {
+            FloorSpikes_SetupRetract(this, play);
+        } else {
+            FloorSpikes_SetupExtend(this, play);
+        }
+    }
+}
+
+void FloorSpikes_SetupExtend(FloorSpikes* this, PlayState* play) {
+    this->timer = SPIKE_RETRACT_TIME;
+    this->spikesActive = true;
+    this->actionFunc = FloorSpikes_Extend;
+}
+
+void FloorSpikes_Extend(FloorSpikes* this, PlayState* play) {
+    if (DECR(this->timer) == 0) {
+        this->spikeProgress = 1.0f;
+
+        if (SPIKE_TYPE(this) <= SPIKE_TYPE_CYCLIC) {
+            this->actionFunc = FloorSpikes_DoNothing;
+        } else {
+            FloorSpikes_SetupWaitForSwitch(this, play);
+        }
+    } else {
+        Actor_PlaySfx(&this->dyna.actor, NA_SE_IT_SWORD_PICKOUT - SFX_FLAG);
+        this->spikeProgress = CLAMP_MIN(this->spikeProgress - 0.55f, 0.0f);
+    }
+}
+
+void FloorSpikes_SetupRetract(FloorSpikes* this, PlayState* play) {
+    this->timer = SPIKE_RETRACT_TIME;
+    this->actionFunc = FloorSpikes_Retract;
+}
+
+void FloorSpikes_Retract(FloorSpikes* this, PlayState* play) {
+
+    if (DECR(this->timer) == 0) {
+        this->spikesActive = false;
+        this->spikeProgress = 0.0f;
+
+        if (SPIKE_TYPE(this) <= SPIKE_TYPE_CYCLIC) {
+            this->dyna.actor.update = FloorSpikes_UpdateRetracted;
+            this->actionFunc = FloorSpikes_DoNothing;
+        } else {
+            FloorSpikes_SetupWaitForSwitch(this, play);
+        }
+    } else {
+        Actor_PlaySfx(&this->dyna.actor, NA_SE_IT_SWORD_PICKOUT - SFX_FLAG);
+        this->spikeProgress = CLAMP_MIN(this->spikeProgress - 0.55f, 0.0f);
+    }
+}
+
+void FloorSpikes_DoNothing(FloorSpikes* this, PlayState* play) {
+
+}
diff --git a/src/overlays/actors/hm_pack/ovl_Floor_Spikes/floor_spikes.h b/src/overlays/actors/hm_pack/ovl_Floor_Spikes/floor_spikes.h
new file mode 100644
index 000000000..e9ff4b107
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Floor_Spikes/floor_spikes.h
@@ -0,0 +1,24 @@
+#ifndef Z_FLOOR_SPIKES_H
+#define Z_FLOOR_SPIKES_H
+
+#include "ultra64.h"
+#include "global.h"
+
+struct FloorSpikes;
+
+typedef void (*FloorSpikesActionFunc)(struct FloorSpikes*, PlayState*);
+
+typedef struct FloorSpikes {
+    DynaPolyActor dyna;
+    FloorSpikesActionFunc actionFunc;
+    ColliderQuad playerCollider;
+    ColliderQuad othersCollider;
+    f32 spikeProgress;
+    u8 timer;
+    u8 useSwitchFlag;
+    u8 useVoidOut;
+    u8 spikesActive;
+    u8 cyclicState;
+} FloorSpikes;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Hammer_Peg/hammer_peg.c b/src/overlays/actors/hm_pack/ovl_Hammer_Peg/hammer_peg.c
new file mode 100644
index 000000000..26b5930bf
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Hammer_Peg/hammer_peg.c
@@ -0,0 +1,199 @@
+/*
+ * File: hammer_peg.c
+ * Overlay: ovl_Hammer_Peg
+ * Description: Hammer Peg actor from the Hylian Modding actor pack.
+ *  * Params: 00YY
+ *      -- YY: Switch flag (0x00 thru 0x3F)
+ */
+
+#include "hammer_peg.h"
+#include "assets_hm_pack/objects/object_hammer_peg/object_hammer_peg.h"
+#include "overlays/effects/ovl_Effect_Ss_Kakera/z_eff_ss_kakera.h"
+
+#define FLAGS (ACTOR_FLAG_4 | ACTOR_FLAG_5)
+
+void HammerPeg_Init(Actor* thisx, PlayState* play);
+void HammerPeg_Destroy(Actor* thisx, PlayState* play);
+void HammerPeg_Update(Actor* thisx, PlayState* play);
+void HammerPeg_Draw(Actor* thisx, PlayState* play);
+
+void HammerPeg_IdleUp(HammerPeg* this, PlayState* play);
+void HammerPeg_Lowering(HammerPeg* this, PlayState* play);
+void HammerPeg_IdleDown(HammerPeg* this, PlayState* play);
+
+const ActorInit Hammer_Peg_InitVars = {
+    ACTOR_HAMMER_PEG,
+    ACTORCAT_BG,
+    FLAGS,
+    OBJECT_HAMMER_PEG,
+    sizeof(HammerPeg),
+    (ActorFunc)HammerPeg_Init,
+    (ActorFunc)HammerPeg_Destroy,
+    (ActorFunc)HammerPeg_Update,
+    (ActorFunc)HammerPeg_Draw,
+};
+
+static ColliderCylinderInit sCylinderBaseInit = {
+    {
+        COLTYPE_TREE,
+        AT_NONE,
+        AC_ON | AC_HARD | AC_TYPE_PLAYER,
+        OC1_ON | OC1_TYPE_ALL,
+        OC2_TYPE_1,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+        { 0x00100000, 0x00, 0x00 },
+        { 0xEE01FFFF, 0x00, 0x00 },
+        TOUCH_NONE,
+        BUMP_ON,
+        OCELEM_ON,
+    },
+    { 20, 60, 0, { 0, 0, 0 } },
+};
+
+static ColliderCylinderInit sCylinderTopInit = {
+    {
+        COLTYPE_TREE,
+        AT_NONE,
+        AC_ON | AC_TYPE_PLAYER,
+        OC1_ON | OC1_TYPE_ALL,
+        OC2_TYPE_1,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+        { 0x00000000, 0x00, 0x00 },
+        { DMG_HAMMER, 0x00, 0x00 },
+        TOUCH_NONE,
+        BUMP_ON | BUMP_NO_AT_INFO | BUMP_NO_DAMAGE | BUMP_NO_SWORD_SFX | BUMP_NO_HITMARK,
+        OCELEM_NONE,
+    },
+    { 35, 20, 30, { 0, 0, 0 } },
+};
+
+#define HAMMER_PEG_GET_SWITCH_FLAG(this) ((this)->dyna.actor.params & 0x3F)
+
+void HammerPeg_Init(Actor* thisx, PlayState* play) {
+    HammerPeg* this = (HammerPeg*)thisx;
+    CollisionHeader* colHeader = NULL;
+    u8 pegDown = Flags_GetSwitch(play, HAMMER_PEG_GET_SWITCH_FLAG(this));
+
+    Actor_SetScale(&this->dyna.actor, 0.01f);
+
+    this->dyna.actor.colChkInfo.mass = MASS_HEAVY;
+
+    DynaPolyActor_Init(&this->dyna, 0);
+    CollisionHeader_GetVirtual(&gHammerPegBaseDL_collisionHeader, &colHeader);
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeader);
+
+    Collider_InitCylinder(play, &this->colliderBase);
+    Collider_InitCylinder(play, &this->colliderTop);
+
+    Collider_SetCylinder(play, &this->colliderBase, &this->dyna.actor, &sCylinderBaseInit);
+    Collider_SetCylinder(play, &this->colliderTop, &this->dyna.actor, &sCylinderTopInit);
+
+    if (!pegDown) {
+        this->percentUp = 100;
+        this->actionFunc = HammerPeg_IdleUp;
+    } else {
+        this->percentUp = 0;
+        this->actionFunc = HammerPeg_IdleDown;
+    }
+}
+
+void HammerPeg_Destroy(Actor* thisx, PlayState* play) {
+    HammerPeg* this = (HammerPeg*)thisx;
+
+    DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+}
+
+// MAIN
+
+void HammerPeg_SpawnParticles(HammerPeg* this, PlayState* play) {
+    static Vec3f velocity = { 0.0f, 0.0f, 0.0f };
+    static Color_RGBA8 sPrimColor = { 200, 200, 200, 255 };
+    static Color_RGBA8 sEnvColor = { 100, 100, 100, 255 };
+    static Vec3f accel = { 0.0f, 0.3f, 0.0f };
+    s16 scale;
+    Vec3f* thisPos;
+    Vec3f pos;
+    s32 i;
+
+    thisPos = &this->dyna.actor.world.pos;
+
+    for (i = 6; i >= 0; i--) {
+        pos.x = thisPos->x + ((Rand_ZeroOne() - 0.5f) * 65.0f);
+        pos.y = thisPos->y + 5.0f;
+        pos.z = thisPos->z + ((Rand_ZeroOne() - 0.5f) * 65.0f);
+
+        scale = (s16)((Rand_ZeroOne() * 10) * 0.02f) + 10;
+        EffectSsDust_Spawn(play, 4, &pos, &velocity, &accel, &sPrimColor, &sEnvColor, scale, 80, 8, 0);
+    }
+}
+
+void HammerPeg_IdleUp(HammerPeg* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    if (this->colliderTop.base.acFlags & AC_HIT && !Player_InCsMode(play)) {
+        if (player->meleeWeaponAnimation != PLAYER_MWA_STAB_1H &&
+            this->colliderTop.info.acHitInfo->toucher.dmgFlags & DMG_HAMMER) {
+            this->colliderTop.base.acFlags &= ~AC_HIT;
+
+            Actor_PlaySfx(&this->dyna.actor, NA_SE_EV_WOOD_BOUND);
+            HammerPeg_SpawnParticles(this, play);
+            this->actionFunc = HammerPeg_Lowering;
+        }
+    }
+}
+
+void HammerPeg_Lowering(HammerPeg* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    if (this->percentUp <= 0) {
+        Flags_SetSwitch(play, HAMMER_PEG_GET_SWITCH_FLAG(this));
+        this->percentUp = 0;
+        this->actionFunc = HammerPeg_IdleDown;
+        return;
+    }
+
+    this->percentUp -= 30;
+}
+
+void HammerPeg_IdleDown(HammerPeg* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+}
+
+void HammerPeg_Update(Actor* thisx, PlayState* play) {
+    HammerPeg* this = (HammerPeg*)thisx;
+
+    this->actionFunc(this, play);
+
+    if (this->percentUp != 0) {
+        Collider_UpdateCylinder(&this->dyna.actor, &this->colliderTop);
+        Collider_UpdateCylinder(&this->dyna.actor, &this->colliderBase);
+
+        if (this->dyna.actor.xzDistToPlayer < 600.0f) {
+            CollisionCheck_SetOC(play, &play->colChkCtx, &this->colliderBase.base);
+            CollisionCheck_SetAC(play, &play->colChkCtx, &this->colliderBase.base);
+            CollisionCheck_SetAC(play, &play->colChkCtx, &this->colliderTop.base);
+        }
+    }
+}
+
+void HammerPeg_Draw(Actor* thisx, PlayState* play) {
+    HammerPeg* this = (HammerPeg*)thisx;
+
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    Gfx_DrawDListOpa(play, gHammerPegBaseDL);
+
+    Matrix_Translate(0.0f, (-2100.0f / 100.0f) * (100 - this->percentUp), 0.0f, MTXMODE_APPLY);
+    Matrix_Scale(1.0f, ((0.25f / 100.0f) * this->percentUp) + 0.75f, 1.0f, MTXMODE_APPLY);
+    gSPMatrix(POLY_OPA_DISP++, Matrix_NewMtx(play->state.gfxCtx, __FILE__, __LINE__),
+              G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+    Gfx_DrawDListOpa(play, gHammerPegTopDL);
+
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+}
\ No newline at end of file
diff --git a/src/overlays/actors/hm_pack/ovl_Hammer_Peg/hammer_peg.h b/src/overlays/actors/hm_pack/ovl_Hammer_Peg/hammer_peg.h
new file mode 100644
index 000000000..5fe6ff284
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Hammer_Peg/hammer_peg.h
@@ -0,0 +1,21 @@
+#ifndef Z_HAMMER_PEG_H
+#define Z_HAMMER_PEG_H
+
+#include "ultra64.h"
+#include "global.h"
+
+#include "assets_hm_pack/objects/object_hammer_peg/object_hammer_peg.h"
+
+struct HammerPeg;
+
+typedef void (*HammerPegActionFunc)(struct HammerPeg*, PlayState*);
+
+typedef struct HammerPeg {
+    DynaPolyActor dyna;
+    ColliderCylinder colliderBase;
+    ColliderCylinder colliderTop;
+    HammerPegActionFunc actionFunc;
+    s32 percentUp;
+} HammerPeg;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/invisible_trigger_switch.c b/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/invisible_trigger_switch.c
new file mode 100644
index 000000000..9e2d06f44
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/invisible_trigger_switch.c
@@ -0,0 +1,63 @@
+/*
+ * File: invisible_trigger_switch.c
+ * Overlay: ovl_Invisible_Trigger_Switch
+ * Description: Sets a switch flag based on proximity to Link, from the Hylian Modding actor pack.
+ * Params: XXYY
+ *      -- XX: Scale the radius used in the sphere to detect Link
+ *      -- YY: Switch flag (0x00 thru 0x3F)
+ */
+
+#include "invisible_trigger_switch.h"
+#include "assets/objects/gameplay_keep/gameplay_keep.h"
+
+#define FLAGS (0)
+#define SWITCH_FLAG(this) (this->actor.params & 0x3F)
+#define RADIUS_SCALE(this) ((this->actor.params >> 8) & 0xFF)
+
+void InvisibleTriggerSwitch_Init(Actor* thisx, PlayState* play);
+void InvisibleTriggerSwitch_Destroy(Actor* thisx, PlayState* play);
+void InvisibleTriggerSwitch_Update(Actor* thisx, PlayState* play);
+
+void InvisibleTriggerSwitch_WaitForPlayer(InvisibleTriggerSwitch* this, PlayState* play);
+
+const ActorInit Invisible_Trigger_Switch_InitVars = {
+    ACTOR_INVISIBLE_TRIGGER_SWITCH,
+    ACTORCAT_BG,
+    FLAGS,
+    OBJECT_GAMEPLAY_KEEP,
+    sizeof(InvisibleTriggerSwitch),
+    (ActorFunc)InvisibleTriggerSwitch_Init,
+    (ActorFunc)InvisibleTriggerSwitch_Destroy,
+    (ActorFunc)InvisibleTriggerSwitch_Update,
+    NULL,
+};
+
+
+void InvisibleTriggerSwitch_Init(Actor* thisx, PlayState* play) {
+    InvisibleTriggerSwitch* this = (InvisibleTriggerSwitch*)thisx;
+
+    this->detectionRadius = (RADIUS_SCALE(this) + 1) * 50.0f;
+    this->actionFunc = InvisibleTriggerSwitch_WaitForPlayer;
+
+    if (Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+        Actor_Kill(&this->actor);
+    }
+}
+
+void InvisibleTriggerSwitch_Destroy(Actor* thisx, PlayState* play) {
+    InvisibleTriggerSwitch* this = (InvisibleTriggerSwitch*)thisx;
+}
+
+void InvisibleTriggerSwitch_Update(Actor* thisx, PlayState* play) {
+    InvisibleTriggerSwitch* this = (InvisibleTriggerSwitch*)thisx;
+
+    this->actionFunc(this, play);
+}
+
+void InvisibleTriggerSwitch_WaitForPlayer(InvisibleTriggerSwitch* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    if (Actor_WorldDistXYZToActor(&this->actor, &player->actor) < this->detectionRadius) {
+        Flags_SetSwitch(play, SWITCH_FLAG(this));
+        Actor_Kill(&this->actor);
+    }
+}
diff --git a/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/invisible_trigger_switch.h b/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/invisible_trigger_switch.h
new file mode 100644
index 000000000..9dd8cde9c
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Invisible_Trigger_Switch/invisible_trigger_switch.h
@@ -0,0 +1,17 @@
+#ifndef INVISIBLE_TRIGGER_SWITCH_H
+#define INVISIBLE_TRIGGER_SWITCH_H
+
+#include "ultra64.h"
+#include "global.h"
+
+struct InvisibleTriggerSwitch;
+
+typedef void (*InvisibleTriggerSwitchActionFunc)(struct InvisibleTriggerSwitch*, PlayState*);
+
+typedef struct InvisibleTriggerSwitch {
+    Actor actor;
+    InvisibleTriggerSwitchActionFunc actionFunc;
+    f32 detectionRadius;
+} InvisibleTriggerSwitch;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/jumptoggle_platform.c b/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/jumptoggle_platform.c
new file mode 100644
index 000000000..57f3d258e
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/jumptoggle_platform.c
@@ -0,0 +1,156 @@
+/*
+ * File: z_jumptoggle_platform.c
+ * Overlay: ovl_Jumptoggle_Platform
+ * Description: A platform that toggles every time the player leaves the ground, from the Hylian Modding actor pack.
+ */
+
+#include "jumptoggle_platform.h"
+#include "assets_hm_pack/objects/object_jumptoggle_platform/object_jumptoggle_platform.h"
+
+#define FLAGS (ACTOR_FLAG_4 | ACTOR_FLAG_5)
+
+void JumptogglePlatform_Init(Actor* thisx, PlayState* play);
+void JumptogglePlatform_Destroy(Actor* thisx, PlayState* play);
+void JumptogglePlatform_Update(Actor* thisx, PlayState* play);
+void JumptogglePlatform_Draw(Actor* thisx, PlayState* play);
+
+void JumptogglePlatform_RotateToTarget(JumptogglePlatform* this, PlayState* play);
+
+void JumptogglePlatform_CheckForJump(JumptogglePlatform* this, PlayState* play);
+void JumptogglePlatform_Border(JumptogglePlatform* this, PlayState* play);
+
+const ActorInit Jumptoggle_Platform_InitVars = {
+    ACTOR_JUMPTOGGLE_PLATFORM,
+    ACTORCAT_BG,
+    FLAGS,
+    OBJECT_JUMPTOGGLE_PLATFORM,
+    sizeof(JumptogglePlatform),
+    (ActorFunc)JumptogglePlatform_Init,
+    (ActorFunc)JumptogglePlatform_Destroy,
+    (ActorFunc)JumptogglePlatform_Update,
+    (ActorFunc)JumptogglePlatform_Draw,
+};
+
+static InitChainEntry sInitChain[] = {
+    ICHAIN_VEC3F_DIV1000(scale, 100, ICHAIN_STOP),
+};
+
+static f32 sSfxVol = 0.5f;
+
+void JumptogglePlatform_Observer_Update(Actor* thisx, PlayState* play) {
+}
+
+
+void JumptogglePlatform_Init(Actor* thisx, PlayState* play) {
+    JumptogglePlatform* this = (JumptogglePlatform*)thisx;
+    CollisionHeader* colHeader = NULL;
+    Actor_ProcessInitChain(thisx, sInitChain);
+
+    // start assuming player is in the air since the toggle happens when
+    // leaving the ground - prevents instantly toggling when the player is
+    // entering the room in the water or falling etc
+    this->prevPlayerOnGround = false;
+    
+    if (GET_JUMPTOGGLE_TYPE(this) == JUMPTOGGLE_TYPE_BORDER) {
+        this->actionFunc = JumptogglePlatform_Border;
+        return;
+    }
+
+    CollisionHeader_GetVirtual(&gJumpTogglePlatformCol_collisionHeader, &colHeader);
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeader);
+
+
+    Actor_SpawnAsChild(&play->actorCtx, &this->dyna.actor, play, ACTOR_JUMPTOGGLE_PLATFORM,
+        this->dyna.actor.home.pos.x, this->dyna.actor.home.pos.y, this->dyna.actor.home.pos.z,
+        this->dyna.actor.home.rot.x, this->dyna.actor.home.rot.y, this->dyna.actor.home.rot.z,
+        JUMPTOGGLE_TYPE_BORDER
+    );
+
+    if (GET_JUMPTOGGLE_TYPE(this) == JUMPTOGGLE_TYPE_START_RED) {
+        this->currentRot = this->targetRot = this->dyna.actor.home.rot.z;
+    } else {
+        this->currentRot = this->targetRot = this->dyna.actor.home.rot.z + 0x7FFF;
+    }
+
+    this->actionFunc = JumptogglePlatform_RotateToTarget;
+}
+
+void JumptogglePlatform_Destroy(Actor* thisx, PlayState* play) {
+    JumptogglePlatform* this = (JumptogglePlatform*)thisx;
+
+    if (GET_JUMPTOGGLE_TYPE(this) != JUMPTOGGLE_TYPE_BORDER) {
+        DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+    }
+}
+
+void JumptogglePlatform_Update(Actor* thisx, PlayState* play) {
+    JumptogglePlatform* this = (JumptogglePlatform*)thisx;
+
+    this->actionFunc(this, play);
+}
+
+void JumptogglePlatform_Draw(Actor* thisx, PlayState* play) {
+    JumptogglePlatform* this = (JumptogglePlatform*)thisx;
+
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    if (GET_JUMPTOGGLE_TYPE(this) == JUMPTOGGLE_TYPE_BORDER) {
+        if (this->currentRot == this->dyna.actor.home.rot.z) {
+            gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255, 68, 69, 255);
+        } else {
+            gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 85, 92, 255, 255);
+        }
+
+        gSPSegment(POLY_XLU_DISP++, 0x08, Gfx_TexScroll(play->state.gfxCtx, play->gameplayFrames % 128, 0, 32, 64));
+        Gfx_DrawDListXlu(play, gJumpToggleBorderDL);
+    } else {
+        Gfx_DrawDListOpa(play, gJumpTogglePlatformDL);
+    }
+
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+}
+
+void JumptogglePlatform_RotateToTarget(JumptogglePlatform* this, PlayState* play) {
+    JumptogglePlatform_CheckForJump(this, play);
+
+    bool equalBeforeStep = this->currentRot == this->targetRot;
+    Math_ApproachS(&this->currentRot, this->targetRot, 1, 0x800);
+    bool equalAfterStep  = this->currentRot == this->targetRot;
+
+    if (!equalBeforeStep && equalAfterStep) {
+        if (Actor_WorldDistXYZToActor(&this->dyna.actor, &GET_PLAYER(play)->actor) < 1000.0f) {
+            Audio_PlaySfxGeneral(NA_SE_EV_BLOCK_BOUND, &this->dyna.actor.projectedPos, 4,
+                &gSfxDefaultFreqAndVolScale, &sSfxVol, &gSfxDefaultReverb);
+        }
+    }
+
+    this->dyna.actor.world.rot.z = this->dyna.actor.shape.rot.z = this->currentRot;
+}
+
+void JumptogglePlatform_CheckForJump(JumptogglePlatform* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    bool playerOnGround = player->actor.bgCheckFlags & BGCHECKFLAG_GROUND;
+
+    if ((this->prevPlayerOnGround) && (!playerOnGround)) {
+        if (this->targetRot == this->dyna.actor.home.rot.z) {
+            this->targetRot += 0x7FFF;
+        } else {
+            this->targetRot = this->dyna.actor.home.rot.z;
+        }
+        
+        if (Actor_WorldDistXYZToActor(&this->dyna.actor, &GET_PLAYER(play)->actor) < 1000.0f) {
+            Audio_PlaySfxGeneral(NA_SE_EV_BOMB_BOUND, &this->dyna.actor.projectedPos, 4,
+                &gSfxDefaultFreqAndVolScale, &sSfxVol, &gSfxDefaultReverb);
+        }
+    }
+
+    this->prevPlayerOnGround = playerOnGround;
+}
+
+void JumptogglePlatform_Border(JumptogglePlatform* this, PlayState* play) {
+    JumptogglePlatform* parent = (JumptogglePlatform*)this->dyna.actor.parent;
+    if (parent != NULL) {
+        this->currentRot = parent->targetRot;
+    }
+}
diff --git a/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/jumptoggle_platform.h b/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/jumptoggle_platform.h
new file mode 100644
index 000000000..fff8f353b
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Jumptoggle_Platform/jumptoggle_platform.h
@@ -0,0 +1,27 @@
+#ifndef JUMPTOGGLE_PLATFORM_H
+#define JUMPTOGGLE_PLATFORM_H
+
+#include "ultra64.h"
+#include "global.h"
+
+#define GET_JUMPTOGGLE_TYPE(this) (this->dyna.actor.params)
+
+typedef enum {
+    JUMPTOGGLE_TYPE_START_RED = 0x0000,
+    JUMPTOGGLE_TYPE_START_BLUE = 0x0001,
+    JUMPTOGGLE_TYPE_BORDER = 0x0002
+} JumpTogglePlatformType;
+
+struct JumptogglePlatform;
+
+typedef void (*JumptogglePlatformActionFunc)(struct JumptogglePlatform*, PlayState*);
+
+typedef struct JumptogglePlatform {
+    DynaPolyActor dyna;
+    JumptogglePlatformActionFunc actionFunc;
+    u8 prevPlayerOnGround;
+    s16 currentRot;
+    s16 targetRot;
+} JumptogglePlatform;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Ladder/ladder.c b/src/overlays/actors/hm_pack/ovl_Ladder/ladder.c
new file mode 100644
index 000000000..21894d554
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Ladder/ladder.c
@@ -0,0 +1,347 @@
+/*
+ * File: ladder.c
+ * Overlay: ovl_Ladder
+ * Description: Ladder actor from the Hylian Modding actor pack.
+ *  * Params: XYZZ
+ *      -- X: Model
+ *          -- 0: LADDER_SMALL_WOOD
+ *          -- 1: LADDER_MEDIUM_WOOD
+ *          -- 2: LADDER_LARGE_WOOD
+ *          -- 3: LADDER_SMALL_METAL
+ *          -- 4: LADDER_MEDIUM_METAL
+ *          -- 5: LADDER_LARGE_METAL
+ * 
+ *          -- Wooden ladders can be hookshotted
+ *          -- Small ladders have a climbing distance of 120 units
+ *          -- Medium ladders have a climbing distance of 195 units
+ *          -- Large ladders have a climbing distance of 270 units
+ * 
+ *      -- Y: Type
+ *          -- 0: LADDER_FADING
+ *              -- Fades into existence when switch flag is set, place actor on floor against a wall
+ * 
+ *          -- 1: LADDER_FALLING
+ *              -- Falls down into position when shot with arrow or slingshot, place actor against a wall, then move
+ *                 into air desired distance
+ * 
+ *      -- ZZ: Switch flag (0x00 thru 0x3F)
+ */
+
+#include "ladder.h"
+#include "assets_hm_pack/objects/object_ladder/object_ladder.h"
+
+#define FLAGS (ACTOR_FLAG_4 | ACTOR_FLAG_5)
+
+void Ladder_Init(Actor* thisx, PlayState* play);
+void Ladder_Destroy(Actor* thisx, PlayState* play);
+void Ladder_Update(Actor* thisx, PlayState* play);
+void Ladder_Draw(Actor* thisx, PlayState* play);
+
+void Ladder_ClipToGround(Ladder* this, PlayState* play);
+
+void Ladder_IdleInvisible(Ladder* this, PlayState* play);
+void Ladder_FadeIn(Ladder* this, PlayState* play);
+void Ladder_IdleNotFallen(Ladder* this, PlayState* play);
+void Ladder_Falling(Ladder* this, PlayState* play);
+void Ladder_DoNothing(Ladder* this, PlayState* play);
+
+const ActorInit Ladder_InitVars = {
+    ACTOR_LADDER,
+    ACTORCAT_BG,
+    FLAGS,
+    OBJECT_LADDER,
+    sizeof(Ladder),
+    (ActorFunc)Ladder_Init,
+    (ActorFunc)Ladder_Destroy,
+    (ActorFunc)Ladder_Update,
+    (ActorFunc)Ladder_Draw,
+};
+
+static ColliderCylinderInit sCylinderInit = {
+    {
+        COLTYPE_TREE,
+        AT_NONE,
+        AC_ON | AC_TYPE_PLAYER,
+        OC1_ON | OC1_TYPE_ALL,
+        OC2_TYPE_1,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+        { 0x00000000, 0x00, 0x00 },
+        { DMG_ARROW | DMG_SLINGSHOT, 0x00, 0x00 },
+        TOUCH_NONE,
+        BUMP_ON | BUMP_NO_AT_INFO | BUMP_NO_DAMAGE | BUMP_NO_SWORD_SFX | BUMP_NO_HITMARK,
+        OCELEM_NONE,
+    },
+    { 20, 0, 0, { 0, 0, 0 } },
+};
+
+#define LADDER_GET_SWITCH_FLAG(this) ((this)->dyna.actor.params & 0x003F)
+#define LADDER_GET_MODEL(this) (((this)->dyna.actor.params >> 12) & 0xF)
+#define LADDER_GET_TYPE(this) (((this)->dyna.actor.params >> 8) & 0xF)
+
+#define LADDER_FADE_IN_TIMER_MAX (2 * 20)
+
+void Ladder_Init(Actor* thisx, PlayState* play) {
+    Ladder* this = (Ladder*)thisx;
+    CollisionHeader* colHeader = NULL;
+    this->isActivated = Flags_GetSwitch(play, LADDER_GET_SWITCH_FLAG(this));
+
+    Actor_SetScale(&this->dyna.actor, 0.01f);
+    this->dyna.actor.gravity = 0.0f;
+
+    this->model = LADDER_GET_MODEL(this);
+    this->type = LADDER_GET_TYPE(this);
+
+    this->dyna.actor.colChkInfo.mass = MASS_HEAVY;
+    DynaPolyActor_Init(&this->dyna, 0);
+
+    switch (this->model) {
+        case LADDER_SMALL_WOOD:
+            sCylinderInit.dim.height = 140;
+            CollisionHeader_GetVirtual(&gLadderSmallCol_collisionHeader, &colHeader);
+            break;
+        case LADDER_MEDIUM_WOOD:
+            sCylinderInit.dim.height = 210;
+            CollisionHeader_GetVirtual(&gLadderMediumCol_collisionHeader, &colHeader);
+            break;
+        case LADDER_LARGE_WOOD:
+            sCylinderInit.dim.height = 290;
+            CollisionHeader_GetVirtual(&gLadderLargeCol_collisionHeader, &colHeader);
+            break;
+        case LADDER_SMALL_METAL:
+            sCylinderInit.dim.height = 140;
+            CollisionHeader_GetVirtual(&gLadderMetalSmallCol_collisionHeader, &colHeader);
+            break;
+        case LADDER_MEDIUM_METAL:
+            sCylinderInit.dim.height = 210;
+            CollisionHeader_GetVirtual(&gLadderMetalMediumCol_collisionHeader, &colHeader);
+            break;
+        case LADDER_LARGE_METAL:
+            sCylinderInit.dim.height = 290;
+            CollisionHeader_GetVirtual(&gLadderMetalLargeCol_collisionHeader, &colHeader);
+            break;
+        default:
+            break;
+    }
+
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeader);
+
+    if (this->isActivated) {
+        if (this->type == LADDER_FALLING) {
+            Ladder_ClipToGround(this, play);
+        }
+        this->actionFunc = Ladder_DoNothing;
+    } else {
+        switch (this->type) {
+            case LADDER_FALLING:
+                Collider_InitCylinder(play, &this->collider);
+                Collider_SetCylinder(play, &this->collider, &this->dyna.actor, &sCylinderInit);
+                // Move the ladder forward a bit so that, when falling, it doesn't hit the ledge to climb to
+                this->dyna.actor.world.pos.x -= 1.0f;
+                this->actionFunc = Ladder_IdleNotFallen;
+                break;
+            case LADDER_FADING:
+                DynaPoly_DisableCollision(play, &play->colCtx.dyna, this->dyna.bgId);
+                this->timer = LADDER_FADE_IN_TIMER_MAX;
+                this->actionFunc = Ladder_IdleInvisible;
+                break;
+        }
+    }
+}
+
+void Ladder_Destroy(Actor* thisx, PlayState* play) {
+    Ladder* this = (Ladder*)thisx;
+
+    DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+}
+
+// HELPERS
+
+void Ladder_ClipToGround(Ladder* this, PlayState* play) {
+    f32 newY;
+    CollisionPoly* poly;
+    s32 bgId;
+    Vec3f checkPos;
+
+    checkPos = this->dyna.actor.world.pos;
+    checkPos.x -= 1.0f;
+    checkPos.y += 1.0f;
+    newY = BgCheck_EntityRaycastDown4(&play->colCtx, &poly, &bgId, &this->dyna.actor, &checkPos);
+    if (newY != BGCHECK_Y_MIN) {
+        this->dyna.actor.world.pos.y = newY;
+    }
+}
+
+// MAIN
+
+void Ladder_DoNothing(Ladder* this, PlayState* play) {
+}
+
+void Ladder_IdleInvisible(Ladder* this, PlayState* play) {
+    if (Flags_GetSwitch(play, LADDER_GET_SWITCH_FLAG(this))) {
+        // Give some time for the OnePointCutscene to switch its focus to the ladder
+        this->timer += 30;
+        this->dyna.actor.focus.pos.y += 50.0f;
+        OnePointCutscene_Attention(play, &this->dyna.actor);
+        this->actionFunc = Ladder_FadeIn;
+    }
+}
+
+void Ladder_FadeIn(Ladder* this, PlayState* play) {
+    if (this->timer <= LADDER_FADE_IN_TIMER_MAX) {
+        Actor_PlaySfx(&this->dyna.actor, NA_SE_EV_GOTO_HEAVEN - SFX_FLAG);
+    }
+    if (DECR(this->timer) == 0) {
+        this->isActivated = true;
+        DynaPoly_EnableCollision(play, &play->colCtx.dyna, this->dyna.bgId);
+        this->actionFunc = Ladder_DoNothing;
+    }
+}
+
+void Ladder_IdleNotFallen(Ladder* this, PlayState* play) {
+    if (this->collider.base.acFlags & AC_HIT) {
+        this->collider.base.acFlags &= ~AC_HIT;
+
+        Flags_SetSwitch(play, LADDER_GET_SWITCH_FLAG(this));
+        this->isActivated = true;
+
+        this->dyna.actor.gravity = -1.0f;
+        if (this->model <= LADDER_LARGE_WOOD) {
+            Actor_PlaySfx(&this->dyna.actor, NA_SE_EV_WOODPLATE_BOUND);
+        } else {
+            Actor_PlaySfx(&this->dyna.actor, NA_SE_PL_LAND_HEAVYBOOTS);
+        }
+        this->actionFunc = Ladder_Falling;
+    }
+}
+
+#define LADDER_BOUNCE_MAX 2
+
+void Ladder_Falling(Ladder* this, PlayState* play) {
+    if (this->bounceCount >= LADDER_BOUNCE_MAX) {
+        this->actionFunc = Ladder_DoNothing;
+        return;
+    }
+
+    if (this->dyna.actor.bgCheckFlags & BGCHECKFLAG_GROUND_TOUCH) {
+        if (this->bounceCount == 0) {
+            this->dyna.actor.focus.pos = this->dyna.actor.world.pos;
+            this->dyna.actor.focus.pos.y += 50.0f;
+            OnePointCutscene_Attention(play, &this->dyna.actor);
+        }
+        this->bounceCount++;
+        this->dyna.actor.velocity.y = 4.0f * (LADDER_BOUNCE_MAX / this->bounceCount);
+        if (this->model <= LADDER_LARGE_WOOD) {
+            Actor_PlaySfx(&this->dyna.actor, NA_SE_EV_WOODPLATE_BOUND);
+        } else {
+            Actor_PlaySfx(&this->dyna.actor, NA_SE_PL_LAND_HEAVYBOOTS);
+        }
+    }
+}
+
+void Ladder_Update(Actor* thisx, PlayState* play) {
+    Ladder* this = (Ladder*)thisx;
+
+    this->actionFunc(this, play);
+
+    if (this->type == LADDER_FALLING) {
+        if (this->isActivated) {
+            Actor_MoveXZGravity(&this->dyna.actor);
+            Actor_UpdateBgCheckInfo(play, &this->dyna.actor, 0.0f, 0.0f, 0.0f,
+                                    UPDBGCHECKINFO_FLAG_2 | UPDBGCHECKINFO_FLAG_3 | UPDBGCHECKINFO_FLAG_4);
+        } else {
+            Collider_UpdateCylinder(&this->dyna.actor, &this->collider);
+            CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+        }
+    }
+}
+
+Gfx* Ladder_EmptyDList(GraphicsContext* gfxCtx) {
+    Gfx* dListHead;
+    Gfx* dList;
+
+    dList = Graph_Alloc(gfxCtx, sizeof(Gfx));
+
+    dListHead = dList;
+    gSPEndDisplayList(dListHead++);
+
+    return dList;
+}
+
+Gfx* Ladder_SetupTransparent(GraphicsContext* gfxCtx) {
+    Gfx* dList;
+    Gfx* dListHead;
+
+    dListHead = Graph_Alloc(gfxCtx, 2 * sizeof(Gfx));
+
+    dList = dListHead;
+    gDPSetRenderMode(dListHead++,
+                     AA_EN | Z_CMP | Z_UPD | IM_RD | CLR_ON_CVG | CVG_DST_WRAP | ZMODE_XLU | FORCE_BL |
+                         GBL_c1(G_BL_CLR_FOG, G_BL_A_SHADE, G_BL_CLR_IN, G_BL_1MA),
+                     AA_EN | Z_CMP | Z_UPD | IM_RD | CLR_ON_CVG | CVG_DST_WRAP | ZMODE_XLU | FORCE_BL |
+                         GBL_c2(G_BL_CLR_IN, G_BL_A_IN, G_BL_CLR_MEM, G_BL_1MA));
+    gSPEndDisplayList(dListHead++);
+
+    return dList;
+}
+
+Gfx* Ladder_SetupOpaque(GraphicsContext* gfxCtx) {
+    Gfx* dList;
+    Gfx* dListHead;
+
+    dListHead = Graph_Alloc(gfxCtx, 2 * sizeof(Gfx));
+
+    dList = dListHead;
+    gDPSetRenderMode(dListHead++, G_RM_FOG_SHADE_A, G_RM_AA_ZB_TEX_EDGE2);
+    gSPEndDisplayList(dListHead++);
+
+    return dList;
+}
+
+void Ladder_Draw(Actor* thisx, PlayState* play) {
+    Ladder* this = (Ladder*)thisx;
+    Gfx* dlist = NULL;
+
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    switch (this->model) {
+        case LADDER_SMALL_WOOD:
+            dlist = gLadderSmallDL;
+            break;
+        case LADDER_MEDIUM_WOOD:
+            dlist = gLadderMediumDL;
+            break;
+        case LADDER_LARGE_WOOD:
+            dlist = gLadderLargeDL;
+            break;
+        case LADDER_SMALL_METAL:
+            dlist = gLadderMetalSmallDL;
+            break;
+        case LADDER_MEDIUM_METAL:
+            dlist = gLadderMetalMediumDL;
+            break;
+        case LADDER_LARGE_METAL:
+            dlist = gLadderMetalLargeDL;
+            break;
+    }
+
+    if (this->type != LADDER_FADING || this->isActivated) {
+        gDPPipeSync(POLY_OPA_DISP++);
+        Gfx_SetupDL_25Opa(play->state.gfxCtx);
+        gDPSetPrimColor(POLY_OPA_DISP++, 0, 0, 255, 255, 255, 255);
+        gSPSegment(POLY_OPA_DISP++, 0x08, Ladder_SetupOpaque(play->state.gfxCtx));
+        Gfx_DrawDListOpa(play, dlist);
+    } else if (this->timer < LADDER_FADE_IN_TIMER_MAX) {
+        s16 alpha = (255 * LADDER_FADE_IN_TIMER_MAX - 255 * this->timer) / LADDER_FADE_IN_TIMER_MAX;
+
+        gDPPipeSync(POLY_XLU_DISP++);
+        Gfx_SetupDL_25Xlu(play->state.gfxCtx);
+        gSPSegment(POLY_XLU_DISP++, 0x08, Ladder_SetupTransparent(play->state.gfxCtx));
+        gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255, 255, 255, alpha);
+        Gfx_DrawDListXlu(play, dlist);
+    }
+
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+}
\ No newline at end of file
diff --git a/src/overlays/actors/hm_pack/ovl_Ladder/ladder.h b/src/overlays/actors/hm_pack/ovl_Ladder/ladder.h
new file mode 100644
index 000000000..71f01e8d6
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Ladder/ladder.h
@@ -0,0 +1,38 @@
+#ifndef Z_HAMMER_PEG_H
+#define Z_HAMMER_PEG_H
+
+#include "ultra64.h"
+#include "global.h"
+
+#include "assets_hm_pack/objects/object_ladder/object_ladder.h"
+
+struct Ladder;
+
+typedef void (*LadderActionFunc)(struct Ladder*, PlayState*);
+
+typedef enum {
+    LADDER_SMALL_WOOD,
+    LADDER_MEDIUM_WOOD,
+    LADDER_LARGE_WOOD,
+    LADDER_SMALL_METAL,
+    LADDER_MEDIUM_METAL,
+    LADDER_LARGE_METAL
+} LadderModel;
+
+typedef enum {
+    LADDER_FADING,
+    LADDER_FALLING
+} LadderType;
+
+typedef struct Ladder {
+    DynaPolyActor dyna;
+    LadderActionFunc actionFunc;
+    ColliderCylinder collider;
+    u8 isActivated;
+    u8 bounceCount;
+    u8 model;
+    u8 type;
+    s16 timer;
+} Ladder;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Metal_Crate/metal_crate.c b/src/overlays/actors/hm_pack/ovl_Metal_Crate/metal_crate.c
new file mode 100644
index 000000000..216a15cb7
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Metal_Crate/metal_crate.c
@@ -0,0 +1,189 @@
+/*
+ * File: z_metal_crate.c
+ * Overlay: ovl_Metal_Crate
+ * Description: Metal crate that can be broken with hammer, from the Hylian Modding actor pack.
+ * Params: Same format as Obj_Kibako2.
+ */
+
+#include "metal_crate.h"
+#include "assets_hm_pack/objects/object_metal_crate/object_metal_crate.h"
+#include "overlays/effects/ovl_Effect_Ss_Kakera/z_eff_ss_kakera.h"
+
+#define FLAGS (0)
+
+void MetalCrate_Init(Actor* thisx, PlayState* play);
+void MetalCrate_Destroy(Actor* thisx, PlayState* play);
+void MetalCrate_Update(Actor* thisx, PlayState* play);
+void MetalCrate_Draw(Actor* thisx, PlayState* play);
+
+void MetalCrate_DoNothing(MetalCrate* this, PlayState* play);
+
+const ActorInit Metal_Crate_InitVars = {
+    ACTOR_METAL_CRATE,
+    ACTORCAT_BG,
+    FLAGS,
+    OBJECT_METAL_CRATE,
+    sizeof(MetalCrate),
+    (ActorFunc)MetalCrate_Init,
+    (ActorFunc)MetalCrate_Destroy,
+    (ActorFunc)MetalCrate_Update,
+    (ActorFunc)MetalCrate_Draw,
+};
+
+static ColliderCylinderInit sCylinderInit = {
+    .base = {
+        .colType = COLTYPE_NONE,
+        .acFlags = AC_ON | AC_TYPE_PLAYER,
+        .ocFlags2 = OC2_TYPE_2,
+        .shape = COLSHAPE_CYLINDER,
+    },
+    .info = {
+        .bumper = { .dmgFlags = DMG_HAMMER },
+        .bumperFlags = BUMP_ON,
+    },
+    .dim = { .radius = 31, .height = 48 },
+};
+
+static InitChainEntry sInitChain[] = {
+    ICHAIN_VEC3F_DIV1000(scale, 100, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneForward, 3000, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneScale, 500, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneDownward, 1000, ICHAIN_STOP),
+};
+
+void MetalCrate_Init(Actor* thisx, PlayState* play) {
+    MetalCrate* this = (MetalCrate*)thisx;
+    CollisionHeader* colHeader = NULL;
+
+    Actor_ProcessInitChain(thisx, sInitChain);
+    DynaPolyActor_Init(&this->dyna, 0);
+
+    CollisionHeader_GetVirtual(&gMetalCrateCol_collisionHeader, &colHeader);
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeader);
+    Collider_InitCylinder(play, &this->collider);
+    Collider_SetCylinder(play, &this->collider, &this->dyna.actor, &sCylinderInit);
+    Collider_UpdateCylinder(&this->dyna.actor, &this->collider);
+
+    this->collectibleFlag = this->dyna.actor.home.rot.z & 0x3F;
+
+    this->dyna.actor.home.rot.z = 0;
+    this->dyna.actor.world.rot.z = 0;
+    this->dyna.actor.shape.rot.z = 0;
+    this->dyna.actor.world.rot.x = 0;
+    this->dyna.actor.shape.rot.x = 0;
+
+    this->actionFunc = MetalCrate_DoNothing;
+}
+
+void MetalCrate_Destroy(Actor* thisx, PlayState* play) {
+    MetalCrate* this = (MetalCrate*)thisx;
+
+    Collider_DestroyCylinder(play, &this->collider);
+    DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+}
+
+void MetalCrate_Update(Actor* thisx, PlayState* play) {
+    MetalCrate* this = (MetalCrate*)thisx;
+
+    this->actionFunc(this, play);
+}
+
+void MetalCrate_Draw(Actor* thisx, PlayState* play) {
+    MetalCrate* this = (MetalCrate*)thisx;
+
+    Gfx_DrawDListOpa(play, gMetalCrateDL);
+}
+
+void MetalCrate_Break(MetalCrate* this, PlayState* play) {
+    Vec3f* thisPos;
+    Vec3f pos;
+    Vec3f velocity;
+    s16 angle;
+    s32 i;
+
+    // spawn fragments
+    thisPos = &this->dyna.actor.world.pos;
+    for (i = 0, angle = 0; i < 0x8; i++, angle += 0x4E20) {
+        f32 sn = Math_SinS(angle);
+        f32 cs = Math_CosS(angle);
+        f32 temp_rand;
+        s32 phi_s0;
+
+        temp_rand = Rand_ZeroOne() * 30.0f;
+        pos.x = sn * temp_rand;
+        pos.y = (Rand_ZeroOne() * 10.0f) + 2.0f;
+        pos.z = cs * temp_rand;
+        velocity.x = pos.x * 0.2f;
+        velocity.y = (Rand_ZeroOne() * 10.0f) + 2.0f;
+        velocity.z = pos.z * 0.2f;
+        pos.x += thisPos->x;
+        pos.y += thisPos->y;
+        pos.z += thisPos->z;
+        temp_rand = Rand_ZeroOne();
+        if (temp_rand < 0.05f) {
+            phi_s0 = 0x60;
+        } else if (temp_rand < 0.7f) {
+            phi_s0 = 0x40;
+        } else {
+            phi_s0 = 0x20;
+        }
+        EffectSsKakera_Spawn(play, &pos, &velocity, &pos, -200, phi_s0, 28, 2, 0, (Rand_ZeroOne() * 30.0f) + 5.0f, 0, 0,
+                             70, KAKERA_COLOR_NONE, OBJECT_METAL_CRATE, gMetalCrateFragmentDL);
+    }
+
+    // spawn dust
+    static Color_RGBA8 sPrimColor = { 200, 200, 200, 255 };
+    static Color_RGBA8 sEnvColor = { 100, 100, 100, 255 };
+    Vec3f accel = { 0.0f, 0.3f, 0.0f };
+    s16 scale;
+    velocity.x = velocity.y = velocity.z = 0.0f;
+
+    for (i = 6; i >= 0; i--) {
+        pos.x = thisPos->x + ((Rand_ZeroOne() - 0.5f) * 90.0f);
+        pos.y = thisPos->y + ((Rand_ZeroOne() - 0.5f) * 90.0f);
+        pos.z = thisPos->z + ((Rand_ZeroOne() - 0.5f) * 90.0f);
+
+        scale = (s16)((Rand_ZeroOne() * 100) * 0.2f) + 100;
+        EffectSsDust_Spawn(play, 4, &pos, &velocity, &accel, &sPrimColor, &sEnvColor, scale, 160, 10, 0);
+    }
+
+}
+
+void MetalCrate_SpawnCollectible(MetalCrate* this, PlayState* play) {
+    s16 itemDropped;
+    s16 collectibleFlagTemp;
+
+    collectibleFlagTemp = this->collectibleFlag;
+    itemDropped = this->dyna.actor.home.rot.x;
+    if (itemDropped >= 0 && itemDropped < ITEM00_MAX) {
+        Item_DropCollectible(play, &this->dyna.actor.world.pos, itemDropped | (collectibleFlagTemp << 8));
+    }
+}
+
+void MetalCrate_SpawnContents(MetalCrate* this, PlayState* play) {
+    s16 params = this->dyna.actor.params;
+
+    if ((params & 0x8000) == 0) {
+        Actor_Spawn(&play->actorCtx, play, ACTOR_EN_SW, this->dyna.actor.world.pos.x, this->dyna.actor.world.pos.y,
+                    this->dyna.actor.world.pos.z, 0, this->dyna.actor.shape.rot.y, 0, params | 0x8000);
+    } else {
+        MetalCrate_SpawnCollectible(this, play);
+    }
+    Actor_Kill(&this->dyna.actor);
+}
+
+void MetalCrate_DoNothing(MetalCrate* this, PlayState* play) {
+    if (this->collider.base.acFlags & AC_HIT) {
+        this->collider.base.acFlags &= ~AC_HIT;
+        MetalCrate_Break(this, play);
+        SfxSource_PlaySfxAtFixedWorldPos(play, &this->dyna.actor.world.pos, 20, NA_SE_EV_WOODBOX_BREAK);
+        SfxSource_PlaySfxAtFixedWorldPos(play, &this->dyna.actor.world.pos, 20, NA_SE_EV_BRIDGE_CLOSE_STOP);
+
+        this->dyna.actor.flags |= ACTOR_FLAG_4;
+        DynaPoly_DisableCollision(play, &play->colCtx.dyna, this->dyna.bgId);
+        this->dyna.actor.draw = NULL;
+        this->actionFunc = MetalCrate_SpawnContents;
+    } else if (this->dyna.actor.xzDistToPlayer < 600.0f) {
+        CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+    }
+}
diff --git a/src/overlays/actors/hm_pack/ovl_Metal_Crate/metal_crate.h b/src/overlays/actors/hm_pack/ovl_Metal_Crate/metal_crate.h
new file mode 100644
index 000000000..98caa96a9
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Metal_Crate/metal_crate.h
@@ -0,0 +1,18 @@
+#ifndef Z_METAL_CRATE_H
+#define Z_METAL_CRATE_H
+
+#include "ultra64.h"
+#include "global.h"
+
+struct MetalCrate;
+
+typedef void (*MetalCrateActionFunc)(struct MetalCrate*, PlayState*);
+
+typedef struct MetalCrate {
+    DynaPolyActor dyna;
+    MetalCrateActionFunc actionFunc;
+    ColliderCylinder collider;
+    s16 collectibleFlag;
+} MetalCrate;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Obj_Fan/z_obj_fan.c b/src/overlays/actors/hm_pack/ovl_Obj_Fan/z_obj_fan.c
new file mode 100644
index 000000000..1da7db2c5
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Obj_Fan/z_obj_fan.c
@@ -0,0 +1,194 @@
+/*
+ * File: z_Obj_Fan.c
+ * Overlay: ovl_Obj_Fan
+ * Description: Spinning fan actor that can push the player and bombs, from the Hylian Modding actor pack.
+ * Params: XXYY
+ *      -- XX: Scale multiplier in 0.1f increments, 0 = 1.0f scale, 1 = 1.1f scale, etc.
+ *          -- 1.0f scale has a 114 unit push radius
+ *          -- Scale also affects how far the fan's push reaches
+ *      -- YY: Switch flag
+ *          -- A flag of 0xFF (-1) will make the fan always on
+ */
+
+#include "z_obj_fan.h"
+#include "assets_hm_pack/objects/object_fan/object_fan.h"
+#include "assets_hm_pack/objects/object_fan/gWindDL.h"
+
+#define FLAGS ACTOR_FLAG_4 | ACTOR_FLAG_5
+#define FAN_REACH 500.0f
+#define FAN_RADIUS 114.0f
+#define FAN_POWER 20.0f
+#define FAN_THRESHOLD 0.5f
+
+void ObjFan_Init(Actor* thisx, PlayState* play);
+void ObjFan_Destroy(Actor* thisx, PlayState* play);
+void ObjFan_Update(Actor* thisx, PlayState* play);
+void ObjFan_Draw(Actor* thisx, PlayState* play);
+
+ActorInit Obj_Fan_InitVars = {
+    ACTOR_OBJ_FAN,
+    ACTORCAT_PROP,
+    FLAGS,
+    OBJECT_FAN,
+    sizeof(ObjFan),
+    (ActorFunc)ObjFan_Init,
+    (ActorFunc)ObjFan_Destroy,
+    (ActorFunc)ObjFan_Update,
+    (ActorFunc)ObjFan_Draw,
+};
+
+void ObjFan_Init(Actor* thisx, PlayState* play) {
+    ObjFan* this = (ObjFan*)thisx;
+    this->scale = 1.0f + (((((u16)thisx->params) >> 8) & 0xFF) * 0.1f);
+    this->flag = (((u16)thisx->params) & 0xFF);
+
+    if (this->flag == -1 || Flags_GetSwitch(play, this->flag & 0x3F)) {
+        this->power = FAN_POWER;
+    }
+}
+
+void ObjFan_Destroy(Actor* thisx, PlayState* play) {
+    
+}
+
+void ObjFan_SetRelativePos(Actor* target, ObjFan* this) {
+    MtxF rotationMatrix;
+    Vec3f temp;
+
+    Math_Vec3f_Diff(&target->world.pos, &this->actor.world.pos, &temp);
+    SkinMatrix_SetRotateZYX(&rotationMatrix, -this->actor.world.rot.x, -this->actor.world.rot.y, -this->actor.world.rot.z);
+    SkinMatrix_Vec3fMtxFMultXYZ(&rotationMatrix, &temp, &this->relativeActorPos);
+}
+
+u8 ObjFan_ActorInRange(Actor* target, ObjFan* this) {
+    f32 dist;
+    f32 reach = (FAN_REACH * (this->power / FAN_POWER)) * this->scale;
+
+    ObjFan_SetRelativePos(target, this);
+
+    if (this->relativeActorPos.z < 0 || this->relativeActorPos.z > reach) {
+        return 0;
+    }
+
+    dist = sqrtf(SQ(this->relativeActorPos.x) + SQ(this->relativeActorPos.y)); // target dist from intercept
+
+    if (dist > (FAN_RADIUS * this->scale)) {
+        return 0;
+    }
+
+    return 1;
+}
+
+void ObjFan_PushPlayer(Player* player, ObjFan* this, f32 distRatio, PlayState* play) {
+    // Scale down power based on distance
+    // XZ power is scaled up slightly to make Y power relatively weaker, helps accentuate effect of gravity
+    f32 powerXZ = Math_CosS(this->actor.shape.rot.x) * this->power * distRatio * 1.25f;
+    f32 powerY = -Math_SinS(this->actor.shape.rot.x) * this->power * distRatio;
+
+    player->pushedYaw = this->actor.shape.rot.y;
+    player->pushedSpeed = powerXZ;
+    if (powerY > 0 || powerY <= player->actor.minVelocityY) {
+        player->actor.velocity.y = powerY + (3.0f * Math_SinS(play->gameplayFrames * DEG_TO_BINANG(22.5f)));
+    }
+}
+
+
+void ObjFan_PushActor(Actor* actor, ObjFan* this, PlayState* play) {
+    f32 dist = sqrtf(SQ(this->relativeActorPos.x) + SQ(this->relativeActorPos.y) + SQ(this->relativeActorPos.z));
+    f32 maxDist = FAN_REACH * this->scale;
+    f32 scaledThreshold = maxDist * FAN_THRESHOLD;
+    f32 distRatio;
+
+    // Calculate the distance ratio based on the threshold
+    if (dist <= scaledThreshold) {
+        distRatio = 1.0f; // Full power within the threshold
+    } else if (dist > scaledThreshold && dist < maxDist) {
+        distRatio = 1.0f - ((dist - scaledThreshold) / (maxDist - scaledThreshold));
+    } else {
+        distRatio = 0.0f; // No power beyond max distance
+    }
+
+    if (actor->id == ACTOR_PLAYER) {
+        ObjFan_PushPlayer((Player*)actor, this, distRatio, play);
+        return;
+    }
+
+    // XZ power is scaled up slightly to make Y power relatively weaker, helps accentuate effect of gravity
+    f32 powerXZ = Math_CosS(this->actor.shape.rot.x) * this->power * distRatio * 1.25;
+    f32 powerY = -Math_SinS(this->actor.shape.rot.x) * this->power * distRatio;
+    
+    if (powerXZ > 0) {
+        actor->speed = powerXZ;
+        actor->world.rot.y = this->actor.shape.rot.y;
+    }
+    if (powerY > 0 || powerY <= actor->minVelocityY) {
+        actor->velocity.y = powerY + (3.0f * Math_SinS(play->gameplayFrames * DEG_TO_BINANG(22.5f)));
+    }
+}
+
+void ObjFan_Update(Actor* thisx, PlayState* play) {
+    ObjFan* this = (ObjFan*)thisx;
+    Actor* actor = &GET_PLAYER(play)->actor;
+    Actor* explosive;
+
+    if (this->power != 0) {
+        if (ObjFan_ActorInRange(actor, this)) {
+            ObjFan_PushActor(actor, this, play);
+        }
+
+        explosive = play->actorCtx.actorLists[ACTORCAT_EXPLOSIVE].head;
+        while (explosive != NULL) {
+            if (ObjFan_ActorInRange(explosive, this)) {
+                ObjFan_PushActor(explosive, this, play);
+            }
+            explosive = explosive->next;
+        }
+
+        Actor_PlaySfx(&this->actor, NA_SE_EV_WIND_TRAP - SFX_FLAG);
+    }
+
+    if (this->flag == -1 || Flags_GetSwitch(play, this->flag & 0x3F)) {
+        Math_SmoothStepToF(&this->power, FAN_POWER, 1.0f, 0.5f, 0.0f);
+    } else {
+        Math_SmoothStepToF(&this->power, 0.0f, 1.0f, 0.5f, 0.0f);
+    }
+
+    this->propellerRot += DEG_TO_BINANG((this->power / FAN_POWER) * 45.0f);
+}
+
+void ObjFan_Draw(Actor* thisx, PlayState* play) {
+    ObjFan* this = (ObjFan*)thisx;
+    MtxF curMatrix;
+
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    Matrix_Scale(this->scale, this->scale, this->scale, MTXMODE_APPLY);
+
+    Matrix_Get(&curMatrix);
+    Matrix_RotateZYX(0, 0, this->propellerRot, MTXMODE_APPLY);
+
+    gSPMatrix(POLY_OPA_DISP++, Matrix_NewMtx(play->state.gfxCtx, __FILE__, __LINE__),
+                  G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+
+    gSPDisplayList(POLY_OPA_DISP++, gFanDL);
+
+    Matrix_Put(&curMatrix);
+
+    Matrix_Scale(1.0f, 1.0f, 1.2f * this->power, MTXMODE_APPLY);
+
+    gSPMatrix(POLY_XLU_DISP++, Matrix_NewMtx(play->state.gfxCtx, __FILE__, __LINE__),
+                  G_MTX_NOPUSH | G_MTX_LOAD | G_MTX_MODELVIEW);
+
+    gSPSegment(POLY_XLU_DISP++, 0x08,
+                Gfx_TwoTexScroll(play->state.gfxCtx, G_TX_RENDERTILE, 0, (play->gameplayFrames * 10) % 128, 64, 16,
+                                1, 0, (play->gameplayFrames * 5) % 128, 64, 64));
+
+    gSPDisplayList(POLY_XLU_DISP++, gWindDL);
+
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+}
+
+
+
+
+
diff --git a/src/overlays/actors/hm_pack/ovl_Obj_Fan/z_obj_fan.h b/src/overlays/actors/hm_pack/ovl_Obj_Fan/z_obj_fan.h
new file mode 100644
index 000000000..609ad045e
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Obj_Fan/z_obj_fan.h
@@ -0,0 +1,21 @@
+#ifndef Z_OBJ_FAN_H
+#define Z_OBJ_FAN_H
+
+#include "ultra64.h"
+#include "global.h"
+
+struct ObjFan;
+
+typedef void (*ObjFanActionFunc)(struct ObjFan*, PlayState*);
+
+typedef struct {
+    Actor actor;
+    Vec3f relativeActorPos;
+    ObjFanActionFunc actionFunc;
+    s16 propellerRot;
+    f32 power;
+    s8 flag;
+    f32 scale;
+} ObjFan;
+
+#endif
\ No newline at end of file
diff --git a/src/overlays/actors/hm_pack/ovl_Platforms/platforms.c b/src/overlays/actors/hm_pack/ovl_Platforms/platforms.c
new file mode 100644
index 000000000..469738bb8
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Platforms/platforms.c
@@ -0,0 +1,351 @@
+/*
+ * File: z_platforms.c
+ * Overlay: ovl_Platforms
+ * Description: Various floating platforms, from the Hylian Modding actor pack.
+ */
+
+#include "platforms.h"
+#include "assets_hm_pack/objects/object_platforms/object_platforms.h"
+
+#define PLATFORM_TYPE(this) ((this->dyna.actor.params >> 0xC) & 0xF) // 0xF000
+#define SWITCH_FLAG(this) (this->dyna.actor.params & 0x3F) // 0x00FF
+#define TIMER_DURATION(this) (this->dyna.actor.home.rot.x) // <= 10 minutes (600)
+
+/**
+ * Params:
+ *  0xF000 = Type
+ *     0x0 = Square Wooden Platform 
+ *     0x1 = Square Wooden Platform (Checkered Pattern)
+ *     0x2 = Square Stone Platform
+ *     0x3 = Square Stone Platform (Checkered Pattern)
+ *     0x4 = Square Grass Platform 
+ *     0x5 = Square Ice Platform
+ *     0x6 = Hexagonal Grass Platform
+ *     0x7 = Hexagonal Ice Platform
+ *     0x8 = Cone Floating Grass Platform
+ * 
+ *  0x00FF = Switch Flag
+ *  
+ *  Rot X > 0 = Duration timer for spawned platforms (in seconds)
+ * 
+ *  All platform types (except for the Cone Floating Type) will spawn on switch flag activation. After the specified timer amount, they unset the switch
+ *  and disappear again until the flag is once again set.
+ *  
+ *  Default (Rot X = 0) timer is 10 seconds. You can go up to 10 minutes (600).
+ * 
+ *  Square platforms = 200 units
+ *  Hex platforms    = 328 units
+ *  Cone platform    = 206 units
+*/
+
+#define FLAGS (ACTOR_FLAG_4)
+
+#define SECONDS_TO_FRAMES(sec) (sec * (60 / R_UPDATE_RATE))
+static u8 sPlayerOn = false;
+static u16 sTimer = 0;
+
+void Platforms_Init(Actor* thisx, PlayState* play);
+void Platforms_Destroy(Actor* thisx, PlayState* play);
+void Platforms_Update(Actor* thisx, PlayState* play);
+void Platforms_Draw(Actor* thisx, PlayState* play);
+
+void Platforms_SetupWaitForSwitch(Platforms* this, PlayState* play);
+void Platforms_WaitForSwitch(Platforms* this, PlayState* play);
+void Platforms_SetupAppear(Platforms* this, PlayState* play);
+void Platforms_Appear(Platforms* this, PlayState* play);
+void Platforms_SetupDisappear(Platforms* this, PlayState* play);
+void Platforms_Disappear(Platforms* this, PlayState* play);
+
+void Platforms_SetupConeFloat(Platforms* this, PlayState* play);
+void Platforms_ConeFloat(Platforms* this, PlayState* play);
+void Platforms_SetupConeDip(Platforms* this, PlayState* play);
+void Platforms_ConeDip(Platforms* this, PlayState* play);
+
+void Platforms_DoNothing(Platforms* this, PlayState* play);
+
+typedef enum {
+    PLATFORM_TYPE_SQ_WOOD = 0,
+    PLATFORM_TYPE_SQ_WOOD_CHECKER,
+    PLATFORM_TYPE_SQ_STONE,
+    PLATFORM_TYPE_SQ_STONE_CHECKER,
+    PLATFORM_TYPE_SQ_GRASS,
+    PLATFORM_TYPE_SQ_ICE,
+    PLATFORM_TYPE_HEX_GRASS,
+    PLATFORM_TYPE_HEX_ICE,
+    PLATFORM_TYPE_CONE_GRASS
+} PlatformType;
+
+const ActorInit Platforms_InitVars = {
+    ACTOR_PLATFORMS,
+    ACTORCAT_BG,
+    FLAGS,
+    OBJECT_PLATFORMS,
+    sizeof(Platforms),
+    (ActorFunc)Platforms_Init,
+    (ActorFunc)Platforms_Destroy,
+    (ActorFunc)Platforms_Update,
+    (ActorFunc)Platforms_Draw,
+};
+
+
+static InitChainEntry sInitChain[] = {
+    ICHAIN_VEC3F_DIV1000(scale, 100, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneForward, 3000, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneScale, 500, ICHAIN_CONTINUE),
+    ICHAIN_F32(uncullZoneDownward, 1000, ICHAIN_STOP),
+};
+
+void Platforms_Init(Actor* thisx, PlayState* play) {
+    Platforms* this = (Platforms*)thisx;
+    CollisionHeader* colHeader = NULL;
+    u16 seconds;
+
+    Actor_ProcessInitChain(thisx, sInitChain);
+    DynaPolyActor_Init(&this->dyna, (DYNA_TRANSFORM_POS | DYNA_TRANSFORM_ROT_Y));
+
+    switch (PLATFORM_TYPE(this)) {
+        case PLATFORM_TYPE_SQ_WOOD:
+        case PLATFORM_TYPE_SQ_WOOD_CHECKER:
+            CollisionHeader_GetVirtual(&gPlatform_WoodDL_collisionHeader, &colHeader);
+            break;
+        case PLATFORM_TYPE_SQ_STONE:
+        case PLATFORM_TYPE_SQ_STONE_CHECKER:
+            CollisionHeader_GetVirtual(&gPlatform_StoneDL_collisionHeader, &colHeader);
+            break;
+        case PLATFORM_TYPE_SQ_GRASS:
+            CollisionHeader_GetVirtual(&gPlatform_GrassDL_collisionHeader, &colHeader);
+            break;
+        case PLATFORM_TYPE_SQ_ICE:
+            CollisionHeader_GetVirtual(&gPlatform_IceDL_collisionHeader, &colHeader);
+            break;
+        case PLATFORM_TYPE_HEX_GRASS:
+            CollisionHeader_GetVirtual(&gPlatform_HexGrassDL_collisionHeader, &colHeader);
+            break;
+        case PLATFORM_TYPE_HEX_ICE:
+            CollisionHeader_GetVirtual(&gPlatform_HexIceDL_collisionHeader, &colHeader);
+            break;
+        case PLATFORM_TYPE_CONE_GRASS:
+            CollisionHeader_GetVirtual(&gPlatform_FloatingConeDL_collisionHeader, &colHeader);
+            break;
+    }
+
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeader);
+
+    seconds = (TIMER_DURATION(this) == 0) ? 10 : CLAMP_MAX(TIMER_DURATION(this), 600);
+    sTimer = this->timer = SECONDS_TO_FRAMES(seconds); // Clamped to max of 10 minutes, default of 10 seconds
+
+    this->dyna.actor.shape.rot.x = this->dyna.actor.home.rot.x = 0.0f;
+    this->dyna.actor.shape.rot.z = this->dyna.actor.home.rot.z = 0.0f;
+    
+    Actor_SetScale(&this->dyna.actor, 0.035f);
+
+    if (PLATFORM_TYPE(this) != PLATFORM_TYPE_CONE_GRASS) {
+        Platforms_SetupWaitForSwitch(this, play);
+    } else {
+        this->coneDipPlayer = false;
+        this->coneDipReturn = false;
+        Platforms_SetupConeFloat(this, play);
+    } 
+}
+
+void Platforms_Destroy(Actor* thisx, PlayState* play) {
+    Platforms* this = (Platforms*)thisx;
+
+    if (PLATFORM_TYPE(this) != PLATFORM_TYPE_CONE_GRASS) {
+        Flags_UnsetSwitch(play, SWITCH_FLAG(this));
+    }
+
+    DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+}
+
+void Platforms_Update(Actor* thisx, PlayState* play) {
+    Platforms* this = (Platforms*)thisx;
+
+    if (PLATFORM_TYPE(this) == PLATFORM_TYPE_CONE_GRASS) {
+        this->dyna.actor.world.rot.y = this->dyna.actor.shape.rot.y += 0x50; // slowly rotate
+    }
+
+    Math_SmoothStepToS(&this->alpha, this->alphaTarget, 1, 24, 1);
+
+    this->actionFunc(this, play);
+}
+
+Gfx* Platforms_SetupTransparent(GraphicsContext* gfxCtx) {
+    Gfx* dList;
+    Gfx* dListHead;
+
+    dListHead = Graph_Alloc(gfxCtx, 2 * sizeof(Gfx));
+
+    dList = dListHead;
+    gDPSetRenderMode(dListHead++,
+                     AA_EN | Z_CMP | Z_UPD | IM_RD | CLR_ON_CVG | CVG_DST_WRAP | ZMODE_XLU | FORCE_BL |
+                         GBL_c1(G_BL_CLR_FOG, G_BL_A_SHADE, G_BL_CLR_IN, G_BL_1MA),
+                     AA_EN | Z_CMP | Z_UPD | IM_RD | CLR_ON_CVG | CVG_DST_WRAP | ZMODE_XLU | FORCE_BL |
+                         GBL_c2(G_BL_CLR_IN, G_BL_A_IN, G_BL_CLR_MEM, G_BL_1MA));
+    gSPEndDisplayList(dListHead++);
+
+    return dList;
+}
+
+Gfx* Platforms_SetupOpaque(GraphicsContext* gfxCtx) {
+    Gfx* dList;
+    Gfx* dListHead;
+
+    dListHead = Graph_Alloc(gfxCtx, 2 * sizeof(Gfx));
+
+    dList = dListHead;
+    gDPSetRenderMode(dListHead++, G_RM_FOG_SHADE_A, G_RM_AA_ZB_OPA_SURF2);
+    gSPEndDisplayList(dListHead++);
+
+    return dList;
+}
+
+void Platforms_Draw(Actor* thisx, PlayState* play) {
+    Platforms* this = (Platforms*)thisx;
+    Gfx* dlist = NULL;
+    void (*drawFunc)(PlayState*, Gfx*);
+
+    if (PLATFORM_TYPE(this) == PLATFORM_TYPE_CONE_GRASS) {
+        Gfx_DrawDListOpa(play, gPlatform_FloatingConeDL);
+        return;
+    }
+
+    OPEN_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+    if (this->alpha == 255) {
+        gDPPipeSync(POLY_OPA_DISP++);
+        Gfx_SetupDL_25Opa(play->state.gfxCtx);
+        gDPSetPrimColor(POLY_OPA_DISP++, 0, 0, 255, 255, 255, 255);
+        gSPSegment(POLY_OPA_DISP++, 0x08, Platforms_SetupOpaque(play->state.gfxCtx));
+        drawFunc = Gfx_DrawDListOpa;
+        // Gfx_DrawDListOpa(play, dlist);
+    } else {
+        gDPPipeSync(POLY_XLU_DISP++);
+        Gfx_SetupDL_25Xlu(play->state.gfxCtx);
+        gSPSegment(POLY_XLU_DISP++, 0x08, Platforms_SetupTransparent(play->state.gfxCtx));
+        gDPSetPrimColor(POLY_XLU_DISP++, 0, 0, 255, 255, 255, this->alpha);
+        drawFunc = Gfx_DrawDListXlu;
+        // Gfx_DrawDListXlu(play, dlist);
+    }
+    
+    if (this->alpha > 0) {
+        switch (PLATFORM_TYPE(this)) {
+            case PLATFORM_TYPE_SQ_WOOD:
+                drawFunc(play, gPlatform_WoodDL);
+                break;
+            case PLATFORM_TYPE_SQ_WOOD_CHECKER:
+                drawFunc(play, gPlatform_CheckWoodDL);
+                break;
+            case PLATFORM_TYPE_SQ_STONE:
+                drawFunc(play, gPlatform_StoneDL);
+                break;
+            case PLATFORM_TYPE_SQ_STONE_CHECKER:
+                drawFunc(play, gPlatform_CheckStoneDL);
+                break;
+            case PLATFORM_TYPE_SQ_GRASS:
+                drawFunc(play, gPlatform_GrassDL);
+                break;
+            case PLATFORM_TYPE_SQ_ICE:
+                drawFunc(play, gPlatform_IceDL);
+                break;
+            case PLATFORM_TYPE_HEX_GRASS:
+                drawFunc(play, gPlatform_HexGrassDL);
+                break;
+            case PLATFORM_TYPE_HEX_ICE:
+                drawFunc(play, gPlatform_HexIceDL);
+                break;
+        }
+    }
+    
+    CLOSE_DISPS(play->state.gfxCtx, __FILE__, __LINE__);
+
+}
+
+void Platforms_SetupWaitForSwitch(Platforms* this, PlayState* play) {
+    DynaPoly_DisableCollision(play, &play->colCtx.dyna, this->dyna.bgId);
+    this->actionFunc = Platforms_WaitForSwitch;
+}
+
+void Platforms_WaitForSwitch(Platforms* this, PlayState* play) {
+    if (Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+        Platforms_SetupAppear(this, play);
+    }
+}
+
+void Platforms_SetupAppear(Platforms* this, PlayState* play) {
+    DynaPoly_EnableCollision(play, &play->colCtx.dyna, this->dyna.bgId);
+    this->timer = sTimer;
+    this->alphaTarget = 255;
+    this->actionFunc = Platforms_Appear;
+}
+
+void Platforms_Appear(Platforms* this, PlayState* play) {
+    if (DECR(this->timer) == 0) {
+        Flags_UnsetSwitch(play, SWITCH_FLAG(this));
+        Platforms_SetupWaitForSwitch(this, play);
+    } else if (this->timer == 10) {
+        this->alphaTarget = 0;
+    }
+}
+
+void Platforms_SetupConeFloat(Platforms* this, PlayState* play) {
+    this->actionFunc = Platforms_ConeFloat;
+}
+
+void Platforms_ConeFloat(Platforms* this, PlayState* play) {
+    this->dyna.actor.world.pos.y = this->dyna.actor.home.pos.y + 20.0f * (Math_SinS(play->gameplayFrames * 0x200)); // float up and down
+
+
+    if (DynaPolyActor_IsPlayerAbove(&this->dyna)) {
+        this->coneDipPlayer = false;
+        if (DynaPolyActor_IsPlayerOnTop(&this->dyna) && !this->playerOn) {
+            this->playerOn = true;
+            Math_Vec3f_Copy(&this->targetPos, &this->dyna.actor.world.pos);
+            this->targetPos.y -= 35.0f;
+            Platforms_SetupConeDip(this, play);
+            return;
+        }
+    } else if (!DynaPolyActor_IsPlayerOnTop(&this->dyna)) {
+        this->playerOn = false;
+    }
+}
+
+void Platforms_SetupConeDip(Platforms* this, PlayState* play) {
+    this->coneDipPlayer = true;
+    this->coneDipReturn = false;
+    this->actionFunc = Platforms_ConeDip;
+}
+
+void Platforms_ConeDip(Platforms* this, PlayState* play) {
+    if (!DynaPolyActor_IsPlayerOnTop(&this->dyna)) {
+        this->playerOn = false;
+        Math_ApproachF(&this->dyna.actor.world.pos.y, this->dyna.actor.home.pos.y, 0.1f, 5.0f);
+        if (this->dyna.actor.world.pos.y >= this->dyna.actor.home.pos.y) {
+            this->coneDipReturn = false;
+            Platforms_SetupConeFloat(this, play);
+            return;
+        }
+    }
+    
+    if (this->coneDipPlayer) {
+        Math_ApproachF(&this->dyna.actor.world.pos.y, this->targetPos.y, 0.1f, 5.0f);
+
+        if (this->dyna.actor.world.pos.y == this->targetPos.y) {
+            this->coneDipPlayer = false;
+            this->coneDipReturn = true;
+        }
+    } else {
+        if (this->coneDipReturn) {
+            Math_ApproachF(&this->dyna.actor.world.pos.y, this->dyna.actor.home.pos.y, 0.1f, 5.0f);
+            if (this->dyna.actor.world.pos.y == this->dyna.actor.home.pos.y) {
+                this->coneDipReturn = false;
+                Platforms_SetupConeFloat(this, play);
+            }
+        }
+    }
+}
+
+
+void Platforms_DoNothing(Platforms* this, PlayState* play) {
+
+}
\ No newline at end of file
diff --git a/src/overlays/actors/hm_pack/ovl_Platforms/platforms.h b/src/overlays/actors/hm_pack/ovl_Platforms/platforms.h
new file mode 100644
index 000000000..130f0203f
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Platforms/platforms.h
@@ -0,0 +1,23 @@
+#ifndef Z_PLATFORMS_H
+#define Z_PLATFORMS_H
+
+#include "ultra64.h"
+#include "global.h"
+
+struct Platforms;
+
+typedef void (*PlatformsActionFunc)(struct Platforms*, PlayState*);
+
+typedef struct Platforms {
+    DynaPolyActor dyna;
+    PlatformsActionFunc actionFunc;
+    Vec3f targetPos;
+    u16 timer;
+    s16 alphaTarget;
+    s16 alpha;
+    u8 coneDipPlayer;
+    u8 coneDipReturn;
+    u8 playerOn;
+} Platforms;
+
+#endif
\ No newline at end of file
diff --git a/src/overlays/actors/hm_pack/ovl_Pols_Voice/pols_voice.c b/src/overlays/actors/hm_pack/ovl_Pols_Voice/pols_voice.c
new file mode 100644
index 000000000..a0b52edfd
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Pols_Voice/pols_voice.c
@@ -0,0 +1,472 @@
+/*
+ * File: pols voice.c
+ * Overlay: ovl_Pols Voice
+ * Description: Pols Voice enemy (weak to only arrows) from the Hylian Modding actor pack.
+ */
+
+#include "pols_voice.h"
+#include "assets_hm_pack/objects/object_pols_voice/object_pols_voice.h"
+
+#define FLAGS (ACTOR_FLAG_0 | ACTOR_FLAG_2 | ACTOR_FLAG_4 | ACTOR_FLAG_5)
+
+void PolsVoice_Init(Actor* thisx, PlayState* play);
+void PolsVoice_Destroy(Actor* thisx, PlayState* play);
+void PolsVoice_Update(Actor* thisx, PlayState* play);
+void PolsVoice_Draw(Actor* thisx, PlayState* play);
+
+void PolsVoice_Idle(PolsVoice* this, PlayState* play);
+void PolsVoice_Hop(PolsVoice* this, PlayState* play);
+void PolsVoice_StartGrab(PolsVoice* this, PlayState* play);
+void PolsVoice_Grab(PolsVoice* this, PlayState* play);
+void PolsVoice_Gnaw(PolsVoice* this, PlayState* play);
+void PolsVoice_EndGnaw(PolsVoice* this, PlayState* play);
+void PolsVoice_Damaged(PolsVoice* this, PlayState* play);
+void PolsVoice_Stunned(PolsVoice* this, PlayState* play);
+void PolsVoice_Die(PolsVoice* this, PlayState* play);
+
+typedef enum {
+    POLSVOICE_DMGEFF_NONE,
+    POLSVOICE_DMGEFF_STUN,
+    POLSVOICE_DMGEFF_DEFAULT,
+} PolsVoiceDamageEffect;
+
+static DamageTable sDamageTable = {
+    /* Deku nut      */ DMG_ENTRY(0, POLSVOICE_DMGEFF_STUN),
+    /* Deku stick    */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Slingshot     */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Explosive     */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Boomerang     */ DMG_ENTRY(0, POLSVOICE_DMGEFF_STUN),
+    /* Normal arrow  */ DMG_ENTRY(2, POLSVOICE_DMGEFF_DEFAULT),
+    /* Hammer swing  */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Hookshot      */ DMG_ENTRY(0, POLSVOICE_DMGEFF_STUN),
+    /* Kokiri sword  */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Master sword  */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Giant's Knife */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Fire arrow    */ DMG_ENTRY(3, POLSVOICE_DMGEFF_DEFAULT),
+    /* Ice arrow     */ DMG_ENTRY(3, POLSVOICE_DMGEFF_DEFAULT),
+    /* Light arrow   */ DMG_ENTRY(6, POLSVOICE_DMGEFF_DEFAULT),
+    /* Unk arrow 1   */ DMG_ENTRY(3, POLSVOICE_DMGEFF_DEFAULT),
+    /* Unk arrow 2   */ DMG_ENTRY(3, POLSVOICE_DMGEFF_DEFAULT),
+    /* Unk arrow 3   */ DMG_ENTRY(3, POLSVOICE_DMGEFF_DEFAULT),
+    /* Fire magic    */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Ice magic     */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Light magic   */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Shield        */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Mirror Ray    */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Kokiri spin   */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Giant spin    */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Master spin   */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Kokiri jump   */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Giant jump    */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Master jump   */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Unknown 1     */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Unblockable   */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Hammer jump   */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+    /* Unknown 2     */ DMG_ENTRY(0, POLSVOICE_DMGEFF_NONE),
+};
+
+const ActorInit Pols_Voice_InitVars = {
+    ACTOR_POLS_VOICE,
+    ACTORCAT_ENEMY,
+    FLAGS,
+    OBJECT_POLS_VOICE,
+    sizeof(PolsVoice),
+    (ActorFunc)PolsVoice_Init,
+    (ActorFunc)PolsVoice_Destroy,
+    (ActorFunc)PolsVoice_Update,
+    (ActorFunc)PolsVoice_Draw,
+};
+
+static ColliderCylinderInit sCylinderInit = {
+    {
+        COLTYPE_HIT5,
+        AT_ON | AT_TYPE_ENEMY,
+        AC_ON | AC_TYPE_PLAYER,
+        OC1_ON | OC1_TYPE_ALL,
+        OC2_TYPE_1,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+        { 0xFFCFFFFF, 0x08, 0x08 },
+        { 0xFFCFFFFF, 0x00, 0x00 },
+        TOUCH_ON | TOUCH_SFX_NORMAL,
+        BUMP_ON,
+        OCELEM_ON,
+    },
+    { 40, 75, 0, { 0, 0, 0 } },
+};
+
+void PolsVoice_Init(Actor* thisx, PlayState* play) {
+    PolsVoice* this = (PolsVoice*)thisx;
+
+    Actor_SetScale(&this->actor, 0.015f);
+
+    this->actor.colChkInfo.mass = MASS_HEAVY;
+    this->actor.colChkInfo.health = 6;
+    this->actor.gravity = -1.0f;
+
+    ActorShape_Init(&this->actor.shape, 0.0f, ActorShadow_DrawCircle, 45.0f);
+    Actor_UpdateBgCheckInfo(play, &this->actor, 35.0f, 60.0f, 60.0f,
+                            UPDBGCHECKINFO_FLAG_0 | UPDBGCHECKINFO_FLAG_2 | UPDBGCHECKINFO_FLAG_3 |
+                                UPDBGCHECKINFO_FLAG_4);
+
+    Collider_InitCylinder(play, &this->collider);
+    Collider_SetCylinder(play, &this->collider, &this->actor, &sCylinderInit);
+    SkelAnime_InitFlex(play, &this->skelAnime, &gPolsVoiceSkel, &gPolsVoiceSkelIdleAnim, this->jointTable,
+                       this->morphTable, GPOLSVOICESKEL_NUM_LIMBS);
+
+    this->actor.colChkInfo.damageTable = &sDamageTable;
+
+    this->actionFunc = PolsVoice_Idle;
+}
+
+void PolsVoice_Destroy(Actor* thisx, PlayState* play) {
+    PolsVoice* this = (PolsVoice*)thisx;
+}
+
+// HELPERS
+
+void PolsVoice_RotateTowardPoint(PolsVoice* this, Vec3f* point, s16 step) {
+    Math_SmoothStepToS(&this->actor.shape.rot.y, Actor_WorldYawTowardPoint(&this->actor, point), 3, step, 0);
+    this->actor.world.rot.y = this->actor.shape.rot.y;
+}
+
+// SETUP FUNCTIONS
+
+void PolsVoice_SetupIdle(PolsVoice* this, PlayState* play) {
+    this->actor.speed = 0.0f;
+    this->actor.velocity.y = 0.0f;
+    Animation_MorphToLoop(&this->skelAnime, &gPolsVoiceSkelIdleAnim, -6.0f);
+    this->actionFunc = PolsVoice_Idle;
+}
+
+void PolsVoice_SetupHop(PolsVoice* this, PlayState* play) {
+    Animation_MorphToLoop(&this->skelAnime, &gPolsVoiceSkelHopAnim, 4.0f);
+    this->actionFunc = PolsVoice_Hop;
+}
+
+void PolsVoice_SetupStartGrab(PolsVoice* this, PlayState* play) {
+    this->actor.speed = 0.0f;
+    this->actor.velocity.y = 0.0f;
+    Animation_MorphToPlayOnce(&this->skelAnime, &gPolsVoiceSkelGrabAnim, -3.0f);
+    this->actionFunc = PolsVoice_StartGrab;
+}
+
+void PolsVoice_SetupGrab(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    this->actor.speed = 10.0f;
+    this->actor.velocity.y = 10.0f;
+    this->actor.world.rot.y = this->actor.shape.rot.y = this->actor.yawTowardsPlayer;
+    Actor_PlaySfx(&this->actor, NA_SE_EN_RIZA_JUMP);
+    this->actionFunc = PolsVoice_Grab;
+}
+
+void PolsVoice_SetupGnaw(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    this->actor.speed = 0.0f;
+    this->actor.velocity.y = 0.0f;
+    this->actor.gravity = 0.0f;
+    this->actor.shape.rot.x = DEG_TO_BINANG(-25.0f);
+    this->actor.flags &= ~ACTOR_FLAG_0;
+    Animation_Change(&this->skelAnime, &gPolsVoiceSkelGrabAnim, 1.0f, 0.0f, 12.0f, ANIMMODE_ONCE, 0.0f);
+    this->actionFunc = PolsVoice_Gnaw;
+}
+
+void PolsVoice_SetupEndGnaw(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    this->gnawTimer = 0;
+    this->actor.speed = 8.0f;
+    this->actor.velocity.y = 4.0f;
+    this->actor.gravity = -1.0f;
+    this->actor.shape.rot.x = 0.0f;
+    this->actor.flags |= ACTOR_FLAG_0;
+    Animation_MorphToPlayOnce(&this->skelAnime, &gPolsVoiceSkelHopAnim, -4.0f);
+    Actor_PlaySfx(&this->actor, NA_SE_EN_RIZA_JUMP);
+    this->actionFunc = PolsVoice_EndGnaw;
+}
+
+void PolsVoice_SetupDamaged(PolsVoice* this, PlayState* play) {
+    this->actor.speed = -4.0f;
+    this->actor.world.rot.y = this->actor.shape.rot.y = this->actor.yawTowardsPlayer;
+    Animation_MorphToPlayOnce(&this->skelAnime, &gPolsVoiceSkelDamagedAnim, -3.0f);
+    this->actionFunc = PolsVoice_Damaged;
+}
+
+void PolsVoice_SetupStunned(PolsVoice* this, PlayState* play) {
+    this->actor.speed = 0.0f;
+    Animation_Change(&this->skelAnime, &gPolsVoiceSkelDamagedAnim, 0.0f, 2.0f, 0.0f, ANIMMODE_ONCE, 0.0f);
+    this->actionFunc = PolsVoice_Stunned;
+}
+
+void PolsVoice_SetupDie(PolsVoice* this, PlayState* play) {
+    this->actor.speed = 0.0f;
+    this->actor.flags &= ~ACTOR_FLAG_0;
+    this->actor.world.rot.y = this->actor.shape.rot.y = this->actor.yawTowardsPlayer;
+    Animation_MorphToPlayOnce(&this->skelAnime, &gPolsVoiceSkelDieAnim, -3.0f);
+    this->actionFunc = PolsVoice_Die;
+}
+
+// MAIN
+
+#define POLSVOICE_NOTICE_RADIUS 450.0f
+
+void PolsVoice_Idle(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    u8 playerAlreadyGrabbed = player->stateFlags2 & PLAYER_STATE2_7;
+
+    SkelAnime_Update(&this->skelAnime);
+
+    if (this->actor.xyzDistToPlayerSq < SQ(POLSVOICE_NOTICE_RADIUS) && this->actor.bgCheckFlags & BGCHECKFLAG_GROUND &&
+        !playerAlreadyGrabbed) {
+        PolsVoice_SetupHop(this, play);
+    }
+}
+
+#define POLSVOICE_GRAB_JUMP_RADIUS 250.0f
+
+void PolsVoice_Hop(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    u8 playerAlreadyGrabbed = player->stateFlags2 & PLAYER_STATE2_7;
+    u8 readyToGrab = Actor_IsFacingAndNearPlayer(&this->actor, POLSVOICE_GRAB_JUMP_RADIUS, DEG_TO_BINANG(35.0f)) &&
+                     this->actor.bgCheckFlags & BGCHECKFLAG_GROUND && !playerAlreadyGrabbed;
+
+    SkelAnime_Update(&this->skelAnime);
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 0.1f, 1.0f, 0.0f);
+
+    DECR(this->aggroTimer);
+
+    if (this->skelAnime.curFrame == 3.0f) {
+        Actor_PlaySfx(&this->actor, NA_SE_EN_RIZA_JUMP);
+        this->actor.speed += 5.0f;
+    } else if (this->skelAnime.curFrame == 0.0f) {
+        if (!this->aggroTimer && this->actor.xyzDistToPlayerSq > SQ(POLSVOICE_NOTICE_RADIUS) ||
+            !(this->actor.bgCheckFlags & BGCHECKFLAG_GROUND) || playerAlreadyGrabbed) {
+            this->actionFunc = PolsVoice_SetupIdle;
+            return;
+        }
+        if (readyToGrab) {
+            this->aggroTimer = 0;
+            PolsVoice_SetupStartGrab(this, play);
+        }
+    }
+
+    PolsVoice_RotateTowardPoint(this, &player->actor.world.pos, DEG_TO_BINANG(10.0f));
+}
+
+void PolsVoice_StartGrab(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    SkelAnime_Update(&this->skelAnime);
+
+    if (this->skelAnime.curFrame == 12.0f) {
+        PolsVoice_SetupGrab(this, play);
+    }
+}
+
+#define POLSVOICE_PLAYER_HEAD_GRAB_RADIUS 45.0f
+
+void PolsVoice_Grab(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    u8 playerAlreadyGrabbed = player->stateFlags2 & PLAYER_STATE2_7;
+
+    SkelAnime_Update(&this->skelAnime);
+
+    if ((this->skelAnime.curFrame >= 20.0f && this->actor.bgCheckFlags & BGCHECKFLAG_GROUND) || playerAlreadyGrabbed) {
+        PolsVoice_SetupIdle(this, play);
+        return;
+    }
+
+    if (Actor_WorldDistXYZToPoint(&this->actor, &player->bodyPartsPos[PLAYER_BODYPART_COLLAR]) <
+        POLSVOICE_PLAYER_HEAD_GRAB_RADIUS) {
+        if (play->grabPlayer(play, player)) {
+            this->isGnawing = true;
+            PolsVoice_SetupGnaw(this, play);
+        }
+    }
+}
+
+void PolsVoice_Gnaw(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    this->actor.world.pos = player->bodyPartsPos[PLAYER_BODYPART_HEAD];
+    this->actor.world.pos.y -= 8.0f;
+
+    if (SkelAnime_Update(&this->skelAnime)) {
+        Animation_Change(&this->skelAnime, &gPolsVoiceSkelGrabAnim, 1.0f, 0.0f, 12.0f, ANIMMODE_ONCE, 0.0f);
+    }
+
+    if (!(player->stateFlags2 & PLAYER_STATE2_7)) {
+        PolsVoice_SetupEndGnaw(this, play);
+    }
+
+    if (DECR(this->gnawTimer) == 0) {
+        if (!LINK_IS_ADULT) {
+            Player_PlaySfx(player, NA_SE_VO_LI_DAMAGE_S_KID);
+        } else {
+            Player_PlaySfx(player, NA_SE_VO_LI_DAMAGE_S);
+        }
+        play->damagePlayer(play, -8);
+        this->gnawTimer = 20;
+    }
+
+    if (this->gnawTimer == 10) {
+        Actor_PlaySfx(&this->actor, NA_SE_EN_DEADHAND_BITE);
+    }
+}
+
+void PolsVoice_EndGnaw(PolsVoice* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    SkelAnime_Update(&this->skelAnime);
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 0.1f, 1.0f, 0.0f);
+
+    if (this->actor.bgCheckFlags & BGCHECKFLAG_GROUND) {
+        this->isGnawing = false;
+        PolsVoice_SetupHop(this, play);
+        return;
+    }
+
+    if (this->actor.xzDistToPlayer > 30.0f) {
+        this->isGnawing = false;
+    }
+}
+
+void PolsVoice_Damaged(PolsVoice* this, PlayState* play) {
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 3.0f, 0.5f, 0.0f);
+
+    if (SkelAnime_Update(&this->skelAnime)) {
+        this->aggroTimer = 10 * 20;
+        PolsVoice_SetupHop(this, play);
+    }
+}
+
+void PolsVoice_Stunned(PolsVoice* this, PlayState* play) {
+    SkelAnime_Update(&this->skelAnime);
+    if (this->actor.colorFilterTimer == 0) {
+        if (this->actor.colChkInfo.health == 0) {
+            PolsVoice_SetupDie(this, play);
+        } else {
+            PolsVoice_SetupHop(this, play);
+        }
+    }
+}
+
+void PolsVoice_Die(PolsVoice* this, PlayState* play) {
+    Vec3f zeroVec = { 0.0f, 0.0f, 0.0f };
+    Vec3f effectVel = { 0.0f, 4.0f, 0.0f };
+    Vec3f effectPos = this->actor.world.pos;
+
+    if (SkelAnime_Update(&this->skelAnime) || this->drowned) {
+        Actor_SetScale(&this->actor, this->actor.scale.x * 0.8f);
+
+        if (this->actor.scale.x <= 0.001f) {
+            effectPos.y += 10.0f;
+            EffectSsDeadDb_Spawn(play, &effectPos, &effectVel, &zeroVec, 90, 0, 255, 255, 255, 255, 0, 0, 255, 1, 9,
+                                 true);
+            Item_DropCollectible(play, &this->actor.world.pos, ITEM00_RECOVERY_HEART);
+            Actor_Kill(&this->actor);
+        }
+    }
+}
+
+void PolsVoice_CheckDrowned(PolsVoice* this, PlayState* play) {
+    if (!this->drowned && (this->actor.bgCheckFlags & BGCHECKFLAG_WATER) && (this->actor.yDistToWater > 5.0f)) {
+        Actor_SetDropFlag(&this->actor, &this->collider.info, true);
+        Actor_PlaySfx(&this->actor, NA_SE_EN_DEADHAND_DEAD);
+        Enemy_StartFinishingBlow(play, &this->actor);
+        this->drowned = true;
+        this->actor.gravity = -0.1f;
+        this->actionFunc = PolsVoice_SetupDie;
+        return;
+    }
+}
+
+void PolsVoice_CheckDamage(PolsVoice* this, PlayState* play) {
+    PolsVoice_CheckDrowned(this, play);
+
+    if (!this->drowned && this->collider.base.acFlags & AC_HIT) {
+        this->collider.base.acFlags &= ~AC_HIT;
+        if (this->invincibilityTimer == 0) {
+            this->invincibilityTimer = 40;
+        }
+        Actor_SetDropFlag(&this->actor, &this->collider.info, true);
+
+        if (this->actionFunc != PolsVoice_Die && this->actionFunc != PolsVoice_Damaged && !this->isGnawing) {
+            switch (this->actor.colChkInfo.damageEffect) {
+                case POLSVOICE_DMGEFF_STUN:
+                    if (this->actor.colChkInfo.health > 1) {
+                        Actor_PlaySfx(&this->actor, NA_SE_EN_GOMA_JR_FREEZE);
+                        Actor_SetColorFilter(&this->actor, COLORFILTER_COLORFLAG_BLUE, 255, COLORFILTER_BUFFLAG_OPA,
+                                             80);
+                        this->actionFunc = PolsVoice_SetupStunned;
+                        break;
+                    }
+                    break;
+                case POLSVOICE_DMGEFF_DEFAULT:
+                    Actor_SetColorFilter(&this->actor, COLORFILTER_COLORFLAG_RED, 200, COLORFILTER_BUFFLAG_OPA, 20);
+                    Actor_ApplyDamage(&this->actor);
+                    if (this->actor.colChkInfo.health == 0) {
+                        Actor_PlaySfx(&this->actor, NA_SE_EN_DEADHAND_DEAD);
+                        Enemy_StartFinishingBlow(play, &this->actor);
+                        this->actionFunc = PolsVoice_SetupDie;
+                    } else {
+                        Actor_PlaySfx(&this->actor, NA_SE_EN_DEADHAND_DAMAGE);
+                        this->actionFunc = PolsVoice_SetupDamaged;
+                    }
+                    break;
+
+                default:
+                    break;
+            }
+        }
+    }
+}
+
+void PolsVoice_Update(Actor* thisx, PlayState* play) {
+    PolsVoice* this = (PolsVoice*)thisx;
+
+    DECR(this->invincibilityTimer);
+
+    PolsVoice_CheckDamage(this, play);
+    this->actionFunc(this, play);
+
+    Collider_UpdateCylinder(&this->actor, &this->collider);
+
+    Actor_MoveXZGravity(&this->actor);
+    Actor_UpdateBgCheckInfo(play, &this->actor, 35.0f, 60.0f, 60.0f,
+                            UPDBGCHECKINFO_FLAG_0 | UPDBGCHECKINFO_FLAG_2 | UPDBGCHECKINFO_FLAG_3 |
+                                UPDBGCHECKINFO_FLAG_4);
+
+    if (!this->isGnawing) {
+        CollisionCheck_SetOC(play, &play->colChkCtx, &this->collider.base);
+    }
+
+    if (!this->invincibilityTimer && this->actionFunc != PolsVoice_Damaged && this->actionFunc != PolsVoice_Die) {
+        CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+    }
+}
+
+void PolsVoice_PostLimbDraw(PlayState* play, s32 limbIndex, Gfx** dList, Vec3s* rot, void* thisx, Gfx** gfx) {
+    PolsVoice* this = (PolsVoice*)thisx;
+
+    if (limbIndex == GPOLSVOICESKEL_HEAD_LIMB) {
+        Vec3f src = { 0.0f, 10.0f, 0.0f };
+        Vec3f dest;
+
+        Matrix_MultVec3f(&src, &dest);
+        this->actor.focus.pos.x = dest.x;
+        this->actor.focus.pos.y = dest.y;
+        this->actor.focus.pos.z = dest.z;
+    }
+}
+
+void PolsVoice_Draw(Actor* thisx, PlayState* play) {
+    PolsVoice* this = (PolsVoice*)thisx;
+
+    SkelAnime_DrawFlexOpa(play, this->skelAnime.skeleton, this->skelAnime.jointTable, this->skelAnime.dListCount, NULL,
+                          PolsVoice_PostLimbDraw, &this->actor);
+}
\ No newline at end of file
diff --git a/src/overlays/actors/hm_pack/ovl_Pols_Voice/pols_voice.h b/src/overlays/actors/hm_pack/ovl_Pols_Voice/pols_voice.h
new file mode 100644
index 000000000..6df2049fc
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Pols_Voice/pols_voice.h
@@ -0,0 +1,28 @@
+#ifndef Z_POLSVOICE_H
+#define Z_POLSVOICE_H
+
+#include "ultra64.h"
+#include "global.h"
+
+#include "assets_hm_pack/objects/object_pols_voice/object_pols_voice.h"
+
+struct PolsVoice;
+
+typedef void (*PolsVoiceActionFunc)(struct PolsVoice*, PlayState*);
+
+typedef struct PolsVoice {
+    Actor actor;
+    SkelAnime skelAnime;
+    Vec3s jointTable[GPOLSVOICESKEL_NUM_LIMBS];
+    Vec3s morphTable[GPOLSVOICESKEL_NUM_LIMBS];
+    s32 invincibilityTimer;
+    ColliderCylinder collider;
+    s16 targetYaw;
+    u8 drowned;
+    u8 gnawTimer;
+    u8 isGnawing;
+    u8 aggroTimer;
+    PolsVoiceActionFunc actionFunc;
+} PolsVoice;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Rat/rat.c b/src/overlays/actors/hm_pack/ovl_Rat/rat.c
new file mode 100644
index 000000000..d4d7c175d
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Rat/rat.c
@@ -0,0 +1,433 @@
+/*
+ * File: rat.c
+ * Overlay: ovl_Rat
+ * Description: Rat enemy from the Hylian Modding actor pack.
+ */
+
+#include "rat.h"
+#include "assets_hm_pack/objects/object_rat/object_rat.h"
+
+#define FLAGS (ACTOR_FLAG_0 | ACTOR_FLAG_2 | ACTOR_FLAG_4 | ACTOR_FLAG_5)
+
+void Rat_Init(Actor* thisx, PlayState* play);
+void Rat_Destroy(Actor* thisx, PlayState* play);
+void Rat_Update(Actor* thisx, PlayState* play);
+void Rat_Draw(Actor* thisx, PlayState* play);
+
+void Rat_Idle(Rat* this, PlayState* play);
+void Rat_Notice(Rat* this, PlayState* play);
+void Rat_StartRunFromNotice(Rat* this, PlayState* play);
+void Rat_Run(Rat* this, PlayState* play);
+void Rat_EndRun(Rat* this, PlayState* play);
+void Rat_Attack(Rat* this, PlayState* play);
+void Rat_Damaged(Rat* this, PlayState* play);
+void Rat_Stunned(Rat* this, PlayState* play);
+void Rat_Die(Rat* this, PlayState* play);
+
+typedef enum {
+    RAT_DMGEFF_NONE,
+    RAT_DMGEFF_STUN,
+    RAT_DMGEFF_DEFAULT,
+} RatDamageEffect;
+
+static DamageTable sDamageTable = {
+    /* Deku nut      */ DMG_ENTRY(0, RAT_DMGEFF_STUN),
+    /* Deku stick    */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Slingshot     */ DMG_ENTRY(1, RAT_DMGEFF_DEFAULT),
+    /* Explosive     */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Boomerang     */ DMG_ENTRY(1, RAT_DMGEFF_STUN),
+    /* Normal arrow  */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Hammer swing  */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Hookshot      */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Kokiri sword  */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Master sword  */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Giant's Knife */ DMG_ENTRY(6, RAT_DMGEFF_DEFAULT),
+    /* Fire arrow    */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Ice arrow     */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Light arrow   */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Unk arrow 1   */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Unk arrow 2   */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Unk arrow 3   */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Fire magic    */ DMG_ENTRY(4, RAT_DMGEFF_NONE),
+    /* Ice magic     */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Light magic   */ DMG_ENTRY(4, RAT_DMGEFF_NONE),
+    /* Shield        */ DMG_ENTRY(0, RAT_DMGEFF_NONE),
+    /* Mirror Ray    */ DMG_ENTRY(0, RAT_DMGEFF_NONE),
+    /* Kokiri spin   */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Giant spin    */ DMG_ENTRY(8, RAT_DMGEFF_DEFAULT),
+    /* Master spin   */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Kokiri jump   */ DMG_ENTRY(2, RAT_DMGEFF_DEFAULT),
+    /* Giant jump    */ DMG_ENTRY(8, RAT_DMGEFF_DEFAULT),
+    /* Master jump   */ DMG_ENTRY(4, RAT_DMGEFF_DEFAULT),
+    /* Unknown 1     */ DMG_ENTRY(0, RAT_DMGEFF_NONE),
+    /* Unblockable   */ DMG_ENTRY(0, RAT_DMGEFF_NONE),
+    /* Hammer jump   */ DMG_ENTRY(4, RAT_DMGEFF_NONE),
+    /* Unknown 2     */ DMG_ENTRY(0, RAT_DMGEFF_NONE),
+};
+
+const ActorInit Rat_InitVars = {
+    ACTOR_RAT,
+    ACTORCAT_ENEMY,
+    FLAGS,
+    OBJECT_RAT,
+    sizeof(Rat),
+    (ActorFunc)Rat_Init,
+    (ActorFunc)Rat_Destroy,
+    (ActorFunc)Rat_Update,
+    (ActorFunc)Rat_Draw,
+};
+
+static ColliderCylinderInit sCylinderInit = {
+    {
+        COLTYPE_HIT5,
+        AT_ON | AT_TYPE_ENEMY,
+        AC_ON | AC_TYPE_PLAYER,
+        OC1_ON | OC1_TYPE_ALL,
+        OC2_TYPE_1,
+        COLSHAPE_CYLINDER,
+    },
+    {
+        ELEMTYPE_UNK0,
+        { 0xFFCFFFFF, 0x08, 0x08 },
+        { 0xFFCFFFFF, 0x00, 0x00 },
+        TOUCH_ON | TOUCH_SFX_NORMAL,
+        BUMP_ON,
+        OCELEM_ON,
+    },
+    { 20, 30, 0, { 0, 0, 0 } },
+};
+
+void Rat_Init(Actor* thisx, PlayState* play) {
+    Rat* this = (Rat*)thisx;
+
+    Actor_SetScale(&this->actor, 0.01f);
+
+    this->actor.colChkInfo.mass = MASS_HEAVY;
+    this->actor.colChkInfo.health = 4;
+    this->actor.gravity = -1.0f;
+
+    ActorShape_Init(&this->actor.shape, 0.0f, ActorShadow_DrawCircle, 18.0f);
+
+    Collider_InitCylinder(play, &this->collider);
+    Collider_SetCylinder(play, &this->collider, &this->actor, &sCylinderInit);
+    SkelAnime_InitFlex(play, &this->skelAnime, &gRatSkel, &gRatSkelIdleAnim, this->jointTable, this->morphTable,
+                       GRATSKEL_NUM_LIMBS);
+
+    this->actor.colChkInfo.damageTable = &sDamageTable;
+
+    this->actionFunc = Rat_Idle;
+}
+
+void Rat_Destroy(Actor* thisx, PlayState* play) {
+    Rat* this = (Rat*)thisx;
+
+    Collider_DestroyCylinder(play, &this->collider);
+}
+
+// HELPERS
+
+void Rat_RotateTowardPoint(Rat* this, Vec3f* point, s16 step) {
+    Math_SmoothStepToS(&this->actor.shape.rot.y, Actor_WorldYawTowardPoint(&this->actor, point), 3, step, 0);
+    this->actor.world.rot.y = this->actor.shape.rot.y;
+}
+
+// SETUP FUNCTIONS
+
+void Rat_SetupIdle(Rat* this, PlayState* play) {
+    this->actor.speed = 0.0f;
+    this->actor.velocity.y = 0.0f;
+    Animation_MorphToLoop(&this->skelAnime, &gRatSkelIdleAnim, -3.0f);
+    this->actionFunc = Rat_Idle;
+}
+
+#define RAT_FLEE_RADIUS 200.0f
+
+void Rat_SetupNotice(Rat* this, PlayState* play) {
+    Animation_PlayOnce(&this->skelAnime, &gRatSkelNoticeAnim);
+    this->actionFunc = Rat_Notice;
+}
+
+void Rat_SetupStartRunFromNotice(Rat* this, PlayState* play) {
+    Animation_PlayOnce(&this->skelAnime, &gRatSkelStartrunAnim);
+    this->actionFunc = Rat_StartRunFromNotice;
+}
+
+void Rat_SetupRun(Rat* this, PlayState* play) {
+    s16 angle;
+
+    if (this->fleeTimer != 0) {
+        angle = this->actor.yawTowardsPlayer + DEG_TO_BINANG(180.0f) +
+                Rand_S16Offset(DEG_TO_BINANG(-45.0f), DEG_TO_BINANG(90.0f));
+        this->fleePos.x = (Math_CosS(angle) * RAT_FLEE_RADIUS) + this->actor.home.pos.x;
+        this->fleePos.z = (Math_SinS(angle) * RAT_FLEE_RADIUS) + this->actor.home.pos.z;
+    }
+
+    Animation_MorphToLoop(&this->skelAnime, &gRatSkelRunAnim, -4.0f);
+    this->actionFunc = Rat_Run;
+}
+
+void Rat_SetupEndRun(Rat* this, PlayState* play) {
+    Animation_MorphToPlayOnce(&this->skelAnime, &gRatSkelEndrunAnim, -4.0f);
+    this->actor.speed = 0.0f;
+    this->actionFunc = Rat_EndRun;
+}
+
+void Rat_SetupAttack(Rat* this, PlayState* play) {
+    this->actor.speed = 8.0f;
+    this->actor.velocity.y = 2.0f;
+    this->actor.world.rot.y = this->actor.shape.rot.y = this->actor.yawTowardsPlayer;
+    Animation_MorphToPlayOnce(&this->skelAnime, &gRatSkelAttackAnim, -3.0f);
+    Actor_PlaySfx(&this->actor, NA_SE_EN_EIER_CRY);
+    this->actionFunc = Rat_Attack;
+}
+
+void Rat_SetupDamaged(Rat* this, PlayState* play) {
+    this->actor.speed = -4.0f;
+    this->actor.world.rot.y = this->actor.shape.rot.y = this->actor.yawTowardsPlayer;
+    Animation_MorphToPlayOnce(&this->skelAnime, &gRatSkelDamagedAnim, -3.0f);
+    this->actionFunc = Rat_Damaged;
+}
+
+void Rat_SetupStunned(Rat* this, PlayState* play) {
+    this->actor.speed = 0.0f;
+    Animation_Change(&this->skelAnime, &gRatSkelDamagedAnim, 0.0f, 3.0f, 0.0f, ANIMMODE_ONCE, 0.0f);
+    this->actionFunc = Rat_Stunned;
+}
+
+void Rat_SetupDie(Rat* this, PlayState* play) {
+    this->actor.speed = 0.0f;
+    this->actor.flags &= ~ACTOR_FLAG_0;
+    this->actor.world.rot.y = this->actor.shape.rot.y = this->actor.yawTowardsPlayer;
+    Animation_MorphToPlayOnce(&this->skelAnime, &gRatSkelDeathAnim, -3.0f);
+    this->actionFunc = Rat_Die;
+}
+
+// MAIN
+
+#define RAT_NOTICE_RADIUS 300.0f
+
+void Rat_Idle(Rat* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    SkelAnime_Update(&this->skelAnime);
+
+    if (this->actor.xzDistToPlayer < RAT_NOTICE_RADIUS) {
+        Rat_SetupNotice(this, play);
+    }
+}
+
+#define RAT_ATTACK_RADIUS 100.0f
+
+void Rat_Notice(Rat* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    u8 animDone = SkelAnime_Update(&this->skelAnime);
+
+    Rat_RotateTowardPoint(this, &player->actor.world.pos, DEG_TO_BINANG(15.0f));
+
+    if (Actor_IsFacingPlayer(&this->actor, DEG_TO_BINANG(20.0f))) {
+        if (animDone) {
+            if (this->actor.xzDistToPlayer < RAT_ATTACK_RADIUS) {
+                Rat_SetupAttack(this, play);
+            } else {
+                Rat_SetupStartRunFromNotice(this, play);
+            }
+        }
+    }
+}
+
+void Rat_StartRunFromNotice(Rat* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    Math_SmoothStepToF(&this->actor.speed, 4.0f, 0.1f, 1.0f, 0.0f);
+
+    if (SkelAnime_Update(&this->skelAnime)) {
+        Rat_SetupRun(this, play);
+    }
+}
+
+#define RAT_HOME_RADIUS 450.0f
+
+void Rat_Run(Rat* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    u8 playerOutsideHomeRadius = Actor_WorldDistXYZToPoint(&player->actor, &this->actor.home.pos) > RAT_HOME_RADIUS;
+    u8 ratOutsideHomeRadius = Actor_WorldDistXYZToPoint(&this->actor, &this->actor.home.pos) > RAT_HOME_RADIUS;
+    u8 ratAtHome = Actor_WorldDistXYZToPoint(&this->actor, &this->actor.home.pos) <= 100.0f;
+    u8 playerOutsideNoticeRadius = this->actor.xzDistToPlayer > RAT_NOTICE_RADIUS;
+    u8 readyToAttack = Actor_IsFacingAndNearPlayer(&this->actor, RAT_ATTACK_RADIUS, DEG_TO_BINANG(35.0f)) ||
+                       Actor_IsFacingAndNearPlayer(&this->actor, RAT_ATTACK_RADIUS * 0.5f, DEG_TO_BINANG(75.0f));
+
+    SkelAnime_Update(&this->skelAnime);
+    Math_SmoothStepToF(&this->actor.speed, 4.0f, 0.1f, 1.0f, 0.0f);
+
+    Rat_RotateTowardPoint(this, &this->targetPos, DEG_TO_BINANG(10.0f));
+
+    if (ratAtHome && playerOutsideNoticeRadius) {
+        Rat_SetupEndRun(this, play);
+        return;
+    }
+
+    if (ratOutsideHomeRadius || playerOutsideHomeRadius) {
+        this->targetPos = this->actor.home.pos;
+        return;
+    }
+
+    if (DECR(this->fleeTimer) == 0 || Actor_WorldDistXZToPoint(&this->actor, &this->fleePos) < 100.0f) {
+        this->fleeTimer = 0;
+        this->targetPos = player->actor.world.pos;
+    } else {
+        this->targetPos = this->fleePos;
+    }
+
+    if (readyToAttack && this->fleeTimer == 0) {
+        Rat_SetupAttack(this, play);
+    }
+}
+
+void Rat_EndRun(Rat* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    if (SkelAnime_Update(&this->skelAnime)) {
+        Rat_SetupIdle(this, play);
+    }
+}
+
+void Rat_Attack(Rat* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 0.1f, 1.0f, 0.0f);
+
+    if (SkelAnime_Update(&this->skelAnime)) {
+        this->fleeTimer = 2 * 20;
+        Rat_SetupRun(this, play);
+    }
+}
+
+void Rat_Damaged(Rat* this, PlayState* play) {
+    Math_SmoothStepToF(&this->actor.speed, 0.0f, 3.0f, 0.5f, 0.0f);
+
+    if (SkelAnime_Update(&this->skelAnime)) {
+        this->fleeTimer = 6 * 20;
+        Rat_SetupRun(this, play);
+    }
+}
+
+void Rat_Stunned(Rat* this, PlayState* play) {
+    SkelAnime_Update(&this->skelAnime);
+    if (this->actor.colorFilterTimer == 0) {
+        if (this->actor.colChkInfo.health == 0) {
+            Rat_SetupDie(this, play);
+        } else {
+            Rat_SetupRun(this, play);
+        }
+    }
+}
+
+void Rat_Die(Rat* this, PlayState* play) {
+    Vec3f zeroVec = { 0.0f, 0.0f, 0.0f };
+    Vec3f effectVel = { 0.0f, 4.0f, 0.0f };
+    Vec3f effectPos = this->actor.world.pos;
+
+    if (SkelAnime_Update(&this->skelAnime) || this->drowned) {
+        Actor_SetScale(&this->actor, this->actor.scale.x * 0.8f);
+
+        if (this->actor.scale.x <= 0.001f) {
+            effectPos.y += 10.0f;
+            EffectSsDeadDb_Spawn(play, &effectPos, &effectVel, &zeroVec, 90, 0, 255, 255, 255, 255, 0, 0, 255, 1, 9,
+                                 true);
+            Item_DropCollectible(play, &this->actor.world.pos, ITEM00_RECOVERY_HEART);
+            Actor_Kill(&this->actor);
+        }
+    }
+}
+
+void Rat_CheckDrowned(Rat* this, PlayState* play) {
+    if (!this->drowned && (this->actor.bgCheckFlags & BGCHECKFLAG_WATER) && (this->actor.yDistToWater > 5.0f)) {
+        Actor_SetDropFlag(&this->actor, &this->collider.info, true);
+        Actor_PlaySfx(&this->actor, NA_SE_EN_EIER_ATTACK);
+        Enemy_StartFinishingBlow(play, &this->actor);
+        this->drowned = true;
+        this->actor.gravity = -0.1f;
+        this->actionFunc = Rat_SetupDie;
+        return;
+    }
+}
+
+void Rat_CheckDamage(Rat* this, PlayState* play) {
+    Rat_CheckDrowned(this, play);
+
+    if (!this->drowned && this->collider.base.acFlags & AC_HIT) {
+        this->collider.base.acFlags &= ~AC_HIT;
+        Actor_SetDropFlag(&this->actor, &this->collider.info, true);
+
+        if ((this->actionFunc != Rat_Die) && (this->actionFunc != Rat_Damaged)) {
+            switch (this->actor.colChkInfo.damageEffect) {
+                case RAT_DMGEFF_STUN:
+                    if (this->actor.colChkInfo.health > 1) {
+                        Actor_PlaySfx(&this->actor, NA_SE_EN_GOMA_JR_FREEZE);
+                        Actor_SetColorFilter(&this->actor, COLORFILTER_COLORFLAG_BLUE, 255, COLORFILTER_BUFFLAG_OPA,
+                                             80);
+                        this->actionFunc = Rat_SetupStunned;
+                        break;
+                    }
+                    break;
+                case RAT_DMGEFF_DEFAULT:
+                    Actor_SetColorFilter(&this->actor, COLORFILTER_COLORFLAG_RED, 200, COLORFILTER_BUFFLAG_OPA, 20);
+                    Actor_ApplyDamage(&this->actor);
+                    if (this->actor.colChkInfo.health == 0) {
+                        Actor_PlaySfx(&this->actor, NA_SE_EN_EIER_ATTACK);
+                        Enemy_StartFinishingBlow(play, &this->actor);
+                        this->actionFunc = Rat_SetupDie;
+                    } else {
+                        Actor_PlaySfx(&this->actor, NA_SE_EN_DEKU_DAMAGE);
+                        this->actionFunc = Rat_SetupDamaged;
+                    }
+                    break;
+
+                default:
+                    break;
+            }
+        }
+    }
+}
+
+void Rat_Update(Actor* thisx, PlayState* play) {
+    Rat* this = (Rat*)thisx;
+
+    Rat_CheckDamage(this, play);
+    this->actionFunc(this, play);
+
+    Collider_UpdateCylinder(&this->actor, &this->collider);
+
+    Actor_MoveXZGravity(&this->actor);
+    Actor_UpdateBgCheckInfo(play, &this->actor, 35.0f, 60.0f, 60.0f,
+                            UPDBGCHECKINFO_FLAG_0 | UPDBGCHECKINFO_FLAG_2 | UPDBGCHECKINFO_FLAG_3 |
+                                UPDBGCHECKINFO_FLAG_4);
+
+    CollisionCheck_SetOC(play, &play->colChkCtx, &this->collider.base);
+    if (this->actionFunc != Rat_Damaged && this->actionFunc != Rat_Die) {
+        CollisionCheck_SetAC(play, &play->colChkCtx, &this->collider.base);
+    }
+    if (this->actionFunc == Rat_Attack) {
+        CollisionCheck_SetAT(play, &play->colChkCtx, &this->collider.base);
+    }
+}
+
+void Rat_PostLimbDraw(PlayState* play, s32 limbIndex, Gfx** dList, Vec3s* rot, void* thisx, Gfx** gfx) {
+    Rat* this = (Rat*)thisx;
+
+    if (limbIndex == GRATSKEL_HEAD_LIMB) {
+        Vec3f src = { 0.0f, 10.0f, 0.0f };
+        Vec3f dest;
+
+        Matrix_MultVec3f(&src, &dest);
+        this->actor.focus.pos.x = dest.x;
+        this->actor.focus.pos.y = dest.y;
+        this->actor.focus.pos.z = dest.z;
+    }
+}
+
+void Rat_Draw(Actor* thisx, PlayState* play) {
+    Rat* this = (Rat*)thisx;
+
+    SkelAnime_DrawFlexOpa(play, this->skelAnime.skeleton, this->skelAnime.jointTable, this->skelAnime.dListCount, NULL,
+                          Rat_PostLimbDraw, &this->actor);
+}
diff --git a/src/overlays/actors/hm_pack/ovl_Rat/rat.h b/src/overlays/actors/hm_pack/ovl_Rat/rat.h
new file mode 100644
index 000000000..b979466fd
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Rat/rat.h
@@ -0,0 +1,27 @@
+#ifndef Z_RAT_H
+#define Z_RAT_H
+
+#include "ultra64.h"
+#include "global.h"
+
+#include "assets_hm_pack/objects/object_rat/object_rat.h"
+
+struct Rat;
+
+typedef void (*RatActionFunc)(struct Rat*, PlayState*);
+
+typedef struct Rat {
+    Actor actor;
+    SkelAnime skelAnime;
+    Vec3s jointTable[GRATSKEL_NUM_LIMBS];
+    Vec3s morphTable[GRATSKEL_NUM_LIMBS];
+    ColliderCylinder collider;
+    Vec3f targetPos;
+    s16 targetYaw;
+    u16 fleeTimer;
+    Vec3f fleePos;
+    u8 drowned;
+    RatActionFunc actionFunc;
+} Rat;
+
+#endif
diff --git a/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/wall_pull_switch.c b/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/wall_pull_switch.c
new file mode 100644
index 000000000..fb967c89b
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/wall_pull_switch.c
@@ -0,0 +1,260 @@
+/*
+ * File: wall_pull_switch.c
+ * Overlay: ovl_Wall_Pull_Switch
+ * Description: A switch that goes on walls and can be pulled by the player, from the Hylian Modding actor pack.
+ * Params: XXYY
+ *      -- XX: Number of seconds the switch takes to retract. Set to 0 for never retracting.
+ *      -- YY: Switch flag (0x00 thru 0x3F)
+ */
+
+#include "wall_pull_switch.h"
+#include "assets_hm_pack/objects/object_wall_pull_switch/object_wall_pull_switch.h"
+
+#define FLAGS (ACTOR_FLAG_4 | ACTOR_FLAG_5)
+
+#define SWITCH_FLAG(this) (this->dyna.actor.params & 0x3F)
+#define DURATION(this) ((this->dyna.actor.params >> 8) & 0xFF)
+
+#define WALLSWITCH_HEIGHT_OFFSET_ADULT 35.0f
+#define WALLSWITCH_HEIGHT_OFFSET_CHILD 25.0f
+#define WALLSWITCH_COLHDR &gPullSwitchCol_collisionHeader
+#define WALLSWITCH_NOGRAB_COLHDR &gPullSwitchNoGrabCol_collisionHeader
+
+void WallPullSwitch_Init(Actor* thisx, PlayState* play);
+void WallPullSwitch_Destroy(Actor* thisx, PlayState* play);
+void WallPullSwitch_Update(Actor* thisx, PlayState* play);
+void WallPullSwitch_Draw(Actor* thisx, PlayState* play);
+
+void WallPullSwitch_SnapToWall(WallPullSwitch* this, PlayState* play);
+void WallPullSwitch_AdjustHeightForAge(WallPullSwitch* this, PlayState* play);
+
+void WallPullSwitch_SetupFrame(WallPullSwitch* this, PlayState* play);
+void WallPullSwitch_SetupWaitForPlayerGrab(WallPullSwitch* this, PlayState* play);
+void WallPullSwitch_SetupPlayerPulling(WallPullSwitch* this, PlayState* play);
+void WallPullSwitch_SetupRetract(WallPullSwitch* this, PlayState* play);
+void WallPullSwitch_SetupStayOpen(WallPullSwitch* this, PlayState* play);
+
+const ActorInit Wall_Pull_Switch_InitVars = {
+    ACTOR_WALL_PULL_SWITCH,
+    ACTORCAT_SWITCH,
+    FLAGS,
+    OBJECT_WALL_PULL_SWITCH,
+    sizeof(WallPullSwitch),
+    (ActorFunc)WallPullSwitch_Init,
+    (ActorFunc)WallPullSwitch_Destroy,
+    (ActorFunc)WallPullSwitch_Update,
+    (ActorFunc)WallPullSwitch_Draw,
+};
+
+static InitChainEntry sInitChain[] = {
+    ICHAIN_VEC3F_DIV1000(scale, 100, ICHAIN_STOP),
+};
+
+void WallPullSwitch_Init(Actor* thisx, PlayState* play) {
+    WallPullSwitch* this = (WallPullSwitch*)thisx;
+    CollisionHeader* colHeader = NULL;
+
+    Actor_ProcessInitChain(thisx, sInitChain);
+
+    if (this->dyna.actor.home.rot.z == 1) {
+        Actor_ChangeCategory(play, &play->actorCtx, &this->dyna.actor, ACTORCAT_BG);
+        WallPullSwitch_SetupFrame(this, play);
+        return;
+    }
+
+    DynaPolyActor_Init(&this->dyna, 0);
+    this->activeCol = WALLSWITCH_COL_NO_GRAB;
+    CollisionHeader_GetVirtual(WALLSWITCH_NOGRAB_COLHDR, &colHeader);
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeader);
+    WallPullSwitch_AdjustHeightForAge(this, play);
+    WallPullSwitch_SnapToWall(this, play);
+
+    Actor_Spawn(&play->actorCtx, play, ACTOR_WALL_PULL_SWITCH, this->dyna.actor.world.pos.x,
+                this->dyna.actor.world.pos.y, this->dyna.actor.world.pos.z, this->dyna.actor.world.rot.x,
+                this->dyna.actor.world.rot.y, 1, 0x0000);
+
+    this->dyna.actor.home.pos = this->dyna.actor.world.pos;
+
+    if (Flags_GetSwitch(play, SWITCH_FLAG(this))) {
+        WallPullSwitch_SetupStayOpen(this, play);
+    } else {
+        WallPullSwitch_SetupWaitForPlayerGrab(this, play);
+    }
+}
+
+void WallPullSwitch_Destroy(Actor* thisx, PlayState* play) {
+    WallPullSwitch* this = (WallPullSwitch*)thisx;
+
+    if (this->dyna.actor.category == ACTORCAT_SWITCH) {
+        DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+    }
+}
+
+void WallPullSwitch_Update(Actor* thisx, PlayState* play) {
+    WallPullSwitch* this = (WallPullSwitch*)thisx;
+
+    this->actionFunc(this, play);
+}
+
+void WallPullSwitch_DrawFrame(Actor* thisx, PlayState* play) {
+    Gfx_DrawDListOpa(play, gPullSwitchFrameDL);
+}
+
+void WallPullSwitch_Draw(Actor* thisx, PlayState* play) {
+    WallPullSwitch* this = (WallPullSwitch*)thisx;
+
+    Gfx_DrawDListOpa(play, gPullSwitchRodDL);
+}
+
+void WallPullSwitch_DoNothing(WallPullSwitch* this, PlayState* play) {
+}
+
+void WallPullSwitch_ChangeCollision(WallPullSwitch* this, PlayState* play, void* colHeader) {
+    CollisionHeader* colHeaderVirtual = NULL;
+    CollisionHeader_GetVirtual(colHeader, &colHeaderVirtual);
+    DynaPoly_DeleteBgActor(play, &play->colCtx.dyna, this->dyna.bgId);
+    this->dyna.bgId = DynaPoly_SetBgActor(play, &play->colCtx.dyna, &this->dyna.actor, colHeaderVirtual);
+}
+
+void WallPullSwitch_SetupFrame(WallPullSwitch* this, PlayState* play) {
+    this->dyna.actor.home.rot.z = 0;
+    this->actionFunc = WallPullSwitch_DoNothing;
+    this->dyna.actor.draw = WallPullSwitch_DrawFrame;
+}
+
+void WallPullSwitch_SnapToWall(WallPullSwitch* this, PlayState* play) {
+    Vec3f result;
+    CollisionPoly* outPoly = NULL;
+    Vec3f vecA = this->dyna.actor.world.pos;
+    Vec3f vecB = this->dyna.actor.world.pos;
+
+    vecA.x += Math_SinS(this->dyna.actor.shape.rot.y) * 10.0f;
+    vecA.z += Math_CosS(this->dyna.actor.shape.rot.y) * 10.0f;
+
+    vecB.x -= Math_SinS(this->dyna.actor.shape.rot.y) * 30.0f;
+    vecB.z -= Math_CosS(this->dyna.actor.shape.rot.y) * 30.0f;
+
+    BgCheck_EntitySphVsWall1(&play->colCtx, &result, &vecB, &vecA, 0.0f, &outPoly, 0.0f);
+
+    if (outPoly != NULL) {
+        this->dyna.actor.world.pos = result;
+        this->dyna.actor.world.rot.y = this->dyna.actor.shape.rot.y = Math_Atan2S(outPoly->normal.z, outPoly->normal.x);
+    }
+}
+
+void WallPullSwitch_AdjustHeightForAge(WallPullSwitch* this, PlayState* play) {
+    CollisionPoly outPoly;
+
+    f32 floorY = BgCheck_AnyRaycastDown1(&play->colCtx, &outPoly, &this->dyna.actor.world.pos);
+
+    if (floorY > BGCHECK_Y_MIN) {
+        if (LINK_IS_ADULT) {
+            this->dyna.actor.world.pos.y = floorY + WALLSWITCH_HEIGHT_OFFSET_ADULT;
+        } else {
+            this->dyna.actor.world.pos.y = floorY + WALLSWITCH_HEIGHT_OFFSET_CHILD;
+        }
+    }
+}
+
+void WallPullSwitch_WaitForPlayerGrab(WallPullSwitch* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+
+    if (Player_IsFacingActor(&this->dyna.actor, DEG_TO_BINANG(67.5f), play) &&
+        this->dyna.actor.xyzDistToPlayerSq < SQ(50.0f)) {
+        if (this->activeCol == WALLSWITCH_COL_NO_GRAB) {
+            this->activeCol = WALLSWITCH_COL_GRAB;
+            WallPullSwitch_ChangeCollision(this, play, WALLSWITCH_COLHDR);
+        }
+    } else {
+        if (this->activeCol == WALLSWITCH_COL_GRAB) {
+            this->activeCol = WALLSWITCH_COL_NO_GRAB;
+            WallPullSwitch_ChangeCollision(this, play, WALLSWITCH_NOGRAB_COLHDR);
+        }
+    }
+
+    if (this->dyna.unk_150 < -0.001f) {
+        WallPullSwitch_SetupPlayerPulling(this, play);
+    } else {
+        this->dyna.unk_150 = 0.0f;
+        player->stateFlags2 &= ~PLAYER_STATE2_4;
+    }
+}
+
+void WallPullSwitch_SetupWaitForPlayerGrab(WallPullSwitch* this, PlayState* play) {
+    Flags_UnsetSwitch(play, SWITCH_FLAG(this));
+    this->dyna.actor.world.pos = this->dyna.actor.home.pos;
+    this->actionFunc = WallPullSwitch_WaitForPlayerGrab;
+}
+
+void WallPullSwitch_PlayerPulling(WallPullSwitch* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    DECR(this->timer);
+
+    this->dyna.actor.world.pos.x += Math_SinS(this->dyna.actor.world.rot.y) * 2.0f;
+    this->dyna.actor.world.pos.z += Math_CosS(this->dyna.actor.world.rot.y) * 2.0f;
+
+    Actor_PlaySfx(&this->dyna.actor, NA_SE_EV_TRAP_OBJ_SLIDE - SFX_FLAG);
+
+    if (this->timer == 1) {
+        player->stateFlags1 |= PLAYER_STATE1_5;
+        // turning the collision off and back on forces Link to drop the switch
+        DynaPoly_DisableCollision(play, &play->colCtx.dyna, this->dyna.bgId);
+    } else if (this->timer == 0) {
+        player->stateFlags1 &= ~PLAYER_STATE1_5;
+        DynaPoly_EnableCollision(play, &play->colCtx.dyna, this->dyna.bgId);
+        WallPullSwitch_SetupRetract(this, play);
+    }
+}
+
+void WallPullSwitch_SetupPlayerPulling(WallPullSwitch* this, PlayState* play) {
+    this->timer = 20;
+    this->actionFunc = WallPullSwitch_PlayerPulling;
+}
+
+void WallPullSwitch_Retract(WallPullSwitch* this, PlayState* play) {
+    DECR(this->timer);
+
+    func_8002F994(&this->dyna.actor, this->timer);
+    this->dyna.actor.world.pos.x -= Math_SinS(this->dyna.actor.world.rot.y) * this->stepSize;
+    this->dyna.actor.world.pos.z -= Math_CosS(this->dyna.actor.world.rot.y) * this->stepSize;
+
+    if (this->timer == 0) {
+        Actor_PlaySfx(&this->dyna.actor, NA_SE_EV_BLOCK_BOUND);
+        WallPullSwitch_SetupWaitForPlayerGrab(this, play);
+    }
+}
+
+void WallPullSwitch_SetupRetract(WallPullSwitch* this, PlayState* play) {
+    Player* player = GET_PLAYER(play);
+    this->dyna.unk_150 = 0.0f;
+    this->dyna.unk_158 = 0;
+    player->stateFlags2 &= ~PLAYER_STATE2_4;
+
+    Actor_PlaySfx(&this->dyna.actor, NA_SE_EV_BLOCK_BOUND);
+    Flags_SetSwitch(play, SWITCH_FLAG(this));
+    s16 duration = DURATION(this);
+    if (duration == 0) {
+        WallPullSwitch_SetupStayOpen(this, play);
+        return;
+    }
+
+    this->timer = duration * 20;
+
+    f32 dist = Math_Vec3f_DistXZ(&this->dyna.actor.world.pos, &this->dyna.actor.home.pos);
+    this->stepSize = dist / this->timer;
+    this->actionFunc = WallPullSwitch_Retract;
+
+    this->activeCol = WALLSWITCH_COL_NO_GRAB;
+    WallPullSwitch_ChangeCollision(this, play, WALLSWITCH_NOGRAB_COLHDR);
+}
+
+void WallPullSwitch_SetupStayOpen(WallPullSwitch* this, PlayState* play) {
+    s16 angle = this->dyna.actor.world.rot.y;
+    this->dyna.actor.world.pos.x = this->dyna.actor.home.pos.x + Math_SinS(angle) * 40.0f;
+    this->dyna.actor.world.pos.z = this->dyna.actor.home.pos.z + Math_CosS(angle) * 40.0f;
+
+    this->actionFunc = WallPullSwitch_DoNothing;
+
+    this->activeCol = WALLSWITCH_COL_NO_GRAB;
+    WallPullSwitch_ChangeCollision(this, play, WALLSWITCH_NOGRAB_COLHDR);
+}
diff --git a/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/wall_pull_switch.h b/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/wall_pull_switch.h
new file mode 100644
index 000000000..122a2f4fe
--- /dev/null
+++ b/src/overlays/actors/hm_pack/ovl_Wall_Pull_Switch/wall_pull_switch.h
@@ -0,0 +1,24 @@
+#ifndef WALL_PULL_SWITCH_H
+#define WALL_PULL_SWITCH_H
+
+#include "ultra64.h"
+#include "global.h"
+
+struct WallPullSwitch;
+
+typedef void (*WallPullSwitchActionFunc)(struct WallPullSwitch*, PlayState*);
+
+typedef enum {
+    WALLSWITCH_COL_NO_GRAB,
+    WALLSWITCH_COL_GRAB
+} WallPullSwitchActiveCollision;
+
+typedef struct WallPullSwitch {
+    DynaPolyActor dyna;
+    WallPullSwitchActionFunc actionFunc;
+    s16 timer;
+    f32 stepSize;
+    u8 activeCol;
+} WallPullSwitch;
+
+#endif
